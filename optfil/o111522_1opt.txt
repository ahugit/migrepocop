nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    57.8497      0.500000    
Tfreq:   71
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    57.8497      0.500000    
Tfreq:   71
 Estimating   71 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        192.83          4.24          1.10         24.66          0.60          0.04         30.64
iter,obj,time:      3        200.42          0.83          1.11         25.06          0.12          0.05         27.17
iter,obj,time:      4        189.84          0.84          1.11         25.27          0.17          0.05         27.44
iter,obj,time:      5        211.34          0.83          1.11         25.41          0.06          0.05         27.47
iter,obj,time:      6        196.11          0.85          1.11         25.23          0.17          0.04         27.41
iter,obj,time:      7        199.55          0.84          1.11         25.09          0.14          0.05         27.24
iter,obj,time:      8        194.28          0.84          1.11         25.16          0.12          0.05         27.27
iter,obj,time:      9        193.51          0.84          1.11         25.10          0.11          0.05         27.21
iter,obj,time:     10        202.79          0.84          1.11         25.18          0.12          0.05         27.29
iter,obj,time:     11        193.21          0.84          1.11         25.09          0.15          0.05         27.24
iter,obj,time:     12        196.76          0.84          1.11         25.13          0.13          0.05         27.26
iter,obj,time:     13        251.52          0.84          1.11         25.17          0.04          0.05         27.21
iter,obj,time:     14        190.15          0.84          1.11         25.05          0.18          0.05         27.23
iter,obj,time:     15        588.72          0.84          1.11         25.14          0.17          0.05         27.30
iter,obj,time:     16        258.54          0.84          1.11         25.11          0.13          0.05         27.24
iter,obj,time:     17        192.85          0.84          1.11         25.13          0.12          0.05         27.25
iter,obj,time:     18        192.44          0.83          1.11         25.26          0.17          0.05         27.42
iter,obj,time:     19        192.83          0.84          1.11         25.12          0.12          0.05         27.24
iter,obj,time:     20        191.72          0.84          1.11         25.25          0.12          0.05         27.37
iter,obj,time:     21        192.83          0.84          1.11         25.42          0.10          0.05         27.53
iter,obj,time:     22        190.22          0.84          1.11         25.09          0.13          0.04         27.21
iter,obj,time:     23        192.25          0.84          1.11         25.05          0.18          0.05         27.23
iter,obj,time:     24        193.37          0.84          1.11         25.15          0.07          0.05         27.22
iter,obj,time:     25        193.48          0.84          1.11         25.16          0.03          0.05         27.18
iter,obj,time:     26        199.09          0.84          1.11         25.28          0.04          0.05         27.32
iter,obj,time:     27        192.27          0.84          1.11         25.05          0.16          0.05         27.21
iter,obj,time:     28        190.71          0.84          1.11         25.14          0.10          0.05         27.23
iter,obj,time:     29        191.81          0.84          1.11         25.13          0.12          0.05         27.25
iter,obj,time:     30        191.79          0.84          1.11         25.22          0.19          0.05         27.41
iter,obj,time:     31        189.74          0.85          1.11         25.26          0.19          0.05         27.46
iter,obj,time:     32        192.85          0.84          1.11         25.09          0.19          0.05         27.28
iter,obj,time:     33        192.83          0.84          1.11         25.20          0.03          0.05         27.23
iter,obj,time:     34        192.13          0.84          1.11         25.06          0.14          0.05         27.21
iter,obj,time:     35        192.27          0.84          1.11         25.21          0.01          0.05         27.22
iter,obj,time:     36        189.62          0.84          1.11         25.06          0.13          0.05         27.19
iter,obj,time:     37        189.58          0.83          1.11         25.20          0.18          0.05         27.38
iter,obj,time:     38        191.71          0.84          1.11         25.10          0.14          0.05         27.24
iter,obj,time:     39        189.28          0.84          1.11         25.32          0.13          0.05         27.46
iter,obj,time:     40        192.66          0.84          1.11         25.26          0.14          0.05         27.40
iter,obj,time:     41        191.88          0.84          1.11         25.13          0.11          0.05         27.25
iter,obj,time:     42        194.81          0.84          1.11         25.16          0.21          0.05         27.37
iter,obj,time:     43        199.72          0.84          1.11         25.09          0.17          0.05         27.25
iter,obj,time:     44        193.39          0.84          1.11         25.13          0.11          0.05         27.23
iter,obj,time:     45        197.27          0.84          1.11         25.09          0.12          0.05         27.21
iter,obj,time:     46        191.80          0.84          1.11         25.05          0.18          0.05         27.24
iter,obj,time:     47        192.05          0.84          1.11         25.14          0.05          0.05         27.19
iter,obj,time:     48        195.49          0.84          1.11         25.29          0.02          0.05         27.31
iter,obj,time:     49        194.12          0.84          1.11         25.10          0.11          0.05         27.20
iter,obj,time:     50        215.98          0.84          1.11         25.20          0.14          0.05         27.33
iter,obj,time:     51        229.31          0.84          1.11         25.41          0.13          0.04         27.53
iter,obj,time:     52        212.66          0.84          1.11         25.12          0.12          0.05         27.24
iter,obj,time:     53        204.51          0.84          1.11         25.12          0.09          0.05         27.21
iter,obj,time:     54        192.83          0.84          1.11         25.12          0.12          0.05         27.24
iter,obj,time:     55        192.83          0.84          1.11         25.13          0.12          0.05         27.26
iter,obj,time:     56        185.45          0.83          1.11         25.07          0.14          0.05         27.21
iter,obj,time:     57        192.30          0.84          1.11         25.07          0.21          0.05         27.27
iter,obj,time:     58        191.07          0.83          1.11         25.02          0.19          0.05         27.21
iter,obj,time:     59        192.83          0.83          1.10         25.22          0.05          0.05         27.26
iter,obj,time:     60        192.83          0.84          1.10         25.07          0.16          0.05         27.22
iter,obj,time:     61        187.69          0.84          1.11         25.14          0.12          0.05         27.27
iter,obj,time:     62        191.67          0.84          1.11         25.10          0.11          0.05         27.21
iter,obj,time:     63        191.91          0.84          1.11         25.40          0.19          0.05         27.59
iter,obj,time:     64        192.83          0.84          1.10         25.20          0.20          0.05         27.40
iter,obj,time:     65        192.83          0.84          1.10         25.09          0.19          0.05         27.27
iter,obj,time:     66        185.36          0.84          1.11         25.14          0.06          0.05         27.19
iter,obj,time:     67        191.11          0.84          1.11         25.15          0.09          0.05         27.24
iter,obj,time:     68        191.34          0.85          1.11         25.11          0.15          0.05         27.27
iter,obj,time:     69        192.83          0.84          1.10         25.04          0.16          0.05         27.19
iter,obj,time:     70        192.83          0.84          1.10         25.20          0.12          0.05         27.32
iter,obj,time:     71        187.49          0.84          1.11         25.10          0.13          0.05         27.23
iter,obj,time:     72        191.35          0.84          1.11         25.24          0.13          0.05         27.37
iter,obj,time:     73        191.93          0.84          1.11         25.31          0.15          0.05         27.46

    1    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    2    200.42      -0.8045E-01 -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    3    189.84       0.9196     -2.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    4    211.34       0.9196     -1.310     0.6791     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    5    196.11       0.9196     -1.310      1.679     -102.6      1.920    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    6    199.55       0.9196     -1.310      1.679     -102.6     0.9196    
                       1.420      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    7    194.28       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      2.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    8    193.51       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      2.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

    9    202.79       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682    -0.9215    
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   10    193.21       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       2.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   11    196.76       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968    -0.4746      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   12    251.52       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475     0.8609      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   13    190.15       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -1.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   14    588.72       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.6000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   15    258.54       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.6000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   16    192.85       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -4.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   17    192.44       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -2.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   18    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -5.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   19    191.72       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      5.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   20    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -12.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   21    190.22       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -1.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   22    192.25       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      7392.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   23    193.37       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000     0.1366E+05

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   24    193.48       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                      0.4538E+05  8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   25    199.09       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.     0.2218E+05 0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   26    192.27       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.8070E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   27    190.71       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05 0.1330E+05
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   28    191.81       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                      0.1715E+05  0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   29    191.79       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.     0.3000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   30    189.74       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000     0.3000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   31    192.85       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000     0.3000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   32    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                      0.3000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   33    192.13       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000     0.3000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   34    192.27       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000     0.3000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   35    189.62       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000     0.3000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   36    189.58       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000     0.3000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   37    191.71       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                      0.3655     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   38    189.28       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345    -0.5000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   39    192.66       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000     0.3000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   40    191.88       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000     0.3000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   41    194.81       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000     0.3000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   42    199.72       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000     0.3000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   43    193.39       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000     0.3000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   44    197.27       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000     0.3000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   45    191.80       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                      0.3000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   46    192.05       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000     0.3000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   47    195.49       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000     0.1655     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   48    194.12       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345    -0.7000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   49    215.98       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       1.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   50    229.31       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000     0.8000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   51    212.66       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000     0.4000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   52    204.51       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000     0.4000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   53    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000     0.7621    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   54    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                       1.205      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   55    185.45       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      9.200      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   56    192.30       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      9.100     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   57    191.07       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800    -0.1000E+05 -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   58    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                      0.5224    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   59    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776     0.4216      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   60    187.69       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      9.200      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   61    191.67       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      9.100     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   62    191.91       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800    -0.1000E+05

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   63    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000      1.080    -0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   64    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01 0.3922      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   65    185.36       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      9.200      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   66    191.11       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      9.100    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   67    191.34       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                     -0.1000E+05 -7.000    -0.4422    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   68    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000     0.5578    -0.7051      8.900    
                       8.800     -5000.     -7.000    

   69    192.83       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422     0.2949      8.900    
                       8.800     -5000.     -7.000    

   70    187.49       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      9.200    
                       8.800     -5000.     -7.000    

   71    191.35       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       9.100     -5000.     -7.000    

   72    191.93       0.9196     -1.310      1.679     -102.6     0.9196    
                      0.4199      1.785     -99.70      3.682     0.7848E-01
                       1.968     -1.475      1.861      0.000     -40.00    
                      -2.000      0.000      0.000      0.000     -1.221    

                      -2.500     0.3000E+05 0.3000E+05  0.000      0.000    
                     -0.5672     -6.401     -4.430     -7.512      3.339    
                      -14.31     -2.998      1478.      0.000      2732.    

                       9076.      8519.      4437.     0.1614E+05  2660.    
                       3429.      0.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    

                     -0.1345     -1.000      0.000      0.000      0.000    
                       0.000      0.000      0.000      0.000      0.000    
                       0.000      0.000    -0.1345     -1.000      0.000    

                       0.000    -0.2000    -0.6000    -0.6000    -0.2379    
                      0.2049      8.900      8.800     -5000.     -4.000    
                     -0.4776    -0.5784      8.900      8.800     -5000.    

                      -4.000     0.8037E-01-0.6078      8.900      8.800    
                      -5000.     -7.000    -0.4422    -0.7051      8.900    
                       8.800    -0.1000E+05 -7.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          72          72

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        1
neval is:       72


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       72     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -85.3812       85.3812       192.832       278.214    
   2  0.709707     -0.342904      -19.8369       19.8369       200.423       220.260    
   3  0.151889      -1.88460      -109.024       109.024       189.841       298.864    
   4  0.456170E-01  -3.08747      -178.609       178.609       211.341       389.951    
   5  0.882557     -0.124932      -7.22726       7.22726       196.114       203.342    
   6  0.711292     -0.340672      -19.7078       19.7078       199.554       219.261    
   7  0.241669      -1.42019      -82.1574       82.1574       194.280       276.438    
   8  0.682871     -0.381450      -22.0667       22.0667       193.513       215.580    
   9  0.500657     -0.691834      -40.0224       40.0224       202.792       242.814    
  10  0.494633     -0.703939      -40.7226       40.7226       193.212       233.934    
  11  0.437126     -0.827535      -47.8726       47.8726       196.763       244.636    
  12  0.462981     -0.770069      -44.5483       44.5483       251.516       296.064    
  13  0.988878     -0.111840E-01 -0.646991      0.646991       190.154       190.801    
  14  0.878158     -0.129929      -7.51636       7.51636       588.716       596.232    
  15  0.825605     -0.191638      -11.0862       11.0862       258.538       269.624    
  16  0.966665     -0.339033E-01  -1.96130       1.96130       192.845       194.807    
  17  0.340930      -1.07608      -62.2507       62.2507       192.440       254.691    
  18  0.288920      -1.24161      -71.8266       71.8266       192.832       264.659    
  19  0.442843     -0.814539      -47.1208       47.1208       191.717       238.838    
  20  0.878635     -0.129386      -7.48492       7.48492       192.832       200.317    
  21  0.198777E-01  -3.91816      -226.664       226.664       190.223       416.887    
  22  0.315829      -1.15255      -66.6748       66.6748       192.249       258.924    
  23  0.208690      -1.56690      -90.6450       90.6450       193.370       284.015    
  24  0.849393     -0.163234      -9.44302       9.44302       193.483       202.926    
  25  0.945818     -0.557056E-01  -3.22255       3.22255       199.085       202.308    
  26  0.567839     -0.565917      -32.7381       32.7381       192.269       225.007    
  27  0.718388     -0.330745      -19.1335       19.1335       190.707       209.840    
  28  0.115406      -2.15930      -124.915       124.915       191.810       316.724    
  29  0.659869E-01  -2.71830      -157.253       157.253       191.786       349.039    
  30  0.171393      -1.76380      -102.035       102.035       189.745       291.780    
  31  0.161953      -1.82045      -105.313       105.313       192.846       298.159    
  32  0.455406     -0.786566      -45.5026       45.5026       192.832       238.335    
  33  0.788693     -0.237378      -13.7322       13.7322       192.131       205.863    
  34  0.157754      -1.84672      -106.832       106.832       192.273       299.105    
  35  0.126279      -2.06926      -119.706       119.706       189.616       309.322    
  36  0.646962     -0.435467      -25.1917       25.1917       189.576       214.768    
  37  0.730769     -0.313658      -18.1450       18.1450       191.708       209.853    
  38  0.443446E-01  -3.11577      -180.246       180.246       189.277       369.523    
  39  0.219048      -1.51847      -87.8427       87.8427       192.655       280.498    
  40  0.311223E-01  -3.46983      -200.729       200.729       191.883       392.611    
  41  0.864417     -0.145700      -8.42871       8.42871       194.812       203.240    
  42  0.372606     -0.987233      -57.1111       57.1111       199.721       256.832    
  43  0.599250E-01  -2.81466      -162.827       162.827       193.388       356.215    
  44  0.250528      -1.38418      -80.0746       80.0746       197.273       277.348    
  45  0.404968E-01  -3.20653      -185.497       185.497       191.801       377.298    
  46  0.792822     -0.232156      -13.4302       13.4302       192.049       205.479    
  47  0.826691     -0.190324      -11.0102       11.0102       195.490       206.500    
  48  0.258424      -1.35316      -78.2796       78.2796       194.118       272.398    
  49  0.713620     -0.337405      -19.5188       19.5188       215.979       235.498    
  50  0.936186     -0.659413E-01  -3.81468       3.81468       229.312       233.126    
  51  0.655367E-01  -2.72514      -157.649       157.649       212.657       370.305    
  52  0.178790      -1.72154      -99.5908       99.5908       204.512       304.103    
  53  0.110644E-01  -4.50403      -260.557       260.557       192.832       453.389    
  54  0.459577     -0.777448      -44.9751       44.9751       192.832       237.807    
  55  0.210706      -1.55729      -90.0890       90.0890       185.450       275.539    
  56  0.667378     -0.404399      -23.3944       23.3944       192.299       215.694    
  57  0.787749     -0.238575      -13.8015       13.8015       191.073       204.875    
  58  0.774339E-01  -2.55833      -147.999       147.999       192.832       340.831    
  59  0.154999      -1.86434      -107.851       107.851       192.832       300.684    
  60  0.510712     -0.671950      -38.8721       38.8721       187.695       226.567    
  61  0.628107     -0.465044      -26.9027       26.9027       191.670       218.573    
  62  0.850273     -0.162197      -9.38307       9.38307       191.913       201.297    
  63  0.355976      -1.03289      -59.7524       59.7524       192.832       252.585    
  64  0.531318     -0.632394      -36.5838       36.5838       192.832       229.416    
  65  0.404575     -0.904917      -52.3492       52.3492       185.359       237.709    
  66  0.240103      -1.42669      -82.5333       82.5333       191.114       273.647    
  67  0.288602      -1.24271      -71.8903       71.8903       191.343       263.234    
  68  0.870493     -0.138695      -8.02347       8.02347       192.832       200.856    
  69  0.453038     -0.791780      -45.8042       45.8042       192.832       238.637    
  70  0.259221      -1.35008      -78.1015       78.1015       187.489       265.590    
  71  0.201751      -1.60072      -92.6012       92.6012       191.350       283.951    
  72  0.390245     -0.940979      -54.4354       54.4354       191.935       246.370    
loop,thermsimp(1:2)        1   85.3812       19.8369    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74        208.08          0.81          1.11         25.24          0.11          0.05         27.32
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    208.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        1
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        2
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       73     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -60.2819       60.2819       190.154       250.436    
   2  0.440787     -0.819193      -47.3901       47.3901       192.845       240.235    
   3  0.685789     -0.377185      -21.8201       21.8201       192.832       214.652    
   4  0.673104     -0.395856      -22.9002       22.9002       192.832       215.732    
   5  0.655536     -0.422301      -24.4300       24.4300       191.913       216.343    
   6  0.422838     -0.860766      -49.7950       49.7950       199.085       248.880    
   7  0.300870      -1.20108      -69.4820       69.4820       193.483       262.965    
   8  0.776987     -0.252331      -14.5973       14.5973       194.812       209.409    
   9  0.170551      -1.76872      -102.320       102.320       196.114       298.434    
  10  0.587497     -0.531884      -30.7693       30.7693       191.073       221.843    
  11  0.250425      -1.38459      -80.0984       80.0984       192.049       272.148    
  12  0.776362E-01  -2.55572      -147.848       147.848       192.131       339.979    
  13  0.766647     -0.265729      -15.3723       15.3723       195.490       210.862    
  14  0.480193     -0.733568      -42.4367       42.4367       190.707       233.144    
  15  0.434643     -0.833231      -48.2021       48.2021       191.708       239.910    
  16  0.815924E-01  -2.50602      -144.972       144.972       189.576       334.549    
  17  0.724257E-01  -2.62519      -151.867       151.867       193.513       345.380    
  18  0.573795     -0.555483      -32.1345       32.1345       192.299       224.434    
  19  0.196096      -1.62915      -94.2458       94.2458       191.670       285.916    
  20  0.240673      -1.42432      -82.3962       82.3962       199.554       281.950    
  21  0.194228      -1.63872      -94.7996       94.7996       200.423       295.223    
  22  0.236387      -1.44229      -83.4358       83.4358       192.269       275.705    
  23  0.261662      -1.34070      -77.5591       77.5591       187.695       265.254    
  24  0.146321      -1.92195      -111.184       111.184       192.832       304.017    
  25  0.169637      -1.77410      -102.631       102.631       229.312       331.942    
  26  0.886717     -0.120229      -6.95522       6.95522       193.212       200.167    
  27  0.253412      -1.37274      -79.4126       79.4126       215.979       295.392    
  28  0.470820     -0.753279      -43.5770       43.5770       185.359       228.936    
  29  0.329871      -1.10905      -64.1585       64.1585       192.832       256.991    
  30  0.726784     -0.319126      -18.4613       18.4613       192.832       211.294    
  31  0.612351     -0.490450      -28.3724       28.3724       192.832       221.205    
  32  0.146573      -1.92023      -111.085       111.085       191.717       302.802    
  33  0.812633     -0.207476      -12.0024       12.0024       202.792       214.794    
  34  0.486789     -0.719925      -41.6474       41.6474       196.763       238.411    
  35  0.653508     -0.425400      -24.6093       24.6093       191.935       216.544    
  36  0.180127      -1.71409      -99.1598       99.1598       192.832       291.992    
  37  0.155218      -1.86292      -107.770       107.770       192.440       300.210    
  38  0.830615     -0.185589      -10.7363       10.7363       199.721       210.457    
  39  0.728345     -0.316980      -18.3372       18.3372       192.249       210.587    
  40  0.262318      -1.33820      -77.4144       77.4144       191.343       268.758    
  41  0.234222      -1.45148      -83.9679       83.9679       192.832       276.800    
  42  0.250201      -1.38549      -80.1503       80.1503       187.489       267.639    
  43  0.898433     -0.107103      -6.19590       6.19590       258.538       264.734    
  44  0.580277     -0.544250      -31.4847       31.4847       194.118       225.603    
  45  0.823617     -0.194050      -11.2257       11.2257       191.114       202.339    
  46  0.820676     -0.197627      -11.4327       11.4327       185.450       196.883    
  47  0.502494     -0.688171      -39.8105       39.8105       194.280       234.091    
  48  0.751016     -0.286329      -16.5640       16.5640       197.273       213.837    
  49  0.360461      -1.02037      -59.0281       59.0281       192.832       251.860    
  50  0.948712     -0.526497E-01  -3.04577       3.04577       192.655       195.701    
  51  0.452918     -0.792045      -45.8196       45.8196       191.350       237.170    
  52  0.182886      -1.69889      -98.2806       98.2806       193.370       291.651    
  53  0.986780     -0.133085E-01 -0.769894      0.769894       189.745       190.515    
  54  0.720276     -0.328121      -18.9817       18.9817       251.516       270.498    
  55  0.999574     -0.426396E-03 -0.246669E-01  0.246669E-01   192.846       192.871    
  56  0.573447     -0.556089      -32.1696       32.1696       189.841       222.010    
  57  0.441160E-01  -3.12093      -180.545       180.545       192.273       372.818    
  58  0.596470     -0.516726      -29.8924       29.8924       192.832       222.725    
  59  0.561679E-01  -2.87941      -166.573       166.573       204.512       371.085    
  60  0.664610     -0.408554      -23.6347       23.6347       189.616       213.251    
  61  0.875363     -0.133117      -7.70076       7.70076       191.810       199.511    
  62  0.969943     -0.305184E-01  -1.76548       1.76548       192.832       194.598    
  63  0.692714     -0.367138      -21.2388       21.2388       191.786       213.025    
  64  0.107969      -2.22591      -128.768       128.768       193.388       322.156    
  65  0.530030     -0.634822      -36.7243       36.7243       189.277       226.002    
  66  0.246082      -1.40209      -81.1104       81.1104       212.657       293.767    
  67  0.561065     -0.577919      -33.4324       33.4324       191.801       225.233    
  68  0.888085     -0.118688      -6.86606       6.86606       211.341       218.208    
  69  0.180192      -1.71373      -99.1389       99.1389       191.883       291.022    
  70  0.259121      -1.35046      -78.1236       78.1236       190.223       268.347    
  71  0.728967     -0.316127      -18.2878       18.2878       192.832       211.120    
  72  0.546722     -0.603814      -34.9305       34.9305       208.079       243.010    
loop,thermsimp(1:2)        2   60.2819       47.3901    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75        199.36          0.84          1.11         25.19          0.05          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     76        219.07          0.84          1.10         25.23          0.06          0.05         27.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    199.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        2
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        3
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       75     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -103.227       103.227       189.745       292.972    
   2  0.274399      -1.29317      -74.8096       74.8096       192.846       267.656    
   3  0.597410E-01  -2.81774      -163.005       163.005       192.832       355.838    
   4  0.283115E-01  -3.56449      -206.204       206.204       192.655       398.859    
   5  0.901069     -0.104174      -6.02643       6.02643       185.450       191.476    
   6  0.717939     -0.331371      -19.1697       19.1697       191.810       210.980    
   7  0.294866      -1.22123      -70.6480       70.6480       193.212       263.860    
   8  0.935651     -0.665127E-01  -3.84774       3.84774       191.114       194.961    
   9  0.314362      -1.15721      -66.9443       66.9443       194.812       261.756    
  10  0.807729     -0.213529      -12.3526       12.3526       199.721       212.073    
  11  0.757191     -0.278140      -16.0903       16.0903       192.249       208.340    
  12  0.508654     -0.675987      -39.1056       39.1056       195.490       234.596    
  13  0.722060     -0.325647      -18.8386       18.8386       192.832       211.671    
  14  0.424032     -0.857947      -49.6320       49.6320       192.832       242.464    
  15  0.786154     -0.240602      -13.9188       13.9188       191.786       205.705    
  16  0.399894     -0.916557      -53.0225       53.0225       189.616       242.639    
  17  0.757416     -0.277843      -16.0732       16.0732       197.273       213.346    
  18  0.637270     -0.450563      -26.0649       26.0649       192.832       218.897    
  19  0.586055     -0.534342      -30.9115       30.9115       202.792       233.703    
  20  0.821724     -0.196351      -11.3589       11.3589       192.832       204.191    
  21  0.921558     -0.816897E-01  -4.72572       4.72572       191.913       196.639    
  22  0.985596     -0.145083E-01 -0.839303      0.839303       191.935       192.774    
  23  0.257194      -1.35793      -78.5556       78.5556       211.341       289.897    
  24  0.921438E-01  -2.38440      -137.937       137.937       192.832       330.769    
  25  0.114653      -2.16584      -125.293       125.293       191.073       316.367    
  26  0.379827     -0.968040      -56.0008       56.0008       189.841       245.842    
  27  0.541451     -0.613503      -35.4909       35.4909       192.832       228.323    
  28  0.544274     -0.608302      -35.1901       35.1901       192.299       227.489    
  29  0.934365     -0.678883E-01  -3.92732       3.92732       191.801       195.728    
  30  0.266419E-01  -3.62527      -209.721       209.721       194.118       403.839    
  31  0.919572     -0.838466E-01  -4.85050       4.85050       189.277       194.128    
  32  0.864639     -0.145444      -8.41387       8.41387       185.359       193.773    
  33  0.341156      -1.07542      -62.2125       62.2125       190.707       252.919    
  34  0.803175     -0.219182      -12.6796       12.6796       194.280       206.960    
  35  0.699424     -0.357498      -20.6812       20.6812       191.350       212.031    
  36  0.223868E-01  -3.79928      -219.787       219.787       196.763       416.551    
  37  0.605689     -0.501389      -29.0052       29.0052       191.708       220.713    
  38  0.312349      -1.16363      -67.3158       67.3158       192.845       260.161    
  39  0.437501     -0.826675      -47.8229       47.8229       208.079       255.902    
  40  0.303330      -1.19293      -69.0108       69.0108       199.085       268.096    
  41  0.129735      -2.04226      -118.144       118.144       190.154       308.298    
  42  0.954352     -0.467224E-01  -2.70288       2.70288       192.832       195.535    
  43  0.519807     -0.654297      -37.8509       37.8509       192.832       230.683    
  44  0.950560     -0.507036E-01  -2.93319       2.93319       193.483       196.416    
  45  0.443941     -0.812064      -46.9776       46.9776       258.538       305.515    
  46  0.911446     -0.927229E-01  -5.36399       5.36399       187.695       193.059    
  47  0.782475     -0.245293      -14.1901       14.1901       187.489       201.679    
  48  0.412534     -0.885438      -51.2223       51.2223       190.223       241.446    
  49  0.843850     -0.169780      -9.82174       9.82174       191.343       201.165    
  50  0.149432      -1.90091      -109.967       109.967       251.516       361.483    
  51  0.292747      -1.22845      -71.0653       71.0653       192.049       263.114    
  52  0.579908E-02  -5.15006      -297.929       297.929       192.269       490.198    
  53  0.164431      -1.80526      -104.434       104.434       192.832       297.266    
  54  0.963795     -0.368765E-01  -2.13330       2.13330       199.554       201.687    
  55  0.536638     -0.622432      -36.0075       36.0075       191.670       227.677    
  56  0.231620      -1.46266      -84.6143       84.6143       191.883       276.497    
  57  0.452632E-01  -3.09526      -179.060       179.060       193.370       372.430    
  58  0.241294      -1.42174      -82.2472       82.2472       192.832       275.080    
  59  0.757653     -0.277529      -16.0550       16.0550       212.657       228.712    
  60  0.504715     -0.683762      -39.5554       39.5554       200.423       239.979    
  61  0.878562     -0.129469      -7.48976       7.48976       215.979       223.469    
  62  0.874452     -0.134158      -7.76102       7.76102       196.114       203.876    
  63  0.370953     -0.991680      -57.3684       57.3684       192.440       249.808    
  64  0.757717     -0.277446      -16.0501       16.0501       191.717       207.767    
  65  0.642844     -0.441853      -25.5611       25.5611       192.832       218.393    
  66  0.616137     -0.484286      -28.0158       28.0158       193.388       221.404    
  67  0.551578     -0.594972      -34.4189       34.4189       229.312       263.730    
  68  0.483778E-01  -3.02871      -175.210       175.210       189.576       364.786    
  69  0.839664     -0.174753      -10.1094       10.1094       192.131       202.240    
  70  0.334065      -1.09642      -63.4276       63.4276       193.513       256.941    
  71  0.995512     -0.449855E-02 -0.260240      0.260240       204.512       204.773    
  72  0.214896      -1.53760      -88.9499       88.9499       199.363       288.313    
loop,thermsimp(1:2)        3   103.227       74.8096    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77        187.53          0.84          1.11         25.05          0.13          0.05         27.18
Just calling func    0   0         27.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     78        186.43          0.84          1.11         25.13          0.07          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        3
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        4
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       77     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -7.18273       7.18273       185.450       192.633    
   2  0.114178      -2.16999      -125.533       125.533       191.935       317.468    
   3  0.217017      -1.52778      -88.3815       88.3815       187.695       276.076    
   4  0.138317      -1.97821      -114.439       114.439       185.359       299.798    
   5  0.832728     -0.183048      -10.5893       10.5893       189.277       199.867    
   6  0.390825     -0.939496      -54.3496       54.3496       191.114       245.463    
   7  0.283633      -1.26007      -72.8950       72.8950       192.832       265.727    
   8  0.725809     -0.320468      -18.5390       18.5390       191.801       210.340    
   9  0.506121     -0.680979      -39.3944       39.3944       193.483       232.877    
  10  0.216234      -1.53139      -88.5906       88.5906       191.913       280.504    
  11  0.637942     -0.449509      -26.0039       26.0039       191.343       217.347    
  12  0.536707     -0.622302      -36.0000       36.0000       187.489       223.489    
  13  0.231844      -1.46169      -84.5584       84.5584       199.554       284.112    
  14  0.491379     -0.710540      -41.1045       41.1045       192.131       233.236    
  15  0.825774     -0.191434      -11.0744       11.0744       196.114       207.189    
  16  0.671593     -0.398102      -23.0301       23.0301       192.832       215.862    
  17  0.549103     -0.599470      -34.6791       34.6791       204.512       239.191    
  18  0.659287     -0.416597      -24.1000       24.1000       191.786       215.886    
  19  0.205012      -1.58469      -91.6736       91.6736       194.280       285.954    
  20  0.400541E-02  -5.52011      -319.337       319.337       191.717       511.054    
  21  0.750831     -0.286575      -16.5783       16.5783       192.249       208.828    
  22  0.619921     -0.478162      -27.6616       27.6616       191.810       219.471    
  23  0.435226     -0.831889      -48.1245       48.1245       192.832       240.957    
  24  0.460974     -0.774414      -44.7996       44.7996       191.350       236.150    
  25  0.891582E-01  -2.41734      -139.843       139.843       199.721       339.563    
  26  0.589618E-01  -2.83087      -163.765       163.765       197.273       361.038    
  27  0.541391     -0.613613      -35.4973       35.4973       192.832       228.330    
  28  0.545108E-01  -2.90936      -168.305       168.305       192.832       361.138    
  29  0.744722     -0.294744      -17.0509       17.0509       191.708       208.759    
  30  0.712477     -0.339008      -19.6115       19.6115       193.388       212.999    
  31  0.563836     -0.572992      -33.1474       33.1474       215.979       249.127    
  32  0.161455      -1.82353      -105.491       105.491       192.299       297.790    
  33  0.640738     -0.445135      -25.7509       25.7509       191.670       217.421    
  34  0.157494      -1.84837      -106.927       106.927       192.832       299.760    
  35  0.695323     -0.363378      -21.0213       21.0213       212.657       233.678    
  36  0.792798     -0.232186      -13.4319       13.4319       192.832       206.264    
  37  0.940634     -0.612017E-01  -3.54050       3.54050       202.792       206.332    
  38  0.750008     -0.287672      -16.6417       16.6417       195.490       212.132    
  39  0.298939E-01  -3.51010      -203.058       203.058       200.423       403.482    
  40  0.633510     -0.456480      -26.4072       26.4072       190.223       216.630    
  41  0.465723     -0.764164      -44.2067       44.2067       192.832       237.039    
  42  0.916259     -0.874560E-01  -5.05930       5.05930       189.616       194.676    
  43  0.451376     -0.795456      -46.0169       46.0169       189.841       235.858    
  44  0.414090     -0.881672      -51.0045       51.0045       192.440       243.445    
  45  0.273092      -1.29795      -75.0859       75.0859       190.707       265.793    
  46  0.361379      -1.01783      -58.8810       58.8810       208.079       266.960    
  47  0.548848     -0.599934      -34.7060       34.7060       193.513       228.219    
  48  0.832309     -0.183552      -10.6184       10.6184       192.845       203.464    
  49  0.673017     -0.395985      -22.9076       22.9076       194.812       217.719    
  50  0.692516     -0.367425      -21.2554       21.2554       192.049       213.305    
  51  0.354468E-01  -3.33972      -193.202       193.202       229.312       422.514    
  52  0.987850     -0.122240E-01 -0.707152      0.707152       193.212       193.919    
  53  0.659676     -0.416007      -24.0659       24.0659       192.846       216.912    
  54  0.276145      -1.28683      -74.4428       74.4428       199.085       273.528    
  55  0.426927     -0.851141      -49.2383       49.2383       192.832       242.071    
  56  0.221817      -1.50590      -87.1159       87.1159       191.883       278.999    
  57  0.911956     -0.921634E-01  -5.33163       5.33163       199.363       204.694    
  58  0.791973     -0.233228      -13.4922       13.4922       211.341       224.834    
  59  0.805447     -0.216358      -12.5162       12.5162       189.745       202.261    
  60  0.887840     -0.118963      -6.88199       6.88199       192.832       199.714    
  61  0.978176     -0.220657E-01  -1.27649       1.27649       258.538       259.814    
  62  0.539899     -0.616372      -35.6570       35.6570       190.154       225.811    
  63  0.313742      -1.15918      -67.0584       67.0584       191.073       258.132    
  64  0.355768      -1.03348      -59.7863       59.7863       192.832       252.619    
  65  0.413366     -0.883423      -51.1057       51.1057       192.832       243.938    
  66  0.352288      -1.04331      -60.3549       60.3549       251.516       311.871    
  67  0.269512      -1.31114      -75.8492       75.8492       189.576       265.425    
  68  0.841976E-01  -2.47459      -143.154       143.154       193.370       336.525    
  69  0.964450     -0.361976E-01  -2.09402       2.09402       192.655       194.749    
  70  0.554883     -0.588998      -34.0733       34.0733       194.118       228.191    
  71  0.192411      -1.64812      -95.3433       95.3433       196.763       292.106    
  72  0.834093     -0.181411      -10.4945       10.4945       186.433       196.928    
loop,thermsimp(1:2)        4   7.18273       125.533    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79        193.13          0.84          1.11         25.14          0.05          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80        202.20          0.84          1.11         25.11          0.15          0.05         27.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    193.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        4
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        5
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       79     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -1.87015       1.87015       185.450       187.320    
   2  0.384676     -0.955353      -55.2669       55.2669       193.212       248.479    
   3  0.472770     -0.749146      -43.3379       43.3379       189.616       232.954    
   4  0.131186      -2.03114      -117.501       117.501       192.655       310.156    
   5  0.387497     -0.948046      -54.8442       54.8442       186.433       241.277    
   6  0.474858     -0.744739      -43.0829       43.0829       192.832       235.915    
   7  0.654056     -0.424563      -24.5608       24.5608       189.277       213.838    
   8  0.375266     -0.980119      -56.6996       56.6996       189.745       246.444    
   9  0.605577     -0.501574      -29.0159       29.0159       192.845       221.861    
  10  0.485605     -0.722360      -41.7883       41.7883       199.363       241.151    
  11  0.503843     -0.685490      -39.6554       39.6554       192.832       232.488    
  12  0.374521     -0.982108      -56.8147       56.8147       202.792       259.606    
  13  0.955542E-01  -2.34806      -135.835       135.835       196.114       331.949    
  14  0.902567     -0.102512      -5.93029       5.93029       191.708       197.638    
  15  0.347215      -1.05781      -61.1940       61.1940       192.249       253.443    
  16  0.893138     -0.113014      -6.53784       6.53784       191.801       198.338    
  17  0.561145     -0.577776      -33.4241       33.4241       195.490       228.914    
  18  0.667287     -0.404536      -23.4023       23.4023       193.388       216.790    
  19  0.601102     -0.508991      -29.4450       29.4450       192.049       221.494    
  20  0.569928     -0.562245      -32.5257       32.5257       192.832       225.358    
  21  0.655926     -0.421708      -24.3957       24.3957       191.786       216.182    
  22  0.355892      -1.03313      -59.7661       59.7661       190.223       249.989    
  23  0.208013      -1.57015      -90.8329       90.8329       192.846       283.679    
  24  0.879772     -0.128093      -7.41013       7.41013       191.343       198.753    
  25  0.114206E-01  -4.47233      -258.723       258.723       191.670       450.393    
  26  0.950245     -0.510357E-01  -2.95240       2.95240       194.812       197.764    
  27  0.321268      -1.13548      -65.6872       65.6872       191.810       257.497    
  28  0.379005     -0.970207      -56.1262       56.1262       187.489       243.615    
  29  0.117960      -2.13741      -123.649       123.649       211.341       334.990    
  30  0.822558     -0.195337      -11.3002       11.3002       190.154       201.455    
  31  0.671085     -0.398860      -23.0739       23.0739       194.118       217.192    
  32  0.220279      -1.51286      -87.5185       87.5185       193.513       281.032    
  33  0.836335     -0.178727      -10.3393       10.3393       192.832       203.172    
  34  0.982442E-01  -2.32030      -134.229       134.229       193.483       327.712    
  35  0.912526     -0.915389E-01  -5.29550       5.29550       192.131       197.426    
  36  0.758802     -0.276015      -15.9674       15.9674       212.657       228.624    
  37  0.562651     -0.575096      -33.2691       33.2691       189.841       223.110    
  38  0.248142      -1.39375      -80.6283       80.6283       191.350       271.978    
  39  0.864881     -0.145163      -8.39764       8.39764       192.832       201.230    
  40  0.495151     -0.702893      -40.6622       40.6622       204.512       245.174    
  41  0.112352E-01  -4.48870      -259.670       259.670       192.832       452.502    
  42  0.745500     -0.293700      -16.9904       16.9904       192.832       209.823    
  43  0.405071     -0.903693      -52.2784       52.2784       192.440       244.718    
  44  0.617259     -0.482466      -27.9105       27.9105       192.832       220.743    
  45  0.992755     -0.727089E-02 -0.420619      0.420619       191.114       191.534    
  46  0.888739     -0.117952      -6.82350       6.82350       215.979       222.803    
  47  0.976701     -0.235748E-01  -1.36379       1.36379       192.832       194.196    
  48  0.461976     -0.772242      -44.6740       44.6740       191.073       235.747    
  49  0.150581      -1.89325      -109.524       109.524       258.538       368.062    
  50  0.726286E-01  -2.62240      -151.705       151.705       189.576       341.281    
  51  0.280837      -1.26998      -73.4680       73.4680       192.832       266.300    
  52  0.727959     -0.317510      -18.3679       18.3679       190.707       209.075    
  53  0.565225     -0.570532      -33.0051       33.0051       208.079       241.085    
  54  0.884775     -0.122422      -7.08210       7.08210       199.085       206.168    
  55  0.289837      -1.23844      -71.6433       71.6433       187.695       259.338    
  56  0.282389      -1.26447      -73.1492       73.1492       191.883       265.032    
  57  0.737455     -0.304550      -17.6181       17.6181       191.913       209.532    
  58  0.436668E-02  -5.43375      -314.341       314.341       199.554       513.895    
  59  0.809492     -0.211348      -12.2264       12.2264       194.280       206.507    
  60  0.957786E-01  -2.34572      -135.699       135.699       196.763       332.462    
  61  0.335750      -1.09139      -63.1365       63.1365       192.299       255.436    
  62  0.687327     -0.374945      -21.6904       21.6904       192.832       214.523    
  63  0.340103      -1.07851      -62.3912       62.3912       185.359       247.751    
  64  0.902520     -0.102564      -5.93329       5.93329       251.516       257.449    
  65  0.872595     -0.136284      -7.88396       7.88396       191.935       199.819    
  66  0.773535     -0.256784      -14.8549       14.8549       193.370       208.225    
  67  0.627340     -0.466267      -26.9734       26.9734       199.721       226.694    
  68  0.918418     -0.851028E-01  -4.92317       4.92317       197.273       202.196    
  69  0.347451      -1.05713      -61.1548       61.1548       192.832       253.987    
  70  0.962049     -0.386898E-01  -2.23819       2.23819       200.423       202.662    
  71  0.716962     -0.332732      -19.2485       19.2485       229.312       248.560    
  72  0.423789     -0.858520      -49.6651       49.6651       193.133       242.798    
loop,thermsimp(1:2)        5   1.87015       55.2669    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81        195.69          0.84          1.11         25.38          0.06          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82        214.96          0.84          1.11         25.12          0.10          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    195.69       0.8872     -1.342      1.647     -102.6     0.9519    
                     -0.5759      1.817     -99.70      3.650     0.4613E-01
                       2.001     -1.442      1.829      0.000     -40.00    
                      -1.968      0.000      0.000      0.000     -1.221    

                      -2.500     0.2906E+05 0.3097E+05  0.000      0.000    
                     -0.5672     -6.336     -4.365     -7.448      3.289    
                      -14.24     -2.966      1670.      0.000      3085.    

                      0.1025E+05  8519.      5011.     0.1064E+05  3004.    
                       3873.     0.9703E-02 0.9703E-02  0.000     0.9703E-02
                      0.9703E-02 0.9703E-02-0.8912E-02 0.9703E-02 0.9703E-02

                     -0.1183    -0.9838      0.000     0.9703E-02 0.9703E-02
                       0.000     0.9703E-02 0.9703E-02 0.9703E-02 0.9703E-02
                      0.9703E-02 0.9703E-02-0.1248    -0.9903      0.000    

                      0.3234E-01-0.1677    -0.5677    -0.5677    -0.2055    
                      0.2373      8.910      8.810     -5162.     -4.000    
                     -0.4453    -0.5461      8.910      8.810     -5162.    

                      -4.000     0.1127    -0.5754      8.910      8.810    
                      -5162.     -7.000    -0.4099    -0.6728      8.910    
                       8.810     -5162.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    195.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        5
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        6
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       81     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -12.4598       12.4598       185.450       197.910    
   2  0.337878      -1.08507      -62.7710       62.7710       191.114       253.885    
   3  0.930612     -0.719127E-01  -4.16013       4.16013       192.832       196.992    
   4  0.843645     -0.170024      -9.83582       9.83582       192.131       201.967    
   5  0.757799     -0.277337      -16.0438       16.0438       191.708       207.752    
   6  0.627925     -0.465335      -26.9195       26.9195       194.812       221.731    
   7  0.412314     -0.885971      -51.2531       51.2531       191.801       243.054    
   8  0.282274      -1.26488      -73.1727       73.1727       191.343       264.516    
   9  0.426609E-01  -3.15447      -182.485       182.485       191.935       374.420    
  10  0.484876     -0.723862      -41.8752       41.8752       192.832       234.708    
  11  0.372210     -0.988296      -57.1726       57.1726       190.154       247.327    
  12  0.740507     -0.300421      -17.3793       17.3793       197.273       214.652    
  13  0.361519      -1.01744      -58.8587       58.8587       200.423       259.282    
  14  0.421034     -0.865042      -50.0424       50.0424       192.832       242.875    
  15  0.780595     -0.247699      -14.3293       14.3293       199.085       213.415    
  16  0.758410     -0.276531      -15.9972       15.9972       194.280       210.278    
  17  0.522921E-01  -2.95091      -170.709       170.709       193.370       364.080    
  18  0.609673     -0.494833      -28.6259       28.6259       190.707       219.333    
  19  0.204029      -1.58949      -91.9516       91.9516       191.913       283.865    
  20  0.516385     -0.660902      -38.2330       38.2330       192.832       231.065    
  21  0.323918      -1.12726      -65.2118       65.2118       189.277       254.489    
  22  0.671820     -0.397765      -23.0106       23.0106       192.832       215.843    
  23  0.850344     -0.162114      -9.37823       9.37823       191.786       201.165    
  24  0.515631     -0.662364      -38.3175       38.3175       193.388       231.705    
  25  0.919408     -0.840249E-01  -4.86082       4.86082       194.118       198.979    
  26  0.516519     -0.660643      -38.2180       38.2180       192.832       231.050    
  27  0.986900     -0.131869E-01 -0.762856      0.762856       192.049       192.812    
  28  0.127351      -2.06081      -119.217       119.217       192.845       312.062    
  29  0.775028E-01  -2.55744      -147.947       147.947       215.979       363.926    
  30  0.778307     -0.250634      -14.4991       14.4991       189.841       204.340    
  31  0.548570     -0.600441      -34.7353       34.7353       192.832       227.568    
  32  0.191672      -1.65197      -95.5660       95.5660       199.721       295.287    
  33  0.593733     -0.521326      -30.1586       30.1586       212.657       242.815    
  34  0.612853     -0.489631      -28.3250       28.3250       195.490       223.815    
  35  0.872749     -0.136107      -7.87374       7.87374       192.832       200.706    
  36  0.291105E-01  -3.53666      -204.595       204.595       189.616       394.211    
  37  0.310804      -1.16859      -67.6027       67.6027       191.073       258.676    
  38  0.238051      -1.43527      -83.0300       83.0300       192.832       275.862    
  39  0.600295     -0.510334      -29.5227       29.5227       208.079       237.602    
  40  0.856575     -0.154813      -8.95590       8.95590       199.363       208.319    
  41  0.127990      -2.05580      -118.928       118.928       186.433       305.361    
  42  0.390396E-01  -3.24318      -187.617       187.617       193.133       380.750    
  43  0.469298E-01  -3.05910      -176.968       176.968       187.489       364.457    
  44  0.170208      -1.77073      -102.436       102.436       192.440       294.877    
  45  0.457801     -0.781320      -45.1991       45.1991       204.512       249.711    
  46  0.451589     -0.794982      -45.9895       45.9895       189.745       235.734    
  47  0.601844     -0.507757      -29.3736       29.3736       185.359       214.733    
  48  0.923684     -0.793857E-01  -4.59244       4.59244       193.212       197.804    
  49  0.113154      -2.17901      -126.055       126.055       229.312       355.366    
  50  0.652894     -0.426340      -24.6637       24.6637       190.223       214.887    
  51  0.600010     -0.510809      -29.5501       29.5501       192.249       221.800    
  52  0.768679     -0.263082      -15.2192       15.2192       192.832       208.052    
  53  0.999310     -0.690144E-03 -0.399246E-01  0.399246E-01   192.299       192.339    
  54  0.798907     -0.224511      -12.9879       12.9879       251.516       264.504    
  55  0.246243      -1.40144      -81.0727       81.0727       191.810       272.883    
  56  0.798424     -0.225115      -13.0229       13.0229       187.695       200.718    
  57  0.120926      -2.11257      -122.212       122.212       202.792       325.003    
  58  0.771675     -0.259192      -14.9942       14.9942       191.883       206.877    
  59  0.670629     -0.399540      -23.1133       23.1133       192.832       215.946    
  60  0.127505      -2.05960      -119.147       119.147       191.350       310.497    
  61  0.375387     -0.979799      -56.6810       56.6810       193.513       250.194    
  62  0.572534E-01  -2.86027      -165.466       165.466       192.846       358.312    
  63  0.358654      -1.02540      -59.3189       59.3189       192.655       251.974    
  64  0.903087     -0.101937      -5.89702       5.89702       193.483       199.380    
  65  0.112925      -2.18103      -126.172       126.172       196.114       322.286    
  66  0.727950     -0.317523      -18.3686       18.3686       196.763       215.132    
  67  0.703618E-01  -2.65411      -153.539       153.539       211.341       364.881    
  68  0.461106     -0.774128      -44.7830       44.7830       189.576       234.359    
  69  0.546854     -0.603573      -34.9165       34.9165       258.538       293.454    
  70  0.264522      -1.32983      -76.9304       76.9304       191.670       268.600    
  71  0.562280     -0.575755      -33.3073       33.3073       192.832       226.140    
  72  0.745931     -0.293123      -16.9571       16.9571       195.694       212.651    
loop,thermsimp(1:2)        6   12.4598       62.7710    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83        196.61          0.84          1.11         25.12          0.17          0.06         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84        216.02          0.85          1.11         25.30          0.09          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    196.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        6
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        7
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       83     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -123.769       123.769       192.299       316.068    
   2  0.421875     -0.863045      -49.9269       49.9269       192.049       241.976    
   3  0.700103     -0.356528      -20.6251       20.6251       192.832       213.457    
   4  0.209367      -1.56367      -90.4576       90.4576       193.212       283.669    
   5  0.117251      -2.14344      -123.997       123.997       185.450       309.447    
   6  0.898330     -0.107218      -6.20251       6.20251       194.118       200.321    
   7  0.209806      -1.56157      -90.3365       90.3365       193.483       283.820    
   8  0.917155     -0.864790E-01  -5.00278       5.00278       192.832       197.835    
   9  0.120514E-01  -4.41857      -255.613       255.613       187.695       443.308    
  10  0.189983      -1.66082      -96.0781       96.0781       191.786       287.864    
  11  0.257131      -1.35817      -78.5696       78.5696       192.131       270.701    
  12  0.913158E-01  -2.39343      -138.459       138.459       189.841       328.300    
  13  0.336531      -1.08906      -63.0020       63.0020       191.883       254.885    
  14  0.318351      -1.14460      -66.2148       66.2148       191.708       257.923    
  15  0.919606     -0.838101E-01  -4.84839       4.84839       192.832       197.681    
  16  0.719771E-01  -2.63141      -152.226       152.226       199.363       351.589    
  17  0.788730E-01  -2.53992      -146.933       146.933       194.280       341.214    
  18  0.905929     -0.987941E-01  -5.71521       5.71521       195.694       201.409    
  19  0.665501     -0.407215      -23.5573       23.5573       199.085       222.643    
  20  0.812159     -0.208059      -12.0362       12.0362       197.273       209.309    
  21  0.412726E-01  -3.18756      -184.399       184.399       185.359       369.759    
  22  0.256064      -1.36233      -78.8103       78.8103       190.223       269.033    
  23  0.277519      -1.28187      -74.1556       74.1556       196.763       270.919    
  24  0.279550      -1.27457      -73.7337       73.7337       192.832       266.566    
  25  0.857884     -0.153286      -8.86756       8.86756       192.832       201.700    
  26  0.205158      -1.58398      -91.6325       91.6325       190.707       282.339    
  27  0.482085     -0.729635      -42.2092       42.2092       194.812       237.021    
  28  0.494966E-01  -3.00585      -173.888       173.888       192.249       366.137    
  29  0.338791      -1.08237      -62.6149       62.6149       195.490       258.105    
  30  0.249491E-01  -3.69092      -213.518       213.518       192.832       406.351    
  31  0.480710     -0.732491      -42.3744       42.3744       192.832       235.207    
  32  0.908951E-01  -2.39805      -138.726       138.726       192.832       331.559    
  33  0.283223      -1.26152      -72.9787       72.9787       192.832       265.811    
  34  0.277734      -1.28109      -74.1107       74.1107       193.388       267.499    
  35  0.504407     -0.684372      -39.5907       39.5907       189.576       229.167    
  36  0.251881      -1.37880      -79.7630       79.7630       192.832       272.595    
  37  0.568193     -0.565294      -32.7021       32.7021       189.745       222.447    
  38  0.186135      -1.68128      -97.2616       97.2616       208.079       305.341    
  39  0.964582     -0.360604E-01  -2.08608       2.08608       212.657       214.743    
  40  0.493045     -0.707155      -40.9087       40.9087       192.832       233.741    
  41  0.477950     -0.738248      -42.7075       42.7075       191.801       234.508    
  42  0.114879      -2.16388      -125.180       125.180       190.154       315.334    
  43  0.324003      -1.12700      -65.1967       65.1967       204.512       269.709    
  44  0.720573     -0.327708      -18.9578       18.9578       193.513       212.471    
  45  0.934913     -0.673019E-01  -3.89340       3.89340       192.655       196.548    
  46  0.516467     -0.660745      -38.2239       38.2239       191.114       229.337    
  47  0.351513      -1.04551      -60.4823       60.4823       189.277       249.760    
  48  0.310221      -1.17047      -67.7114       67.7114       191.073       258.785    
  49  0.467571     -0.760204      -43.9776       43.9776       200.423       244.401    
  50  0.700644     -0.355756      -20.5804       20.5804       251.516       272.096    
  51  0.608579E-01  -2.79921      -161.934       161.934       191.343       353.277    
  52  0.360106      -1.02136      -59.0852       59.0852       191.670       250.755    
  53  0.355744      -1.03354      -59.7903       59.7903       191.810       251.600    
  54  0.356778      -1.03064      -59.6223       59.6223       192.832       252.454    
  55  0.209214      -1.56440      -90.5000       90.5000       191.913       282.413    
  56  0.513034     -0.667413      -38.6097       38.6097       258.538       297.147    
  57  0.131750      -2.02685      -117.253       117.253       192.440       309.693    
  58  0.860948     -0.149721      -8.66130       8.66130       199.721       208.382    
  59  0.245301      -1.40527      -81.2943       81.2943       186.433       267.727    
  60  0.411604     -0.887695      -51.3529       51.3529       191.350       242.703    
  61  0.444838     -0.810046      -46.8609       46.8609       192.845       239.706    
  62  0.173997      -1.74872      -101.163       101.163       196.114       297.277    
  63  0.616177     -0.484222      -28.0121       28.0121       202.792       230.804    
  64  0.794601     -0.229915      -13.3005       13.3005       229.312       242.612    
  65  0.926158     -0.767101E-01  -4.43766       4.43766       192.846       197.284    
  66  0.614053     -0.487673      -28.2118       28.2118       215.979       244.191    
  67  0.228742      -1.47516      -85.3375       85.3375       193.370       278.708    
  68  0.162916      -1.81452      -104.970       104.970       187.489       292.459    
  69  0.437909     -0.825744      -47.7690       47.7690       211.341       259.111    
  70  0.966188     -0.343970E-01  -1.98986       1.98986       191.935       193.925    
  71  0.756703     -0.278785      -16.1276       16.1276       193.133       209.261    
  72  0.537306     -0.621187      -35.9355       35.9355       196.613       232.548    
loop,thermsimp(1:2)        7   123.769       49.9269    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85        197.74          0.84          1.11         25.49          0.05          0.05         27.54
Just calling func    0   0         27.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86        217.62          0.84          1.11         25.16          0.08          0.04         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    197.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        7
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        8
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       85     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -41.5747       41.5747       191.935       233.510    
   2  0.568497     -0.564760      -32.6712       32.6712       192.655       225.326    
   3  0.632037E-01  -2.76139      -159.746       159.746       192.846       352.592    
   4  0.184325      -1.69105      -97.8269       97.8269       192.832       290.659    
   5  0.949772     -0.515332E-01  -2.98118       2.98118       192.832       195.814    
   6  0.512179     -0.669081      -38.7061       38.7061       194.118       232.824    
   7  0.573767     -0.555532      -32.1373       32.1373       195.694       227.832    
   8  0.590189     -0.527312      -30.5048       30.5048       192.832       223.337    
   9  0.323917      -1.12727      -65.2121       65.2121       199.721       264.933    
  10  0.246420E-01  -3.70330      -214.235       214.235       193.133       407.368    
  11  0.923153E-01  -2.38255      -137.830       137.830       197.273       335.103    
  12  0.236043      -1.44374      -83.5200       83.5200       193.513       277.033    
  13  0.885388     -0.121730      -7.04202       7.04202       192.832       199.874    
  14  0.617726     -0.481710      -27.8668       27.8668       212.657       240.523    
  15  0.349992      -1.04985      -60.7333       60.7333       189.745       250.478    
  16  0.892028     -0.114257      -6.60975       6.60975       199.085       205.695    
  17  0.382423     -0.961227      -55.6067       55.6067       189.576       245.183    
  18  0.850527     -0.161899      -9.36583       9.36583       191.114       200.479    
  19  0.653461     -0.425472      -24.6134       24.6134       202.792       227.405    
  20  0.413959     -0.881988      -51.0227       51.0227       196.613       247.636    
  21  0.807813     -0.213424      -12.3465       12.3465       192.832       205.179    
  22  0.348045      -1.05542      -61.0560       61.0560       191.801       252.857    
  23  0.435267     -0.831795      -48.1191       48.1191       192.832       240.951    
  24  0.434284     -0.834056      -48.2499       48.2499       194.812       243.062    
  25  0.983564     -0.165728E-01 -0.958734      0.958734       192.845       193.804    
  26  0.545923     -0.605277      -35.0151       35.0151       192.049       227.064    
  27  0.227140      -1.48219      -85.7441       85.7441       229.312       315.056    
  28  0.965085     -0.355395E-01  -2.05595       2.05595       191.350       193.406    
  29  0.183882      -1.69346      -97.9661       97.9661       215.979       313.945    
  30  0.187300E-02  -6.28022      -363.309       363.309       200.423       563.732    
  31  0.428736     -0.846914      -48.9937       48.9937       189.277       238.271    
  32  0.459764     -0.777041      -44.9516       44.9516       191.670       236.622    
  33  0.914786     -0.890649E-01  -5.15238       5.15238       191.810       196.962    
  34  0.872236     -0.136696      -7.90780       7.90780       192.832       200.740    
  35  0.789367     -0.236524      -13.6828       13.6828       191.883       205.565    
  36  0.619233E-01  -2.78186      -160.930       160.930       191.708       352.638    
  37  0.138004E-01  -4.28306      -247.774       247.774       195.490       443.264    
  38  0.287035      -1.24815      -72.2051       72.2051       191.073       263.278    
  39  0.138758E-01  -4.27761      -247.458       247.458       211.341       458.800    
  40  0.593330     -0.522005      -30.1978       30.1978       192.832       223.030    
  41  0.399445     -0.917679      -53.0874       53.0874       192.832       245.920    
  42  0.982947     -0.172001E-01 -0.995023      0.995023       193.388       194.383    
  43  0.259534      -1.34887      -78.0315       78.0315       186.433       264.465    
  44  0.816592E-01  -2.50520      -144.925       144.925       190.223       335.148    
  45  0.166083      -1.79527      -103.856       103.856       204.512       308.368    
  46  0.967370     -0.331741E-01  -1.91911       1.91911       192.131       194.050    
  47  0.371024     -0.991488      -57.3573       57.3573       196.763       254.120    
  48  0.941964     -0.597885E-01  -3.45875       3.45875       251.516       254.975    
  49  0.130219      -2.03854      -117.929       117.929       192.832       310.761    
  50  0.599455     -0.511734      -29.6037       29.6037       193.370       222.974    
  51  0.519323     -0.655230      -37.9049       37.9049       190.707       228.612    
  52  0.829175     -0.187324      -10.8367       10.8367       191.913       202.750    
  53  0.341525      -1.07433      -62.1499       62.1499       193.212       255.362    
  54  0.686480     -0.376178      -21.7618       21.7618       193.483       215.245    
  55  0.273157      -1.29771      -75.0721       75.0721       191.786       266.858    
  56  0.472999     -0.748662      -43.3099       43.3099       187.489       230.799    
  57  0.591611     -0.524905      -30.3656       30.3656       258.538       288.903    
  58  0.253673      -1.37171      -79.3530       79.3530       196.114       275.468    
  59  0.522398     -0.649326      -37.5633       37.5633       208.079       245.643    
  60  0.927744     -0.749995E-01  -4.33870       4.33870       185.450       189.789    
  61  0.470581     -0.753787      -43.6063       43.6063       192.440       236.046    
  62  0.365015      -1.00782      -58.3019       58.3019       190.154       248.456    
  63  0.732288     -0.311582      -18.0249       18.0249       192.299       210.324    
  64  0.536772E-01  -2.92477      -169.197       169.197       189.841       359.038    
  65  0.725826     -0.320444      -18.5376       18.5376       192.832       211.370    
  66  0.806822     -0.214652      -12.4176       12.4176       194.280       206.698    
  67  0.104580E-01  -4.56039      -263.817       263.817       199.363       463.180    
  68  0.818881     -0.199816      -11.5593       11.5593       191.343       202.903    
  69  0.330445      -1.10732      -64.0579       64.0579       192.249       256.307    
  70  0.316989      -1.14889      -66.4629       66.4629       185.359       251.822    
  71  0.776875     -0.252476      -14.6057       14.6057       192.832       207.438    
  72  0.782540     -0.245210      -14.1853       14.1853       197.741       211.926    
loop,thermsimp(1:2)        8   41.5747       32.6712    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87        189.25          0.83          1.11         25.18          0.04          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     88        192.67          0.84          1.11         25.08          0.08          0.05         27.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        8
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:        9
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       87     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -140.712       140.712       185.450       326.162    
   2  0.192227      -1.64908      -95.3987       95.3987       191.350       286.749    
   3  0.872733     -0.136126      -7.87485       7.87485       192.845       200.720    
   4  0.444113     -0.811675      -46.9552       46.9552       192.131       239.086    
   5  0.194382      -1.63793      -94.7538       94.7538       193.388       288.142    
   6  0.358074      -1.02702      -59.4126       59.4126       192.832       252.245    
   7  0.461693     -0.772855      -44.7094       44.7094       191.810       236.519    
   8  0.180202      -1.71368      -99.1358       99.1358       192.832       291.968    
   9  0.944954     -0.566187E-01  -3.27538       3.27538       191.114       194.389    
  10  0.738770     -0.302769      -17.5151       17.5151       192.832       210.347    
  11  0.822491E-01  -2.49800      -144.509       144.509       191.913       336.422    
  12  0.313602      -1.15963      -67.0842       67.0842       191.343       258.428    
  13  0.978185     -0.220567E-01  -1.27597       1.27597       192.832       194.108    
  14  0.540591E-01  -2.91768      -168.787       168.787       191.883       360.669    
  15  0.872885     -0.135951      -7.86473       7.86473       199.085       206.950    
  16  0.209079      -1.56504      -90.5372       90.5372       194.280       284.818    
  17  0.789205E-01  -2.53931      -146.899       146.899       192.832       339.731    
  18  0.746404     -0.292489      -16.9204       16.9204       192.299       209.220    
  19  0.110219      -2.20529      -127.575       127.575       192.832       320.408    
  20  0.656016     -0.421570      -24.3877       24.3877       197.741       222.129    
  21  0.665675     -0.406953      -23.5421       23.5421       193.483       217.025    
  22  0.563292     -0.573957      -33.2032       33.2032       193.370       226.574    
  23  0.615044     -0.486062      -28.1185       28.1185       192.832       220.951    
  24  0.128081      -2.05509      -118.886       118.886       192.832       311.719    
  25  0.459916     -0.776711      -44.9325       44.9325       192.655       237.588    
  26  0.433297     -0.836332      -48.3816       48.3816       192.049       240.431    
  27  0.225675      -1.48866      -86.1185       86.1185       202.792       288.910    
  28  0.808805     -0.212197      -12.2755       12.2755       195.694       207.970    
  29  0.578238     -0.547770      -31.6883       31.6883       190.707       222.395    
  30  0.569572     -0.562871      -32.5619       32.5619       187.489       220.051    
  31  0.291272      -1.23350      -71.3574       71.3574       194.118       265.475    
  32  0.144426      -1.93499      -111.938       111.938       191.935       303.873    
  33  0.908321     -0.961572E-01  -5.56267       5.56267       192.440       198.003    
  34  0.593166     -0.522281      -30.2138       30.2138       191.670       221.884    
  35  0.327630      -1.11587      -64.5528       64.5528       189.277       253.830    
  36  0.823214E-01  -2.49712      -144.458       144.458       212.657       357.115    
  37  0.742531     -0.297691      -17.2213       17.2213       192.832       210.054    
  38  0.476201E-01  -3.04450      -176.123       176.123       194.812       370.935    
  39  0.183829      -1.69375      -97.9830       97.9830       189.576       287.559    
  40  0.417257     -0.874053      -50.5637       50.5637       208.079       258.643    
  41  0.647723E-01  -2.73688      -158.328       158.328       192.832       351.160    
  42  0.123950E-01  -4.39046      -253.987       253.987       196.613       450.600    
  43  0.281372E-01  -3.57066      -206.562       206.562       190.154       396.716    
  44  0.883044     -0.124380      -7.19535       7.19535       189.745       196.940    
  45  0.445413     -0.808754      -46.7862       46.7862       185.359       232.146    
  46  0.418101     -0.872031      -50.4467       50.4467       191.801       242.247    
  47  0.301534      -1.19887      -69.3544       69.3544       196.763       266.118    
  48  0.674500     -0.393783      -22.7802       22.7802       251.516       274.296    
  49  0.732783     -0.310905      -17.9858       17.9858       193.212       211.197    
  50  0.970355     -0.300929E-01  -1.74087       1.74087       192.249       193.990    
  51  0.981589     -0.185824E-01  -1.07499       1.07499       191.073       192.148    
  52  0.677253     -0.389711      -22.5446       22.5446       186.433       208.978    
  53  0.800731     -0.222230      -12.8559       12.8559       199.721       212.577    
  54  0.529544     -0.635738      -36.7773       36.7773       191.786       228.564    
  55  0.814619     -0.205035      -11.8612       11.8612       196.114       207.976    
  56  0.909218     -0.951702E-01  -5.50557       5.50557       193.513       199.019    
  57  0.269472      -1.31129      -75.8578       75.8578       258.538       334.396    
  58  0.166504      -1.79274      -103.709       103.709       192.832       296.542    
  59  0.328775      -1.11238      -64.3509       64.3509       204.512       268.863    
  60  0.333602      -1.09781      -63.5079       63.5079       192.832       256.340    
  61  0.213893      -1.54228      -89.2203       89.2203       215.979       305.200    
  62  0.401720     -0.911999      -52.7589       52.7589       229.312       282.070    
  63  0.453769     -0.790168      -45.7110       45.7110       197.273       242.984    
  64  0.649690E-01  -2.73384      -158.152       158.152       190.223       348.375    
  65  0.510128     -0.673093      -38.9382       38.9382       192.846       231.784    
  66  0.430053     -0.843847      -48.8163       48.8163       191.708       240.524    
  67  0.528469E-01  -2.94036      -170.099       170.099       189.841       359.939    
  68  0.887506     -0.119339      -6.90375       6.90375       193.133       200.037    
  69  0.499442     -0.694264      -40.1630       40.1630       195.490       235.653    
  70  0.432451     -0.838287      -48.4947       48.4947       211.341       259.836    
  71  0.637121     -0.450796      -26.0784       26.0784       199.363       225.441    
  72  0.523182     -0.647826      -37.4765       37.4765       189.245       226.722    
loop,thermsimp(1:2)        9   140.712       95.3987    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89        190.05          0.84          1.11         25.13          0.10          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     90        198.66          0.84          1.11         25.07          0.14          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:        9
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       10
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       89     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -28.4238       28.4238       191.073       219.497    
   2  0.877337     -0.130865      -7.57048       7.57048       192.249       199.820    
   3  0.821280     -0.196891      -11.3901       11.3901       192.832       204.222    
   4  0.989636     -0.104181E-01 -0.602684      0.602684       191.114       191.716    
   5  0.492813     -0.707625      -40.9359       40.9359       189.745       230.681    
   6  0.904083     -0.100835      -5.83325       5.83325       192.440       198.273    
   7  0.490620     -0.712086      -41.1940       41.1940       193.513       234.707    
   8  0.572439     -0.557850      -32.2714       32.2714       193.133       225.405    
   9  0.588753     -0.529749      -30.6458       30.6458       192.845       223.491    
  10  0.341799      -1.07353      -62.1035       62.1035       199.085       261.189    
  11  0.449605     -0.799385      -46.2442       46.2442       195.694       241.938    
  12  0.740720     -0.300132      -17.3626       17.3626       196.114       213.477    
  13  0.173164E-01  -4.05610      -234.644       234.644       186.433       421.077    
  14  0.828389     -0.188272      -10.8915       10.8915       192.299       203.191    
  15  0.110451      -2.20318      -127.454       127.454       192.832       320.286    
  16  0.646816     -0.435693      -25.2047       25.2047       192.832       218.037    
  17  0.857676     -0.153529      -8.88158       8.88158       193.212       202.093    
  18  0.691202E-02  -4.97449      -287.773       287.773       199.721       487.494    
  19  0.530885     -0.633210      -36.6310       36.6310       193.483       230.114    
  20  0.742957     -0.297117      -17.1882       17.1882       187.489       204.677    
  21  0.883526E-01  -2.42642      -140.368       140.368       192.832       333.200    
  22  0.599138     -0.512263      -29.6342       29.6342       191.670       221.304    
  23  0.476407     -0.741482      -42.8945       42.8945       197.741       240.636    
  24  0.509994E-01  -2.97594      -172.157       172.157       190.707       362.864    
  25  0.669768     -0.400824      -23.1876       23.1876       199.363       222.550    
  26  0.874430     -0.134183      -7.76243       7.76243       193.370       201.133    
  27  0.830739     -0.185440      -10.7276       10.7276       189.245       199.973    
  28  0.166673      -1.79172      -103.651       103.651       191.786       295.437    
  29  0.578742     -0.546898      -31.6379       31.6379       192.846       224.484    
  30  0.433531     -0.835791      -48.3503       48.3503       185.359       233.710    
  31  0.979127     -0.210935E-01  -1.22025       1.22025       195.490       196.710    
  32  0.310252      -1.17037      -67.7056       67.7056       191.810       259.515    
  33  0.686879     -0.375597      -21.7282       21.7282       192.655       214.383    
  34  0.243104      -1.41427      -81.8149       81.8149       192.131       273.946    
  35  0.459407     -0.777818      -44.9965       44.9965       192.049       237.046    
  36  0.332163      -1.10213      -63.7578       63.7578       191.708       255.466    
  37  0.512243     -0.668956      -38.6989       38.6989       191.801       230.499    
  38  0.323240      -1.12936      -65.3332       65.3332       197.273       262.606    
  39  0.667455     -0.404284      -23.3877       23.3877       192.832       216.220    
  40  0.460037     -0.776449      -44.9173       44.9173       189.277       234.195    
  41  0.227415      -1.48098      -85.6740       85.6740       192.832       278.506    
  42  0.636494     -0.451780      -26.1353       26.1353       191.343       217.479    
  43  0.432078     -0.839149      -48.5445       48.5445       208.079       256.624    
  44  0.609015     -0.495913      -28.6884       28.6884       211.341       240.030    
  45  0.427755     -0.849205      -49.1262       49.1262       194.118       243.244    
  46  0.496712     -0.699745      -40.4801       40.4801       196.763       237.243    
  47  0.295308      -1.21974      -70.5614       70.5614       204.512       275.074    
  48  0.928979     -0.736692E-01  -4.26174       4.26174       251.516       255.778    
  49  0.245696E-01  -3.70625      -214.405       214.405       229.312       443.717    
  50  0.833617E-01  -2.48457      -143.731       143.731       194.280       338.012    
  51  0.499690     -0.693767      -40.1342       40.1342       191.350       231.484    
  52  0.320552      -1.13771      -65.8162       65.8162       189.576       255.392    
  53  0.151030E-01  -4.19286      -242.556       242.556       193.388       435.944    
  54  0.551054     -0.595922      -34.4739       34.4739       202.792       237.266    
  55  0.786630     -0.239997      -13.8837       13.8837       192.832       206.716    
  56  0.793760E-01  -2.53356      -146.566       146.566       192.832       339.398    
  57  0.456771     -0.783574      -45.3295       45.3295       191.935       237.264    
  58  0.613263     -0.488962      -28.2863       28.2863       215.979       244.265    
  59  0.407581     -0.897515      -51.9210       51.9210       192.832       244.753    
  60  0.214329      -1.54024      -89.1025       89.1025       192.832       281.935    
  61  0.543052     -0.610551      -35.3202       35.3202       185.450       220.770    
  62  0.861407     -0.149188      -8.63048       8.63048       258.538       267.168    
  63  0.727563     -0.318055      -18.3994       18.3994       191.913       210.313    
  64  0.954867     -0.461830E-01  -2.67167       2.67167       192.832       195.504    
  65  0.209413      -1.56345      -90.4449       90.4449       190.223       280.668    
  66  0.218233E-02  -6.12736      -354.466       354.466       192.832       547.298    
  67  0.990675     -0.936839E-02 -0.541959      0.541959       212.657       213.199    
  68  0.874543     -0.134054      -7.75497       7.75497       189.841       197.596    
  69  0.276161      -1.28677      -74.4394       74.4394       191.883       266.322    
  70  0.319398      -1.14132      -66.0248       66.0248       194.812       260.837    
  71  0.160691      -1.82827      -105.765       105.765       190.154       295.919    
  72  0.612149     -0.490779      -28.3914       28.3914       190.048       218.439    
loop,thermsimp(1:2)       10   28.4238       7.57048    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91        191.52          0.84          1.12         25.13          0.05          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     92        195.14          0.84          1.11         25.35          0.08          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       10
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       11
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       91     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -59.6220       59.6220       191.114       250.736    
   2  0.318207      -1.14505      -66.2411       66.2411       192.832       259.073    
   3  0.410972E-01  -3.19181      -184.646       184.646       195.490       380.136    
   4  0.217948      -1.52350      -88.1338       88.1338       189.841       277.975    
   5  0.460755     -0.774888      -44.8270       44.8270       192.440       237.267    
   6  0.694214     -0.364975      -21.1137       21.1137       192.249       213.363    
   7  0.237764      -1.43648      -83.0997       83.0997       189.245       272.345    
   8  0.635477     -0.453379      -26.2278       26.2278       193.370       219.598    
   9  0.882831E-01  -2.42721      -140.413       140.413       193.212       333.625    
  10  0.889613     -0.116969      -6.76661       6.76661       192.299       199.066    
  11  0.236395      -1.44225      -83.4338       83.4338       192.832       276.266    
  12  0.785560     -0.241359      -13.9625       13.9625       187.489       201.451    
  13  0.253594      -1.37202      -79.3711       79.3711       192.832       272.203    
  14  0.767743     -0.264300      -15.2897       15.2897       191.913       207.203    
  15  0.425111     -0.855405      -49.4849       49.4849       212.657       262.142    
  16  0.334680E-01  -3.39717      -196.525       196.525       196.114       392.639    
  17  0.737903     -0.303943      -17.5830       17.5830       192.655       210.238    
  18  0.530906     -0.633170      -36.6287       36.6287       192.832       229.461    
  19  0.811772     -0.208536      -12.0638       12.0638       191.343       203.407    
  20  0.781494     -0.246548      -14.2627       14.2627       192.832       207.095    
  21  0.668871     -0.402164      -23.2651       23.2651       190.048       213.313    
  22  0.609633     -0.494898      -28.6297       28.6297       191.073       219.703    
  23  0.732795E-01  -2.61347      -151.189       151.189       185.450       336.639    
  24  0.999755     -0.244962E-03 -0.141710E-01  0.141710E-01   191.670       191.684    
  25  0.556911     -0.585350      -33.8623       33.8623       199.363       233.225    
  26  0.381942     -0.962485      -55.6795       55.6795       192.845       248.525    
  27  0.230973      -1.46546      -84.7762       84.7762       192.846       277.622    
  28  0.791084     -0.234351      -13.5572       13.5572       193.133       206.690    
  29  0.122039      -2.10341      -121.682       121.682       193.483       315.165    
  30  0.411383     -0.888231      -51.3839       51.3839       191.801       243.184    
  31  0.753656     -0.282819      -16.3610       16.3610       189.745       206.106    
  32  0.846821     -0.166266      -9.61845       9.61845       191.350       200.968    
  33  0.577745     -0.548622      -31.7376       31.7376       185.359       217.097    
  34  0.859903     -0.150936      -8.73159       8.73159       189.277       198.009    
  35  0.915816     -0.879395E-01  -5.08727       5.08727       193.513       198.601    
  36  0.220499      -1.51186      -87.4607       87.4607       192.049       279.510    
  37  0.539962     -0.616256      -35.6502       35.6502       196.763       232.413    
  38  0.810725     -0.209827      -12.1384       12.1384       191.935       204.073    
  39  0.901567     -0.103621      -5.99443       5.99443       202.792       208.786    
  40  0.196148      -1.62888      -94.2305       94.2305       211.341       305.572    
  41  0.413437     -0.883250      -51.0957       51.0957       197.741       248.837    
  42  0.192892      -1.64562      -95.1988       95.1988       195.694       290.893    
  43  0.194290      -1.63840      -94.7811       94.7811       194.118       288.899    
  44  0.988313     -0.117563E-01 -0.680099      0.680099       215.979       216.659    
  45  0.917980     -0.855792E-01  -4.95073       4.95073       192.832       197.783    
  46  0.136083      -1.99449      -115.381       115.381       189.576       304.957    
  47  0.847126     -0.165905      -9.59758       9.59758       191.708       201.306    
  48  0.513003     -0.667474      -38.6131       38.6131       251.516       290.129    
  49  0.562161     -0.575967      -33.3195       33.3195       208.079       241.399    
  50  0.926079     -0.767957E-01  -4.44261       4.44261       191.810       196.252    
  51  0.890313     -0.116182      -6.72109       6.72109       194.812       201.533    
  52  0.857665     -0.153542      -8.88233       8.88233       199.085       207.968    
  53  0.599877     -0.511031      -29.5630       29.5630       197.273       226.836    
  54  0.835330     -0.179929      -10.4088       10.4088       191.883       202.291    
  55  0.323336      -1.12906      -65.3160       65.3160       258.538       323.854    
  56  0.305042      -1.18731      -68.6853       68.6853       192.131       260.816    
  57  0.980883     -0.193016E-01  -1.11659       1.11659       204.512       205.629    
  58  0.129682      -2.04267      -118.168       118.168       192.832       311.000    
  59  0.738352     -0.303335      -17.5478       17.5478       190.223       207.771    
  60  0.383117     -0.959416      -55.5019       55.5019       192.832       248.334    
  61  0.524900     -0.644547      -37.2869       37.2869       191.786       229.073    
  62  0.594829     -0.519481      -30.0518       30.0518       190.154       220.206    
  63  0.596925     -0.515963      -29.8483       29.8483       192.832       222.681    
  64  0.462523     -0.771060      -44.6056       44.6056       192.832       237.438    
  65  0.837977     -0.176764      -10.2258       10.2258       194.280       204.506    
  66  0.380204     -0.967046      -55.9433       55.9433       192.832       248.776    
  67  0.135974E-01  -4.29788      -248.631       248.631       190.707       439.338    
  68  0.816466     -0.202771      -11.7302       11.7302       186.433       198.163    
  69  0.877970     -0.130143      -7.52871       7.52871       193.388       200.917    
  70  0.468378     -0.758480      -43.8779       43.8779       229.312       273.189    
  71  0.238817E-01  -3.73464      -216.048       216.048       199.721       415.769    
  72  0.517025     -0.659665      -38.1614       38.1614       191.517       229.679    
loop,thermsimp(1:2)       11   59.6220       66.2411    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93        192.76          0.84          1.11         25.42          0.07          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       11
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       12
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       92     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -149.096       149.096       191.670       340.766    
   2  0.804470     -0.217571      -12.5864       12.5864       191.810       204.396    
   3  0.984017     -0.161120E-01 -0.932074      0.932074       192.832       193.764    
   4  0.587639     -0.531643      -30.7554       30.7554       189.277       220.033    
   5  0.523810     -0.646626      -37.4071       37.4071       186.433       223.840    
   6  0.930607     -0.719181E-01  -4.16044       4.16044       193.513       197.674    
   7  0.360114E-01  -3.32392      -192.288       192.288       192.299       384.587    
   8  0.963815     -0.368556E-01  -2.13208       2.13208       193.388       195.520    
   9  0.201264E-01  -3.90572      -225.945       225.945       191.350       417.295    
  10  0.954897     -0.461522E-01  -2.66989       2.66989       191.708       194.378    
  11  0.374160     -0.983071      -56.8704       56.8704       187.489       244.359    
  12  0.174967      -1.74316      -100.841       100.841       194.812       295.653    
  13  0.381618     -0.963335      -55.7286       55.7286       191.883       247.611    
  14  0.191097      -1.65498      -95.7399       95.7399       191.343       287.083    
  15  0.425287     -0.854991      -49.4610       49.4610       191.935       241.396    
  16  0.426180     -0.852893      -49.3396       49.3396       194.280       243.620    
  17  0.615671     -0.485042      -28.0595       28.0595       204.512       232.572    
  18  0.787264     -0.239192      -13.8372       13.8372       189.745       203.582    
  19  0.812636     -0.207472      -12.0022       12.0022       193.133       205.135    
  20  0.917241E-01  -2.38897      -138.201       138.201       192.832       331.033    
  21  0.671310     -0.398525      -23.0545       23.0545       191.913       214.968    
  22  0.548174     -0.601162      -34.7770       34.7770       190.223       225.000    
  23  0.134851      -2.00359      -115.907       115.907       199.085       314.992    
  24  0.373236     -0.985545      -57.0135       57.0135       202.792       259.805    
  25  0.578774     -0.546843      -31.6347       31.6347       192.655       224.290    
  26  0.910021     -0.942872E-01  -5.45448       5.45448       190.048       195.502    
  27  0.192323      -1.64858      -95.3698       95.3698       192.249       287.619    
  28  0.366342      -1.00419      -58.0920       58.0920       215.979       274.071    
  29  0.686994     -0.375430      -21.7185       21.7185       185.359       207.078    
  30  0.486551     -0.720414      -41.6758       41.6758       193.370       235.046    
  31  0.256801      -1.35945      -78.6440       78.6440       191.073       269.717    
  32  0.284977      -1.25535      -72.6215       72.6215       190.154       262.776    
  33  0.903072     -0.101953      -5.89792       5.89792       192.832       198.730    
  34  0.226450      -1.48523      -85.9201       85.9201       197.273       283.193    
  35  0.446078     -0.807261      -46.6998       46.6998       191.786       238.486    
  36  0.152634      -1.87971      -108.741       108.741       192.832       301.573    
  37  0.511955     -0.669518      -38.7314       38.7314       191.517       230.249    
  38  0.513138     -0.667210      -38.5979       38.5979       196.763       235.361    
  39  0.637309     -0.450501      -26.0613       26.0613       199.363       225.424    
  40  0.861477     -0.149107      -8.62579       8.62579       192.440       201.066    
  41  0.817364     -0.201671      -11.6666       11.6666       192.832       204.499    
  42  0.793820     -0.230898      -13.3574       13.3574       208.079       221.437    
  43  0.253309      -1.37315      -79.4361       79.4361       191.801       271.237    
  44  0.702532     -0.353065      -20.4247       20.4247       192.832       213.257    
  45  0.822324     -0.195620      -11.3166       11.3166       192.845       204.162    
  46  0.720485     -0.327831      -18.9649       18.9649       192.832       211.797    
  47  0.881589     -0.126029      -7.29076       7.29076       197.741       205.032    
  48  0.584479     -0.537035      -31.0673       31.0673       191.114       222.181    
  49  0.697197     -0.360688      -20.8657       20.8657       192.832       213.698    
  50  0.320931      -1.13653      -65.7479       65.7479       192.131       257.879    
  51  0.780071     -0.248371      -14.3682       14.3682       212.657       227.025    
  52  0.318322E-01  -3.44728      -199.424       199.424       192.832       392.256    
  53  0.693387     -0.366167      -21.1826       21.1826       189.245       210.428    
  54  0.332128      -1.10223      -63.7639       63.7639       229.312       293.075    
  55  0.891883E-01  -2.41701      -139.823       139.823       192.832       332.655    
  56  0.960735     -0.400567E-01  -2.31727       2.31727       192.846       195.163    
  57  0.726634     -0.319332      -18.4733       18.4733       189.841       208.314    
  58  0.867850     -0.141737      -8.19943       8.19943       192.049       200.249    
  59  0.960075     -0.407444E-01  -2.35705       2.35705       194.118       196.475    
  60  0.303374E-01  -3.49537      -202.206       202.206       251.516       453.722    
  61  0.159557      -1.83535      -106.175       106.175       195.694       301.869    
  62  0.487506     -0.718453      -41.5623       41.5623       189.576       231.138    
  63  0.978612E-01  -2.32420      -134.455       134.455       211.341       345.796    
  64  0.405010     -0.903843      -52.2871       52.2871       192.832       245.119    
  65  0.199088      -1.61401      -93.3698       93.3698       193.483       286.853    
  66  0.621424     -0.475741      -27.5215       27.5215       258.538       286.059    
  67  0.630612     -0.461065      -26.6725       26.6725       193.212       219.884    
  68  0.842429     -0.171466      -9.91926       9.91926       185.450       195.369    
  69  0.887493     -0.119355      -6.90466       6.90466       195.490       202.395    
  70  0.813538     -0.206363      -11.9380       11.9380       196.114       208.053    
  71  0.901945     -0.103202      -5.97021       5.97021       199.721       205.691    
  72  0.789044E-01  -2.53952      -146.910       146.910       192.765       339.675    
loop,thermsimp(1:2)       12   149.096       12.5864    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94        239.83          0.84          1.10         25.10          0.08          0.05         27.17
Just calling func    0   0         27.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    239.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       12
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       13
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       93     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -7.89455       7.89455       192.832       200.727    
   2  0.311340      -1.16687      -67.5031       67.5031       191.708       259.211    
   3  0.293828      -1.22476      -70.8520       70.8520       192.846       263.698    
   4  0.586668     -0.533296      -30.8510       30.8510       185.450       216.301    
   5  0.360311      -1.02079      -59.0523       59.0523       190.048       249.100    
   6  0.315643      -1.15314      -66.7089       66.7089       193.388       260.097    
   7  0.481464     -0.730923      -42.2837       42.2837       194.118       236.402    
   8  0.720279     -0.328116      -18.9814       18.9814       193.513       212.495    
   9  0.551471     -0.595166      -34.4302       34.4302       192.832       227.262    
  10  0.524434     -0.645435      -37.3382       37.3382       192.049       229.387    
  11  0.781600     -0.246412      -14.2549       14.2549       192.440       206.695    
  12  0.353648      -1.03945      -60.1320       60.1320       195.490       255.622    
  13  0.451044     -0.796190      -46.0594       46.0594       189.745       235.804    
  14  0.325353      -1.12284      -64.9562       64.9562       192.845       257.801    
  15  0.312157      -1.16425      -67.3514       67.3514       191.810       259.161    
  16  0.432418     -0.838362      -48.4990       48.4990       192.832       241.331    
  17  0.296543      -1.21556      -70.3199       70.3199       197.741       268.061    
  18  0.705416     -0.348967      -20.1877       20.1877       193.133       213.321    
  19  0.146505      -1.92069      -111.111       111.111       199.721       310.832    
  20  0.471608     -0.751607      -43.4802       43.4802       185.359       228.840    
  21  0.633095     -0.457134      -26.4451       26.4451       196.114       222.560    
  22  0.754855     -0.281230      -16.2691       16.2691       189.841       206.110    
  23  0.444501E-01  -3.11339      -180.109       180.109       189.245       369.354    
  24  0.160973      -1.82652      -105.663       105.663       192.832       298.496    
  25  0.943694     -0.579536E-01  -3.35260       3.35260       192.832       196.185    
  26  0.187304      -1.67502      -96.8997       96.8997       192.832       289.732    
  27  0.840922     -0.173257      -10.0228       10.0228       191.913       201.936    
  28  0.888648     -0.118054      -6.82938       6.82938       193.212       200.041    
  29  0.920614E-01  -2.38530      -137.989       137.989       189.277       327.266    
  30  0.906493     -0.981722E-01  -5.67923       5.67923       208.079       213.759    
  31  0.221761      -1.50616      -87.1307       87.1307       191.114       278.244    
  32  0.248725      -1.39141      -80.4925       80.4925       186.433       266.926    
  33  0.315928      -1.15224      -66.6569       66.6569       192.655       259.312    
  34  0.949967     -0.513283E-01  -2.96933       2.96933       190.223       193.193    
  35  0.802748     -0.219715      -12.7104       12.7104       199.363       212.073    
  36  0.558987     -0.581628      -33.6470       33.6470       212.657       246.304    
  37  0.638133     -0.449209      -25.9866       25.9866       191.517       217.504    
  38  0.637852     -0.449648      -26.0120       26.0120       189.576       215.588    
  39  0.382908     -0.959961      -55.5334       55.5334       204.512       260.046    
  40  0.982834     -0.173149E-01  -1.00166       1.00166       193.370       194.372    
  41  0.497022     -0.699120      -40.4439       40.4439       196.763       237.207    
  42  0.263620      -1.33325      -77.1279       77.1279       191.786       268.914    
  43  0.296939      -1.21423      -70.2428       70.2428       191.935       262.178    
  44  0.784161     -0.243141      -14.0656       14.0656       194.280       208.346    
  45  0.545321     -0.606380      -35.0789       35.0789       187.489       222.568    
  46  0.770080     -0.261260      -15.1138       15.1138       192.832       207.946    
  47  0.358755      -1.02511      -59.3026       59.3026       191.883       251.185    
  48  0.325126      -1.12354      -64.9966       64.9966       192.131       257.128    
  49  0.599396     -0.511832      -29.6093       29.6093       202.792       232.401    
  50  0.323708      -1.12791      -65.2495       65.2495       190.154       255.404    
  51  0.329142      -1.11127      -64.2864       64.2864       191.073       255.360    
  52  0.685661     -0.377371      -21.8308       21.8308       191.801       213.631    
  53  0.360361      -1.02065      -59.0442       59.0442       215.979       275.023    
  54  0.665281     -0.407545      -23.5764       23.5764       197.273       220.850    
  55  0.983321     -0.168196E-01 -0.973010      0.973010       258.538       259.511    
  56  0.644247     -0.439672      -25.4349       25.4349       193.483       218.918    
  57  0.735645     -0.307008      -17.7603       17.7603       191.343       209.104    
  58  0.680276     -0.385257      -22.2870       22.2870       192.249       214.536    
  59  0.864073     -0.146098      -8.45172       8.45172       229.312       237.763    
  60  0.788785     -0.237262      -13.7255       13.7255       194.812       208.537    
  61  0.429383     -0.845405      -48.9064       48.9064       192.832       241.739    
  62  0.798857     -0.224573      -12.9915       12.9915       195.694       208.686    
  63  0.946983     -0.544737E-01  -3.15129       3.15129       199.085       202.237    
  64  0.229664      -1.47114      -85.1048       85.1048       192.832       277.937    
  65  0.655912     -0.421729      -24.3969       24.3969       192.832       217.229    
  66  0.236982      -1.43977      -83.2903       83.2903       192.765       276.055    
  67  0.588628     -0.529960      -30.6581       30.6581       191.670       222.328    
  68  0.430113     -0.843707      -48.8082       48.8082       211.341       260.150    
  69  0.384455     -0.955929      -55.3002       55.3002       192.299       247.599    
  70  0.162044E-01  -4.12247      -238.484       238.484       192.832       431.316    
  71  0.769503     -0.262010      -15.1572       15.1572       191.350       206.507    
  72  0.220892      -1.51008      -87.3577       87.3577       239.831       327.189    
loop,thermsimp(1:2)       13   7.89455       67.5031    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95        189.77          0.84          1.11         25.12          0.08          0.05         27.19
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     96        192.19          0.84          1.11         25.10          0.10          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       13
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       14
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       95     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -61.6319       61.6319       190.223       251.855    
   2  0.267720      -1.31781      -76.2352       76.2352       193.370       269.606    
   3  0.279825      -1.27359      -73.6769       73.6769       192.832       266.509    
   4  0.281095      -1.26906      -73.4149       73.4149       193.212       266.627    
   5  0.245867      -1.40297      -81.1612       81.1612       192.832       273.993    
   6  0.914239     -0.896636E-01  -5.18701       5.18701       191.913       197.100    
   7  0.180116      -1.71415      -99.1633       99.1633       199.085       298.249    
   8  0.567917     -0.565780      -32.7302       32.7302       189.841       222.571    
   9  0.431941     -0.839465      -48.5628       48.5628       191.350       239.913    
  10  0.877920     -0.130199      -7.53200       7.53200       192.440       199.972    
  11  0.280355      -1.27170      -73.5673       73.5673       192.832       266.400    
  12  0.486947     -0.719601      -41.6287       41.6287       194.280       235.909    
  13  0.216546      -1.52995      -88.5072       88.5072       194.812       283.319    
  14  0.483718E-02  -5.33142      -308.421       308.421       195.694       504.115    
  15  0.785152E-03  -7.14963      -413.604       413.604       191.343       604.947    
  16  0.300781      -1.20137      -69.4990       69.4990       199.363       268.862    
  17  0.869691     -0.139618      -8.07685       8.07685       193.513       201.590    
  18  0.694261E-01  -2.66749      -154.314       154.314       193.133       347.447    
  19  0.635475     -0.453382      -26.2280       26.2280       191.801       218.029    
  20  0.894977     -0.110958      -6.41886       6.41886       208.079       214.498    
  21  0.442267     -0.815841      -47.1961       47.1961       192.249       239.446    
  22  0.283362      -1.26103      -72.9501       72.9501       189.576       262.526    
  23  0.518611     -0.656601      -37.9842       37.9842       185.450       223.434    
  24  0.858122E-01  -2.45559      -142.055       142.055       192.832       334.888    
  25  0.461153     -0.774026      -44.7772       44.7772       191.517       236.294    
  26  0.180026      -1.71465      -99.1923       99.1923       193.483       292.675    
  27  0.446938E-01  -3.10792      -179.792       179.792       197.273       377.065    
  28  0.152352      -1.88156      -108.848       108.848       191.670       300.518    
  29  0.163937E-01  -4.11086      -237.812       237.812       196.114       433.926    
  30  0.721347     -0.326635      -18.8957       18.8957       187.489       206.385    
  31  0.813323     -0.206626      -11.9533       11.9533       192.832       204.786    
  32  0.569343     -0.563273      -32.5851       32.5851       185.359       217.945    
  33  0.275899      -1.28772      -74.4942       74.4942       192.049       266.543    
  34  0.933187     -0.691492E-01  -4.00026       4.00026       202.792       206.792    
  35  0.716570     -0.333279      -19.2801       19.2801       189.745       209.025    
  36  0.405413     -0.902848      -52.2295       52.2295       194.118       246.348    
  37  0.907528     -0.970314E-01  -5.61324       5.61324       196.763       202.376    
  38  0.554651     -0.589416      -34.0975       34.0975       229.312       263.409    
  39  0.419962     -0.867592      -50.1899       50.1899       192.832       243.022    
  40  0.824173     -0.193375      -11.1867       11.1867       192.832       204.019    
  41  0.865647     -0.144278      -8.34646       8.34646       212.657       221.003    
  42  0.300944      -1.20083      -69.4678       69.4678       192.299       261.767    
  43  0.339688      -1.07973      -62.4620       62.4620       190.048       252.510    
  44  0.217032      -1.52771      -88.3777       88.3777       191.883       280.260    
  45  0.792618E-01  -2.53500      -146.649       146.649       191.073       337.722    
  46  0.997677     -0.232582E-02 -0.134548      0.134548       190.154       190.289    
  47  0.174239      -1.74733      -101.082       101.082       195.490       296.572    
  48  0.834084     -0.181422      -10.4952       10.4952       192.131       202.626    
  49  0.324404      -1.12577      -65.1252       65.1252       192.845       257.971    
  50  0.927598     -0.751564E-01  -4.34778       4.34778       191.810       196.158    
  51  0.981384     -0.187911E-01  -1.08706       1.08706       191.708       192.795    
  52  0.849105     -0.163572      -9.46260       9.46260       192.655       202.118    
  53  0.148698      -1.90584      -110.252       110.252       258.538       368.790    
  54  0.389930     -0.941789      -54.4822       54.4822       204.512       258.995    
  55  0.183568      -1.69517      -98.0651       98.0651       193.388       291.453    
  56  0.661220     -0.413669      -23.9306       23.9306       211.341       235.272    
  57  0.242183      -1.41806      -82.0343       82.0343       191.935       273.969    
  58  0.182262      -1.70231      -98.4782       98.4782       192.846       291.324    
  59  0.299801      -1.20464      -69.6879       69.6879       186.433       256.121    
  60  0.950117     -0.511698E-01  -2.96016       2.96016       197.741       200.701    
  61  0.184593      -1.68960      -97.7430       97.7430       191.786       289.529    
  62  0.730970     -0.313382      -18.1291       18.1291       215.979       234.108    
  63  0.753232E-01  -2.58597      -149.597       149.597       192.765       342.362    
  64  0.501460     -0.690231      -39.9296       39.9296       192.832       232.762    
  65  0.513248E-01  -2.96958      -171.789       171.789       191.114       362.903    
  66  0.931416     -0.710492E-01  -4.11018       4.11018       192.832       196.943    
  67  0.637420E-01  -2.75291      -159.255       159.255       192.832       352.087    
  68  0.322234E-01  -3.43506      -198.717       198.717       199.721       398.438    
  69  0.791156     -0.234260      -13.5519       13.5519       239.831       253.383    
  70  0.606746     -0.499645      -28.9043       28.9043       189.277       218.182    
  71  0.115774      -2.15611      -124.731       124.731       189.245       313.976    
  72  0.574132     -0.554896      -32.1006       32.1006       189.768       221.869    
loop,thermsimp(1:2)       14   61.6319       76.2352    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97        191.45          0.84          1.11         25.06          0.18          0.05         27.23
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98        199.04          0.84          1.11         25.13          0.05          0.05         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       14
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       15
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       97     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -85.0332       85.0332       190.154       275.188    
   2  0.322822      -1.13066      -65.4081       65.4081       191.708       257.116    
   3  0.327586      -1.11601      -64.5606       64.5606       191.810       256.370    
   4  0.799078     -0.224296      -12.9755       12.9755       192.832       205.808    
   5  0.698072     -0.359433      -20.7931       20.7931       191.913       212.707    
   6  0.733871     -0.309421      -17.8999       17.8999       192.440       210.340    
   7  0.823872     -0.193740      -11.2078       11.2078       197.741       208.949    
   8  0.800045     -0.223087      -12.9055       12.9055       193.513       206.419    
   9  0.162010      -1.82010      -105.292       105.292       192.655       297.947    
  10  0.113138      -2.17915      -126.063       126.063       196.763       322.826    
  11  0.973966     -0.263784E-01  -1.52598       1.52598       192.131       193.657    
  12  0.998107     -0.189521E-02 -0.109637      0.109637       192.832       192.942    
  13  0.631351     -0.459893      -26.6047       26.6047       192.832       219.437    
  14  0.698229     -0.359208      -20.7801       20.7801       187.489       208.269    
  15  0.359252      -1.02373      -59.2225       59.2225       202.792       262.014    
  16  0.936266     -0.658562E-01  -3.80976       3.80976       189.745       193.554    
  17  0.843107     -0.170662      -9.87273       9.87273       208.079       217.952    
  18  0.181284      -1.70769      -98.7895       98.7895       185.359       284.149    
  19  0.354246      -1.03777      -60.0344       60.0344       191.801       251.835    
  20  0.981540     -0.186324E-01  -1.07788       1.07788       189.277       190.355    
  21  0.582284E-01  -2.84338      -164.489       164.489       212.657       377.146    
  22  0.935088     -0.671143E-01  -3.88254       3.88254       189.768       193.651    
  23  0.682144     -0.382515      -22.1284       22.1284       189.841       211.969    
  24  0.441439     -0.817715      -47.3046       47.3046       185.450       232.755    
  25  0.325829      -1.12138      -64.8716       64.8716       192.832       257.704    
  26  0.956968E-01  -2.34657      -135.748       135.748       215.979       351.728    
  27  0.465124E-01  -3.06804      -177.485       177.485       211.341       388.826    
  28  0.645503     -0.437726      -25.3223       25.3223       194.280       219.603    
  29  0.184751      -1.68875      -97.6934       97.6934       191.517       289.211    
  30  0.676303     -0.391115      -22.6259       22.6259       192.249       214.875    
  31  0.408248     -0.895880      -51.8264       51.8264       191.350       243.176    
  32  0.215511      -1.53474      -88.7845       88.7845       192.832       281.617    
  33  0.762109     -0.271666      -15.7158       15.7158       194.118       209.834    
  34  0.445022     -0.809632      -46.8369       46.8369       190.223       237.060    
  35  0.667113     -0.404797      -23.4174       23.4174       190.048       213.465    
  36  0.995785     -0.422376E-02 -0.244343      0.244343       239.831       240.075    
  37  0.278840      -1.27712      -73.8809       73.8809       186.433       260.314    
  38  0.624255     -0.471196      -27.2585       27.2585       192.845       220.104    
  39  0.368212     -0.999097      -57.7975       57.7975       204.512       262.310    
  40  0.330266      -1.10786      -64.0892       64.0892       192.299       256.388    
  41  0.969155     -0.313304E-01  -1.81246       1.81246       189.576       191.389    
  42  0.686816     -0.375688      -21.7334       21.7334       229.312       251.045    
  43  0.201053      -1.60419      -92.8016       92.8016       192.832       285.634    
  44  0.481166     -0.731544      -42.3196       42.3196       192.832       235.152    
  45  0.992829     -0.719725E-02 -0.416359      0.416359       192.049       192.466    
  46  0.665697     -0.406921      -23.5402       23.5402       193.212       216.752    
  47  0.991934E-02  -4.61327      -266.876       266.876       199.363       466.239    
  48  0.211644      -1.55285      -89.8319       89.8319       193.370       283.202    
  49  0.908243E-01  -2.39883      -138.772       138.772       191.935       330.706    
  50  0.643762     -0.440426      -25.4785       25.4785       192.832       218.311    
  51  0.568794E-01  -2.86682      -165.845       165.845       191.883       357.727    
  52  0.159466      -1.83592      -106.208       106.208       194.812       301.019    
  53  0.918851     -0.846310E-01  -4.89588       4.89588       191.786       196.682    
  54  0.865178     -0.144820      -8.37779       8.37779       192.846       201.224    
  55  0.826009     -0.191150      -11.0580       11.0580       193.388       204.446    
  56  0.665816E-02  -5.01191      -289.938       289.938       193.483       483.421    
  57  0.998155     -0.184716E-02 -0.106857      0.106857       195.490       195.597    
  58  0.875957E-01  -2.43502      -140.865       140.865       199.085       339.951    
  59  0.546955     -0.603388      -34.9058       34.9058       191.670       226.576    
  60  0.953933     -0.471617E-01  -2.72829       2.72829       189.245       191.974    
  61  0.131488      -2.02884      -117.368       117.368       192.832       310.200    
  62  0.415197     -0.879003      -50.8501       50.8501       191.073       241.923    
  63  0.543800E-02  -5.21434      -301.648       301.648       192.765       494.413    
  64  0.821907     -0.196128      -11.3459       11.3459       193.133       204.479    
  65  0.590302     -0.527122      -30.4938       30.4938       192.832       223.326    
  66  0.380117     -0.967276      -55.9566       55.9566       191.114       247.070    
  67  0.640684     -0.445218      -25.7557       25.7557       258.538       284.293    
  68  0.268290      -1.31569      -76.1120       76.1120       197.273       273.385    
  69  0.625870     -0.468612      -27.1091       27.1091       199.721       226.830    
  70  0.937362     -0.646862E-01  -3.74208       3.74208       196.114       199.857    
  71  0.246375      -1.40090      -81.0416       81.0416       195.694       276.736    
  72  0.163534      -1.81073      -104.750       104.750       191.452       296.202    
loop,thermsimp(1:2)       15   85.0332       65.4081    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99        189.41          0.84          1.11         25.23          0.08          0.05         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    100        190.10          0.84          1.11         25.36          0.03          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       15
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       16
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:       99     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -33.7696       33.7696       189.277       223.047    
   2  0.850944     -0.161409      -9.33746       9.33746       189.576       198.914    
   3  0.343999      -1.06712      -61.7323       61.7323       189.245       250.978    
   4  0.481777E-02  -5.33544      -308.654       308.654       192.049       500.703    
   5  0.146991      -1.91738      -110.920       110.920       192.832       303.752    
   6  0.545677     -0.605728      -35.0412       35.0412       189.745       224.786    
   7  0.761940     -0.271888      -15.7286       15.7286       189.768       205.497    
   8  0.944477     -0.571238E-01  -3.30459       3.30459       192.131       195.436    
   9  0.965249     -0.353688E-01  -2.04607       2.04607       195.490       197.536    
  10  0.634176     -0.455429      -26.3465       26.3465       191.786       218.133    
  11  0.793205     -0.231673      -13.4022       13.4022       196.114       209.517    
  12  0.743605     -0.296246      -17.1377       17.1377       192.846       209.984    
  13  0.983069E-01  -2.31966      -134.192       134.192       193.388       327.580    
  14  0.618437     -0.480560      -27.8002       27.8002       193.133       220.934    
  15  0.429182     -0.845875      -48.9336       48.9336       192.832       241.766    
  16  0.771528     -0.259382      -15.0052       15.0052       193.513       208.519    
  17  0.218286      -1.52195      -88.0442       88.0442       187.489       275.533    
  18  0.556408     -0.586254      -33.9146       33.9146       197.741       231.656    
  19  0.526292     -0.641899      -37.1337       37.1337       194.118       231.252    
  20  0.665532     -0.407169      -23.5546       23.5546       192.440       215.995    
  21  0.261756      -1.34034      -77.5385       77.5385       189.841       267.379    
  22  0.975508     -0.247971E-01  -1.43450       1.43450       191.913       193.348    
  23  0.257613      -1.35630      -78.4613       78.4613       190.048       268.509    
  24  0.981555E-01  -2.32120      -134.281       134.281       192.249       326.530    
  25  0.955054     -0.459870E-01  -2.66033       2.66033       193.212       195.872    
  26  0.887906     -0.118890      -6.87774       6.87774       208.079       214.957    
  27  0.407043     -0.898837      -51.9975       51.9975       192.832       244.830    
  28  0.876870     -0.131396      -7.60123       7.60123       192.832       200.434    
  29  0.957152     -0.437935E-01  -2.53344       2.53344       194.280       196.814    
  30  0.827730     -0.189068      -10.9375       10.9375       192.845       203.783    
  31  0.289027      -1.24124      -71.8051       71.8051       192.832       264.637    
  32  0.125230      -2.07760      -120.189       120.189       191.670       311.859    
  33  0.242443      -1.41699      -81.9724       81.9724       199.721       281.693    
  34  0.654103     -0.424490      -24.5566       24.5566       185.450       210.007    
  35  0.811871     -0.208414      -12.0567       12.0567       192.832       204.889    
  36  0.145201E-01  -4.23222      -244.833       244.833       190.223       435.056    
  37  0.344449      -1.06581      -61.6567       61.6567       239.831       301.488    
  38  0.265532      -1.32602      -76.7098       76.7098       191.073       267.783    
  39  0.811851     -0.208438      -12.0581       12.0581       191.350       203.408    
  40  0.983290E-01  -2.31944      -134.179       134.179       191.114       325.292    
  41  0.347314      -1.05753      -61.1776       61.1776       229.312       290.489    
  42  0.923773     -0.792888E-01  -4.58683       4.58683       191.801       196.387    
  43  0.690375     -0.370520      -21.4345       21.4345       191.810       213.244    
  44  0.227523      -1.48051      -85.6468       85.6468       192.299       277.946    
  45  0.652275     -0.427289      -24.7185       24.7185       191.708       216.427    
  46  0.669640     -0.401014      -23.1986       23.1986       192.832       216.030    
  47  0.288804      -1.24201      -71.8497       71.8497       186.433       258.283    
  48  0.404648     -0.904738      -52.3388       52.3388       202.792       255.131    
  49  0.371042     -0.991440      -57.3545       57.3545       204.512       261.867    
  50  0.308424      -1.17628      -68.0475       68.0475       197.273       265.321    
  51  0.911221     -0.929703E-01  -5.37831       5.37831       190.154       195.533    
  52  0.615436     -0.485425      -28.0817       28.0817       195.694       223.776    
  53  0.780328     -0.248041      -14.3491       14.3491       192.832       207.181    
  54  0.127539      -2.05933      -119.132       119.132       193.370       312.502    
  55  0.709081     -0.343786      -19.8879       19.8879       185.359       205.247    
  56  0.974925     -0.253942E-01  -1.46905       1.46905       258.538       260.007    
  57  0.834943     -0.180392      -10.4356       10.4356       192.832       203.268    
  58  0.696274     -0.362013      -20.9423       20.9423       191.517       212.460    
  59  0.623965     -0.471660      -27.2854       27.2854       191.452       218.737    
  60  0.620467     -0.477282      -27.6106       27.6106       192.655       220.266    
  61  0.983840E-01  -2.31888      -134.146       134.146       194.812       328.958    
  62  0.452904     -0.792074      -45.8213       45.8213       192.832       238.654    
  63  0.731276     -0.312965      -18.1049       18.1049       196.763       214.868    
  64  0.136630      -1.99048      -115.148       115.148       191.935       307.083    
  65  0.819737     -0.198772      -11.4989       11.4989       199.085       210.584    
  66  0.415452     -0.878387      -50.8144       50.8144       215.979       266.794    
  67  0.931580     -0.708731E-01  -4.09999       4.09999       191.883       195.983    
  68  0.763119     -0.270341      -15.6392       15.6392       212.657       228.296    
  69  0.214680      -1.53861      -89.0080       89.0080       211.341       300.349    
  70  0.548736     -0.600138      -34.7178       34.7178       199.363       234.081    
  71  0.981486     -0.186872E-01  -1.08105       1.08105       193.483       194.564    
  72  0.475333     -0.743740      -43.0251       43.0251       189.414       232.439    
loop,thermsimp(1:2)       16   33.7696       9.33746    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101        190.30          0.84          1.11         25.33          0.07          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    102        203.41          0.84          1.11         25.07          0.08          0.05         27.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    190.30       0.9459     -1.349      1.640     -102.6     0.9591    
                      0.3915      1.824     -99.70      3.643     0.3889E-01
                       2.008     -1.435      1.883      0.000     -40.00    
                      -1.960      0.000      0.000      0.000     -1.221    

                      -2.500     0.2884E+05 0.3119E+05  0.000      0.000    
                     -0.5672     -6.322     -4.350     -7.433      3.278    
                      -14.23     -2.959      1712.      0.000      3164.    

                      0.1051E+05  8519.      5139.      9412.      3027.    
                       3972.     0.1188E-01 0.1188E-01  0.000     0.1188E-01
                      0.1188E-01 0.1188E-01-0.1091E-01 0.1075E-01 0.1188E-01

                     -0.1147    -0.9802      0.000     0.1188E-01 0.1188E-01
                       0.000     0.1188E-01 0.1188E-01 0.1188E-01 0.1188E-01
                      0.1188E-01-0.2966    -0.1226    -0.9881      0.000    

                      0.3959E-01-0.1604    -0.5604    -0.5604    -0.1983    
                      0.2445      8.912      8.812     -5198.     -4.000    
                     -0.4380    -0.6012      8.892      8.812     -5198.    

                      -4.000     0.1200    -0.5682      8.912      8.812    
                      -4904.     -7.000    -0.4027    -0.7259      8.912    
                       8.812     -5198.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       16
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       17
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      101     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -17.4351       17.4351       191.913       209.349    
   2  0.527958     -0.638738      -36.9508       36.9508       193.483       230.434    
   3  0.326119      -1.12049      -64.8201       64.8201       192.131       256.951    
   4  0.647061     -0.435314      -25.1828       25.1828       190.154       215.337    
   5  0.419805     -0.867966      -50.2116       50.2116       193.212       243.423    
   6  0.218417      -1.52135      -88.0095       88.0095       191.883       279.892    
   7  0.168864      -1.77866      -102.895       102.895       191.801       294.696    
   8  0.761417     -0.272575      -15.7684       15.7684       194.280       210.049    
   9  0.383989     -0.957143      -55.3704       55.3704       195.490       250.861    
  10  0.104774      -2.25595      -130.506       130.506       189.576       320.082    
  11  0.167912      -1.78432      -103.222       103.222       192.832       296.055    
  12  0.997930     -0.207190E-02 -0.119859      0.119859       192.832       192.952    
  13  0.493294     -0.706650      -40.8795       40.8795       191.350       232.229    
  14  0.483048     -0.727639      -42.0937       42.0937       192.845       234.939    
  15  0.715967     -0.334121      -19.3288       19.3288       192.832       212.161    
  16  0.595423E-01  -2.82107      -163.198       163.198       185.359       348.557    
  17  0.636569     -0.451662      -26.1285       26.1285       189.768       215.897    
  18  0.482980     -0.727779      -42.1018       42.1018       192.832       234.934    
  19  0.500121     -0.692905      -40.0844       40.0844       193.513       233.598    
  20  0.426980     -0.851018      -49.2311       49.2311       196.114       245.346    
  21  0.546576     -0.604082      -34.9460       34.9460       192.846       227.792    
  22  0.142720      -1.94687      -112.626       112.626       185.450       298.076    
  23  0.473622     -0.747346      -43.2337       43.2337       199.085       242.319    
  24  0.892718E-01  -2.41607      -139.769       139.769       191.517       331.286    
  25  0.660659     -0.414518      -23.9797       23.9797       191.810       215.790    
  26  0.328755      -1.11244      -64.3545       64.3545       196.763       261.118    
  27  0.544150     -0.608530      -35.2033       35.2033       208.079       243.283    
  28  0.199068      -1.61411      -93.3758       93.3758       192.440       285.816    
  29  0.685070     -0.378234      -21.8807       21.8807       192.832       214.713    
  30  0.500258     -0.692632      -40.0685       40.0685       191.708       231.777    
  31  0.130607      -2.03556      -117.757       117.757       191.786       309.543    
  32  0.982013E-01  -2.32074      -134.254       134.254       191.452       325.706    
  33  0.581494E-01  -2.84474      -164.567       164.567       192.655       357.222    
  34  0.841391     -0.172699      -9.99060       9.99060       193.133       203.124    
  35  0.838937E-01  -2.47820      -143.363       143.363       189.277       332.641    
  36  0.729848     -0.314919      -18.2180       18.2180       195.694       213.912    
  37  0.748292     -0.289962      -16.7742       16.7742       189.745       206.519    
  38  0.229216      -1.47309      -85.2178       85.2178       212.657       297.874    
  39  0.710713     -0.341487      -19.7549       19.7549       194.118       213.873    
  40  0.511506     -0.670395      -38.7822       38.7822       197.741       236.523    
  41  0.106756      -2.23721      -129.422       129.422       189.414       318.836    
  42  0.583466     -0.538770      -31.1677       31.1677       199.363       230.530    
  43  0.993140E-01  -2.30947      -133.602       133.602       192.832       326.434    
  44  0.461224     -0.773871      -44.7682       44.7682       192.832       237.601    
  45  0.574465     -0.554316      -32.0670       32.0670       192.832       224.899    
  46  0.715977     -0.334107      -19.3280       19.3280       189.245       208.573    
  47  0.877584     -0.130583      -7.55418       7.55418       202.792       210.346    
  48  0.492354     -0.708558      -40.9899       40.9899       186.433       227.423    
  49  0.874926     -0.133616      -7.72967       7.72967       258.538       266.267    
  50  0.800367     -0.222685      -12.8822       12.8822       204.512       217.395    
  51  0.507308     -0.678636      -39.2589       39.2589       192.832       232.091    
  52  0.727831     -0.317686      -18.3780       18.3780       197.273       215.651    
  53  0.899777E-01  -2.40819      -139.313       139.313       215.979       355.292    
  54  0.392780     -0.934505      -54.0609       54.0609       189.841       243.902    
  55  0.585301     -0.535629      -30.9860       30.9860       191.073       222.059    
  56  0.522884     -0.648395      -37.5095       37.5095       190.048       227.557    
  57  0.559213     -0.581225      -33.6237       33.6237       187.489       221.113    
  58  0.116989      -2.14568      -124.127       124.127       192.299       316.426    
  59  0.411020     -0.889113      -51.4349       51.4349       199.721       251.156    
  60  0.484202     -0.725253      -41.9557       41.9557       229.312       271.267    
  61  0.771761     -0.259080      -14.9877       14.9877       211.341       226.329    
  62  0.908486     -0.959755E-01  -5.55215       5.55215       239.831       245.383    
  63  0.340814      -1.07642      -62.2705       62.2705       192.832       255.103    
  64  0.519873     -0.654172      -37.8436       37.8436       191.935       229.779    
  65  0.516320     -0.661029      -38.2403       38.2403       191.670       229.910    
  66  0.495555     -0.702076      -40.6149       40.6149       193.370       233.985    
  67  0.291626      -1.23228      -71.2872       71.2872       191.114       262.401    
  68  0.492590     -0.708077      -40.9620       40.9620       192.249       233.211    
  69  0.545663E-01  -2.90834      -168.247       168.247       193.388       361.634    
  70  0.200869      -1.60510      -92.8546       92.8546       194.812       287.666    
  71  0.434763     -0.832954      -48.1862       48.1862       190.223       238.409    
  72  0.241886E-01  -3.72187      -215.309       215.309       190.303       405.612    
loop,thermsimp(1:2)       17   17.4351       36.9508    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103        192.05          0.84          1.11         25.20          0.10          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104        209.25          0.84          1.11         25.06          0.16          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       17
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       18
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      103     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -55.5407       55.5407       192.832       248.373    
   2  0.293468      -1.22599      -70.9231       70.9231       193.133       264.056    
   3  0.954036     -0.470539E-01  -2.72205       2.72205       189.745       192.467    
   4  0.452934     -0.792010      -45.8175       45.8175       189.245       235.063    
   5  0.251692      -1.37955      -79.8065       79.8065       191.913       271.720    
   6  0.881081     -0.126605      -7.32409       7.32409       194.280       201.605    
   7  0.855311     -0.156290      -9.04131       9.04131       202.792       211.833    
   8  0.576474     -0.550824      -31.8650       31.8650       192.832       224.697    
   9  0.433835     -0.835090      -48.3097       48.3097       194.118       242.428    
  10  0.298626      -1.20856      -69.9151       69.9151       195.694       265.609    
  11  0.269991      -1.30937      -75.7465       75.7465       192.832       268.578    
  12  0.884826     -0.122364      -7.07872       7.07872       190.154       197.233    
  13  0.664124     -0.409287      -23.6771       23.6771       197.273       220.950    
  14  0.580836     -0.543287      -31.4290       31.4290       191.810       223.239    
  15  0.285501      -1.25351      -72.5151       72.5151       189.768       262.283    
  16  0.690757     -0.369967      -21.4025       21.4025       204.512       225.915    
  17  0.578320     -0.547628      -31.6801       31.6801       187.489       219.169    
  18  0.563230     -0.574067      -33.2096       33.2096       191.073       224.283    
  19  0.681565     -0.383363      -22.1774       22.1774       192.832       215.010    
  20  0.453362     -0.791065      -45.7628       45.7628       211.341       257.104    
  21  0.645457     -0.437797      -25.3264       25.3264       186.433       211.760    
  22  0.982222E-01  -2.32052      -134.242       134.242       190.048       324.290    
  23  0.843064     -0.170712      -9.87566       9.87566       192.846       202.722    
  24  0.505683     -0.681845      -39.4445       39.4445       191.935       231.379    
  25  0.350376      -1.04875      -60.6699       60.6699       191.670       252.340    
  26  0.367167      -1.00194      -57.9619       57.9619       193.483       251.445    
  27  0.268175      -1.31611      -76.1368       76.1368       199.363       275.500    
  28  0.989085E-01  -2.31356      -133.839       133.839       191.708       325.547    
  29  0.349392      -1.05156      -60.8325       60.8325       192.832       253.665    
  30  0.945468     -0.560755E-01  -3.24395       3.24395       191.350       194.594    
  31  0.305400      -1.18613      -68.6173       68.6173       192.249       260.867    
  32  0.942706     -0.590006E-01  -3.41317       3.41317       193.513       196.927    
  33  0.778346     -0.250584      -14.4962       14.4962       193.370       207.867    
  34  0.256449      -1.36083      -78.7234       78.7234       192.832       271.556    
  35  0.338120      -1.08436      -62.7296       62.7296       192.845       255.575    
  36  0.644609     -0.439112      -25.4025       25.4025       197.741       223.144    
  37  0.420837     -0.865509      -50.0694       50.0694       192.832       242.902    
  38  0.793406     -0.231421      -13.3876       13.3876       190.223       203.611    
  39  0.685561     -0.377517      -21.8393       21.8393       199.085       220.925    
  40  0.278740      -1.27748      -73.9017       73.9017       208.079       281.981    
  41  0.414078     -0.881700      -51.0061       51.0061       193.212       244.218    
  42  0.999720     -0.280334E-03 -0.162172E-01  0.162172E-01   189.841       189.857    
  43  0.714259     -0.336509      -19.4670       19.4670       196.114       215.581    
  44  0.713371     -0.337753      -19.5389       19.5389       239.831       259.370    
  45  0.451360     -0.795490      -46.0189       46.0189       195.490       241.509    
  46  0.887280     -0.119595      -6.91854       6.91854       199.721       206.639    
  47  0.234319      -1.45107      -83.9441       83.9441       192.832       276.776    
  48  0.277567E-01  -3.58428      -207.349       207.349       192.131       399.480    
  49  0.582411     -0.540579      -31.2723       31.2723       196.763       228.035    
  50  0.969019     -0.314707E-01  -1.82057       1.82057       191.114       192.934    
  51  0.441889     -0.816696      -47.2456       47.2456       258.538       305.783    
  52  0.150247      -1.89548      -109.653       109.653       229.312       338.964    
  53  0.901555E-01  -2.40622      -139.199       139.199       191.883       331.082    
  54  0.274120      -1.29419      -74.8685       74.8685       192.440       267.309    
  55  0.166801      -1.79095      -103.606       103.606       194.812       298.418    
  56  0.783053     -0.244555      -14.1474       14.1474       191.801       205.948    
  57  0.541655     -0.613126      -35.4691       35.4691       192.832       228.301    
  58  0.113786      -2.17344      -125.733       125.733       212.657       338.389    
  59  0.794080     -0.230571      -13.3384       13.3384       185.450       198.789    
  60  0.266758      -1.32141      -76.4433       76.4433       191.786       268.230    
  61  0.637690     -0.449903      -26.0267       26.0267       192.299       218.326    
  62  0.912681     -0.913685E-01  -5.28564       5.28564       189.414       194.700    
  63  0.303728      -1.19162      -68.9350       68.9350       189.576       258.511    
  64  0.318303      -1.14475      -66.2235       66.2235       191.452       257.675    
  65  0.255833      -1.36323      -78.8624       78.8624       192.832       271.695    
  66  0.988998     -0.110626E-01 -0.639969      0.639969       191.517       192.157    
  67  0.335641      -1.09171      -63.1552       63.1552       189.277       252.433    
  68  0.575346     -0.552784      -31.9784       31.9784       185.359       217.338    
  69  0.439298E-01  -3.12516      -180.790       180.790       215.979       396.769    
  70  0.179935      -1.71516      -99.2213       99.2213       192.655       291.876    
  71  0.939813     -0.620740E-01  -3.59096       3.59096       193.388       196.979    
  72  0.787717     -0.238616      -13.8039       13.8039       192.049       205.853    
loop,thermsimp(1:2)       18   55.5407       70.9231    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105        192.04          0.84          1.11         25.20          0.06          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106        205.11          0.84          1.11         25.14          0.04          0.05         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       18
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       19
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      105     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -60.2395       60.2395       189.841       250.080    
   2  0.270835E-01  -3.60883      -208.770       208.770       191.517       400.287    
   3  0.923755     -0.793087E-01  -4.58798       4.58798       189.745       194.333    
   4  0.535520     -0.624517      -36.1281       36.1281       191.114       227.242    
   5  0.629344     -0.463078      -26.7889       26.7889       191.350       218.139    
   6  0.572648E-01  -2.86007      -165.454       165.454       189.414       354.868    
   7  0.353113E-01  -3.34355      -193.424       193.424       193.513       386.937    
   8  0.580838     -0.543283      -31.4287       31.4287       193.388       224.817    
   9  0.370403     -0.993164      -57.4542       57.4542       190.154       247.609    
  10  0.443010     -0.814162      -47.0990       47.0990       185.450       232.549    
  11  0.188704      -1.66757      -96.4687       96.4687       194.280       290.749    
  12  0.177608      -1.72818      -99.9746       99.9746       192.846       292.821    
  13  0.694998     -0.363847      -21.0484       21.0484       190.223       211.272    
  14  0.160742      -1.82796      -105.747       105.747       192.049       297.796    
  15  0.290050      -1.23770      -71.6007       71.6007       191.801       263.401    
  16  0.441138E-01  -3.12098      -180.548       180.548       199.721       380.268    
  17  0.372461     -0.987622      -57.1337       57.1337       193.370       250.504    
  18  0.652779     -0.426517      -24.6739       24.6739       186.433       211.107    
  19  0.998108     -0.189387E-02 -0.109560      0.109560       202.792       202.901    
  20  0.741140     -0.299566      -17.3298       17.3298       192.832       210.162    
  21  0.623042     -0.473141      -27.3711       27.3711       196.114       223.486    
  22  0.504617     -0.683955      -39.5666       39.5666       185.359       224.926    
  23  0.872499     -0.136394      -7.89036       7.89036       192.299       200.190    
  24  0.142620      -1.94757      -112.666       112.666       187.489       300.155    
  25  0.580285     -0.544236      -31.4839       31.4839       199.085       230.569    
  26  0.860063E-01  -2.45334      -141.925       141.925       197.273       339.198    
  27  0.401846     -0.911687      -52.7408       52.7408       197.741       250.482    
  28  0.161242      -1.82485      -105.567       105.567       191.810       297.377    
  29  0.550753     -0.596469      -34.5056       34.5056       191.073       225.579    
  30  0.815012     -0.204553      -11.8333       11.8333       192.832       204.666    
  31  0.438663     -0.824024      -47.6695       47.6695       204.512       252.182    
  32  0.542283     -0.611968      -35.4022       35.4022       196.763       232.165    
  33  0.943132E-01  -2.36113      -136.591       136.591       192.832       329.423    
  34  0.236587      -1.44144      -83.3868       83.3868       191.935       275.322    
  35  0.283068      -1.26207      -73.0102       73.0102       189.245       262.256    
  36  0.973178     -0.271886E-01  -1.57285       1.57285       195.490       197.063    
  37  0.596723     -0.516302      -29.8679       29.8679       194.118       223.986    
  38  0.595114     -0.519003      -30.0241       30.0241       192.832       222.856    
  39  0.948736     -0.526250E-01  -3.04434       3.04434       193.212       196.256    
  40  0.216072E-01  -3.83473      -221.838       221.838       192.832       414.670    
  41  0.440213     -0.820496      -47.4655       47.4655       193.483       240.948    
  42  0.905197     -0.996023E-01  -5.76197       5.76197       191.670       197.432    
  43  0.158396      -1.84266      -106.597       106.597       189.277       295.875    
  44  0.287789      -1.24553      -72.0533       72.0533       192.832       264.886    
  45  0.238244      -1.43446      -82.9832       82.9832       192.845       275.828    
  46  0.363881      -1.01093      -58.4819       58.4819       211.341       269.823    
  47  0.828805     -0.187771      -10.8625       10.8625       191.452       202.314    
  48  0.587140     -0.532492      -30.8045       30.8045       189.576       220.381    
  49  0.141687      -1.95414      -113.046       113.046       239.831       352.877    
  50  0.879115     -0.128839      -7.45330       7.45330       192.249       199.703    
  51  0.742190     -0.298150      -17.2479       17.2479       189.768       207.016    
  52  0.218958      -1.51887      -87.8664       87.8664       193.133       281.000    
  53  0.333192      -1.09904      -63.5790       63.5790       195.694       259.273    
  54  0.356774      -1.03065      -59.6230       59.6230       192.440       252.063    
  55  0.739597     -0.301650      -17.4504       17.4504       191.786       209.237    
  56  0.224658E-01  -3.79576      -219.584       219.584       192.832       412.416    
  57  0.338214      -1.08408      -62.7135       62.7135       192.832       255.546    
  58  0.227014      -1.48275      -85.7764       85.7764       192.832       278.609    
  59  0.289792E-01  -3.54118      -204.856       204.856       191.913       396.769    
  60  0.871226     -0.137854      -7.97482       7.97482       199.363       207.338    
  61  0.159622      -1.83495      -106.151       106.151       192.832       298.984    
  62  0.581826     -0.541584      -31.3305       31.3305       208.079       239.410    
  63  0.733467E-02  -4.91514      -284.340       284.340       192.655       476.995    
  64  0.646078     -0.436835      -25.2708       25.2708       194.812       220.083    
  65  0.976710     -0.235653E-01  -1.36324       1.36324       258.538       259.901    
  66  0.390127     -0.941284      -54.4530       54.4530       190.048       244.501    
  67  0.394291     -0.930666      -53.8387       53.8387       191.708       245.547    
  68  0.796004     -0.228151      -13.1985       13.1985       191.883       205.081    
  69  0.393786     -0.931948      -53.9129       53.9129       212.657       266.570    
  70  0.672353     -0.396971      -22.9647       22.9647       229.312       252.276    
  71  0.856786E-01  -2.45715      -142.145       142.145       215.979       358.125    
  72  0.769351     -0.262207      -15.1686       15.1686       192.044       207.212    
loop,thermsimp(1:2)       19   60.2395       208.770    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107        190.53          0.84          1.11         25.11          0.11          0.05         27.22
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108        201.83          0.84          1.10         25.30          0.09          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       19
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       20
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      107     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -36.2118       36.2118       189.745       225.956    
   2  0.288348      -1.24359      -71.9412       71.9412       193.212       265.153    
   3  0.910112E-01  -2.39677      -138.653       138.653       195.490       334.143    
   4  0.213812      -1.54266      -89.2423       89.2423       191.670       280.912    
   5  0.575222     -0.552999      -31.9908       31.9908       192.249       224.240    
   6  0.855707     -0.155827      -9.01456       9.01456       192.299       201.314    
   7  0.818692     -0.200047      -11.5727       11.5727       191.452       203.025    
   8  0.309911      -1.17147      -67.7692       67.7692       202.792       270.561    
   9  0.773438     -0.256910      -14.8622       14.8622       192.832       207.694    
  10  0.440502E-01  -3.12243      -180.631       180.631       191.883       372.514    
  11  0.211655      -1.55280      -89.8289       89.8289       189.768       279.597    
  12  0.713577     -0.337465      -19.5223       19.5223       192.044       211.566    
  13  0.927405     -0.753650E-01  -4.35985       4.35985       199.363       203.723    
  14  0.360229      -1.02101      -59.0654       59.0654       191.786       250.852    
  15  0.911872     -0.922553E-01  -5.33694       5.33694       192.832       198.169    
  16  0.800691     -0.222280      -12.8589       12.8589       186.433       199.292    
  17  0.169830      -1.77296      -102.565       102.565       190.223       292.788    
  18  0.581014     -0.542980      -31.4113       31.4113       191.350       222.761    
  19  0.869395     -0.139958      -8.09651       8.09651       194.812       202.908    
  20  0.773880     -0.256338      -14.8291       14.8291       189.576       204.405    
  21  0.496085     -0.701008      -40.5531       40.5531       192.832       233.385    
  22  0.530037     -0.634809      -36.7235       36.7235       196.114       232.838    
  23  0.239414      -1.42956      -82.6998       82.6998       194.118       276.818    
  24  0.595728     -0.517972      -29.9645       29.9645       193.388       223.352    
  25  0.170793      -1.76730      -102.238       102.238       185.359       287.598    
  26  0.983027     -0.171183E-01 -0.990288      0.990288       191.073       192.064    
  27  0.608714     -0.496407      -28.7170       28.7170       191.114       219.831    
  28  0.518727     -0.656378      -37.9713       37.9713       199.085       237.057    
  29  0.887918     -0.118876      -6.87693       6.87693       196.763       203.640    
  30  0.140498      -1.96256      -113.534       113.534       185.450       298.984    
  31  0.256308      -1.36138      -78.7552       78.7552       208.079       286.835    
  32  0.887238     -0.119642      -6.92123       6.92123       193.483       200.404    
  33  0.306042      -1.18403      -68.4959       68.4959       190.048       258.544    
  34  0.993873     -0.614632E-02 -0.355562      0.355562       191.708       192.064    
  35  0.275412E-01  -3.59207      -207.800       207.800       190.154       397.955    
  36  0.698960     -0.358161      -20.7195       20.7195       189.841       210.560    
  37  0.268424      -1.31519      -76.0831       76.0831       197.741       273.824    
  38  0.580935E-01  -2.84570      -164.623       164.623       193.370       357.993    
  39  0.242705      -1.41591      -81.9099       81.9099       192.440       274.350    
  40  0.443517     -0.813019      -47.0329       47.0329       204.512       251.545    
  41  0.904179     -0.100728      -5.82707       5.82707       229.312       235.139    
  42  0.454025     -0.789603      -45.6783       45.6783       192.832       238.511    
  43  0.592994     -0.522572      -30.2306       30.2306       195.694       225.925    
  44  0.401796     -0.911812      -52.7480       52.7480       258.538       311.286    
  45  0.130776      -2.03427      -117.682       117.682       189.245       306.927    
  46  0.709753     -0.342839      -19.8331       19.8331       191.801       211.634    
  47  0.388071     -0.946568      -54.7587       54.7587       192.832       247.591    
  48  0.362521      -1.01467      -58.6984       58.6984       212.657       271.355    
  49  0.285379      -1.25394      -72.5399       72.5399       211.341       283.881    
  50  0.286508      -1.24999      -72.3114       72.3114       191.935       264.246    
  51  0.951542     -0.496714E-01  -2.87348       2.87348       192.845       195.719    
  52  0.122933      -2.09612      -121.260       121.260       192.832       314.092    
  53  0.210928      -1.55624      -90.0279       90.0279       193.133       283.161    
  54  0.860093     -0.150715      -8.71882       8.71882       194.280       202.999    
  55  0.997563     -0.243951E-02 -0.141125      0.141125       192.846       192.987    
  56  0.750720     -0.286722      -16.5868       16.5868       189.277       205.864    
  57  0.667101     -0.404814      -23.4184       23.4184       191.810       215.228    
  58  0.508750E-01  -2.97838      -172.299       172.299       192.049       364.348    
  59  0.552474     -0.593349      -34.3251       34.3251       192.832       227.157    
  60  0.514478     -0.664602      -38.4470       38.4470       187.489       225.936    
  61  0.539834     -0.616494      -35.6640       35.6640       192.832       228.496    
  62  0.610888     -0.492841      -28.5107       28.5107       197.273       225.784    
  63  0.328075      -1.11451      -64.4743       64.4743       239.831       304.305    
  64  0.894692     -0.111276      -6.43730       6.43730       189.414       195.852    
  65  0.810283     -0.210372      -12.1699       12.1699       215.979       228.149    
  66  0.691642     -0.368687      -21.3284       21.3284       199.721       221.049    
  67  0.896896     -0.108815      -6.29491       6.29491       193.513       199.808    
  68  0.742287     -0.298020      -17.2404       17.2404       191.913       209.154    
  69  0.974450     -0.258821E-01  -1.49727       1.49727       191.517       193.015    
  70  0.339669      -1.07978      -62.4651       62.4651       192.832       255.297    
  71  0.854515     -0.157221      -9.09521       9.09521       192.832       201.928    
  72  0.153353      -1.87501      -108.469       108.469       190.529       298.998    
loop,thermsimp(1:2)       20   36.2118       71.9412    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109        193.73          0.84          1.11         25.27          0.14          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110        215.00          0.83          1.10         25.13          0.06          0.04         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    193.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       20
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       21
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      109     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -70.1488       70.1488       191.708       261.857    
   2  0.663536     -0.410173      -23.7284       23.7284       191.073       214.802    
   3  0.263982      -1.33188      -77.0486       77.0486       192.846       269.895    
   4  0.792402     -0.232686      -13.4608       13.4608       191.517       204.978    
   5  0.624731     -0.470434      -27.2145       27.2145       192.845       220.060    
   6  0.170977      -1.76622      -102.176       102.176       189.414       291.590    
   7  0.362487      -1.01477      -58.7040       58.7040       192.832       251.536    
   8  0.659245     -0.416659      -24.1036       24.1036       186.433       210.537    
   9  0.746481E-03  -7.20014      -416.526       416.526       193.513       610.039    
  10  0.690046     -0.370998      -21.4621       21.4621       193.483       214.945    
  11  0.905636     -0.991173E-01  -5.73390       5.73390       192.299       198.033    
  12  0.317643      -1.14683      -66.3437       66.3437       192.832       259.176    
  13  0.321948      -1.13336      -65.5648       65.5648       194.812       260.377    
  14  0.293974      -1.22426      -70.8234       70.8234       194.280       265.104    
  15  0.679275     -0.386729      -22.3721       22.3721       191.452       213.824    
  16  0.180340      -1.71291      -99.0914       99.0914       196.763       295.855    
  17  0.539600     -0.616927      -35.6891       35.6891       199.363       235.052    
  18  0.260315      -1.34586      -77.8577       77.8577       189.576       267.434    
  19  0.256777      -1.35955      -78.6494       78.6494       189.277       267.927    
  20  0.518851     -0.656138      -37.9574       37.9574       192.832       230.790    
  21  0.485887     -0.721780      -41.7547       41.7547       191.913       233.668    
  22  0.562814     -0.574805      -33.2523       33.2523       189.841       223.093    
  23  0.906369     -0.983082E-01  -5.68710       5.68710       192.044       197.731    
  24  0.332143      -1.10219      -63.7613       63.7613       191.801       255.562    
  25  0.912001E-01  -2.39470      -138.533       138.533       191.810       330.342    
  26  0.302569      -1.19545      -69.1562       69.1562       191.114       260.270    
  27  0.362040      -1.01600      -58.7753       58.7753       199.721       258.496    
  28  0.630870     -0.460656      -26.6488       26.6488       191.350       217.999    
  29  0.685312     -0.377881      -21.8603       21.8603       193.388       215.248    
  30  0.329910      -1.10894      -64.1517       64.1517       192.249       256.401    
  31  0.906630E-01  -2.40061      -138.874       138.874       197.273       336.148    
  32  0.339749      -1.07955      -62.4516       62.4516       195.694       258.146    
  33  0.783039     -0.244573      -14.1485       14.1485       187.489       201.637    
  34  0.322673      -1.13112      -65.4348       65.4348       189.745       255.179    
  35  0.255311      -1.36527      -78.9805       78.9805       192.832       271.813    
  36  0.645921     -0.437078      -25.2848       25.2848       215.979       241.264    
  37  0.240122      -1.42661      -82.5288       82.5288       192.832       275.361    
  38  0.224638      -1.49326      -86.3849       86.3849       196.114       282.499    
  39  0.682659     -0.381760      -22.0847       22.0847       192.832       214.917    
  40  0.533856     -0.627629      -36.3081       36.3081       229.312       265.620    
  41  0.439620E-02  -5.42701      -313.951       313.951       199.085       513.037    
  42  0.409891     -0.891863      -51.5940       51.5940       192.832       244.426    
  43  0.379406     -0.969149      -56.0650       56.0650       192.832       248.897    
  44  0.982111     -0.180514E-01  -1.04427       1.04427       191.786       192.831    
  45  0.243530      -1.41251      -81.7135       81.7135       204.512       286.226    
  46  0.709323     -0.343445      -19.8682       19.8682       192.832       212.700    
  47  0.212014      -1.55110      -89.7308       89.7308       190.048       279.779    
  48  0.530919     -0.633146      -36.6273       36.6273       191.935       228.562    
  49  0.439600     -0.821890      -47.5461       47.5461       193.212       240.758    
  50  0.304385      -1.18946      -68.8100       68.8100       202.792       271.602    
  51  0.850253     -0.162221      -9.38444       9.38444       212.657       222.041    
  52  0.686564     -0.376055      -21.7547       21.7547       197.741       219.496    
  53  0.894299     -0.111715      -6.46266       6.46266       192.440       198.903    
  54  0.724097E-02  -4.92800      -285.083       285.083       194.118       479.201    
  55  0.666382     -0.405892      -23.4807       23.4807       189.768       213.249    
  56  0.216072      -1.53214      -88.6341       88.6341       191.670       280.304    
  57  0.481454     -0.730944      -42.2849       42.2849       193.133       235.418    
  58  0.107413      -2.23107      -129.067       129.067       211.341       340.408    
  59  0.943557     -0.580990E-01  -3.36101       3.36101       208.079       211.440    
  60  0.259811      -1.34780      -77.9698       77.9698       185.359       263.329    
  61  0.526852     -0.640836      -37.0722       37.0722       190.223       227.295    
  62  0.306319E-01  -3.48571      -201.647       201.647       185.450       387.097    
  63  0.180513      -1.71195      -99.0360       99.0360       190.529       289.565    
  64  0.901495     -0.103701      -5.99907       5.99907       239.831       245.830    
  65  0.274530      -1.29269      -74.7820       74.7820       189.245       264.027    
  66  0.773836     -0.256395      -14.8324       14.8324       258.538       273.370    
  67  0.158774      -1.84027      -106.459       106.459       192.832       299.292    
  68  0.514226     -0.665093      -38.4754       38.4754       195.490       233.966    
  69  0.312978      -1.16162      -67.1996       67.1996       193.370       260.570    
  70  0.917534     -0.860656E-01  -4.97887       4.97887       192.049       197.028    
  71  0.548182     -0.601148      -34.7762       34.7762       191.883       226.659    
  72  0.131177      -2.03121      -117.505       117.505       193.728       311.233    
loop,thermsimp(1:2)       21   70.1488       23.7284    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111        189.87          0.83          1.11         25.24          0.09          0.05         27.32
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112        192.43          0.84          1.11         25.16          0.08          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       21
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       22
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      111     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -55.4182       55.4182       191.786       247.204    
   2  0.741480     -0.299107      -17.3032       17.3032       192.049       209.352    
   3  0.138898      -1.97401      -114.196       114.196       192.044       306.240    
   4  0.751974E-01  -2.58764      -149.694       149.694       192.299       341.993    
   5  0.824485     -0.192996      -11.1648       11.1648       192.440       203.605    
   6  0.982900     -0.172482E-01 -0.997805      0.997805       187.489       188.487    
   7  0.693409     -0.366136      -21.1809       21.1809       191.517       212.698    
   8  0.941572     -0.602045E-01  -3.48281       3.48281       186.433       189.916    
   9  0.812713     -0.207378      -11.9967       11.9967       208.079       220.076    
  10  0.879507     -0.128393      -7.42751       7.42751       192.832       200.259    
  11  0.418958     -0.869984      -50.3283       50.3283       189.768       240.096    
  12  0.314952      -1.15533      -66.8357       66.8357       191.452       258.288    
  13  0.812426     -0.207731      -12.0172       12.0172       191.073       203.091    
  14  0.213788      -1.54277      -89.2487       89.2487       192.832       282.081    
  15  0.521629     -0.650798      -37.6485       37.6485       193.483       231.131    
  16  0.287143      -1.24777      -72.1834       72.1834       193.388       265.571    
  17  0.518340     -0.657125      -38.0145       38.0145       191.350       229.364    
  18  0.712802E-02  -4.94372      -285.993       285.993       197.741       483.734    
  19  0.579935     -0.544838      -31.5187       31.5187       192.845       224.364    
  20  0.508101E-02  -5.28224      -305.576       305.576       212.657       518.233    
  21  0.984466     -0.156557E-01 -0.905680      0.905680       189.841       190.746    
  22  0.394325     -0.930579      -53.8337       53.8337       191.883       245.716    
  23  0.837309     -0.177562      -10.2719       10.2719       190.223       200.495    
  24  0.683519     -0.380501      -22.0119       22.0119       191.935       213.947    
  25  0.892337     -0.113912      -6.58976       6.58976       192.832       199.422    
  26  0.297675      -1.21175      -70.0996       70.0996       191.913       262.013    
  27  0.566054     -0.569065      -32.9202       32.9202       195.490       228.410    
  28  0.325499E-01  -3.42498      -198.134       198.134       199.363       397.497    
  29  0.721169     -0.326882      -18.9100       18.9100       193.133       212.043    
  30  0.370449     -0.993040      -57.4471       57.4471       193.212       250.659    
  31  0.398952     -0.918913      -53.1589       53.1589       215.979       269.138    
  32  0.942469     -0.592518E-01  -3.42770       3.42770       192.832       196.260    
  33  0.379045     -0.970101      -56.1201       56.1201       239.831       295.951    
  34  0.218373      -1.52155      -88.0212       88.0212       192.832       280.854    
  35  0.413944     -0.882024      -51.0248       51.0248       192.832       243.857    
  36  0.452532     -0.792896      -45.8688       45.8688       189.745       235.614    
  37  0.938896     -0.630505E-01  -3.64745       3.64745       191.801       195.448    
  38  0.389299     -0.943409      -54.5759       54.5759       192.249       246.825    
  39  0.943794     -0.578471E-01  -3.34644       3.34644       195.694       199.041    
  40  0.706887     -0.346884      -20.0671       20.0671       199.721       219.788    
  41  0.274873      -1.29145      -74.7098       74.7098       192.832       267.542    
  42  0.343864      -1.06751      -61.7551       61.7551       191.114       252.869    
  43  0.869527E-01  -2.44239      -141.292       141.292       194.812       336.103    
  44  0.859615     -0.151271      -8.75096       8.75096       193.370       202.121    
  45  0.264079      -1.33151      -77.0273       77.0273       191.708       268.735    
  46  0.494871     -0.703457      -40.6948       40.6948       185.359       226.054    
  47  0.112943      -2.18087      -126.163       126.163       189.245       315.408    
  48  0.358273      -1.02646      -59.3804       59.3804       194.280       253.661    
  49  0.215257      -1.53592      -88.8526       88.8526       229.312       318.164    
  50  0.441681     -0.817166      -47.2728       47.2728       189.576       236.849    
  51  0.888276     -0.118473      -6.85364       6.85364       189.277       196.131    
  52  0.780286     -0.248095      -14.3522       14.3522       192.846       207.198    
  53  0.488747     -0.715911      -41.4152       41.4152       202.792       244.207    
  54  0.683795     -0.380097      -21.9885       21.9885       192.832       214.821    
  55  0.466986     -0.761456      -44.0500       44.0500       258.538       302.588    
  56  0.900497     -0.104809      -6.06315       6.06315       192.832       198.895    
  57  0.876058     -0.132323      -7.65482       7.65482       190.048       197.703    
  58  0.413808     -0.882354      -51.0439       51.0439       191.670       242.714    
  59  0.268165      -1.31615      -76.1391       76.1391       196.114       272.254    
  60  0.637465     -0.450255      -26.0471       26.0471       204.512       230.559    
  61  0.476344     -0.741616      -42.9022       42.9022       190.529       233.431    
  62  0.878474     -0.129569      -7.49554       7.49554       189.414       196.910    
  63  0.185973      -1.68216      -97.3122       97.3122       196.763       294.075    
  64  0.802667E-03  -7.12757      -412.328       412.328       192.832       605.160    
  65  0.480758     -0.732390      -42.3686       42.3686       193.728       236.097    
  66  0.789279     -0.236635      -13.6893       13.6893       191.810       205.499    
  67  0.174217      -1.74745      -101.090       101.090       197.273       298.363    
  68  0.825561     -0.191692      -11.0893       11.0893       211.341       222.431    
  69  0.532291     -0.630566      -36.4780       36.4780       185.450       221.928    
  70  0.118632E-01  -4.43431      -256.524       256.524       194.118       450.642    
  71  0.214857      -1.53778      -88.9603       88.9603       199.085       288.046    
  72  0.111318      -2.19536      -127.001       127.001       189.875       316.876    
loop,thermsimp(1:2)       22   55.4182       17.3032    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113        190.16          0.83          1.11         25.08          0.07          0.06         27.16
Just calling func    0   0         27.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114        192.87          0.83          1.12         25.22          0.10          0.05         27.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       22
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       23
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      113     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -64.5482       64.5482       187.489       252.037    
   2  0.736029     -0.306486      -17.7301       17.7301       186.433       204.163    
   3  0.608436     -0.496864      -28.7434       28.7434       189.841       218.584    
   4  0.584882     -0.536346      -31.0275       31.0275       191.801       222.828    
   5  0.617514     -0.482053      -27.8866       27.8866       189.277       217.164    
   6  0.376473     -0.976909      -56.5139       56.5139       192.832       249.346    
   7  0.535145     -0.625218      -36.1687       36.1687       189.414       225.583    
   8  0.341783      -1.07358      -62.1062       62.1062       190.048       252.154    
   9  0.804208E-01  -2.52048      -145.809       145.809       192.832       338.641    
  10  0.660499     -0.414760      -23.9937       23.9937       195.694       219.688    
  11  0.739860E-01  -2.60388      -150.634       150.634       192.832       343.466    
  12  0.203251      -1.59331      -92.1726       92.1726       192.832       285.005    
  13  0.637025     -0.450946      -26.0871       26.0871       190.223       216.310    
  14  0.687460     -0.374752      -21.6793       21.6793       193.370       215.050    
  15  0.663581     -0.410105      -23.7244       23.7244       191.073       214.798    
  16  0.579690     -0.545263      -31.5433       31.5433       192.440       223.983    
  17  0.775653     -0.254050      -14.6967       14.6967       191.810       206.507    
  18  0.284124      -1.25834      -72.7948       72.7948       192.846       265.641    
  19  0.317710      -1.14662      -66.3313       66.3313       192.049       258.380    
  20  0.958871     -0.419990E-01  -2.42963       2.42963       193.133       195.563    
  21  0.582932     -0.539685      -31.2206       31.2206       191.517       222.738    
  22  0.905476     -0.992942E-01  -5.74414       5.74414       191.935       197.679    
  23  0.225214      -1.49070      -86.2367       86.2367       192.832       279.069    
  24  0.618260     -0.480846      -27.8168       27.8168       199.721       227.537    
  25  0.608706     -0.496420      -28.7178       28.7178       208.079       236.797    
  26  0.651052     -0.429165      -24.8271       24.8271       185.450       210.277    
  27  0.138439E-02  -6.58249      -380.795       380.795       211.341       592.137    
  28  0.157375      -1.84913      -106.971       106.971       192.845       299.817    
  29  0.168063      -1.78342      -103.170       103.170       185.359       288.530    
  30  0.924354     -0.786598E-01  -4.55045       4.55045       195.490       200.041    
  31  0.985585     -0.145204E-01 -0.840001      0.840001       191.350       192.190    
  32  0.540844E-01  -2.91721      -168.760       168.760       204.512       373.272    
  33  0.535345     -0.624843      -36.1470       36.1470       193.483       229.630    
  34  0.736351     -0.306048      -17.7048       17.7048       190.529       208.234    
  35  0.283062E-01  -3.56467      -206.215       206.215       189.745       395.960    
  36  0.690743     -0.369987      -21.4036       21.4036       193.728       215.132    
  37  0.260994      -1.34326      -77.7070       77.7070       189.576       267.283    
  38  0.243637      -1.41208      -81.6883       81.6883       189.768       271.456    
  39  0.850226     -0.162253      -9.38630       9.38630       191.670       201.056    
  40  0.589307     -0.528809      -30.5914       30.5914       192.832       223.424    
  41  0.515087     -0.663420      -38.3787       38.3787       202.792       241.170    
  42  0.348855      -1.05310      -60.9215       60.9215       191.883       252.804    
  43  0.791407     -0.233943      -13.5335       13.5335       192.249       205.783    
  44  0.370775     -0.992160      -57.3961       57.3961       191.786       249.182    
  45  0.676021     -0.391531      -22.6500       22.6500       193.212       215.862    
  46  0.125601      -2.07465      -120.018       120.018       191.114       311.131    
  47  0.582904     -0.539733      -31.2234       31.2234       194.280       225.504    
  48  0.818994     -0.199679      -11.5514       11.5514       191.452       203.003    
  49  0.291406      -1.23304      -71.3309       71.3309       191.913       263.244    
  50  0.887104     -0.119794      -6.93002       6.93002       193.388       200.318    
  51  0.666242     -0.406102      -23.4929       23.4929       192.832       216.325    
  52  0.931047     -0.714460E-01  -4.13313       4.13313       191.708       195.841    
  53  0.169651      -1.77401      -102.626       102.626       215.979       318.605    
  54  0.228429      -1.47653      -85.4168       85.4168       196.114       281.531    
  55  0.453181     -0.791463      -45.7859       45.7859       192.832       238.618    
  56  0.376518     -0.976789      -56.5069       56.5069       192.832       249.339    
  57  0.551543     -0.595035      -34.4226       34.4226       199.085       233.508    
  58  0.837469     -0.177371      -10.2609       10.2609       196.763       207.024    
  59  0.436148     -0.829773      -48.0021       48.0021       239.831       287.833    
  60  0.245765      -1.40338      -81.1850       81.1850       197.273       278.458    
  61  0.727782     -0.317754      -18.3820       18.3820       258.538       276.920    
  62  0.677441     -0.389433      -22.5286       22.5286       192.044       214.572    
  63  0.835222     -0.180057      -10.4163       10.4163       189.245       199.662    
  64  0.964839     -0.357941E-01  -2.07068       2.07068       189.875       191.945    
  65  0.799790     -0.223406      -12.9240       12.9240       229.312       242.235    
  66  0.274169      -1.29401      -74.8581       74.8581       194.812       269.670    
  67  0.342685      -1.07094      -61.9538       61.9538       192.299       254.253    
  68  0.688325     -0.373494      -21.6065       21.6065       199.363       220.969    
  69  0.683936     -0.379890      -21.9765       21.9765       194.118       216.095    
  70  0.779136     -0.249570      -14.4376       14.4376       197.741       212.179    
  71  0.806749     -0.214742      -12.4228       12.4228       212.657       225.079    
  72  0.645551     -0.437652      -25.3180       25.3180       190.163       215.481    
loop,thermsimp(1:2)       23   64.5482       17.7301    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115        188.13          0.84          1.11         25.11          0.10          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116        191.61          0.84          1.11         25.28          0.07          0.05         27.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    188.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       23
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       24
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      115     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -71.3118       71.3118       189.875       261.186    
   2  0.991852     -0.818183E-02 -0.473316      0.473316       191.350       191.823    
   3  0.317368      -1.14769      -66.3938       66.3938       193.133       259.527    
   4  0.737330     -0.304720      -17.6280       17.6280       191.708       209.336    
   5  0.834641     -0.180753      -10.4565       10.4565       191.935       202.391    
   6  0.464401     -0.767007      -44.3712       44.3712       189.245       233.616    
   7  0.592116     -0.524053      -30.3163       30.3163       195.490       225.806    
   8  0.464372     -0.767069      -44.3747       44.3747       193.388       237.763    
   9  0.636055E-01  -2.75505      -159.379       159.379       191.670       351.049    
  10  0.712927     -0.338376      -19.5750       19.5750       191.452       211.027    
  11  0.265597      -1.32578      -76.6957       76.6957       186.433       263.129    
  12  0.152318      -1.88178      -108.861       108.861       192.249       301.110    
  13  0.629580     -0.462703      -26.7672       26.7672       191.810       218.577    
  14  0.849464     -0.163150      -9.43815       9.43815       196.763       206.201    
  15  0.487816     -0.717817      -41.5255       41.5255       190.529       232.054    
  16  0.374667     -0.981718      -56.7921       56.7921       185.450       242.242    
  17  0.657383     -0.419488      -24.2672       24.2672       197.741       222.008    
  18  0.846901     -0.166172      -9.61298       9.61298       192.044       201.657    
  19  0.201185      -1.60353      -92.7638       92.7638       191.073       283.837    
  20  0.771980     -0.258797      -14.9713       14.9713       193.370       208.342    
  21  0.507739     -0.677788      -39.2098       39.2098       193.728       232.938    
  22  0.280262      -1.27203      -73.5867       73.5867       190.163       263.750    
  23  0.285359      -1.25401      -72.5440       72.5440       193.212       265.756    
  24  0.246191      -1.40165      -81.0848       81.0848       194.118       275.203    
  25  0.559989E-01  -2.88242      -166.747       166.747       190.223       356.971    
  26  0.330462      -1.10726      -64.0549       64.0549       192.832       256.887    
  27  0.899405     -0.106022      -6.13335       6.13335       189.277       195.411    
  28  0.637003     -0.450981      -26.0891       26.0891       189.841       215.930    
  29  0.699726E-01  -2.65965      -153.860       153.860       195.694       349.554    
  30  0.677191     -0.389802      -22.5499       22.5499       199.363       221.913    
  31  0.649507     -0.431542      -24.9646       24.9646       191.517       216.482    
  32  0.527986     -0.638685      -36.9477       36.9477       191.801       228.748    
  33  0.374870E-01  -3.28376      -189.965       189.965       192.832       382.797    
  34  0.448697     -0.801407      -46.3612       46.3612       192.440       238.801    
  35  0.809612     -0.211200      -12.2178       12.2178       212.657       224.875    
  36  0.836235     -0.178846      -10.3462       10.3462       194.280       204.627    
  37  0.198161      -1.61867      -93.6398       93.6398       189.414       283.054    
  38  0.222702      -1.50192      -86.8856       86.8856       199.721       286.606    
  39  0.888863     -0.117812      -6.81538       6.81538       193.483       200.298    
  40  0.868267     -0.141256      -8.17161       8.17161       199.085       207.257    
  41  0.164066      -1.80749      -104.563       104.563       208.079       312.642    
  42  0.163797      -1.80912      -104.657       104.657       192.832       297.490    
  43  0.883498     -0.123867      -7.16564       7.16564       202.792       209.957    
  44  0.749983     -0.287705      -16.6436       16.6436       229.312       245.955    
  45  0.666691     -0.405428      -23.4539       23.4539       191.786       215.240    
  46  0.978530     -0.217038E-01  -1.25556       1.25556       192.832       194.088    
  47  0.442024     -0.816391      -47.2280       47.2280       192.832       240.060    
  48  0.228080      -1.47806      -85.5053       85.5053       187.489       272.994    
  49  0.226174      -1.48645      -85.9906       85.9906       190.048       276.039    
  50  0.388394     -0.945736      -54.7106       54.7106       191.883       246.593    
  51  0.257425      -1.35703      -78.5035       78.5035       192.299       270.803    
  52  0.707288     -0.346317      -20.0344       20.0344       192.049       212.083    
  53  0.518387     -0.657032      -38.0091       38.0091       191.913       229.923    
  54  0.628700     -0.464102      -26.8481       26.8481       192.846       219.694    
  55  0.981249     -0.189295E-01  -1.09507       1.09507       189.576       190.671    
  56  0.928260     -0.744431E-01  -4.30651       4.30651       194.812       199.118    
  57  0.752004E-02  -4.89018      -282.896       282.896       189.768       472.664    
  58  0.930611     -0.719140E-01  -4.16020       4.16020       258.538       262.698    
  59  0.552686     -0.592965      -34.3028       34.3028       197.273       231.576    
  60  0.695877     -0.362583      -20.9753       20.9753       192.832       213.808    
  61  0.432533     -0.838096      -48.4836       48.4836       196.114       244.598    
  62  0.127859      -2.05683      -118.987       118.987       192.832       311.819    
  63  0.304427      -1.18932      -68.8021       68.8021       239.831       308.633    
  64  0.938376     -0.636043E-01  -3.67949       3.67949       185.359       189.039    
  65  0.958131     -0.427711E-01  -2.47429       2.47429       192.845       195.320    
  66  0.177025      -1.73147      -100.165       100.165       191.114       291.278    
  67  0.352264      -1.04338      -60.3590       60.3590       215.979       276.338    
  68  0.915612     -0.881621E-01  -5.10015       5.10015       192.832       197.932    
  69  0.891986     -0.114305      -6.61249       6.61249       192.832       199.445    
  70  0.754865     -0.281216      -16.2683       16.2683       204.512       220.781    
  71  0.616120     -0.484313      -28.0174       28.0174       189.745       217.762    
  72  0.873159     -0.135638      -7.84661       7.84661       188.127       195.973    
loop,thermsimp(1:2)       24   71.3118      0.473316    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117        192.42          0.84          1.10         25.11          0.12          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118        195.81          0.84          1.09         25.11          0.12          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       24
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       25
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      117     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -111.350       111.350       185.359       296.710    
   2  0.438196     -0.825090      -47.7312       47.7312       189.576       237.307    
   3  0.637359     -0.450422      -26.0568       26.0568       191.350       217.407    
   4  0.122813      -2.09709      -121.316       121.316       192.832       314.148    
   5  0.926899     -0.759107E-01  -4.39141       4.39141       192.845       197.237    
   6  0.456580     -0.783992      -45.3537       45.3537       189.277       234.631    
   7  0.988763     -0.113008E-01 -0.653751      0.653751       188.127       188.780    
   8  0.499609     -0.693930      -40.1436       40.1436       192.832       232.976    
   9  0.432617     -0.837902      -48.4724       48.4724       194.812       243.284    
  10  0.403570     -0.907406      -52.4932       52.4932       192.832       245.325    
  11  0.435824     -0.830517      -48.0452       48.0452       193.483       241.528    
  12  0.504807     -0.683579      -39.5448       39.5448       192.044       231.589    
  13  0.778763     -0.250048      -14.4652       14.4652       191.935       206.400    
  14  0.429140     -0.845972      -48.9392       48.9392       194.280       243.220    
  15  0.597763     -0.514562      -29.7672       29.7672       196.763       226.530    
  16  0.425932     -0.853476      -49.3733       49.3733       199.085       248.459    
  17  0.825778     -0.191430      -11.0742       11.0742       193.370       204.445    
  18  0.448772     -0.801241      -46.3515       46.3515       191.708       238.060    
  19  0.701335     -0.354770      -20.5233       20.5233       202.792       223.315    
  20  0.425857     -0.853651      -49.3835       49.3835       191.452       240.835    
  21  0.800815     -0.222126      -12.8499       12.8499       192.049       204.899    
  22  0.724239     -0.322634      -18.6643       18.6643       192.832       211.497    
  23  0.312194      -1.16413      -67.3446       67.3446       191.786       259.131    
  24  0.796592     -0.227412      -13.1557       13.1557       189.841       202.996    
  25  0.164146      -1.80700      -104.534       104.534       191.517       296.052    
  26  0.503041     -0.687083      -39.7475       39.7475       189.745       229.492    
  27  0.640838     -0.444978      -25.7419       25.7419       191.810       217.552    
  28  0.327752      -1.11550      -64.5312       64.5312       192.846       257.377    
  29  0.720325     -0.328053      -18.9778       18.9778       204.512       223.490    
  30  0.447570     -0.803922      -46.5066       46.5066       199.363       245.869    
  31  0.377461     -0.974289      -56.3623       56.3623       197.741       254.103    
  32  0.951264     -0.499633E-01  -2.89036       2.89036       212.657       215.547    
  33  0.610405     -0.493632      -28.5565       28.5565       195.490       224.047    
  34  0.564697     -0.571466      -33.0591       33.0591       191.801       224.860    
  35  0.993998     -0.601974E-02 -0.348240      0.348240       191.913       192.262    
  36  0.908032     -0.964757E-01  -5.58109       5.58109       197.273       202.854    
  37  0.731210     -0.313055      -18.1101       18.1101       190.529       208.639    
  38  0.818812     -0.199901      -11.5642       11.5642       193.728       205.292    
  39  0.423172     -0.859976      -49.7494       49.7494       189.245       238.995    
  40  0.554414     -0.589843      -34.1223       34.1223       193.388       227.510    
  41  0.244903E-01  -3.70948      -214.592       214.592       192.440       407.032    
  42  0.337898      -1.08501      -62.7675       62.7675       192.832       255.600    
  43  0.634521E-01  -2.75747      -159.519       159.519       185.450       344.969    
  44  0.824978     -0.192398      -11.1302       11.1302       196.114       207.245    
  45  0.954123     -0.469622E-01  -2.71675       2.71675       229.312       232.028    
  46  0.807852     -0.213376      -12.3437       12.3437       191.883       204.226    
  47  0.335430      -1.09234      -63.1916       63.1916       192.832       256.024    
  48  0.266194      -1.32353      -76.5659       76.5659       193.133       269.699    
  49  0.797818     -0.225874      -13.0668       13.0668       189.875       202.941    
  50  0.710601     -0.341644      -19.7640       19.7640       258.538       278.302    
  51  0.469059     -0.757026      -43.7937       43.7937       186.433       230.227    
  52  0.256457E-01  -3.66338      -211.925       211.925       190.163       402.089    
  53  0.620630     -0.477020      -27.5955       27.5955       193.212       220.807    
  54  0.600237     -0.510431      -29.5283       29.5283       192.299       221.828    
  55  0.959467     -0.413769E-01  -2.39364       2.39364       187.489       189.883    
  56  0.541492     -0.613428      -35.4866       35.4866       194.118       229.605    
  57  0.577789     -0.548547      -31.7333       31.7333       190.048       221.781    
  58  0.701570     -0.354435      -20.5039       20.5039       215.979       236.483    
  59  0.274557E-01  -3.59518      -207.980       207.980       189.414       397.394    
  60  0.584746     -0.536578      -31.0409       31.0409       191.073       222.114    
  61  0.131184      -2.03115      -117.501       117.501       199.721       317.222    
  62  0.986883     -0.132037E-01 -0.763831      0.763831       191.114       191.877    
  63  0.257198      -1.35791      -78.5545       78.5545       192.832       271.387    
  64  0.831173     -0.184917      -10.6974       10.6974       192.249       202.947    
  65  0.332503      -1.10111      -63.6986       63.6986       239.831       303.530    
  66  0.123451      -2.09191      -121.016       121.016       192.832       313.848    
  67  0.545729     -0.605633      -35.0357       35.0357       208.079       243.115    
  68  0.194995      -1.63478      -94.5716       94.5716       195.694       290.266    
  69  0.811658     -0.208676      -12.0719       12.0719       191.670       203.742    
  70  0.610911     -0.492804      -28.5086       28.5086       190.223       218.732    
  71  0.482852     -0.728044      -42.1171       42.1171       192.832       234.949    
  72  0.487726     -0.718001      -41.5361       41.5361       192.418       233.954    
loop,thermsimp(1:2)       25   111.350       47.7312    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119        189.97          0.84          1.11         25.08          0.12          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120        192.47          0.84          1.10         25.20          0.04          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       25
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       26
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      119     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -14.2962       14.2962       188.127       202.423    
   2  0.928800     -0.738619E-01  -4.27289       4.27289       187.489       191.762    
   3  0.727994     -0.317462      -18.3651       18.3651       191.114       209.479    
   4  0.109723E-01  -4.51238      -261.040       261.040       191.913       452.953    
   5  0.160096      -1.83198      -105.979       105.979       192.845       298.825    
   6  0.497079     -0.699006      -40.4373       40.4373       197.273       237.711    
   7  0.789473     -0.236389      -13.6750       13.6750       189.875       203.550    
   8  0.763780     -0.269476      -15.5891       15.5891       192.249       207.839    
   9  0.217288      -1.52653      -88.3094       88.3094       189.841       278.150    
  10  0.867642     -0.141976      -8.21330       8.21330       191.670       199.883    
  11  0.740966     -0.299800      -17.3434       17.3434       191.883       209.226    
  12  0.999757     -0.242662E-03 -0.140379E-01  0.140379E-01   193.370       193.384    
  13  0.587476     -0.531920      -30.7714       30.7714       192.049       222.821    
  14  0.703619     -0.351518      -20.3352       20.3352       193.728       214.064    
  15  0.740946     -0.299828      -17.3450       17.3450       191.935       209.280    
  16  0.335927      -1.09086      -63.1059       63.1059       196.114       259.220    
  17  0.736553     -0.305774      -17.6889       17.6889       190.529       208.218    
  18  0.597397     -0.515174      -29.8026       29.8026       192.832       222.635    
  19  0.126601      -2.06672      -119.559       119.559       212.657       332.216    
  20  0.990194     -0.985477E-02 -0.570095      0.570095       191.350       191.920    
  21  0.716453     -0.333443      -19.2896       19.2896       191.810       211.099    
  22  0.279233E-01  -3.57829      -207.003       207.003       190.223       397.226    
  23  0.413932     -0.882054      -51.0266       51.0266       193.212       244.238    
  24  0.109516      -2.21168      -127.945       127.945       190.048       317.993    
  25  0.440749     -0.819279      -47.3951       47.3951       192.299       239.694    
  26  0.412115     -0.886453      -51.2810       51.2810       191.073       242.354    
  27  0.146963      -1.91758      -110.931       110.931       202.792       313.723    
  28  0.345919      -1.06155      -61.4103       61.4103       204.512       265.923    
  29  0.343614      -1.06824      -61.7971       61.7971       195.490       257.287    
  30  0.600334E-01  -2.81285      -162.723       162.723       191.801       354.523    
  31  0.751538     -0.285634      -16.5238       16.5238       196.763       213.287    
  32  0.878119     -0.129973      -7.51892       7.51892       193.388       200.907    
  33  0.544046     -0.608721      -35.2143       35.2143       189.745       224.959    
  34  0.931023     -0.714714E-01  -4.13460       4.13460       194.118       198.253    
  35  0.131968      -2.02520      -117.157       117.157       186.433       303.590    
  36  0.826694E-01  -2.49291      -144.214       144.214       192.044       336.258    
  37  0.174702E-02  -6.34984      -367.337       367.337       229.312       596.648    
  38  0.233470      -1.45470      -84.1542       84.1542       192.832       276.986    
  39  0.232927      -1.45703      -84.2887       84.2887       192.418       276.707    
  40  0.958279     -0.426163E-01  -2.46534       2.46534       189.277       191.743    
  41  0.820100     -0.198330      -11.4733       11.4733       192.832       204.306    
  42  0.305797      -1.18483      -68.5423       68.5423       215.979       284.522    
  43  0.260853      -1.34380      -77.7384       77.7384       189.576       267.315    
  44  0.960408     -0.403967E-01  -2.33694       2.33694       191.708       194.045    
  45  0.318957      -1.14270      -66.1048       66.1048       189.245       255.350    
  46  0.146887      -1.91809      -110.961       110.961       191.452       302.413    
  47  0.787623     -0.238735      -13.8108       13.8108       193.483       207.294    
  48  0.452412     -0.793163      -45.8842       45.8842       208.079       253.964    
  49  0.218339      -1.52170      -88.0301       88.0301       194.280       282.311    
  50  0.177672      -1.72782      -99.9537       99.9537       194.812       294.766    
  51  0.928922     -0.737304E-01  -4.26528       4.26528       192.832       197.098    
  52  0.341447      -1.07456      -62.1631       62.1631       199.363       261.526    
  53  0.462674     -0.770732      -44.5866       44.5866       199.085       243.672    
  54  0.125513      -2.07534      -120.058       120.058       197.741       317.799    
  55  0.354899      -1.03592      -59.9277       59.9277       192.832       252.760    
  56  0.341830      -1.07344      -62.0984       62.0984       192.832       254.931    
  57  0.604983     -0.502555      -29.0727       29.0727       192.846       221.919    
  58  0.223932      -1.49641      -86.5670       86.5670       191.786       278.353    
  59  0.146473      -1.92091      -111.124       111.124       193.133       304.257    
  60  0.997224     -0.277992E-02 -0.160817      0.160817       192.832       192.993    
  61  0.430465     -0.842888      -48.7608       48.7608       258.538       307.299    
  62  0.712472     -0.339015      -19.6119       19.6119       195.694       215.306    
  63  0.303370      -1.19280      -69.0033       69.0033       191.517       260.521    
  64  0.676458E-01  -2.69347      -155.816       155.816       185.359       341.176    
  65  0.226497      -1.48502      -85.9082       85.9082       239.831       325.739    
  66  0.590955     -0.526015      -30.4298       30.4298       192.832       223.262    
  67  0.914813     -0.890359E-01  -5.15070       5.15070       192.832       197.983    
  68  0.157483      -1.84844      -106.932       106.932       199.721       306.652    
  69  0.117954E-01  -4.44005      -256.856       256.856       185.450       442.306    
  70  0.589104     -0.529153      -30.6113       30.6113       189.414       220.026    
  71  0.826668     -0.190352      -11.0118       11.0118       190.163       201.175    
  72  0.535992     -0.623635      -36.0771       36.0771       189.969       226.046    
loop,thermsimp(1:2)       26   14.2962       4.27289    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121        191.80          0.84          1.11         25.41          0.11          0.05         27.53
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122        203.28          0.84          1.11         25.18          0.05          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    191.80       0.9510     -1.357      1.692     -102.6     0.9667    
                      0.3860      1.832     -99.70      3.699     0.3129E-01
                       2.016     -1.427      1.888      0.000     -40.00    
                      -2.018      0.000      0.000      0.000     -1.221    

                      -2.500     0.2862E+05 0.3142E+05  0.000      0.000    
                     -0.5672     -6.307     -4.449     -7.418      3.267    
                      -14.21     -2.951      1757.      0.000      3247.    

                      0.1079E+05  8519.      5274.      8121.      3131.    
                       4077.     0.1416E-01 0.1416E-01  0.000     0.1416E-01
                      0.1416E-01-0.6663E-02-0.1300E-01 0.1281E-01 0.1416E-01

                     -0.1109    -0.9764      0.000    -0.6092E-02 0.1416E-01
                       0.000     0.1416E-01 0.1416E-01 0.1416E-01 0.1416E-01
                      0.1416E-01 0.1416E-01-0.1203    -0.9858      0.000    

                      0.4719E-01 -1.181    -0.5528    -0.5528    -0.1907    
                      0.2521      8.914      8.814     -5236.     -4.000    
                     -0.4304    -0.6056      8.890      8.814     -5236.    

                      -4.000     0.1276    -0.6227      8.914      8.814    
                      -4869.     -7.000    -0.3951    -0.6730      8.914    
                       8.814     -5236.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       26
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       27
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      121     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -11.5856       11.5856       189.277       200.863    
   2  0.309452      -1.17295      -67.8550       67.8550       187.489       255.344    
   3  0.303638      -1.19192      -68.9522       68.9522       191.350       260.302    
   4  0.754457     -0.281757      -16.2996       16.2996       192.832       209.132    
   5  0.623133     -0.472996      -27.3627       27.3627       193.370       220.733    
   6  0.989422E-01  -2.31322      -133.819       133.819       191.708       325.527    
   7  0.695126     -0.363662      -21.0377       21.0377       192.832       213.870    
   8  0.832210E-01  -2.48626      -143.829       143.829       192.832       336.661    
   9  0.869521     -0.139813      -8.08815       8.08815       194.118       202.206    
  10  0.488136     -0.717160      -41.4875       41.4875       191.670       233.158    
  11  0.579877     -0.544940      -31.5246       31.5246       193.388       224.912    
  12  0.480435     -0.733064      -42.4075       42.4075       190.163       232.571    
  13  0.792626     -0.232404      -13.4445       13.4445       188.127       201.571    
  14  0.870230     -0.138998      -8.04098       8.04098       189.875       197.916    
  15  0.886361     -0.120631      -6.97845       6.97845       192.832       199.811    
  16  0.358181      -1.02672      -59.3953       59.3953       193.483       252.878    
  17  0.560125     -0.579594      -33.5294       33.5294       192.249       225.779    
  18  0.546151     -0.604859      -34.9909       34.9909       190.529       225.520    
  19  0.732086     -0.311858      -18.0409       18.0409       191.883       209.924    
  20  0.590102     -0.527460      -30.5134       30.5134       191.935       222.448    
  21  0.867355     -0.142307      -8.23244       8.23244       191.114       199.346    
  22  0.749758     -0.288005      -16.6610       16.6610       191.810       208.471    
  23  0.721970     -0.325772      -18.8458       18.8458       196.763       215.609    
  24  0.596865     -0.516065      -29.8542       29.8542       193.728       223.582    
  25  0.878161     -0.129925      -7.51611       7.51611       195.694       203.210    
  26  0.558752E-01  -2.88463      -166.875       166.875       189.414       356.289    
  27  0.555543     -0.587810      -34.0046       34.0046       192.846       226.851    
  28  0.597562     -0.514897      -29.7866       29.7866       192.832       222.619    
  29  0.995329     -0.468202E-02 -0.270854      0.270854       192.049       192.320    
  30  0.206787      -1.57606      -91.1749       91.1749       192.832       284.007    
  31  0.645457     -0.437797      -25.3264       25.3264       189.745       215.071    
  32  0.871352     -0.137710      -7.96646       7.96646       189.969       197.935    
  33  0.701360     -0.354733      -20.5212       20.5212       197.273       217.794    
  34  0.936151     -0.659784E-01  -3.81683       3.81683       192.299       196.116    
  35  0.590091     -0.527478      -30.5145       30.5145       191.073       221.588    
  36  0.750433     -0.287105      -16.6089       16.6089       199.085       215.694    
  37  0.326255      -1.12007      -64.7960       64.7960       193.212       258.008    
  38  0.873133     -0.135668      -7.84835       7.84835       192.832       200.681    
  39  0.621627     -0.475415      -27.5026       27.5026       208.079       235.582    
  40  0.153041      -1.87705      -108.587       108.587       192.832       301.419    
  41  0.196696      -1.62610      -94.0692       94.0692       189.245       283.315    
  42  0.365028      -1.00778      -58.2998       58.2998       195.490       253.790    
  43  0.398429     -0.920226      -53.2348       53.2348       196.114       249.349    
  44  0.549691     -0.598399      -34.6172       34.6172       191.517       226.135    
  45  0.994179     -0.583795E-02 -0.337724      0.337724       199.363       199.701    
  46  0.147335E-01  -4.21763      -243.989       243.989       204.512       448.501    
  47  0.224737      -1.49282      -86.3594       86.3594       189.576       275.936    
  48  0.182172      -1.70281      -98.5068       98.5068       192.418       290.925    
  49  0.230919      -1.46569      -84.7897       84.7897       192.832       277.622    
  50  0.491818     -0.709647      -41.0529       41.0529       189.841       230.894    
  51  0.370754     -0.992217      -57.3994       57.3994       191.786       249.186    
  52  0.785622     -0.241279      -13.9579       13.9579       194.280       208.238    
  53  0.476284     -0.741742      -42.9095       42.9095       215.979       258.889    
  54  0.958799     -0.420736E-01  -2.43394       2.43394       194.812       197.246    
  55  0.305133      -1.18701      -68.6680       68.6680       192.845       261.513    
  56  0.270329      -1.30812      -75.6741       75.6741       191.452       267.126    
  57  0.130426      -2.03695      -117.837       117.837       186.433       304.270    
  58  0.222171      -1.50431      -87.0237       87.0237       193.133       280.157    
  59  0.233872      -1.45298      -84.0545       84.0545       199.721       283.775    
  60  0.916355E-02  -4.69252      -271.461       271.461       258.538       529.999    
  61  0.400634     -0.914708      -52.9156       52.9156       202.792       255.707    
  62  0.354647E-01  -3.33922      -193.173       193.173       197.741       390.914    
  63  0.453450     -0.790870      -45.7516       45.7516       190.048       235.800    
  64  0.411527     -0.887880      -51.3636       51.3636       239.831       291.195    
  65  0.607753     -0.497987      -28.8084       28.8084       212.657       241.465    
  66  0.157481      -1.84845      -106.932       106.932       192.044       298.976    
  67  0.260711E-01  -3.64693      -210.974       210.974       185.359       396.333    
  68  0.183987      -1.69289      -97.9332       97.9332       191.801       289.734    
  69  0.704951     -0.349627      -20.2258       20.2258       190.223       210.449    
  70  0.337767      -1.08540      -62.7899       62.7899       185.450       248.240    
  71  0.718219     -0.330981      -19.1471       19.1471       191.913       211.061    
  72  0.102024      -2.28254      -132.044       132.044       191.800       323.844    
loop,thermsimp(1:2)       27   11.5856       67.8550    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123        208.42          0.84          1.11         25.14          0.05          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124        218.77          0.84          1.11         25.10          0.08          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    208.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       27
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       28
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      123     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -12.2861       12.2861       192.049       204.335    
   2  0.162004E-01  -4.12272      -238.498       238.498       192.299       430.797    
   3  0.446841E-01  -3.10814      -179.805       179.805       194.812       374.617    
   4  0.757954     -0.277132      -16.0320       16.0320       189.875       205.907    
   5  0.525315     -0.643757      -37.2412       37.2412       189.969       227.210    
   6  0.229940      -1.46994      -85.0355       85.0355       191.114       276.149    
   7  0.273310E-01  -3.59973      -208.244       208.244       199.363       407.606    
   8  0.228047      -1.47820      -85.5136       85.5136       192.832       278.346    
   9  0.963384E-01  -2.33989      -135.362       135.362       192.832       328.194    
  10  0.495504     -0.702179      -40.6208       40.6208       189.277       229.898    
  11  0.930436     -0.721018E-01  -4.17107       4.17107       188.127       192.298    
  12  0.138744      -1.97513      -114.261       114.261       194.118       308.379    
  13  0.676381     -0.390999      -22.6192       22.6192       195.694       218.313    
  14  0.763696     -0.269586      -15.5955       15.5955       194.280       209.876    
  15  0.282468      -1.26419      -73.1330       73.1330       191.810       264.943    
  16  0.359172      -1.02395      -59.2354       59.2354       192.832       252.068    
  17  0.392258     -0.935834      -54.1377       54.1377       191.883       246.020    
  18  0.524686     -0.644955      -37.3104       37.3104       190.223       227.534    
  19  0.850465     -0.161972      -9.37004       9.37004       191.913       201.283    
  20  0.227056      -1.48256      -85.7654       85.7654       192.832       278.598    
  21  0.942039     -0.597082E-01  -3.45410       3.45410       189.745       193.199    
  22  0.807336     -0.214016      -12.3808       12.3808       196.763       209.144    
  23  0.345853      -1.06174      -61.4214       61.4214       199.085       260.507    
  24  0.762940     -0.270575      -15.6527       15.6527       197.273       212.926    
  25  0.589959     -0.527702      -30.5274       30.5274       193.370       223.898    
  26  0.563539     -0.573518      -33.1778       33.1778       191.073       224.251    
  27  0.812044     -0.208201      -12.0444       12.0444       191.935       203.979    
  28  0.735850     -0.306729      -17.7442       17.7442       192.832       210.577    
  29  0.396292     -0.925605      -53.5459       53.5459       193.728       247.274    
  30  0.623568     -0.472298      -27.3223       27.3223       193.388       220.710    
  31  0.925937     -0.769486E-01  -4.45145       4.45145       190.529       194.980    
  32  0.880074     -0.127749      -7.39026       7.39026       192.249       199.640    
  33  0.379958     -0.967693      -55.9808       55.9808       191.517       247.498    
  34  0.842940E-01  -2.47344      -143.088       143.088       192.846       335.934    
  35  0.199092      -1.61399      -93.3687       93.3687       189.841       283.210    
  36  0.625899     -0.468566      -27.1064       27.1064       190.163       217.270    
  37  0.888337     -0.118405      -6.84967       6.84967       191.670       198.520    
  38  0.959633     -0.412048E-01  -2.38369       2.38369       208.079       210.463    
  39  0.289813      -1.23852      -71.6479       71.6479       190.048       261.696    
  40  0.889440     -0.117163      -6.77786       6.77786       212.657       219.435    
  41  0.797260     -0.226575      -13.1073       13.1073       185.450       198.557    
  42  0.451097     -0.796073      -46.0526       46.0526       191.786       237.839    
  43  0.609578     -0.494989      -28.6349       28.6349       196.114       224.749    
  44  0.910850     -0.933770E-01  -5.40183       5.40183       193.483       198.885    
  45  0.448191     -0.802536      -46.4265       46.4265       195.490       241.917    
  46  0.831229     -0.184850      -10.6935       10.6935       187.489       198.182    
  47  0.246260      -1.40137      -81.0687       81.0687       202.792       283.860    
  48  0.280480      -1.27125      -73.5416       73.5416       193.212       266.753    
  49  0.161513      -1.82317      -105.470       105.470       215.979       321.449    
  50  0.337020      -1.08761      -62.9181       62.9181       191.350       254.268    
  51  0.160136      -1.83173      -105.965       105.965       192.845       298.810    
  52  0.268039      -1.31662      -76.1663       76.1663       191.452       267.618    
  53  0.907744     -0.967928E-01  -5.59943       5.59943       189.576       195.176    
  54  0.237998      -1.43549      -83.0428       83.0428       192.832       275.875    
  55  0.932063     -0.703547E-01  -4.07000       4.07000       193.133       197.203    
  56  0.304233      -1.18996      -68.8390       68.8390       189.245       258.084    
  57  0.471578     -0.751672      -43.4840       43.4840       199.721       243.205    
  58  0.985625     -0.144798E-01 -0.837652      0.837652       192.832       193.670    
  59  0.576194     -0.551311      -31.8932       31.8932       191.801       223.694    
  60  0.561463     -0.577209      -33.3914       33.3914       192.418       225.810    
  61  0.762775     -0.270792      -15.6652       15.6652       239.831       255.496    
  62  0.728042     -0.317397      -18.3613       18.3613       192.044       210.405    
  63  0.246589      -1.40003      -80.9914       80.9914       192.832       273.824    
  64  0.128678      -2.05044      -118.617       118.617       186.433       305.051    
  65  0.646131     -0.436753      -25.2660       25.2660       191.800       217.066    
  66  0.520849E-01  -2.95488      -170.939       170.939       191.708       362.647    
  67  0.103665      -2.26659      -131.121       131.121       192.832       323.954    
  68  0.209683      -1.56216      -90.3704       90.3704       189.414       279.785    
  69  0.401865     -0.911640      -52.7381       52.7381       197.741       250.479    
  70  0.111589      -2.19294      -126.861       126.861       185.359       312.220    
  71  0.683688     -0.380253      -21.9975       21.9975       204.512       226.510    
  72  0.912223     -0.918706E-01  -5.31469       5.31469       208.424       213.738    
loop,thermsimp(1:2)       28   12.2861       238.498    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125        192.19          0.84          1.11         25.21          0.06          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126        208.49          0.84          1.10         25.13          0.06          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       28
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       29
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      125     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -124.675       124.675       188.127       312.801    
   2  0.685048     -0.378267      -21.8826       21.8826       189.745       211.627    
   3  0.739526     -0.301746      -17.4559       17.4559       192.832       210.288    
   4  0.161448      -1.82357      -105.493       105.493       190.529       296.022    
   5  0.819608     -0.198929      -11.5080       11.5080       189.576       201.084    
   6  0.750679     -0.286777      -16.5899       16.5899       193.133       209.723    
   7  0.797409     -0.226388      -13.0965       13.0965       187.489       200.585    
   8  0.193123      -1.64443      -95.1298       95.1298       191.670       286.800    
   9  0.189346E-01  -3.96676      -229.476       229.476       185.450       414.926    
  10  0.715264     -0.335103      -19.3856       19.3856       193.483       212.869    
  11  0.384856     -0.954886      -55.2399       55.2399       192.249       247.489    
  12  0.268023      -1.31668      -76.1697       76.1697       191.913       268.083    
  13  0.777164     -0.252104      -14.5841       14.5841       191.935       206.519    
  14  0.707495E-01  -2.64861      -153.221       153.221       192.049       345.270    
  15  0.233610      -1.45410      -84.1194       84.1194       189.875       273.994    
  16  0.193057      -1.64477      -95.1496       95.1496       196.763       291.913    
  17  0.486879     -0.719739      -41.6367       41.6367       194.280       235.917    
  18  0.735370     -0.307381      -17.7819       17.7819       192.044       209.826    
  19  0.147509      -1.91387      -110.717       110.717       208.079       318.796    
  20  0.739111     -0.302308      -17.4884       17.4884       192.832       210.321    
  21  0.886241     -0.120766      -6.98627       6.98627       197.273       204.260    
  22  0.158672      -1.84092      -106.496       106.496       208.424       314.920    
  23  0.143658      -1.94032      -112.247       112.247       191.800       304.047    
  24  0.637431E-02  -5.05548      -292.458       292.458       190.163       482.621    
  25  0.753372     -0.283196      -16.3828       16.3828       195.694       212.077    
  26  0.555831     -0.587292      -33.9747       33.9747       212.657       246.631    
  27  0.280013      -1.27292      -73.6380       73.6380       193.388       267.026    
  28  0.811304     -0.209112      -12.0971       12.0971       191.801       203.898    
  29  0.972296E-02  -4.63327      -268.033       268.033       193.370       461.403    
  30  0.713459     -0.337631      -19.5319       19.5319       191.073       210.605    
  31  0.194621      -1.63670      -94.6825       94.6825       196.114       290.797    
  32  0.492587     -0.708083      -40.9624       40.9624       192.418       233.381    
  33  0.759094E-01  -2.57821      -149.149       149.149       204.512       353.661    
  34  0.494544     -0.704119      -40.7331       40.7331       189.969       230.702    
  35  0.297023      -1.21395      -70.2265       70.2265       190.223       260.450    
  36  0.429878E-01  -3.14684      -182.044       182.044       189.277       371.321    
  37  0.490931     -0.711452      -41.1573       41.1573       191.786       232.944    
  38  0.534417     -0.626578      -36.2474       36.2474       195.490       231.737    
  39  0.254967      -1.36662      -79.0585       79.0585       199.721       278.779    
  40  0.995945     -0.406335E-02 -0.235064      0.235064       191.883       192.118    
  41  0.428814E-01  -3.14932      -182.187       182.187       193.728       375.915    
  42  0.332915      -1.09987      -63.6270       63.6270       191.517       255.144    
  43  0.657266     -0.419666      -24.2775       24.2775       197.741       222.019    
  44  0.301071      -1.20041      -69.4432       69.4432       192.832       262.276    
  45  0.998178     -0.182349E-02 -0.105489      0.105489       191.350       191.455    
  46  0.533372     -0.628536      -36.3606       36.3606       239.831       276.191    
  47  0.244746      -1.40753      -81.4254       81.4254       189.245       270.671    
  48  0.345321      -1.06328      -61.5105       61.5105       199.085       260.596    
  49  0.339541      -1.08016      -62.4870       62.4870       190.048       252.535    
  50  0.456434     -0.784311      -45.3722       45.3722       191.810       237.182    
  51  0.510210     -0.672933      -38.9290       38.9290       193.212       232.141    
  52  0.678441     -0.387958      -22.4433       22.4433       191.452       213.895    
  53  0.802552     -0.219958      -12.7245       12.7245       192.832       205.557    
  54  0.542503     -0.611562      -35.3787       35.3787       192.832       228.211    
  55  0.887113     -0.119783      -6.92942       6.92942       191.114       198.043    
  56  0.631934     -0.458971      -26.5513       26.5513       192.832       219.384    
  57  0.776760     -0.252624      -14.6142       14.6142       192.832       207.447    
  58  0.764990     -0.267893      -15.4975       15.4975       189.414       204.912    
  59  0.329328      -1.11070      -64.2536       64.2536       189.841       254.094    
  60  0.304425      -1.18933      -68.8024       68.8024       202.792       271.594    
  61  0.992863     -0.716266E-02 -0.414358      0.414358       192.845       193.260    
  62  0.545111     -0.606767      -35.1013       35.1013       186.433       221.534    
  63  0.215175      -1.53630      -88.8747       88.8747       194.118       282.993    
  64  0.486479     -0.720562      -41.6843       41.6843       185.359       227.044    
  65  0.323711      -1.12790      -65.2489       65.2489       215.979       281.228    
  66  0.339000      -1.08176      -62.5793       62.5793       192.832       255.412    
  67  0.494013     -0.705193      -40.7952       40.7952       192.832       233.628    
  68  0.496084     -0.701011      -40.5533       40.5533       192.846       233.399    
  69  0.736144     -0.306329      -17.7210       17.7210       191.708       209.429    
  70  0.106083E-01  -4.54612      -262.992       262.992       194.812       457.803    
  71  0.106417      -2.24039      -129.606       129.606       199.363       328.968    
  72  0.378322     -0.972010      -56.2305       56.2305       192.192       248.423    
loop,thermsimp(1:2)       29   124.675       21.8826    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127        194.09          0.84          1.10         25.12          0.16          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128        197.32          0.84          1.09         24.85          0.34          0.05         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    194.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       29
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       30
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      127     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -186.736       186.736       191.350       378.086    
   2  0.712690     -0.338709      -19.5942       19.5942       191.883       211.477    
   3  0.284498      -1.25703      -72.7188       72.7188       192.845       265.564    
   4  0.132414      -2.02182      -116.962       116.962       191.114       308.075    
   5  0.868558     -0.140920      -8.15220       8.15220       187.489       195.641    
   6  0.695240     -0.363498      -21.0282       21.0282       189.576       210.604    
   7  0.777362     -0.251849      -14.5694       14.5694       191.801       206.370    
   8  0.302494      -1.19569      -69.1705       69.1705       197.273       266.444    
   9  0.710188     -0.342225      -19.7976       19.7976       189.414       209.212    
  10  0.884530     -0.122698      -7.09806       7.09806       192.832       199.930    
  11  0.146421E-01  -4.22386      -244.349       244.349       191.935       436.284    
  12  0.834801     -0.180562      -10.4454       10.4454       192.832       203.278    
  13  0.414011     -0.881863      -51.0155       51.0155       191.708       242.724    
  14  0.655777     -0.421935      -24.4088       24.4088       193.133       217.542    
  15  0.530106     -0.634679      -36.7160       36.7160       192.044       228.760    
  16  0.325231      -1.12322      -64.9780       64.9780       192.832       257.810    
  17  0.293550      -1.22571      -70.9069       70.9069       192.832       263.739    
  18  0.194161      -1.63907      -94.8197       94.8197       191.073       285.893    
  19  0.589029E-01  -2.83186      -163.823       163.823       189.745       353.567    
  20  0.385142     -0.954143      -55.1969       55.1969       195.694       250.891    
  21  0.287461      -1.24667      -72.1194       72.1194       193.483       265.602    
  22  0.528518     -0.637678      -36.8895       36.8895       191.452       228.341    
  23  0.517042     -0.659630      -38.1594       38.1594       192.832       230.992    
  24  0.453375     -0.791035      -45.7611       45.7611       186.433       232.194    
  25  0.695596     -0.362986      -20.9986       20.9986       197.741       218.740    
  26  0.645178     -0.438228      -25.3514       25.3514       185.359       210.711    
  27  0.696076     -0.362297      -20.9588       20.9588       192.832       213.791    
  28  0.483522     -0.726659      -42.0370       42.0370       189.969       232.006    
  29  0.155396E-01  -4.16436      -240.907       240.907       195.490       436.397    
  30  0.883154     -0.124256      -7.18817       7.18817       193.212       200.400    
  31  0.525944     -0.642561      -37.1720       37.1720       191.786       228.958    
  32  0.746799     -0.291959      -16.8897       16.8897       192.418       209.308    
  33  0.458658     -0.779449      -45.0909       45.0909       192.846       237.937    
  34  0.614284     -0.487298      -28.1901       28.1901       192.832       221.022    
  35  0.581412     -0.542295      -31.3716       31.3716       194.280       225.652    
  36  0.820935     -0.197312      -11.4144       11.4144       191.810       203.224    
  37  0.852366     -0.159739      -9.24085       9.24085       212.657       221.898    
  38  0.527059     -0.640443      -37.0494       37.0494       192.249       229.299    
  39  0.376404     -0.977092      -56.5245       56.5245       192.192       248.717    
  40  0.729525E-01  -2.61795      -151.447       151.447       190.048       341.495    
  41  0.342258      -1.07219      -62.0259       62.0259       189.841       251.867    
  42  0.955065     -0.459761E-01  -2.65970       2.65970       191.517       194.177    
  43  0.508654E-01  -2.97857      -172.309       172.309       192.832       365.142    
  44  0.471716     -0.751379      -43.4670       43.4670       190.223       233.690    
  45  0.137118      -1.98691      -114.942       114.942       199.085       314.028    
  46  0.844826     -0.168625      -9.75488       9.75488       192.832       202.587    
  47  0.841708     -0.172322      -9.96876       9.96876       193.388       203.357    
  48  0.360396E-01  -3.32314      -192.242       192.242       191.913       384.156    
  49  0.953282     -0.478444E-01  -2.76778       2.76778       189.245       192.013    
  50  0.503408     -0.686355      -39.7054       39.7054       202.792       242.497    
  51  0.593854     -0.521122      -30.1468       30.1468       189.875       220.021    
  52  0.524910     -0.644528      -37.2857       37.2857       239.831       277.117    
  53  0.730244     -0.314377      -18.1866       18.1866       199.721       217.907    
  54  0.828919     -0.187632      -10.8545       10.8545       215.979       226.834    
  55  0.151629      -1.88632      -109.123       109.123       194.118       303.241    
  56  0.431672     -0.840089      -48.5989       48.5989       191.670       240.269    
  57  0.449333     -0.799990      -46.2792       46.2792       196.114       242.394    
  58  0.116759      -2.14764      -124.240       124.240       196.763       321.004    
  59  0.578588     -0.547165      -31.6533       31.6533       190.529       222.182    
  60  0.119282      -2.12627      -123.004       123.004       191.800       314.804    
  61  0.643272E-01  -2.74377      -158.726       158.726       188.127       346.853    
  62  0.906211     -0.984834E-01  -5.69723       5.69723       208.424       214.121    
  63  0.811859     -0.208429      -12.0576       12.0576       208.079       220.137    
  64  0.119821      -2.12175      -122.743       122.743       199.363       322.106    
  65  0.827508     -0.189336      -10.9530       10.9530       192.049       203.002    
  66  0.597713     -0.514645      -29.7721       29.7721       204.512       234.284    
  67  0.408976     -0.894099      -51.7233       51.7233       189.277       241.001    
  68  0.889044     -0.117608      -6.80360       6.80360       193.728       200.532    
  69  0.623536     -0.472349      -27.3253       27.3253       185.450       212.775    
  70  0.477389     -0.739423      -42.7754       42.7754       194.812       237.587    
  71  0.313804      -1.15899      -67.0471       67.0471       193.370       260.418    
  72  0.814527     -0.205148      -11.8677       11.8677       194.094       205.962    
loop,thermsimp(1:2)       30   186.736       19.5942    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129        188.00          0.84          1.11         25.19          0.06          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130        194.39          0.84          1.11         25.24          0.08          0.05         27.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    188.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       30
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       31
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      129     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -80.5261       80.5261       189.245       269.771    
   2  0.247647      -1.39575      -80.7438       80.7438       191.517       272.261    
   3  0.396263     -0.925678      -53.5502       53.5502       187.489       241.039    
   4  0.386461     -0.950723      -54.9991       54.9991       192.832       247.831    
   5  0.729285     -0.315691      -18.2626       18.2626       193.212       211.474    
   6  0.665866     -0.406667      -23.5256       23.5256       193.728       217.254    
   7  0.385122     -0.954194      -55.1999       55.1999       192.832       248.032    
   8  0.625701     -0.468883      -27.1247       27.1247       192.049       219.174    
   9  0.392668     -0.934792      -54.0774       54.0774       191.810       245.887    
  10  0.698356     -0.359026      -20.7696       20.7696       192.832       213.602    
  11  0.537534E-01  -2.92335      -169.115       169.115       193.388       362.503    
  12  0.289307      -1.24027      -71.7491       71.7491       194.094       265.843    
  13  0.138460E-01  -4.27976      -247.583       247.583       191.801       439.383    
  14  0.824110     -0.193451      -11.1911       11.1911       189.414       200.605    
  15  0.560983     -0.578065      -33.4409       33.4409       192.418       225.859    
  16  0.116087E-01  -4.45600      -257.778       257.778       189.576       447.355    
  17  0.218033      -1.52311      -88.1114       88.1114       185.359       273.471    
  18  0.893705E-01  -2.41497      -139.705       139.705       191.883       331.588    
  19  0.304886      -1.18782      -68.7148       68.7148       185.450       254.165    
  20  0.179833      -1.71573      -99.2544       99.2544       192.832       292.087    
  21  0.867378     -0.142281      -8.23090       8.23090       208.424       216.655    
  22  0.243287      -1.41351      -81.7713       81.7713       193.133       274.905    
  23  0.772489     -0.258138      -14.9332       14.9332       199.721       214.654    
  24  0.321011      -1.13628      -65.7335       65.7335       197.741       263.475    
  25  0.499417     -0.694314      -40.1658       40.1658       189.875       230.040    
  26  0.396806     -0.924307      -53.4709       53.4709       208.079       261.550    
  27  0.580203E-01  -2.84696      -164.696       164.696       192.832       357.528    
  28  0.854206     -0.157583      -9.11612       9.11612       212.657       221.773    
  29  0.914649     -0.892145E-01  -5.16103       5.16103       190.529       195.690    
  30  0.167601      -1.78617      -103.329       103.329       194.280       297.610    
  31  0.350137      -1.04943      -60.7093       60.7093       215.979       276.688    
  32  0.522932     -0.648304      -37.5042       37.5042       191.452       228.956    
  33  0.538779     -0.618450      -35.7771       35.7771       192.044       227.821    
  34  0.693066     -0.366629      -21.2094       21.2094       191.786       212.996    
  35  0.361961      -1.01622      -58.7879       58.7879       192.249       251.037    
  36  0.310665      -1.16904      -67.6286       67.6286       192.832       260.461    
  37  0.818669     -0.200076      -11.5743       11.5743       189.969       201.543    
  38  0.582861     -0.539807      -31.2277       31.2277       186.433       217.661    
  39  0.401728     -0.911979      -52.7577       52.7577       190.223       242.981    
  40  0.171089      -1.76557      -102.138       102.138       204.512       306.650    
  41  0.980174     -0.200248E-01  -1.15843       1.15843       194.812       195.970    
  42  0.495496     -0.702196      -40.6219       40.6219       192.846       233.468    
  43  0.436683     -0.828549      -47.9313       47.9313       191.670       239.601    
  44  0.910411     -0.938588E-01  -5.42970       5.42970       189.277       194.707    
  45  0.649932     -0.430887      -24.9267       24.9267       196.114       221.041    
  46  0.755226     -0.280738      -16.2406       16.2406       202.792       219.032    
  47  0.927352     -0.754221E-01  -4.36314       4.36314       191.708       196.071    
  48  0.848028     -0.164842      -9.53605       9.53605       192.192       201.728    
  49  0.146193      -1.92283      -111.235       111.235       195.694       306.929    
  50  0.571278     -0.559879      -32.3889       32.3889       189.841       222.230    
  51  0.244418      -1.40888      -81.5031       81.5031       192.832       274.335    
  52  0.979014     -0.212091E-01  -1.22694       1.22694       193.370       194.597    
  53  0.235747      -1.44500      -83.5926       83.5926       192.832       276.425    
  54  0.486927     -0.719642      -41.6311       41.6311       192.845       234.476    
  55  0.694010     -0.365269      -21.1307       21.1307       193.483       214.614    
  56  0.392305     -0.935716      -54.1309       54.1309       197.273       251.404    
  57  0.334373      -1.09550      -63.3743       63.3743       239.831       303.205    
  58  0.526166     -0.642138      -37.1475       37.1475       191.073       228.221    
  59  0.701539     -0.354479      -20.5065       20.5065       194.118       214.625    
  60  0.447845     -0.803307      -46.4711       46.4711       191.114       237.585    
  61  0.927856     -0.748784E-01  -4.33169       4.33169       199.085       203.417    
  62  0.453274     -0.791258      -45.7741       45.7741       191.800       237.574    
  63  0.291736      -1.23190      -71.2653       71.2653       196.763       268.028    
  64  0.497643E-02  -5.30304      -306.779       306.779       199.363       506.142    
  65  0.972200E-01  -2.33078      -134.835       134.835       190.048       324.883    
  66  0.821987     -0.196031      -11.3403       11.3403       188.127       199.467    
  67  0.652134     -0.427506      -24.7311       24.7311       189.745       214.476    
  68  0.774447     -0.255606      -14.7867       14.7867       192.832       207.619    
  69  0.103131      -2.27176      -131.421       131.421       191.350       322.771    
  70  0.767617E-01  -2.56705      -148.503       148.503       191.913       340.417    
  71  0.965592     -0.350134E-01  -2.02551       2.02551       191.935       193.960    
  72  0.631959     -0.458930      -26.5490       26.5490       188.002       214.551    
loop,thermsimp(1:2)       31   80.5261       80.7438    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131        190.45          0.83          1.11         25.20          0.04          0.05         27.23
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    132        196.10          0.84          1.11         25.15          0.08          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       31
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       32
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      131     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.227789      0.227789       191.935       192.163    
   2  0.758684E-02  -4.88134      -282.384       282.384       193.370       475.754    
   3  0.404439     -0.905254      -52.3687       52.3687       189.277       241.646    
   4  0.947917E-01  -2.35607      -136.298       136.298       190.529       326.827    
   5  0.834417     -0.181022      -10.4721       10.4721       194.812       205.284    
   6  0.891274     -0.115104      -6.65872       6.65872       191.708       198.367    
   7  0.744451     -0.295108      -17.0719       17.0719       188.127       205.199    
   8  0.559638     -0.580466      -33.5798       33.5798       189.414       222.994    
   9  0.821724     -0.196351      -11.3588       11.3588       189.969       201.327    
  10  0.847292     -0.165710      -9.58625       9.58625       192.192       201.779    
  11  0.661676     -0.412979      -23.8907       23.8907       199.085       222.976    
  12  0.993427     -0.659478E-02 -0.381506      0.381506       192.832       193.214    
  13  0.425996     -0.853326      -49.3647       49.3647       193.212       242.576    
  14  0.673132     -0.395813      -22.8977       22.8977       191.786       214.684    
  15  0.234810      -1.44898      -83.8230       83.8230       192.832       276.655    
  16  0.122926      -2.09617      -121.263       121.263       189.745       311.008    
  17  0.523553     -0.647118      -37.4356       37.4356       188.002       225.438    
  18  0.959317     -0.415333E-01  -2.40269       2.40269       193.483       195.886    
  19  0.321726      -1.13406      -65.6048       65.6048       194.118       259.723    
  20  0.493112     -0.707018      -40.9008       40.9008       199.721       240.621    
  21  0.416134     -0.876748      -50.7196       50.7196       208.424       259.143    
  22  0.409432     -0.892985      -51.6589       51.6589       193.728       245.387    
  23  0.657956     -0.418617      -24.2169       24.2169       186.433       210.650    
  24  0.904324     -0.100567      -5.81779       5.81779       202.792       208.609    
  25  0.714426     -0.336276      -19.4535       19.4535       192.049       211.503    
  26  0.150521      -1.89365      -109.547       109.547       196.114       305.662    
  27  0.758740     -0.276096      -15.9721       15.9721       212.657       228.629    
  28  0.359105      -1.02414      -59.2462       59.2462       189.841       249.087    
  29  0.666937     -0.405060      -23.4326       23.4326       192.418       215.851    
  30  0.343213      -1.06940      -61.8647       61.8647       192.044       253.908    
  31  0.484849     -0.723918      -41.8785       41.8785       191.073       232.952    
  32  0.874661     -0.133919      -7.74717       7.74717       191.452       199.199    
  33  0.994710     -0.530415E-02 -0.306843      0.306843       189.875       190.181    
  34  0.821923     -0.196109      -11.3449       11.3449       192.846       204.191    
  35  0.954096E-02  -4.65216      -269.126       269.126       192.845       461.971    
  36  0.240030      -1.42699      -82.5509       82.5509       191.800       274.350    
  37  0.279003      -1.27653      -73.8470       73.8470       191.114       264.961    
  38  0.553830     -0.590898      -34.1833       34.1833       191.670       225.853    
  39  0.400809     -0.914271      -52.8903       52.8903       187.489       240.379    
  40  0.146125      -1.92330      -111.262       111.262       190.223       301.485    
  41  0.811879     -0.208403      -12.0561       12.0561       191.810       203.866    
  42  0.349149      -1.05226      -60.8728       60.8728       192.832       253.705    
  43  0.897422     -0.108229      -6.26101       6.26101       192.832       199.093    
  44  0.114492      -2.16725      -125.375       125.375       192.249       317.624    
  45  0.831901E-01  -2.48663      -143.851       143.851       197.273       341.124    
  46  0.721169     -0.326882      -18.9100       18.9100       185.450       204.360    
  47  0.801724     -0.220991      -12.7843       12.7843       192.832       205.617    
  48  0.466569     -0.762349      -44.1017       44.1017       208.079       252.181    
  49  0.103404      -2.26911      -131.267       131.267       197.741       329.008    
  50  0.417206     -0.874175      -50.5707       50.5707       194.094       244.665    
  51  0.267666      -1.31802      -76.2468       76.2468       196.763       273.010    
  52  0.670232     -0.400131      -23.1475       23.1475       189.245       212.393    
  53  0.161265      -1.82470      -105.559       105.559       191.517       297.076    
  54  0.414706     -0.880185      -50.9184       50.9184       185.359       236.278    
  55  0.501015     -0.691119      -39.9810       39.9810       192.832       232.813    
  56  0.516090     -0.661474      -38.2661       38.2661       193.133       231.399    
  57  0.424740     -0.856278      -49.5354       49.5354       192.832       242.368    
  58  0.303796      -1.19140      -68.9220       68.9220       215.979       284.901    
  59  0.803455     -0.218834      -12.6595       12.6595       192.832       205.492    
  60  0.416256     -0.876456      -50.7027       50.7027       194.280       244.983    
  61  0.760689     -0.273531      -15.8237       15.8237       239.831       255.655    
  62  0.995587     -0.442238E-02 -0.255833      0.255833       204.512       204.768    
  63  0.961804     -0.389449E-01  -2.25295       2.25295       195.694       197.947    
  64  0.321618      -1.13439      -65.6242       65.6242       191.350       256.974    
  65  0.850055     -0.162454      -9.39793       9.39793       190.048       199.446    
  66  0.408700     -0.894773      -51.7623       51.7623       191.883       243.645    
  67  0.204039E-01  -3.89203      -225.153       225.153       191.913       417.066    
  68  0.195538      -1.63200      -94.4107       94.4107       192.832       287.243    
  69  0.577737     -0.548636      -31.7384       31.7384       193.388       225.126    
  70  0.958394     -0.424960E-01  -2.45838       2.45838       191.801       194.259    
  71  0.570540     -0.561172      -32.4636       32.4636       189.576       222.040    
  72  0.509347     -0.674626      -39.0269       39.0269       190.448       229.475    
loop,thermsimp(1:2)       32  0.227789       282.384    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133        192.09          0.84          1.11         25.09          0.08          0.05         27.16
Just calling func    0   0         27.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    134        193.07          0.84          1.11         25.14          0.07          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       32
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       33
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      133     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -45.4791       45.4791       189.875       235.354    
   2  0.588265E-01  -2.83316      -163.898       163.898       191.935       355.833    
   3  0.787103E-01  -2.54198      -147.053       147.053       192.832       339.885    
   4  0.597713     -0.514644      -29.7720       29.7720       191.801       221.573    
   5  0.110741      -2.20056      -127.302       127.302       193.483       320.785    
   6  0.677861     -0.388813      -22.4927       22.4927       195.694       218.187    
   7  0.307724      -1.17855      -68.1788       68.1788       191.708       259.887    
   8  0.550587     -0.596770      -34.5230       34.5230       192.832       227.355    
   9  0.601295     -0.508669      -29.4264       29.4264       191.452       220.878    
  10  0.487121     -0.719243      -41.6080       41.6080       190.048       231.656    
  11  0.146295      -1.92213      -111.195       111.195       189.969       301.163    
  12  0.714050     -0.336802      -19.4839       19.4839       192.192       211.676    
  13  0.723089     -0.324223      -18.7562       18.7562       191.810       210.566    
  14  0.805432     -0.216376      -12.5173       12.5173       192.846       205.363    
  15  0.123280      -2.09329      -121.096       121.096       185.450       306.547    
  16  0.853039     -0.158950      -9.19523       9.19523       204.512       213.708    
  17  0.288289      -1.24379      -71.9529       71.9529       188.127       260.080    
  18  0.705126     -0.349379      -20.2115       20.2115       194.812       215.023    
  19  0.772420     -0.258227      -14.9383       14.9383       192.832       207.771    
  20  0.962845     -0.378631E-01  -2.19037       2.19037       192.832       195.023    
  21  0.245802      -1.40323      -81.1763       81.1763       202.792       283.968    
  22  0.752702     -0.284087      -16.4343       16.4343       186.433       202.867    
  23  0.729896     -0.314853      -18.2141       18.2141       192.049       210.263    
  24  0.869278     -0.140092      -8.10430       8.10430       189.245       197.350    
  25  0.597817E-01  -2.81706      -162.966       162.966       191.786       354.752    
  26  0.984108     -0.160195E-01 -0.926724      0.926724       192.418       193.345    
  27  0.278288      -1.27910      -73.9955       73.9955       189.576       263.572    
  28  0.588278     -0.530555      -30.6925       30.6925       199.085       229.778    
  29  0.807614     -0.213671      -12.3608       12.3608       189.414       201.775    
  30  0.428679     -0.847047      -49.0014       49.0014       193.388       242.389    
  31  0.452991     -0.791883      -45.8102       45.8102       188.002       233.812    
  32  0.678742     -0.387514      -22.4176       22.4176       191.670       214.088    
  33  0.504500     -0.684188      -39.5801       39.5801       212.657       252.237    
  34  0.894800     -0.111155      -6.43028       6.43028       190.448       196.878    
  35  0.854311     -0.157461      -9.10904       9.10904       193.133       202.242    
  36  0.756230     -0.279410      -16.1638       16.1638       192.832       208.996    
  37  0.744369     -0.295219      -17.0783       17.0783       191.073       208.152    
  38  0.435758     -0.830668      -48.0539       48.0539       185.359       233.413    
  39  0.677387     -0.389513      -22.5332       22.5332       187.489       210.022    
  40  0.504989     -0.683219      -39.5240       39.5240       199.721       239.245    
  41  0.325676      -1.12185      -64.8988       64.8988       189.277       254.176    
  42  0.147207      -1.91591      -110.835       110.835       192.832       303.667    
  43  0.432041     -0.839234      -48.5495       48.5495       193.212       241.761    
  44  0.615972     -0.484555      -28.0313       28.0313       191.883       219.914    
  45  0.150867      -1.89136      -109.414       109.414       194.094       303.508    
  46  0.464307     -0.767210      -44.3829       44.3829       194.280       238.663    
  47  0.379753     -0.968234      -56.0120       56.0120       193.728       249.740    
  48  0.886192     -0.120822      -6.98950       6.98950       189.841       196.830    
  49  0.231751E-01  -3.76468      -217.785       217.785       208.079       425.865    
  50  0.257662      -1.35611      -78.4503       78.4503       192.832       271.283    
  51  0.470381E-01  -3.05680      -176.835       176.835       192.044       368.879    
  52  0.972366     -0.280233E-01  -1.62114       1.62114       239.831       241.452    
  53  0.242054      -1.41860      -82.0653       82.0653       191.350       273.415    
  54  0.660577     -0.414642      -23.9869       23.9869       208.424       232.411    
  55  0.234396      -1.45074      -83.9249       83.9249       194.118       278.043    
  56  0.891547     -0.114797      -6.64098       6.64098       191.114       197.755    
  57  0.408879E-01  -3.19692      -184.941       184.941       196.763       381.704    
  58  0.577007     -0.549901      -31.8116       31.8116       191.800       223.611    
  59  0.851462     -0.160801      -9.30228       9.30228       192.832       202.135    
  60  0.733240     -0.310283      -17.9498       17.9498       215.979       233.929    
  61  0.219002E-01  -3.82126      -221.059       221.059       192.832       413.891    
  62  0.293643      -1.22539      -70.8885       70.8885       191.517       262.406    
  63  0.552105     -0.594017      -34.3637       34.3637       190.223       224.587    
  64  0.638007E-01  -2.75199      -159.202       159.202       196.114       355.316    
  65  0.332554      -1.10095      -63.6898       63.6898       189.745       253.434    
  66  0.365239      -1.00720      -58.2665       58.2665       192.249       250.516    
  67  0.160984      -1.82645      -105.659       105.659       190.529       296.188    
  68  0.149423      -1.90098      -109.971       109.971       197.741       307.712    
  69  0.142989      -1.94499      -112.517       112.517       197.273       309.790    
  70  0.516056     -0.661540      -38.2699       38.2699       191.913       230.183    
  71  0.719056E-01  -2.63240      -152.284       152.284       192.845       345.129    
  72  0.968385     -0.321257E-01  -1.85846       1.85846       192.091       193.949    
loop,thermsimp(1:2)       33   45.4791       163.898    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    135        588.29          0.84          1.11         25.17          0.16          0.05         27.33
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    136        208.88          0.84          1.11         25.49          0.01          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    208.88
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       33
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       34
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      135     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -135.469       135.469       192.418       327.888    
   2  0.298819      -1.20792      -69.8777       69.8777       192.091       261.969    
   3  0.706385     -0.347595      -20.1083       20.1083       192.832       212.941    
   4  0.958764     -0.421100E-01  -2.43605       2.43605       189.841       192.277    
   5  0.306496      -1.18255      -68.4102       68.4102       190.448       258.858    
   6  0.905447     -0.993270E-01  -5.74603       5.74603       189.245       194.991    
   7  0.234113      -1.45195      -83.9949       83.9949       191.114       275.108    
   8  0.704141     -0.350777      -20.2923       20.2923       189.414       209.707    
   9  0.908200     -0.962902E-01  -5.57036       5.57036       192.832       198.403    
  10  0.656383     -0.421011      -24.3554       24.3554       193.133       217.489    
  11  0.967894     -0.326327E-01  -1.88779       1.88779       186.433       188.321    
  12  0.754670     -0.281475      -16.2832       16.2832       192.846       209.129    
  13  0.488960     -0.715475      -41.3900       41.3900       192.832       234.222    
  14  0.451577     -0.795009      -45.9910       45.9910       191.073       237.064    
  15  0.387599E-01  -3.25037      -188.033       188.033       192.832       380.865    
  16  0.210942E-02  -6.16134      -356.432       356.432       187.489       543.921    
  17  0.656530     -0.420787      -24.3424       24.3424       192.049       216.392    
  18  0.181246      -1.70790      -98.8016       98.8016       191.810       290.611    
  19  0.758879     -0.275913      -15.9615       15.9615       192.192       208.154    
  20  0.392052     -0.936362      -54.1682       54.1682       204.512       258.681    
  21  0.406710     -0.899654      -52.0447       52.0447       191.670       243.715    
  22  0.830107     -0.186201      -10.7717       10.7717       194.812       205.583    
  23  0.311833      -1.16529      -67.4116       67.4116       195.694       263.106    
  24  0.945407     -0.561396E-01  -3.24766       3.24766       191.883       195.130    
  25  0.303319      -1.19297      -69.0130       69.0130       191.452       260.465    
  26  0.284230      -1.25797      -72.7733       72.7733       191.801       264.574    
  27  0.292492      -1.22932      -71.1156       71.1156       191.800       262.915    
  28  0.401496     -0.912557      -52.7912       52.7912       190.223       243.014    
  29  0.379648     -0.968510      -56.0280       56.0280       192.832       248.860    
  30  0.723496E-01  -2.62625      -151.928       151.928       199.085       351.013    
  31  0.940338     -0.615157E-01  -3.55867       3.55867       191.913       195.472    
  32  0.766237     -0.266264      -15.4033       15.4033       190.048       205.451    
  33  0.984920     -0.151946E-01 -0.879002      0.879002       208.424       209.303    
  34  0.552546     -0.593218      -34.3175       34.3175       185.359       219.677    
  35  0.735557     -0.307128      -17.7672       17.7672       188.002       205.769    
  36  0.142195      -1.95056      -112.839       112.839       215.979       328.818    
  37  0.304783      -1.18816      -68.7344       68.7344       189.875       258.609    
  38  0.868582     -0.140894      -8.15066       8.15066       194.280       202.431    
  39  0.382741     -0.960397      -55.5587       55.5587       199.721       255.279    
  40  0.273812      -1.29531      -74.9335       74.9335       239.831       314.764    
  41  0.601920     -0.507631      -29.3663       29.3663       193.212       222.578    
  42  0.827744     -0.189051      -10.9366       10.9366       193.388       204.324    
  43  0.881186E-01  -2.42907      -140.521       140.521       193.728       334.249    
  44  0.386744     -0.949994      -54.9568       54.9568       192.249       247.206    
  45  0.852312     -0.159803      -9.24455       9.24455       212.657       221.901    
  46  0.830189     -0.186102      -10.7660       10.7660       189.745       200.511    
  47  0.216531      -1.53002      -88.5113       88.5113       189.277       277.789    
  48  0.835540     -0.179677      -10.3943       10.3943       191.708       202.102    
  49  0.962152     -0.385824E-01  -2.23198       2.23198       188.127       190.359    
  50  0.866477     -0.143320      -8.29100       8.29100       191.517       199.808    
  51  0.640111     -0.446114      -25.8075       25.8075       189.576       215.384    
  52  0.103467      -2.26850      -131.232       131.232       192.832       324.065    
  53  0.746080     -0.292923      -16.9455       16.9455       191.350       208.295    
  54  0.154266      -1.86908      -108.126       108.126       194.118       302.244    
  55  0.479981     -0.734008      -42.4622       42.4622       202.792       245.254    
  56  0.641740     -0.443572      -25.6605       25.6605       190.529       216.189    
  57  0.282342      -1.26463      -73.1587       73.1587       189.969       263.127    
  58  0.691857     -0.368376      -21.3104       21.3104       194.094       215.404    
  59  0.774818     -0.255127      -14.7590       14.7590       192.832       207.591    
  60  0.950647     -0.506124E-01  -2.92791       2.92791       185.450       188.378    
  61  0.946272E-01  -2.35781      -136.399       136.399       197.741       334.140    
  62  0.936976     -0.650979E-01  -3.76589       3.76589       197.273       201.039    
  63  0.339755      -1.07953      -62.4506       62.4506       193.483       255.934    
  64  0.781991     -0.245913      -14.2260       14.2260       192.832       207.058    
  65  0.524538     -0.645237      -37.3268       37.3268       192.845       230.172    
  66  0.740186     -0.300853      -17.4043       17.4043       191.786       209.191    
  67  0.713516     -0.337550      -19.5272       19.5272       196.114       215.642    
  68  0.760009     -0.274425      -15.8754       15.8754       191.935       207.810    
  69  0.813040     -0.206975      -11.9734       11.9734       192.044       204.017    
  70  0.177817E-01  -4.02959      -233.110       233.110       196.763       429.873    
  71  0.585717     -0.534918      -30.9448       30.9448       192.832       223.777    
  72  0.151688      -1.88593      -109.101       109.101       208.878       317.979    
loop,thermsimp(1:2)       34   135.469       69.8777    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137        196.03          0.84          1.11         25.09          0.13          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138        213.62          0.84          1.11         25.16          0.08          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    196.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       34
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       35
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      137     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -61.0475       61.0475       186.433       247.481    
   2  0.175000      -1.74297      -100.830       100.830       185.450       286.280    
   3  0.131587      -2.02809      -117.324       117.324       188.127       305.451    
   4  0.301717      -1.19826      -69.3192       69.3192       189.841       259.160    
   5  0.166877      -1.79050      -103.580       103.580       189.245       292.825    
   6  0.481073     -0.731736      -42.3307       42.3307       191.883       234.213    
   7  0.706381     -0.347600      -20.1086       20.1086       191.913       212.022    
   8  0.702617     -0.352943      -20.4176       20.4176       192.832       213.250    
   9  0.552795     -0.592767      -34.2914       34.2914       191.517       225.809    
  10  0.495420     -0.702349      -40.6307       40.6307       189.745       230.375    
  11  0.479343     -0.735339      -42.5391       42.5391       197.273       239.812    
  12  0.462659     -0.770765      -44.5885       44.5885       191.708       236.297    
  13  0.631315E-01  -2.76253      -159.812       159.812       194.280       354.092    
  14  0.785681     -0.241205      -13.9536       13.9536       192.044       205.997    
  15  0.767932     -0.264055      -15.2755       15.2755       193.388       208.663    
  16  0.262689E-01  -3.63937      -210.536       210.536       190.048       400.584    
  17  0.871353     -0.137708      -7.96637       7.96637       194.812       202.778    
  18  0.618350     -0.480701      -27.8084       27.8084       188.002       215.810    
  19  0.196090      -1.62918      -94.2478       94.2478       192.832       287.080    
  20  0.925050     -0.779078E-01  -4.50695       4.50695       192.832       197.339    
  21  0.903269     -0.101735      -5.88535       5.88535       191.935       197.820    
  22  0.958828     -0.420436E-01  -2.43221       2.43221       192.192       194.625    
  23  0.969274     -0.312081E-01  -1.80538       1.80538       191.350       193.155    
  24  0.313932      -1.15858      -67.0234       67.0234       192.846       259.870    
  25  0.106324      -2.24126      -129.656       129.656       191.786       321.443    
  26  0.718705     -0.330304      -19.1080       19.1080       208.424       227.532    
  27  0.751116     -0.286195      -16.5563       16.5563       189.414       205.971    
  28  0.996391     -0.361592E-02 -0.209180      0.209180       192.832       193.042    
  29  0.313387      -1.16032      -67.1240       67.1240       189.576       256.700    
  30  0.305057      -1.18726      -68.6824       68.6824       194.094       262.776    
  31  0.408833     -0.894447      -51.7435       51.7435       196.114       247.858    
  32  0.589856     -0.527877      -30.5375       30.5375       190.529       221.066    
  33  0.808683     -0.212349      -12.2843       12.2843       192.049       204.333    
  34  0.481635     -0.730569      -42.2632       42.2632       193.133       235.396    
  35  0.677481     -0.389374      -22.5252       22.5252       185.359       207.885    
  36  0.673605     -0.395111      -22.8570       22.8570       212.657       235.514    
  37  0.409374E-01  -3.19571      -184.871       184.871       193.212       378.083    
  38  0.362144      -1.01571      -58.7587       58.7587       192.832       251.591    
  39  0.364718E-01  -3.31122      -191.553       191.553       192.845       384.398    
  40  0.280272      -1.27199      -73.5845       73.5845       192.832       266.417    
  41  0.532528     -0.630120      -36.4523       36.4523       191.073       227.526    
  42  0.901591     -0.103595      -5.99292       5.99292       190.223       196.216    
  43  0.262858      -1.33614      -77.2953       77.2953       191.670       268.965    
  44  0.168755      -1.77931      -102.933       102.933       202.792       305.724    
  45  0.504619     -0.683952      -39.5664       39.5664       192.249       231.816    
  46  0.900650     -0.104639      -6.05332       6.05332       192.832       198.886    
  47  0.438495     -0.824406      -47.6916       47.6916       199.721       247.412    
  48  0.984597     -0.155233E-01 -0.898020      0.898020       193.483       194.381    
  49  0.469739     -0.755579      -43.7100       43.7100       189.875       233.585    
  50  0.252111      -1.37789      -79.7103       79.7103       204.512       284.223    
  51  0.764692     -0.268282      -15.5201       15.5201       190.448       205.968    
  52  0.848445     -0.164351      -9.50763       9.50763       191.452       200.960    
  53  0.705739     -0.348509      -20.1612       20.1612       192.091       212.252    
  54  0.449895     -0.798741      -46.2069       46.2069       191.800       238.007    
  55  0.742135     -0.298224      -17.2522       17.2522       195.694       212.946    
  56  0.305311      -1.18642      -68.6343       68.6343       189.969       258.603    
  57  0.798408     -0.225136      -13.0240       13.0240       191.801       204.825    
  58  0.807590     -0.213700      -12.3625       12.3625       191.114       203.476    
  59  0.768432     -0.263404      -15.2378       15.2378       189.277       204.515    
  60  0.895397     -0.110488      -6.39172       6.39172       191.810       198.202    
  61  0.585964     -0.534497      -30.9205       30.9205       194.118       225.039    
  62  0.785258     -0.241743      -13.9847       13.9847       239.831       253.816    
  63  0.311021      -1.16790      -67.5624       67.5624       208.878       276.441    
  64  0.803571     -0.218690      -12.6512       12.6512       192.832       205.483    
  65  0.879509     -0.128391      -7.42738       7.42738       192.418       199.846    
  66  0.605375     -0.501907      -29.0352       29.0352       215.979       245.014    
  67  0.774979     -0.254920      -14.7470       14.7470       197.741       212.488    
  68  0.621445     -0.475708      -27.5195       27.5195       193.728       221.248    
  69  0.755932     -0.279804      -16.1866       16.1866       199.085       215.272    
  70  0.211323E-01  -3.85695      -223.124       223.124       192.832       415.955    
  71  0.616355     -0.483932      -27.9953       27.9953       196.763       224.758    
  72  0.102593      -2.27699      -131.723       131.723       196.028       327.751    
loop,thermsimp(1:2)       35   61.0475       100.830    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139        191.44          0.84          1.11         25.12          0.10          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    140        194.34          0.84          1.11         25.16          0.08          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       35
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       36
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      139     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -149.240       149.240       192.832       342.072    
   2  0.962370     -0.383559E-01  -2.21888       2.21888       191.350       193.569    
   3  0.356737      -1.03076      -59.6289       59.6289       193.483       253.112    
   4  0.884319     -0.122937      -7.11188       7.11188       192.192       199.304    
   5  0.919725E-01  -2.38627      -138.045       138.045       190.223       328.268    
   6  0.900184     -0.105156      -6.08324       6.08324       192.832       198.916    
   7  0.390055     -0.941468      -54.4636       54.4636       191.935       246.399    
   8  0.263976      -1.33190      -77.0499       77.0499       191.810       268.860    
   9  0.898455     -0.107078      -6.19445       6.19445       192.832       199.027    
  10  0.697674E-01  -2.66259      -154.030       154.030       192.418       346.448    
  11  0.888938     -0.117727      -6.81049       6.81049       191.452       198.262    
  12  0.824147     -0.193406      -11.1885       11.1885       194.812       206.000    
  13  0.941109     -0.606968E-01  -3.51129       3.51129       191.114       194.625    
  14  0.885654     -0.121429      -7.02462       7.02462       192.049       199.074    
  15  0.798208     -0.225386      -13.0385       13.0385       189.277       202.316    
  16  0.365331      -1.00695      -58.2519       58.2519       191.801       250.053    
  17  0.519490     -0.654907      -37.8862       37.8862       192.832       230.718    
  18  0.922741     -0.804065E-01  -4.65149       4.65149       190.448       195.099    
  19  0.877443     -0.130744      -7.56348       7.56348       189.414       196.978    
  20  0.584844     -0.536410      -31.0312       31.0312       192.044       223.075    
  21  0.671390     -0.398406      -23.0477       23.0477       185.359       208.407    
  22  0.203335      -1.59290      -92.1487       92.1487       193.388       285.537    
  23  0.330236E-01  -3.41053      -197.298       197.298       191.913       389.212    
  24  0.879725     -0.128146      -7.41323       7.41323       192.091       199.504    
  25  0.833976     -0.181550      -10.5026       10.5026       197.741       208.244    
  26  0.901698     -0.103475      -5.98601       5.98601       195.694       201.680    
  27  0.692847     -0.366946      -21.2277       21.2277       192.832       214.060    
  28  0.550572     -0.596797      -34.5245       34.5245       199.085       233.610    
  29  0.158383E-01  -4.14532      -239.806       239.806       188.002       427.808    
  30  0.503246     -0.686677      -39.7241       39.7241       190.529       230.253    
  31  0.648812     -0.432612      -25.0265       25.0265       193.728       218.755    
  32  0.306980      -1.18097      -68.3189       68.3189       196.763       265.082    
  33  0.205188      -1.58383      -91.6241       91.6241       194.118       285.742    
  34  0.265146      -1.32748      -76.7941       76.7941       191.517       268.311    
  35  0.272730E-01  -3.60186      -208.366       208.366       191.073       399.440    
  36  0.262990E-01  -3.63823      -210.470       210.470       208.424       418.894    
  37  0.492753     -0.707748      -40.9430       40.9430       189.745       230.688    
  38  0.255065      -1.36624      -79.0363       79.0363       192.249       271.286    
  39  0.623259     -0.472794      -27.3510       27.3510       189.875       217.226    
  40  0.949296     -0.520343E-01  -3.01017       3.01017       191.883       194.893    
  41  0.982394     -0.177630E-01  -1.02758       1.02758       193.133       194.161    
  42  0.566450     -0.568366      -32.8798       32.8798       212.657       245.536    
  43  0.557613     -0.584090      -33.7894       33.7894       191.708       225.497    
  44  0.900731     -0.104549      -6.04812       6.04812       191.800       197.848    
  45  0.671339     -0.398481      -23.0520       23.0520       197.273       220.325    
  46  0.650454     -0.430084      -24.8802       24.8802       215.979       240.859    
  47  0.749315     -0.288595      -16.6952       16.6952       199.721       216.416    
  48  0.667497     -0.404220      -23.3840       23.3840       186.433       209.817    
  49  0.132870      -2.01838      -116.763       116.763       196.114       312.877    
  50  0.964787     -0.358480E-01  -2.07380       2.07380       192.832       194.906    
  51  0.835780     -0.179390      -10.3776       10.3776       239.831       250.209    
  52  0.601609     -0.508148      -29.3962       29.3962       189.576       218.972    
  53  0.937321     -0.647298E-01  -3.74460       3.74460       189.969       193.713    
  54  0.467877     -0.759550      -43.9398       43.9398       189.841       233.781    
  55  0.953249     -0.478789E-01  -2.76978       2.76978       192.846       195.616    
  56  0.827724     -0.189076      -10.9380       10.9380       194.094       205.032    
  57  0.624780     -0.470355      -27.2099       27.2099       192.832       220.042    
  58  0.821535     -0.196581      -11.3721       11.3721       191.670       203.042    
  59  0.625285     -0.469548      -27.1632       27.1632       208.878       236.042    
  60  0.581213     -0.542638      -31.3914       31.3914       204.512       235.904    
  61  0.855886E-01  -2.45820      -142.206       142.206       185.450       327.656    
  62  0.262334      -1.33814      -77.4107       77.4107       192.832       270.243    
  63  0.978265     -0.219749E-01  -1.27124       1.27124       189.245       190.517    
  64  0.600842     -0.509423      -29.4700       29.4700       188.127       217.597    
  65  0.476413     -0.741470      -42.8938       42.8938       202.792       245.686    
  66  0.922813     -0.803282E-01  -4.64696       4.64696       191.786       196.433    
  67  0.468949     -0.757261      -43.8073       43.8073       196.028       239.836    
  68  0.832153E-01  -2.48632      -143.833       143.833       194.280       338.114    
  69  0.927485     -0.752786E-01  -4.35484       4.35484       193.212       197.567    
  70  0.487372     -0.718728      -41.5782       41.5782       192.845       234.423    
  71  0.410125     -0.891292      -51.5610       51.5610       190.048       241.609    
  72  0.961670     -0.390839E-01  -2.26099       2.26099       191.444       193.705    
loop,thermsimp(1:2)       36   149.240       2.21888    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141        193.22          0.83          1.11         25.17          0.02          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    142        197.33          0.84          1.11         25.08          0.16          0.05         27.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    193.22       0.9275     -1.314      1.685     -102.6     0.9237    
                      0.4116      1.789     -99.70      3.688     0.7430E-01
                       1.973     -1.470      1.868      0.000     -40.00    
                      -2.006      0.000      0.000      0.000     -1.221    

                      -2.500     0.3120E+05 0.2986E+05  0.000      0.000    
                     -0.5672     -6.393     -4.440     -7.618      3.321    
                      -14.30     -2.994      1503.      0.000      2104.    

                       9227.      8519.      4511.     0.1470E+05  2700.    
                       3487.     0.1252E-02 0.1252E-02  0.000     0.1252E-02
                      0.1252E-02-0.1970E-02 0.1662E-01 0.1044E-02 0.1252E-02

                     -0.1324    -0.9979      0.000    -0.1882E-02 0.1252E-02
                       0.000     0.1252E-02 0.1252E-02 0.1252E-02 0.1252E-02
                      0.1252E-02 0.1252E-02 0.1643    -0.9987      0.000    

                      0.4173E-02-0.2048    -0.5958    -0.5958    -0.2337    
                      0.2091      8.901      8.799     -5021.     -4.000    
                     -0.4734    -0.5857      8.898      8.801     -5021.    

                      -4.000     0.8455E-01-0.6051      8.901      8.801    
                      -4964.     -7.000    -0.4381    -0.7028      8.884    
                       8.801     -5021.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    193.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       36
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       37
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      141     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -3.63091       3.63091       189.245       192.876    
   2  0.112532E-01  -4.48710      -259.577       259.577       191.350       450.927    
   3  0.907929     -0.965891E-01  -5.58765       5.58765       191.444       197.032    
   4  0.478640     -0.736807      -42.6241       42.6241       189.969       232.593    
   5  0.737686     -0.304237      -17.6000       17.6000       193.133       210.733    
   6  0.114880      -2.16387      -125.179       125.179       191.114       316.293    
   7  0.309837      -1.17171      -67.7830       67.7830       191.883       259.666    
   8  0.469091     -0.756958      -43.7898       43.7898       192.832       236.622    
   9  0.721151     -0.326907      -18.9115       18.9115       190.448       209.359    
  10  0.557251     -0.584740      -33.8270       33.8270       192.846       226.673    
  11  0.581534     -0.542085      -31.3595       31.3595       191.786       223.146    
  12  0.501412     -0.690326      -39.9352       39.9352       189.414       229.349    
  13  0.783062     -0.244543      -14.1468       14.1468       193.212       207.358    
  14  0.571322     -0.559803      -32.3844       32.3844       191.800       224.184    
  15  0.902729E-01  -2.40492      -139.124       139.124       191.452       330.576    
  16  0.695403E-01  -2.66585      -154.219       154.219       192.832       347.051    
  17  0.128872      -2.04894      -118.530       118.530       192.832       311.363    
  18  0.940828E-01  -2.36358      -136.732       136.732       192.049       328.782    
  19  0.326350      -1.11979      -64.7792       64.7792       192.192       256.972    
  20  0.102915      -2.27385      -131.542       131.542       192.091       323.633    
  21  0.324524      -1.12540      -65.1038       65.1038       195.694       260.798    
  22  0.259454      -1.34918      -78.0495       78.0495       189.277       267.327    
  23  0.782812     -0.244863      -14.1652       14.1652       191.670       205.835    
  24  0.383591     -0.958178      -55.4303       55.4303       194.094       249.524    
  25  0.626880     -0.466999      -27.0158       27.0158       194.812       221.828    
  26  0.292269      -1.23008      -71.1597       71.1597       197.741       268.901    
  27  0.448852     -0.801062      -46.3412       46.3412       185.359       231.701    
  28  0.685432     -0.377706      -21.8502       21.8502       186.433       208.283    
  29  0.995399     -0.461118E-02 -0.266755      0.266755       192.832       193.099    
  30  0.163323      -1.81203      -104.825       104.825       199.721       304.546    
  31  0.952940     -0.482038E-01  -2.78857       2.78857       189.875       192.663    
  32  0.861306     -0.149306      -8.63729       8.63729       188.127       196.764    
  33  0.587276     -0.532261      -30.7912       30.7912       193.728       224.519    
  34  0.908704     -0.957357E-01  -5.53828       5.53828       189.576       195.115    
  35  0.585935     -0.534546      -30.9233       30.9233       192.832       223.756    
  36  0.429836     -0.844352      -48.8455       48.8455       197.273       246.119    
  37  0.726203     -0.319926      -18.5076       18.5076       192.044       210.551    
  38  0.151145E-01  -4.19210      -242.512       242.512       191.708       434.220    
  39  0.927869     -0.748646E-01  -4.33089       4.33089       190.529       194.860    
  40  0.961645     -0.391099E-01  -2.26250       2.26250       189.745       192.007    
  41  0.253977      -1.37051      -79.2836       79.2836       192.832       272.116    
  42  0.768038     -0.263917      -15.2675       15.2675       199.085       214.353    
  43  0.569441E-01  -2.86569      -165.779       165.779       189.841       355.620    
  44  0.103919      -2.26415      -130.980       130.980       192.845       323.825    
  45  0.312226      -1.16403      -67.3387       67.3387       204.512       271.851    
  46  0.473636E-02  -5.35249      -309.640       309.640       208.878       518.518    
  47  0.192099      -1.64975      -95.4373       95.4373       196.028       291.465    
  48  0.799429     -0.223858      -12.9501       12.9501       215.979       228.929    
  49  0.164379      -1.80558      -104.452       104.452       190.048       294.500    
  50  0.421896     -0.862996      -49.9241       49.9241       212.657       262.581    
  51  0.361660      -1.01705      -58.8361       58.8361       202.792       261.628    
  52  0.346541      -1.05975      -61.3065       61.3065       191.935       253.241    
  53  0.728715     -0.316473      -18.3079       18.3079       191.801       210.108    
  54  0.305329      -1.18637      -68.6309       68.6309       239.831       308.462    
  55  0.547244     -0.602861      -34.8753       34.8753       193.483       228.358    
  56  0.942790     -0.589122E-01  -3.40805       3.40805       196.763       200.171    
  57  0.846801     -0.166290      -9.61983       9.61983       191.517       201.137    
  58  0.961806     -0.389424E-01  -2.25281       2.25281       191.810       194.063    
  59  0.101104      -2.29161      -132.569       132.569       192.832       325.401    
  60  0.181736      -1.70520      -98.6454       98.6454       192.249       290.895    
  61  0.298004      -1.21065      -70.0357       70.0357       193.388       263.424    
  62  0.840699E-01  -2.47611      -143.242       143.242       194.118       337.360    
  63  0.796444     -0.227598      -13.1665       13.1665       196.114       209.281    
  64  0.294043      -1.22403      -70.8097       70.8097       185.450       256.260    
  65  0.156591      -1.85412      -107.260       107.260       190.223       297.483    
  66  0.973381     -0.269794E-01  -1.56075       1.56075       194.280       195.841    
  67  0.515799     -0.662038      -38.2987       38.2987       192.832       231.131    
  68  0.211924      -1.55153      -89.7555       89.7555       192.418       282.174    
  69  0.830172     -0.186122      -10.7671       10.7671       191.913       202.681    
  70  0.666225     -0.406128      -23.4944       23.4944       191.073       214.568    
  71  0.756659     -0.278843      -16.1310       16.1310       208.424       224.555    
  72  0.799292     -0.224029      -12.9600       12.9600       193.218       206.178    
loop,thermsimp(1:2)       37   3.63091       259.577    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143        204.36          0.84          1.11         25.35          0.12          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144        218.98          0.85          1.11         25.44          0.09          0.05         27.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    204.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       37
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       38
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      143
neval,tstepnext:      143     143

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -57.2437       57.2437       189.745       246.988    
   2  0.687927     -0.374072      -21.6400       21.6400       189.875       211.515    
   3  0.288957      -1.24148      -71.8191       71.8191       189.245       261.064    
   4  0.192838      -1.64590      -95.2150       95.2150       192.832       288.047    
   5  0.369869     -0.994607      -57.5377       57.5377       191.810       249.348    
   6  0.735973     -0.306562      -17.7345       17.7345       190.529       208.263    
   7  0.637144     -0.450760      -26.0763       26.0763       189.576       215.653    
   8  0.703934     -0.351071      -20.3093       20.3093       194.280       214.590    
   9  0.864279     -0.145859      -8.43791       8.43791       188.127       196.565    
  10  0.473452     -0.747705      -43.2545       43.2545       191.444       234.699    
  11  0.242010      -1.41877      -82.0757       82.0757       196.763       278.839    
  12  0.510769     -0.671838      -38.8656       38.8656       191.517       230.383    
  13  0.829624     -0.186782      -10.8053       10.8053       191.913       202.719    
  14  0.228911      -1.47442      -85.2950       85.2950       191.670       276.965    
  15  0.310006      -1.17116      -67.7515       67.7515       193.218       260.970    
  16  0.248341      -1.39295      -80.5819       80.5819       193.212       273.794    
  17  0.723214     -0.324050      -18.7462       18.7462       186.433       205.179    
  18  0.420900     -0.865360      -50.0608       50.0608       196.114       246.175    
  19  0.133903      -2.01064      -116.315       116.315       190.448       306.763    
  20  0.571916     -0.558763      -32.3243       32.3243       191.801       224.125    
  21  0.609104     -0.495766      -28.6799       28.6799       192.044       220.724    
  22  0.582057     -0.541186      -31.3075       31.3075       193.133       224.441    
  23  0.440731     -0.819321      -47.3975       47.3975       199.085       246.483    
  24  0.211006      -1.55587      -90.0066       90.0066       191.073       281.080    
  25  0.665769     -0.406813      -23.5340       23.5340       194.812       218.346    
  26  0.766062     -0.266493      -15.4165       15.4165       191.786       207.203    
  27  0.321416E-01  -3.43760      -198.864       198.864       192.832       391.697    
  28  0.165897E-01  -4.09897      -237.124       237.124       191.800       428.924    
  29  0.634553     -0.454835      -26.3121       26.3121       193.728       220.040    
  30  0.981834     -0.183335E-01  -1.06059       1.06059       208.424       209.484    
  31  0.511720     -0.669978      -38.7580       38.7580       192.846       231.604    
  32  0.426358     -0.852477      -49.3155       49.3155       193.483       242.799    
  33  0.500527     -0.692094      -40.0374       40.0374       215.979       256.017    
  34  0.100483      -2.29777      -132.925       132.925       189.414       322.340    
  35  0.837324     -0.177545      -10.2709       10.2709       192.832       203.103    
  36  0.257741      -1.35580      -78.4326       78.4326       185.359       263.792    
  37  0.437184     -0.827401      -47.8649       47.8649       189.969       237.834    
  38  0.707529     -0.345976      -20.0146       20.0146       192.832       212.847    
  39  0.538379     -0.619193      -35.8201       35.8201       197.273       233.093    
  40  0.611820     -0.491317      -28.4225       28.4225       194.094       222.516    
  41  0.404533     -0.905022      -52.3552       52.3552       191.935       244.290    
  42  0.902499     -0.102588      -5.93470       5.93470       185.450       191.385    
  43  0.704299     -0.350552      -20.2793       20.2793       192.192       212.472    
  44  0.511818     -0.669786      -38.7469       38.7469       191.883       230.630    
  45  0.748131     -0.290178      -16.7867       16.7867       195.694       212.481    
  46  0.296598      -1.21538      -70.3093       70.3093       202.792       273.101    
  47  0.805122     -0.216762      -12.5396       12.5396       212.657       225.196    
  48  0.525063     -0.644236      -37.2689       37.2689       193.388       230.657    
  49  0.192567      -1.64731      -95.2965       95.2965       189.277       284.574    
  50  0.991898     -0.813527E-02 -0.470623      0.470623       197.741       198.212    
  51  0.238175      -1.43475      -82.9998       82.9998       204.512       287.512    
  52  0.627675     -0.465733      -26.9425       26.9425       192.832       219.775    
  53  0.328849      -1.11216      -64.3379       64.3379       192.418       256.756    
  54  0.697651     -0.360037      -20.8280       20.8280       192.249       213.077    
  55  0.154345      -1.86857      -108.096       108.096       196.028       304.124    
  56  0.196838      -1.62537      -94.0274       94.0274       190.048       284.075    
  57  0.397903     -0.921546      -53.3112       53.3112       190.223       243.534    
  58  0.746135E-01  -2.59543      -150.145       150.145       199.721       349.866    
  59  0.283843      -1.25934      -72.8522       72.8522       239.831       312.683    
  60  0.540853E-02  -5.21978      -301.963       301.963       192.832       494.795    
  61  0.534720     -0.626011      -36.2146       36.2146       191.114       227.328    
  62  0.909816     -0.945126E-01  -5.46752       5.46752       192.091       197.558    
  63  0.190142      -1.65998      -96.0295       96.0295       192.845       288.875    
  64  0.150854      -1.89144      -109.419       109.419       192.832       302.252    
  65  0.385455     -0.953330      -55.1499       55.1499       192.049       247.199    
  66  0.655101     -0.422966      -24.4685       24.4685       191.452       215.920    
  67  0.527025     -0.640508      -37.0532       37.0532       194.118       231.171    
  68  0.110501      -2.20273      -127.427       127.427       192.832       320.260    
  69  0.206094      -1.57942      -91.3690       91.3690       189.841       281.210    
  70  0.961998     -0.387429E-01  -2.24126       2.24126       191.708       193.949    
  71  0.842154     -0.171793      -9.93817       9.93817       191.350       201.288    
  72  0.178445      -1.72347      -99.7024       99.7024       204.357       304.059    
loop,thermsimp(1:2)       38   57.2437       21.6400    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145        192.71          0.85          1.11         25.09          0.06          0.05         27.16
Just calling func    0   0         27.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146        196.44          0.84          1.11         25.12          0.06          0.04         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    57.8497               143
loop is:       38
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    57.8497               143
loop is:       39
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    28.9248               214

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      145     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -9.33115       9.33115       185.450       194.781    
   2  0.309663      -1.17227      -33.9077       33.9077       191.708       225.616    
   3  0.688114     -0.373801      -10.8121       10.8121       188.127       198.939    
   4  0.677876     -0.388791      -11.2457       11.2457       192.091       203.337    
   5  0.283701      -1.25984      -36.4406       36.4406       197.741       234.182    
   6  0.183733      -1.69427      -49.0065       49.0065       191.350       240.356    
   7  0.243414      -1.41299      -40.8706       40.8706       191.913       232.784    
   8  0.785389     -0.241576      -6.98754       6.98754       192.832       199.820    
   9  0.258033      -1.35467      -39.1836       39.1836       186.433       225.617    
  10  0.137887      -1.98132      -57.3095       57.3095       191.786       249.096    
  11  0.386520     -0.950573      -27.4952       27.4952       190.529       218.024    
  12  0.882934     -0.124505      -3.60130       3.60130       208.424       212.025    
  13  0.395106     -0.928602      -26.8597       26.8597       189.875       216.734    
  14  0.107633      -2.22903      -64.4744       64.4744       192.192       256.667    
  15  0.434094     -0.834495      -24.1376       24.1376       195.694       219.832    
  16  0.558484     -0.582529      -16.8496       16.8496       192.832       209.682    
  17  0.102706      -2.27589      -65.8297       65.8297       192.249       258.079    
  18  0.325804      -1.12146      -32.4380       32.4380       194.280       226.718    
  19  0.693871     -0.365469      -10.5711       10.5711       189.576       200.147    
  20  0.832622     -0.183176      -5.29833       5.29833       191.452       196.750    
  21  0.691207     -0.369316      -10.6824       10.6824       194.812       205.494    
  22  0.903946     -0.100985      -2.92098       2.92098       192.832       195.753    
  23  0.258785E-01  -3.65434      -105.701       105.701       193.728       299.430    
  24  0.247338      -1.39700      -40.4080       40.4080       192.044       232.452    
  25  0.861464     -0.149122      -4.31334       4.31334       194.094       198.407    
  26  0.954919     -0.461290E-01  -1.33427       1.33427       191.801       193.135    
  27  0.579638     -0.545352      -15.7742       15.7742       193.133       208.908    
  28  0.537182     -0.621418      -17.9744       17.9744       212.657       230.631    
  29  0.407710     -0.897199      -25.9513       25.9513       191.114       217.065    
  30  0.958466     -0.424211E-01  -1.22702       1.22702       191.517       192.744    
  31  0.884674     -0.122536      -3.54434       3.54434       191.883       195.427    
  32  0.395055     -0.928731      -26.8634       26.8634       193.388       220.251    
  33  0.325425      -1.12262      -32.4717       32.4717       194.118       226.590    
  34  0.679842     -0.385895      -11.1620       11.1620       192.846       204.008    
  35  0.765292     -0.267498      -7.73733       7.73733       197.273       205.011    
  36  0.217460      -1.52574      -44.1318       44.1318       191.444       235.576    
  37  0.181189      -1.70822      -49.4099       49.4099       189.969       239.378    
  38  0.518456     -0.656899      -19.0007       19.0007       193.483       212.484    
  39  0.249864E-01  -3.68942      -106.716       106.716       190.223       296.939    
  40  0.336654      -1.08870      -31.4905       31.4905       191.935       223.425    
  41  0.873801     -0.134903      -3.90204       3.90204       196.114       200.017    
  42  0.478904     -0.736255      -21.2961       21.2961       199.085       220.381    
  43  0.819950     -0.198512      -5.74194       5.74194       189.745       195.487    
  44  0.966813     -0.337500E-01 -0.976214      0.976214       192.049       193.025    
  45  0.514109     -0.665319      -19.2443       19.2443       191.810       211.054    
  46  0.483734     -0.726221      -21.0058       21.0058       215.979       236.985    
  47  0.227743E-01  -3.78212      -109.397       109.397       192.418       301.816    
  48  0.409495     -0.892830      -25.8250       25.8250       193.218       219.043    
  49  0.198361      -1.61767      -46.7908       46.7908       189.245       236.036    
  50  0.925767     -0.771331E-01  -2.23106       2.23106       185.359       187.591    
  51  0.842113     -0.171842      -4.97049       4.97049       202.792       207.762    
  52  0.347114E-01  -3.36069      -97.2073       97.2073       193.212       290.419    
  53  0.215814      -1.53334      -44.3516       44.3516       191.670       236.022    
  54  0.219309      -1.51727      -43.8869       43.8869       196.763       240.650    
  55  0.940126     -0.617416E-01  -1.78587       1.78587       191.073       192.859    
  56  0.663408     -0.410365      -11.8698       11.8698       189.841       201.711    
  57  0.630947     -0.460533      -13.3208       13.3208       190.048       203.369    
  58  0.719671     -0.328961      -9.51514       9.51514       189.277       198.792    
  59  0.939094     -0.628392E-01  -1.81761       1.81761       204.512       206.330    
  60  0.901520     -0.103673      -2.99873       2.99873       192.832       195.831    
  61  0.771028     -0.260031      -7.52135       7.52135       192.845       200.367    
  62  0.320616      -1.13751      -32.9023       32.9023       192.832       225.735    
  63  0.893890     -0.112173      -3.24458       3.24458       204.357       207.601    
  64  0.874332     -0.134295      -3.88446       3.88446       196.028       199.913    
  65  0.363931      -1.01079      -29.2370       29.2370       190.448       219.685    
  66  0.140534      -1.96231      -56.7595       56.7595       239.831       296.590    
  67  0.432559     -0.838038      -24.2401       24.2401       192.832       217.072    
  68  0.446579     -0.806139      -23.3175       23.3175       189.414       212.732    
  69  0.830196     -0.186093      -5.38272       5.38272       199.721       205.103    
  70  0.324418      -1.12572      -32.5614       32.5614       192.832       225.394    
  71  0.645984E-01  -2.73957      -79.2415       79.2415       191.800       271.041    
  72  0.465516     -0.764609      -22.1162       22.1162       192.707       214.823    
loop,thermsimp(1:2)       39   9.33115       33.9077    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147        192.18          0.84          1.12         25.25          0.09          0.05         27.34
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148        195.88          0.84          1.11         25.05          0.15          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       39
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       40
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      147     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -1.34297       1.34297       185.359       186.702    
   2  0.450411     -0.797594      -23.0703       23.0703       191.517       214.588    
   3  0.691912E-01  -2.67088      -77.2549       77.2549       191.073       268.328    
   4  0.740935     -0.299842      -8.67288       8.67288       192.049       200.722    
   5  0.452531     -0.792898      -22.9345       22.9345       191.801       214.735    
   6  0.461330     -0.773642      -22.3775       22.3775       185.450       207.828    
   7  0.102999      -2.27303      -65.7472       65.7472       191.883       257.630    
   8  0.475106     -0.744217      -21.5264       21.5264       189.745       211.271    
   9  0.240275      -1.42597      -41.2460       41.2460       192.832       234.078    
  10  0.276707E-01  -3.58738      -103.764       103.764       192.832       296.597    
  11  0.132701E-01  -4.32224      -125.020       125.020       191.452       316.472    
  12  0.997219     -0.278509E-02 -0.805582E-01  0.805582E-01   194.094       194.175    
  13  0.563305     -0.573934      -16.6010       16.6010       189.277       205.878    
  14  0.347949      -1.05570      -30.5360       30.5360       188.127       218.663    
  15  0.546018     -0.605103      -17.5025       17.5025       192.832       210.335    
  16  0.343968      -1.06721      -30.8688       30.8688       196.028       226.897    
  17  0.945234     -0.563230E-01  -1.62913       1.62913       196.114       197.744    
  18  0.346208      -1.06072      -30.6810       30.6810       189.576       220.257    
  19  0.406433     -0.900337      -26.0421       26.0421       192.845       218.887    
  20  0.632259     -0.458455      -13.2608       13.2608       189.841       203.102    
  21  0.983930     -0.162002E-01 -0.468588      0.468588       192.091       192.560    
  22  0.200798      -1.60546      -46.4376       46.4376       190.048       236.486    
  23  0.223962      -1.49628      -43.2796       43.2796       192.846       236.126    
  24  0.594322     -0.520335      -15.0506       15.0506       197.273       212.324    
  25  0.875298     -0.133191      -3.85253       3.85253       199.721       203.573    
  26  0.327822      -1.11529      -32.2595       32.2595       194.812       227.071    
  27  0.215105      -1.53663      -44.4467       44.4467       204.512       248.959    
  28  0.905181     -0.996198E-01  -2.88149       2.88149       204.357       207.238    
  29  0.699086     -0.357981      -10.3546       10.3546       202.792       213.146    
  30  0.747401     -0.291154      -8.42158       8.42158       193.133       201.555    
  31  0.699189     -0.357834      -10.3503       10.3503       192.832       203.183    
  32  0.563488     -0.573610      -16.5916       16.5916       191.810       208.401    
  33  0.155576      -1.86062      -53.8183       53.8183       208.424       262.242    
  34  0.380593     -0.966025      -27.9421       27.9421       193.483       221.425    
  35  0.626112     -0.468226      -13.5434       13.5434       189.414       202.958    
  36  0.372369     -0.987870      -28.5740       28.5740       192.707       221.281    
  37  0.517531     -0.658686      -19.0524       19.0524       189.875       208.927    
  38  0.673247     -0.395643      -11.4439       11.4439       191.114       202.557    
  39  0.741527     -0.299044      -8.64980       8.64980       192.832       201.482    
  40  0.280982      -1.26947      -36.7191       36.7191       190.529       227.248    
  41  0.331745      -1.10339      -31.9154       31.9154       193.218       225.134    
  42  0.712030     -0.339635      -9.82389       9.82389       190.448       200.272    
  43  0.200581      -1.60654      -46.4688       46.4688       195.694       242.163    
  44  0.989915     -0.101357E-01 -0.293174      0.293174       193.388       193.681    
  45  0.808031     -0.213155      -6.16549       6.16549       199.085       205.251    
  46  0.893446     -0.112670      -3.25896       3.25896       191.935       195.194    
  47  0.364885      -1.00817      -29.1612       29.1612       192.832       221.994    
  48  0.923731     -0.793347E-01  -2.29474       2.29474       191.708       194.003    
  49  0.504880     -0.683434      -19.7682       19.7682       186.433       206.201    
  50  0.724988     -0.321600      -9.30224       9.30224       192.832       202.135    
  51  0.927322     -0.754540E-01  -2.18250       2.18250       194.118       196.301    
  52  0.857721     -0.153476      -4.43928       4.43928       194.280       198.720    
  53  0.943333     -0.583361E-01  -1.68736       1.68736       212.657       214.344    
  54  0.794551     -0.229978      -6.65207       6.65207       192.044       198.696    
  55  0.732400     -0.311429      -9.00804       9.00804       191.913       200.921    
  56  0.143434      -1.94188      -56.1686       56.1686       197.741       253.910    
  57  0.859384     -0.151540      -4.38326       4.38326       191.444       195.827    
  58  0.677471     -0.389389      -11.2630       11.2630       191.670       202.933    
  59  0.258745      -1.35191      -39.1038       39.1038       189.245       228.349    
  60  0.380926E-01  -3.26773      -94.5187       94.5187       215.979       310.498    
  61  0.563373     -0.573814      -16.5975       16.5975       189.969       206.566    
  62  0.985538     -0.145678E-01 -0.421370      0.421370       191.350       191.771    
  63  0.647297     -0.434951      -12.5809       12.5809       196.763       209.344    
  64  0.608092     -0.497430      -14.3881       14.3881       191.786       206.174    
  65  0.944821     -0.567601E-01  -1.64178       1.64178       192.192       193.834    
  66  0.458402E-01  -3.08259      -89.1635       89.1635       192.249       281.413    
  67  0.573743E-01  -2.85816      -82.6718       82.6718       191.800       274.471    
  68  0.755011     -0.281022      -8.12853       8.12853       193.212       201.340    
  69  0.199134      -1.61378      -46.6783       46.6783       239.831       286.509    
  70  0.364851      -1.00827      -29.1639       29.1639       190.223       219.387    
  71  0.868783     -0.140661      -4.06861       4.06861       193.728       197.797    
  72  0.658442     -0.417879      -12.0871       12.0871       192.177       204.264    
loop,thermsimp(1:2)       40   1.34297       23.0703    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149        190.71          0.84          1.13         25.05          0.18          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150        191.19          0.84          1.11         25.13          0.10          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       40
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       41
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      149     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -29.7151       29.7151       185.359       215.075    
   2  0.414955     -0.879585      -25.4419       25.4419       191.350       216.792    
   3  0.407443     -0.897854      -25.9703       25.9703       192.091       218.061    
   4  0.883897     -0.123414      -3.56974       3.56974       193.388       196.958    
   5  0.520045     -0.653840      -18.9122       18.9122       192.192       211.105    
   6  0.634521     -0.454885      -13.1575       13.1575       191.708       204.866    
   7  0.344406      -1.06594      -30.8320       30.8320       194.094       224.926    
   8  0.545595     -0.605879      -17.5250       17.5250       191.935       209.460    
   9  0.766876     -0.265430      -7.67751       7.67751       191.444       199.122    
  10  0.639043     -0.447783      -12.9521       12.9521       194.118       207.070    
  11  0.850701     -0.161694      -4.67699       4.67699       196.114       200.791    
  12  0.832060     -0.183851      -5.31786       5.31786       193.728       199.046    
  13  0.728209     -0.317167      -9.17400       9.17400       192.044       201.218    
  14  0.531327     -0.632378      -18.2914       18.2914       194.280       212.572    
  15  0.188974E-01  -3.96873      -114.795       114.795       190.448       305.243    
  16  0.246817      -1.39911      -40.4689       40.4689       192.049       232.518    
  17  0.935336     -0.668496E-01  -1.93361       1.93361       191.913       193.847    
  18  0.730823     -0.313585      -9.07038       9.07038       193.212       202.282    
  19  0.482288     -0.729213      -21.0924       21.0924       192.832       213.925    
  20  0.782974E-04  -9.45500      -273.484       273.484       193.133       466.618    
  21  0.258744      -1.35192      -39.1040       39.1040       192.832       231.936    
  22  0.389044     -0.944063      -27.3069       27.3069       191.114       218.420    
  23  0.611459E-01  -2.79449      -80.8303       80.8303       191.670       272.500    
  24  0.124922      -2.08006      -60.1656       60.1656       189.414       249.580    
  25  0.253683      -1.37167      -39.6753       39.6753       189.841       229.516    
  26  0.781437     -0.246621      -7.13347       7.13347       192.832       199.966    
  27  0.835634     -0.179565      -5.19389       5.19389       199.721       204.915    
  28  0.542030     -0.612434      -17.7146       17.7146       192.177       209.892    
  29  0.463443     -0.769071      -22.2453       22.2453       199.085       221.331    
  30  0.120587      -2.11538      -61.1871       61.1871       189.277       250.464    
  31  0.733316     -0.310178      -8.97186       8.97186       191.786       200.758    
  32  0.955530     -0.454889E-01  -1.31576       1.31576       186.433       187.749    
  33  0.419735     -0.868132      -25.1106       25.1106       189.969       215.079    
  34  0.284829      -1.25587      -36.3257       36.3257       204.357       240.683    
  35  0.924079     -0.789582E-01  -2.28385       2.28385       185.450       187.734    
  36  0.432674     -0.837770      -24.2324       24.2324       191.810       216.042    
  37  0.155293      -1.86244      -53.8708       53.8708       189.875       243.745    
  38  0.634342     -0.455168      -13.1657       13.1657       196.763       209.929    
  39  0.935635     -0.665293E-01  -1.92435       1.92435       192.832       194.757    
  40  0.931832     -0.706024E-01  -2.04216       2.04216       189.745       191.787    
  41  0.875970     -0.132424      -3.83034       3.83034       197.273       201.104    
  42  0.273544      -1.29629      -37.4950       37.4950       202.792       240.287    
  43  0.799596     -0.223649      -6.46902       6.46902       212.657       219.126    
  44  0.772883     -0.257628      -7.45185       7.45185       191.517       198.969    
  45  0.274276      -1.29362      -37.4178       37.4178       191.801       229.218    
  46  0.116034      -2.15387      -62.3005       62.3005       188.127       250.427    
  47  0.700214     -0.356369      -10.3079       10.3079       192.845       203.153    
  48  0.704184E-01  -2.65330      -76.7463       76.7463       190.223       266.970    
  49  0.699980E-01  -2.65929      -76.9195       76.9195       189.576       266.496    
  50  0.186964      -1.67684      -48.5023       48.5023       192.707       241.210    
  51  0.342641      -1.07107      -30.9806       30.9806       193.483       224.464    
  52  0.989806     -0.102462E-01 -0.296369      0.296369       192.832       193.129    
  53  0.216227      -1.53143      -44.2963       44.2963       193.218       237.514    
  54  0.233793      -1.45332      -42.0371       42.0371       196.028       238.065    
  55  0.404477     -0.905159      -26.1816       26.1816       194.812       220.993    
  56  0.164502      -1.80483      -52.2045       52.2045       190.529       242.733    
  57  0.561765E-01  -2.87926      -83.2820       83.2820       189.245       272.527    
  58  0.169196E-01  -4.07928      -117.993       117.993       192.832       310.825    
  59  0.486948     -0.719597      -20.8142       20.8142       192.846       213.660    
  60  0.640730     -0.445148      -12.8758       12.8758       190.048       202.924    
  61  0.940004     -0.618708E-01  -1.78960       1.78960       195.694       197.484    
  62  0.216981      -1.52795      -44.1956       44.1956       204.512       248.708    
  63  0.131817      -2.02634      -58.6117       58.6117       197.741       256.353    
  64  0.996981     -0.302401E-02 -0.874690E-01  0.874690E-01   191.883       191.970    
  65  0.534925     -0.625629      -18.0962       18.0962       208.424       226.520    
  66  0.151104      -1.88978      -54.6617       54.6617       191.073       245.735    
  67  0.228761      -1.47508      -42.6664       42.6664       191.800       234.466    
  68  0.187751      -1.67264      -48.3809       48.3809       192.249       240.630    
  69  0.417030     -0.874597      -25.2976       25.2976       239.831       265.128    
  70  0.239615      -1.42872      -41.3255       41.3255       192.832       234.158    
  71  0.937866E-02  -4.66932      -135.059       135.059       215.979       351.039    
  72  0.929880     -0.727002E-01  -2.10284       2.10284       190.711       192.814    
loop,thermsimp(1:2)       41   29.7151       25.4419    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151        188.26          0.84          1.11         25.18          0.15          0.05         27.34
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    152        184.71          0.84          1.11         25.02          0.16          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       41
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       42
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      151     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -83.4034       83.4034       185.450       268.853    
   2  0.688513     -0.373221      -10.7954       10.7954       186.433       197.229    
   3  0.530653     -0.633647      -18.3281       18.3281       189.745       208.073    
   4  0.542886     -0.610856      -17.6689       17.6689       191.883       209.552    
   5  0.603382     -0.505205      -14.6130       14.6130       190.711       205.324    
   6  0.478412     -0.737283      -21.3258       21.3258       192.832       214.158    
   7  0.809657     -0.211144      -6.10732       6.10732       191.913       198.021    
   8  0.764585     -0.268422      -7.76406       7.76406       192.832       200.596    
   9  0.228600      -1.47578      -42.6867       42.6867       193.388       236.075    
  10  0.495526     -0.702136      -20.3092       20.3092       195.694       216.003    
  11  0.368264     -0.998954      -28.8946       28.8946       191.517       220.412    
  12  0.407647     -0.897355      -25.9558       25.9558       193.728       219.684    
  13  0.316165      -1.15149      -33.3067       33.3067       191.444       224.751    
  14  0.458518     -0.779756      -22.5543       22.5543       192.832       215.387    
  15  0.643610     -0.440663      -12.7461       12.7461       191.786       204.532    
  16  0.316553E-01  -3.45285      -99.8732       99.8732       196.114       295.988    
  17  0.570171     -0.561819      -16.2505       16.2505       197.273       213.524    
  18  0.448642E-01  -3.10412      -89.7861       89.7861       192.044       281.830    
  19  0.128957      -2.04828      -59.2462       59.2462       193.212       252.458    
  20  0.159422      -1.83620      -53.1119       53.1119       190.048       243.160    
  21  0.154083      -1.87026      -54.0970       54.0970       192.845       246.942    
  22  0.696997     -0.360974      -10.4411       10.4411       191.708       202.149    
  23  0.579421     -0.545727      -15.7851       15.7851       199.721       215.506    
  24  0.528206     -0.638269      -18.4618       18.4618       194.118       212.580    
  25  0.322914      -1.13037      -32.6957       32.6957       191.935       224.631    
  26  0.369562     -0.995437      -28.7929       28.7929       192.177       220.970    
  27  0.134248      -2.00806      -58.0830       58.0830       196.763       254.846    
  28  0.950150     -0.511358E-01  -1.47909       1.47909       192.192       193.671    
  29  0.138040      -1.98021      -57.2773       57.2773       194.280       251.558    
  30  0.316838      -1.14936      -33.2452       33.2452       192.846       226.091    
  31  0.151783      -1.88530      -54.5321       54.5321       192.832       247.364    
  32  0.338674      -1.08272      -31.3175       31.3175       185.359       216.677    
  33  0.814165     -0.205592      -5.94673       5.94673       189.969       195.915    
  34  0.578183     -0.547865      -15.8469       15.8469       191.810       207.657    
  35  0.208707      -1.56682      -45.3201       45.3201       191.350       236.670    
  36  0.540561     -0.615147      -17.7930       17.7930       192.091       209.884    
  37  0.910129     -0.941686E-01  -2.72381       2.72381       191.114       193.837    
  38  0.907740     -0.967972E-01  -2.79984       2.79984       212.657       215.457    
  39  0.549661     -0.598453      -17.3102       17.3102       194.812       212.122    
  40  0.193889      -1.64047      -47.4504       47.4504       199.085       246.536    
  41  0.807651     -0.213625      -6.17908       6.17908       193.483       199.662    
  42  0.613777     -0.488124      -14.1189       14.1189       194.094       208.213    
  43  0.664452     -0.408793      -11.8243       11.8243       208.424       220.248    
  44  0.584630     -0.536776      -15.5262       15.5262       191.801       207.327    
  45  0.618915     -0.479787      -13.8778       13.8778       189.841       203.719    
  46  0.542097     -0.612311      -17.7110       17.7110       192.832       210.543    
  47  0.133641      -2.01260      -58.2141       58.2141       192.049       250.263    
  48  0.479627     -0.734747      -21.2524       21.2524       192.832       214.085    
  49  0.225939      -1.48749      -43.0255       43.0255       191.800       234.825    
  50  0.324869      -1.12433      -32.5211       32.5211       193.218       225.739    
  51  0.669051     -0.401895      -11.6248       11.6248       196.028       207.653    
  52  0.602039     -0.507434      -14.6774       14.6774       202.792       217.469    
  53  0.143076      -1.94438      -56.2409       56.2409       192.249       248.490    
  54  0.897604     -0.108026      -3.12464       3.12464       204.357       207.481    
  55  0.165810      -1.79691      -51.9755       51.9755       192.707       244.683    
  56  0.468567     -0.758077      -21.9273       21.9273       190.529       212.456    
  57  0.641740     -0.443572      -12.8303       12.8303       189.875       202.705    
  58  0.904980     -0.998426E-01  -2.88793       2.88793       191.073       193.961    
  59  0.674132     -0.394330      -11.4059       11.4059       204.512       215.918    
  60  0.756363     -0.279234      -8.07679       8.07679       189.414       197.491    
  61  0.113892      -2.17251      -62.8395       62.8395       188.127       250.966    
  62  0.835916     -0.179227      -5.18412       5.18412       189.277       194.461    
  63  0.284183      -1.25814      -36.3914       36.3914       197.741       234.132    
  64  0.276674      -1.28492      -37.1660       37.1660       239.831       276.997    
  65  0.686678     -0.375890      -10.8725       10.8725       189.576       200.449    
  66  0.567044     -0.567318      -16.4096       16.4096       190.223       206.633    
  67  0.416554     -0.875738      -25.3306       25.3306       191.670       217.001    
  68  0.810149     -0.210537      -6.08974       6.08974       189.245       195.335    
  69  0.979175     -0.210445E-01 -0.608710      0.608710       190.448       191.057    
  70  0.334686      -1.09456      -31.6600       31.6600       192.832       224.492    
  71  0.331108      -1.10531      -31.9709       31.9709       215.979       247.950    
  72  0.734322     -0.308808      -8.93222       8.93222       184.706       193.638    
loop,thermsimp(1:2)       42   83.4034       10.7954    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153        192.51          0.84          1.11         25.10          0.17          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154        197.61          0.84          1.10         25.09          0.10          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       42
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       43
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      153     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -6.86950       6.86950       190.448       197.317    
   2  0.796559     -0.227454      -6.57907       6.57907       184.706       191.285    
   3  0.784232     -0.243051      -7.03021       7.03021       192.192       199.223    
   4  0.503549     -0.686074      -19.8446       19.8446       191.114       210.958    
   5  0.468337     -0.758566      -21.9414       21.9414       191.073       213.015    
   6  0.198518      -1.61688      -46.7679       46.7679       189.277       236.045    
   7  0.857529     -0.153700      -4.44575       4.44575       189.245       193.691    
   8  0.845427     -0.167913      -4.85686       4.85686       189.969       194.825    
   9  0.710919     -0.341197      -9.86907       9.86907       186.433       196.302    
  10  0.934107     -0.681640E-01  -1.97163       1.97163       189.414       191.386    
  11  0.565087     -0.570775      -16.5096       16.5096       191.913       208.423    
  12  0.147377      -1.91476      -55.3842       55.3842       193.483       248.867    
  13  0.471965     -0.750851      -21.7183       21.7183       189.576       211.294    
  14  0.287319      -1.24716      -36.0739       36.0739       192.832       228.906    
  15  0.526906     -0.640733      -18.5331       18.5331       191.708       210.241    
  16  0.176999      -1.73161      -50.0866       50.0866       189.875       239.961    
  17  0.868579     -0.140897      -4.07541       4.07541       189.841       193.916    
  18  0.621282     -0.475971      -13.7674       13.7674       191.786       205.554    
  19  0.181881      -1.70440      -49.2997       49.2997       190.711       240.010    
  20  0.565209     -0.570560      -16.5034       16.5034       190.223       206.727    
  21  0.927617     -0.751364E-01  -2.17331       2.17331       191.801       193.974    
  22  0.296120      -1.21699      -35.2012       35.2012       204.357       239.558    
  23  0.152389      -1.88132      -54.4168       54.4168       196.028       250.445    
  24  0.508731     -0.675835      -19.5484       19.5484       191.810       211.358    
  25  0.389654     -0.942496      -27.2616       27.2616       189.745       217.006    
  26  0.770754     -0.260386      -7.53163       7.53163       194.094       201.626    
  27  0.144347      -1.93554      -55.9851       55.9851       191.883       247.868    
  28  0.690124     -0.370884      -10.7278       10.7278       192.091       202.819    
  29  0.882429     -0.125077      -3.61784       3.61784       192.832       196.450    
  30  0.781105     -0.247045      -7.14575       7.14575       194.812       201.958    
  31  0.331946      -1.10278      -31.8978       31.8978       190.529       222.427    
  32  0.157011      -1.85144      -53.5525       53.5525       194.118       247.671    
  33  0.734200     -0.308973      -8.93700       8.93700       197.273       206.210    
  34  0.563390     -0.573784      -16.5966       16.5966       192.832       209.429    
  35  0.349498      -1.05126      -30.4074       30.4074       192.832       223.240    
  36  0.256822      -1.35937      -39.3196       39.3196       192.832       232.152    
  37  0.563556     -0.573488      -16.5881       16.5881       212.657       229.245    
  38  0.945419E-01  -2.35871      -68.2254       68.2254       199.721       267.946    
  39  0.571450     -0.559577      -16.1857       16.1857       204.512       220.698    
  40  0.583029E-01  -2.84210      -82.2074       82.2074       195.694       277.902    
  41  0.428808     -0.846746      -24.4920       24.4920       185.359       209.851    
  42  0.628450     -0.464499      -13.4356       13.4356       191.670       205.106    
  43  0.152789      -1.87869      -54.3410       54.3410       202.792       257.133    
  44  0.787004E-01  -2.54211      -73.5301       73.5301       193.728       267.258    
  45  0.170927E-01  -4.06911      -117.698       117.698       208.424       326.122    
  46  0.531078     -0.632847      -18.3050       18.3050       191.517       209.822    
  47  0.206082E-01  -3.88206      -112.288       112.288       192.177       304.466    
  48  0.909565     -0.947891E-01  -2.74176       2.74176       192.832       195.574    
  49  0.456291     -0.784625      -22.6952       22.6952       191.935       214.630    
  50  0.997425E-02  -4.60775      -133.278       133.278       191.444       324.722    
  51  0.251070      -1.38202      -39.9748       39.9748       193.218       233.193    
  52  0.548517     -0.600536      -17.3704       17.3704       192.846       210.217    
  53  0.210242      -1.55950      -45.1082       45.1082       197.741       242.849    
  54  0.848361     -0.164449      -4.75667       4.75667       191.800       196.556    
  55  0.160491E-01  -4.13210      -119.520       119.520       193.388       312.908    
  56  0.407967     -0.896570      -25.9332       25.9332       191.350       217.283    
  57  0.859929     -0.150905      -4.36492       4.36492       190.048       194.413    
  58  0.406052     -0.901274      -26.0692       26.0692       192.707       218.777    
  59  0.743169     -0.296832      -8.58583       8.58583       199.085       207.671    
  60  0.434823     -0.832817      -24.0891       24.0891       192.845       216.934    
  61  0.559897     -0.580003      -16.7765       16.7765       192.832       209.609    
  62  0.277128      -1.28328      -37.1185       37.1185       215.979       253.098    
  63  0.839691     -0.174721      -5.05379       5.05379       192.249       197.303    
  64  0.641867     -0.443375      -12.8246       12.8246       192.049       204.874    
  65  0.309074      -1.17417      -33.9628       33.9628       188.127       222.089    
  66  0.552351     -0.593572      -17.1690       17.1690       194.280       211.449    
  67  0.764824     -0.268109      -7.75502       7.75502       193.212       200.967    
  68  0.857070     -0.154235      -4.46123       4.46123       196.763       201.224    
  69  0.650112     -0.430610      -12.4553       12.4553       185.450       197.905    
  70  0.128926      -2.04851      -59.2529       59.2529       239.831       299.084    
  71  0.370422     -0.993113      -28.7256       28.7256       192.044       220.769    
  72  0.795676     -0.228564      -6.61117       6.61117       192.507       199.118    
loop,thermsimp(1:2)       43   6.86950       6.57907    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155        258.70          0.84          1.11         25.00          0.20          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    258.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       43
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       44
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      154     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -65.1943       65.1943       184.706       249.900    
   2  0.780131E-01  -2.55088      -73.7838       73.7838       189.414       263.198    
   3  0.723689     -0.323394      -9.35413       9.35413       189.245       198.599    
   4  0.439896     -0.821218      -23.7536       23.7536       189.841       213.594    
   5  0.967364     -0.331803E-01 -0.959735      0.959735       191.801       192.760    
   6  0.235884      -1.44441      -41.7795       41.7795       190.048       231.827    
   7  0.311956      -1.16489      -33.6944       33.6944       189.969       223.663    
   8  0.600573     -0.509870      -14.7479       14.7479       192.832       207.580    
   9  0.781739     -0.246234      -7.12229       7.12229       186.433       193.555    
  10  0.505036     -0.683126      -19.7593       19.7593       192.832       212.592    
  11  0.896130     -0.109670      -3.17219       3.17219       191.800       194.972    
  12  0.545040     -0.606897      -17.5544       17.5544       192.249       209.804    
  13  0.338019      -1.08465      -31.3735       31.3735       190.448       221.821    
  14  0.200467      -1.60711      -46.4853       46.4853       185.450       231.935    
  15  0.548763     -0.600089      -17.3575       17.3575       192.507       209.864    
  16  0.897241     -0.108431      -3.13635       3.13635       192.192       195.329    
  17  0.229905      -1.47009      -42.5221       42.5221       193.212       235.734    
  18  0.387828     -0.947193      -27.3974       27.3974       196.763       224.161    
  19  0.789400     -0.236482      -6.84021       6.84021       194.094       200.934    
  20  0.495667     -0.701851      -20.3009       20.3009       194.812       215.113    
  21  0.818926     -0.199761      -5.77807       5.77807       192.091       197.869    
  22  0.181319      -1.70750      -49.3891       49.3891       192.049       241.438    
  23  0.901986     -0.103156      -2.98378       2.98378       191.670       194.654    
  24  0.933790E-01  -2.37109      -68.5834       68.5834       191.786       260.370    
  25  0.171523      -1.76304      -50.9956       50.9956       197.273       248.269    
  26  0.648450     -0.433170      -12.5294       12.5294       190.223       202.753    
  27  0.777448     -0.251739      -7.28150       7.28150       199.085       206.367    
  28  0.777670     -0.251453      -7.27324       7.27324       191.913       199.187    
  29  0.972420     -0.279672E-01 -0.808948      0.808948       192.832       193.641    
  30  0.825305     -0.192002      -5.55362       5.55362       192.832       198.386    
  31  0.470649     -0.753642      -21.7990       21.7990       191.517       213.316    
  32  0.263953      -1.33198      -38.5274       38.5274       185.359       223.887    
  33  0.857551     -0.153675      -4.44503       4.44503       192.846       197.291    
  34  0.950157     -0.511279E-01  -1.47887       1.47887       191.708       193.187    
  35  0.866482     -0.143314      -4.14533       4.14533       191.114       195.259    
  36  0.904889     -0.999433E-01  -2.89084       2.89084       189.576       192.467    
  37  0.297565      -1.21212      -35.0604       35.0604       191.810       226.870    
  38  0.902696     -0.102369      -2.96102       2.96102       194.280       197.241    
  39  0.800054     -0.223076      -6.45245       6.45245       191.073       197.526    
  40  0.534162     -0.627057      -18.1375       18.1375       191.935       210.072    
  41  0.593018     -0.522530      -15.1141       15.1141       192.845       207.959    
  42  0.682417E-01  -2.68470      -77.6545       77.6545       189.745       267.399    
  43  0.336048      -1.09050      -31.5426       31.5426       191.350       222.893    
  44  0.576540     -0.550710      -15.9292       15.9292       192.707       208.637    
  45  0.217955      -1.52347      -44.0660       44.0660       204.512       248.578    
  46  0.281607      -1.26724      -36.6548       36.6548       192.044       228.699    
  47  0.306631      -1.18211      -34.1923       34.1923       188.127       222.319    
  48  0.676335E-01  -2.69365      -77.9135       77.9135       190.529       268.442    
  49  0.145631      -1.92668      -55.7289       55.7289       192.832       248.561    
  50  0.820952     -0.197291      -5.70661       5.70661       192.832       198.539    
  51  0.224137      -1.49550      -43.2570       43.2570       212.657       255.914    
  52  0.738282     -0.303430      -8.77667       8.77667       192.832       201.609    
  53  0.364089      -1.01036      -29.2244       29.2244       193.218       222.443    
  54  0.321068      -1.13610      -32.8615       32.8615       189.277       222.139    
  55  0.179504      -1.71756      -49.6801       49.6801       204.357       254.037    
  56  0.808596     -0.212456      -6.14526       6.14526       189.875       196.020    
  57  0.974692     -0.256343E-01 -0.741467      0.741467       190.711       191.452    
  58  0.559434     -0.580830      -16.8004       16.8004       197.741       214.541    
  59  0.443035E-01  -3.11669      -90.1498       90.1498       194.118       284.268    
  60  0.711672     -0.340139      -9.83846       9.83846       191.883       201.721    
  61  0.578255     -0.547741      -15.8433       15.8433       193.483       209.326    
  62  0.102770      -2.27527      -65.8117       65.8117       196.028       261.840    
  63  0.813100     -0.206901      -5.98458       5.98458       215.979       221.964    
  64  0.612419     -0.490339      -14.1830       14.1830       202.792       216.975    
  65  0.406120     -0.901107      -26.0644       26.0644       193.728       219.793    
  66  0.255858      -1.36313      -39.4284       39.4284       199.721       239.149    
  67  0.622680     -0.473723      -13.7024       13.7024       195.694       209.397    
  68  0.428339     -0.847839      -24.5236       24.5236       239.831       264.355    
  69  0.594560     -0.519934      -15.0390       15.0390       192.177       207.216    
  70  0.921341     -0.819246E-01  -2.36966       2.36966       193.388       195.758    
  71  0.152539      -1.88033      -54.3884       54.3884       191.444       245.832    
  72  0.539176     -0.617712      -17.8672       17.8672       258.696       276.563    
loop,thermsimp(1:2)       44   65.1943       73.7838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156        186.63          0.84          1.11         25.16          0.16          0.05         27.31
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    157        187.58          0.84          1.11         25.40          0.06          0.05         27.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       44
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       45
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      156     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -3.94134       3.94134       190.711       194.652    
   2  0.990306     -0.974175E-02 -0.281779      0.281779       189.576       189.858    
   3  0.488656     -0.716096      -20.7130       20.7130       191.801       212.514    
   4  0.865115E-01  -2.44748      -70.7929       70.7929       191.708       262.501    
   5  0.234262      -1.45132      -41.9791       41.9791       186.433       228.412    
   6  0.906541     -0.981186E-01  -2.83807       2.83807       192.832       195.670    
   7  0.680454     -0.384995      -11.1359       11.1359       191.670       202.806    
   8  0.575574     -0.552388      -15.9777       15.9777       191.800       207.777    
   9  0.537443E-02  -5.22610      -151.164       151.164       191.114       342.278    
  10  0.421676     -0.863518      -24.9771       24.9771       192.192       217.169    
  11  0.297588      -1.21204      -35.0582       35.0582       193.388       228.446    
  12  0.119337      -2.12581      -61.4886       61.4886       189.875       251.363    
  13  0.958276     -0.426192E-01  -1.23275       1.23275       194.280       195.513    
  14  0.115549      -2.15806      -62.4215       62.4215       192.846       255.268    
  15  0.104220      -2.26125      -65.4064       65.4064       191.073       256.480    
  16  0.719503     -0.329194      -9.52188       9.52188       192.091       201.613    
  17  0.875656     -0.132782      -3.84069       3.84069       192.832       196.673    
  18  0.578760     -0.546868      -15.8181       15.8181       192.832       208.650    
  19  0.923704     -0.793639E-01  -2.29559       2.29559       189.245       191.541    
  20  0.457980     -0.780930      -22.5883       22.5883       191.913       214.502    
  21  0.783173     -0.244401      -7.06927       7.06927       194.094       201.163    
  22  0.764479     -0.268561      -7.76808       7.76808       192.832       200.600    
  23  0.496891     -0.699384      -20.2296       20.2296       191.883       212.112    
  24  0.554859     -0.589041      -17.0379       17.0379       190.223       207.261    
  25  0.734503E-02  -4.91373      -142.129       142.129       199.085       341.214    
  26  0.117643      -2.14010      -61.9022       61.9022       192.177       254.080    
  27  0.145440      -1.92799      -55.7669       55.7669       192.832       248.599    
  28  0.375449     -0.979633      -28.3357       28.3357       192.845       221.181    
  29  0.954324E-01  -2.34934      -67.9542       67.9542       192.707       260.662    
  30  0.449085     -0.800543      -23.1556       23.1556       193.483       216.639    
  31  0.354483      -1.03709      -29.9978       29.9978       195.694       225.692    
  32  0.153971      -1.87099      -54.1181       54.1181       192.249       246.368    
  33  0.871598     -0.137427      -3.97505       3.97505       192.507       196.482    
  34  0.633061     -0.457188      -13.2241       13.2241       191.935       205.159    
  35  0.947022E-01  -2.35702      -68.1764       68.1764       192.832       261.009    
  36  0.793812     -0.230909      -6.67901       6.67901       191.517       198.196    
  37  0.760585     -0.273667      -7.91578       7.91578       189.841       197.757    
  38  0.124312      -2.08496      -60.3073       60.3073       197.741       258.048    
  39  0.961605E-03  -6.94691      -200.938       200.938       194.812       395.750    
  40  0.672529     -0.396710      -11.4748       11.4748       202.792       214.266    
  41  0.749847E-01  -2.59047      -74.9290       74.9290       193.728       268.657    
  42  0.982441     -0.177147E-01 -0.512396      0.512396       190.448       190.960    
  43  0.340727      -1.07667      -31.1426       31.1426       215.979       247.122    
  44  0.915043     -0.887846E-01  -2.56808       2.56808       189.277       191.845    
  45  0.150614      -1.89303      -54.7557       54.7557       188.127       242.882    
  46  0.892785     -0.113409      -3.28034       3.28034       193.218       196.498    
  47  0.844073     -0.169516      -4.90322       4.90322       191.350       196.253    
  48  0.469949     -0.755131      -21.8421       21.8421       189.969       211.811    
  49  0.389072     -0.943991      -27.3048       27.3048       185.359       212.664    
  50  0.738049     -0.303745      -8.78578       8.78578       196.763       205.549    
  51  0.250173      -1.38560      -40.0784       40.0784       191.810       231.888    
  52  0.383245     -0.959081      -27.7413       27.7413       192.044       219.785    
  53  0.384434     -0.955983      -27.6517       27.6517       190.048       217.700    
  54  0.479018E-01  -3.03860      -87.8911       87.8911       185.450       273.341    
  55  0.819285     -0.199323      -5.76540       5.76540       193.212       198.977    
  56  0.568165     -0.565344      -16.3525       16.3525       199.721       216.073    
  57  0.918732     -0.847606E-01  -2.45169       2.45169       192.049       194.501    
  58  0.374258     -0.982809      -28.4276       28.4276       191.444       219.872    
  59  0.966524     -0.340496E-01 -0.984880      0.984880       197.273       198.258    
  60  0.505261     -0.682680      -19.7464       19.7464       192.832       212.579    
  61  0.283819      -1.25942      -36.4285       36.4285       204.512       240.941    
  62  0.448920     -0.800911      -23.1662       23.1662       184.706       207.872    
  63  0.398648     -0.919676      -26.6015       26.6015       204.357       230.958    
  64  0.625742     -0.468817      -13.5605       13.5605       212.657       226.217    
  65  0.924606     -0.783881E-01  -2.26736       2.26736       191.786       194.054    
  66  0.546966     -0.603368      -17.4523       17.4523       196.028       213.481    
  67  0.372518     -0.987471      -28.5624       28.5624       189.414       217.977    
  68  0.167437      -1.78715      -51.6930       51.6930       239.831       291.524    
  69  0.142610      -1.94764      -56.3352       56.3352       189.745       246.080    
  70  0.935319     -0.668675E-01  -1.93413       1.93413       190.529       192.463    
  71  0.100396      -2.29864      -66.4877       66.4877       258.696       325.184    
  72  0.179415E-01  -4.02064      -116.296       116.296       186.626       302.922    
loop,thermsimp(1:2)       45   3.94134      0.281779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158        186.85          0.84          1.11         25.18          0.10          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159        199.06          0.84          1.11         25.05          0.13          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       45
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       46
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      158     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -70.2811       70.2811       189.576       259.857    
   2  0.312747      -1.16236      -33.6211       33.6211       190.448       224.069    
   3  0.317683      -1.14670      -33.1681       33.1681       189.245       222.413    
   4  0.693053     -0.366649      -10.6053       10.6053       189.277       199.883    
   5  0.361881      -1.01644      -29.4003       29.4003       190.529       219.929    
   6  0.127478      -2.05981      -59.5797       59.5797       191.786       251.366    
   7  0.718706     -0.330302      -9.55395       9.55395       192.049       201.603    
   8  0.609419E-01  -2.79783      -80.9269       80.9269       190.711       271.638    
   9  0.320798      -1.13695      -32.8860       32.8860       194.280       227.166    
  10  0.343503      -1.06856      -30.9079       30.9079       192.832       223.740    
  11  0.671828     -0.397753      -11.5050       11.5050       191.350       202.855    
  12  0.616702     -0.483369      -13.9814       13.9814       192.507       206.488    
  13  0.806358E-01  -2.51781      -72.8273       72.8273       193.218       266.045    
  14  0.997284     -0.271972E-02 -0.786676E-01  0.786676E-01   192.832       192.911    
  15  0.554344     -0.589969      -17.0648       17.0648       189.841       206.906    
  16  0.411057     -0.889023      -25.7148       25.7148       191.517       217.232    
  17  0.846258E-01  -2.46952      -71.4304       71.4304       197.273       268.704    
  18  0.737439     -0.304571      -8.80968       8.80968       193.212       202.021    
  19  0.393790     -0.931939      -26.9562       26.9562       192.832       219.789    
  20  0.965947     -0.346467E-01  -1.00215       1.00215       194.094       195.096    
  21  0.150166      -1.89601      -54.8419       54.8419       192.091       246.933    
  22  0.212005      -1.55114      -44.8666       44.8666       191.670       236.537    
  23  0.615060     -0.486036      -14.0585       14.0585       191.935       205.993    
  24  0.382142     -0.961962      -27.8246       27.8246       196.763       224.588    
  25  0.249044      -1.39013      -40.2092       40.2092       190.223       230.432    
  26  0.245943      -1.40266      -40.5716       40.5716       191.800       232.371    
  27  0.108882      -2.21749      -64.1407       64.1407       184.706       248.847    
  28  0.199835      -1.61026      -46.5766       46.5766       192.832       239.409    
  29  0.863954     -0.146235      -4.22984       4.22984       189.969       194.198    
  30  0.392842     -0.934347      -27.0258       27.0258       191.883       218.908    
  31  0.770596     -0.260592      -7.53757       7.53757       191.801       199.338    
  32  0.149868      -1.89800      -54.8994       54.8994       192.832       247.732    
  33  0.234154      -1.45178      -41.9924       41.9924       185.359       227.352    
  34  0.611512     -0.491821      -14.2258       14.2258       196.028       210.254    
  35  0.518093E-01  -2.96019      -85.6229       85.6229       202.792       288.415    
  36  0.567953     -0.565716      -16.3633       16.3633       191.913       208.277    
  37  0.190847      -1.65628      -47.9078       47.9078       199.721       247.628    
  38  0.104561      -2.25798      -65.3118       65.3118       193.483       258.795    
  39  0.135276      -2.00044      -57.8624       57.8624       192.192       250.055    
  40  0.262364      -1.33802      -38.7021       38.7021       190.048       228.750    
  41  0.463951     -0.767976      -22.2136       22.2136       189.414       211.628    
  42  0.419672     -0.868282      -25.1149       25.1149       192.044       217.159    
  43  0.897011     -0.108687      -3.14375       3.14375       191.444       194.588    
  44  0.818933     -0.199754      -5.77784       5.77784       192.845       198.623    
  45  0.136906      -1.98846      -57.5160       57.5160       195.694       253.210    
  46  0.561722     -0.576748      -16.6823       16.6823       212.657       229.339    
  47  0.991681     -0.835368E-02 -0.241629      0.241629       186.433       186.675    
  48  0.653388     -0.425585      -12.3100       12.3100       193.388       205.698    
  49  0.578557     -0.547219      -15.8282       15.8282       204.357       220.185    
  50  0.784121     -0.243191      -7.03428       7.03428       191.810       198.844    
  51  0.827307     -0.189579      -5.48355       5.48355       204.512       209.996    
  52  0.994261     -0.575522E-02 -0.166469      0.166469       188.127       188.293    
  53  0.274030      -1.29452      -37.4437       37.4437       189.745       227.188    
  54  0.879777     -0.128087      -3.70488       3.70488       192.249       195.954    
  55  0.694576E-01  -2.66704      -77.1437       77.1437       215.979       293.123    
  56  0.431517E-01  -3.14303      -90.9118       90.9118       192.832       283.744    
  57  0.620633     -0.477015      -13.7976       13.7976       189.875       203.672    
  58  0.166702      -1.79155      -51.8203       51.8203       192.177       243.998    
  59  0.785136E-01  -2.54448      -73.5988       73.5988       192.846       266.445    
  60  0.440162     -0.820613      -23.7361       23.7361       191.073       214.809    
  61  0.924092     -0.789432E-01  -2.28342       2.28342       197.741       200.024    
  62  0.957397     -0.435372E-01  -1.25931       1.25931       192.707       193.967    
  63  0.817312     -0.201734      -5.83512       5.83512       192.832       198.667    
  64  0.345978      -1.06138      -30.7002       30.7002       191.708       222.408    
  65  0.814305E-02  -4.81059      -139.146       139.146       193.728       332.874    
  66  0.961102     -0.396751E-01  -1.14760       1.14760       185.450       186.598    
  67  0.918841E-01  -2.38723      -69.0502       69.0502       239.831       308.881    
  68  0.875898     -0.132506      -3.83271       3.83271       186.626       190.459    
  69  0.884301     -0.122958      -3.55654       3.55654       258.696       262.252    
  70  0.822040E-01  -2.49855      -72.2702       72.2702       199.085       271.356    
  71  0.674949     -0.393119      -11.3709       11.3709       191.114       202.484    
  72  0.890073     -0.116452      -3.36834       3.36834       186.849       190.217    
loop,thermsimp(1:2)       46   70.2811       33.6211    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160        186.73          0.84          1.11         25.03          0.21          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161        184.49          0.84          1.11         25.06          0.14          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    184.49       0.9378     -1.302      1.868     -102.6     0.7874    
                      0.4014      1.777     -99.70      3.872     0.8648E-01
                       1.960     -1.483      1.879      0.000     -40.00    
                      0.9473      0.000      0.000      0.000     -1.221    

                      -2.500     0.3159E+05 0.2821E+05  0.000      0.000    
                     -0.5672     -6.417     -4.803     -7.838      3.826    
                      -14.61     -3.006      1431.      0.000      884.8    

                       8785.      8519.      4294.     0.1607E+05  2669.    
                       3320.    -0.2403E-02-0.2403E-02  0.000    -0.2403E-02
                     -0.2403E-02-0.7889E-02 0.4976E-01-0.2578E-02-0.2403E-02

                     -0.1385     -1.004      0.000    -0.7738E-02-0.2403E-02
                       0.000    -0.3668E-01-0.2403E-02-0.2403E-02-0.2403E-02
                     -0.2403E-02-0.2403E-02-0.1415     -1.038      0.000    

                     -0.8009E-02-0.3820    -0.6080    -0.6080    -0.2459    
                      0.1969      8.898      8.746     -4960.     -4.000    
                     -0.4856    -0.5961      8.894      8.798     -4960.    

                      -4.000     0.7236E-01-0.6309      8.898      8.798    
                      -5557.     -7.000    -0.4503    -0.6828      8.850    
                       8.798     -4960.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       46
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       47
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      160     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -91.7575       91.7575       185.450       277.208    
   2  0.581082     -0.542864      -15.7023       15.7023       186.433       202.135    
   3  0.690143     -0.370857      -10.7270       10.7270       188.127       198.854    
   4  0.958690     -0.421877E-01  -1.22027       1.22027       186.849       188.069    
   5  0.947492     -0.539367E-01  -1.56011       1.56011       186.626       188.186    
   6  0.253816E-01  -3.67373      -106.262       106.262       192.832       299.094    
   7  0.811950     -0.208316      -6.02551       6.02551       192.707       198.733    
   8  0.448512     -0.801821      -23.1925       23.1925       189.969       213.161    
   9  0.625244     -0.469613      -13.5835       13.5835       191.444       205.028    
  10  0.557627     -0.584065      -16.8940       16.8940       194.094       210.988    
  11  0.762657     -0.270947      -7.83711       7.83711       192.249       200.087    
  12  0.579328     -0.545887      -15.7897       15.7897       192.845       208.635    
  13  0.168395      -1.78144      -51.5280       51.5280       192.832       244.360    
  14  0.993282     -0.674111E-02 -0.194985      0.194985       191.810       192.005    
  15  0.573458     -0.556070      -16.0842       16.0842       191.801       207.885    
  16  0.900456     -0.104854      -3.03287       3.03287       189.277       192.310    
  17  0.961937     -0.388068E-01  -1.12248       1.12248       197.741       198.864    
  18  0.685702     -0.377312      -10.9137       10.9137       192.049       202.963    
  19  0.335644      -1.09171      -31.5774       31.5774       193.212       224.789    
  20  0.726392     -0.319666      -9.24628       9.24628       191.114       200.360    
  21  0.523515     -0.647189      -18.7198       18.7198       191.350       210.070    
  22  0.877914     -0.130206      -3.76620       3.76620       189.875       193.641    
  23  0.893563     -0.112539      -3.25517       3.25517       193.388       196.643    
  24  0.829449     -0.186994      -5.40878       5.40878       191.935       197.344    
  25  0.454457     -0.788653      -22.8117       22.8117       192.507       215.318    
  26  0.261407      -1.34168      -38.8078       38.8078       189.841       228.649    
  27  0.144225      -1.93638      -56.0096       56.0096       191.913       247.923    
  28  0.963744     -0.369299E-01  -1.06819       1.06819       204.512       205.581    
  29  0.267843      -1.31735      -38.1043       38.1043       196.028       234.133    
  30  0.251943E-01  -3.68114      -106.476       106.476       189.414       295.891    
  31  0.321532      -1.13466      -32.8198       32.8198       191.073       223.893    
  32  0.440903     -0.818930      -23.6874       23.6874       192.044       215.731    
  33  0.214416      -1.53984      -44.5396       44.5396       191.517       236.057    
  34  0.212185      -1.55030      -44.8422       44.8422       191.883       236.725    
  35  0.948253E-01  -2.35572      -68.1388       68.1388       192.832       260.971    
  36  0.507627     -0.678008      -19.6113       19.6113       190.529       210.140    
  37  0.415074     -0.879299      -25.4336       25.4336       204.357       229.790    
  38  0.768069     -0.263876      -7.63258       7.63258       191.708       199.341    
  39  0.462999E-01  -3.07261      -88.8749       88.8749       189.245       278.120    
  40  0.835390     -0.179856      -5.20232       5.20232       192.832       198.035    
  41  0.678734     -0.387526      -11.2091       11.2091       190.448       201.657    
  42  0.363569      -1.01179      -29.2657       29.2657       196.763       226.029    
  43  0.677161     -0.389846      -11.2762       11.2762       194.280       205.557    
  44  0.506668     -0.679899      -19.6660       19.6660       189.745       209.411    
  45  0.875658     -0.132779      -3.84062       3.84062       185.359       189.200    
  46  0.924863     -0.781102E-01  -2.25933       2.25933       190.048       192.307    
  47  0.794570E-01  -2.53254      -73.2533       73.2533       212.657       285.910    
  48  0.449212     -0.800261      -23.1474       23.1474       190.223       213.371    
  49  0.658987     -0.417051      -12.0632       12.0632       191.800       203.863    
  50  0.674357     -0.393995      -11.3963       11.3963       191.670       203.066    
  51  0.436334     -0.829348      -23.9888       23.9888       192.832       216.821    
  52  0.331871      -1.10301      -31.9043       31.9043       192.177       224.082    
  53  0.233029      -1.45659      -42.1318       42.1318       192.091       234.223    
  54  0.207666      -1.57183      -45.4648       45.4648       199.721       245.185    
  55  0.801765     -0.220940      -6.39066       6.39066       192.832       199.223    
  56  0.614336E-01  -2.78980      -80.6945       80.6945       184.706       265.400    
  57  0.167288      -1.78804      -51.7187       51.7187       192.192       243.911    
  58  0.718808     -0.330162      -9.54987       9.54987       191.786       201.336    
  59  0.981938     -0.182272E-01 -0.527220      0.527220       195.694       196.221    
  60  0.759328     -0.275322      -7.96365       7.96365       193.483       201.447    
  61  0.290749      -1.23530      -35.7308       35.7308       189.576       225.307    
  62  0.887200     -0.119685      -3.46187       3.46187       258.696       262.158    
  63  0.186280      -1.68051      -48.6084       48.6084       193.218       241.827    
  64  0.427708     -0.849315      -24.5663       24.5663       192.846       217.412    
  65  0.252777      -1.37525      -39.7788       39.7788       197.273       237.052    
  66  0.648648     -0.432865      -12.5205       12.5205       199.085       211.606    
  67  0.823358     -0.194364      -5.62196       5.62196       190.711       196.333    
  68  0.352572      -1.04250      -30.1542       30.1542       192.832       222.987    
  69  0.217910      -1.52367      -44.0720       44.0720       202.792       246.864    
  70  0.297394      -1.21270      -35.0771       35.0771       215.979       251.056    
  71  0.597449     -0.515086      -14.8988       14.8988       239.831       254.730    
  72  0.327024      -1.11772      -32.3299       32.3299       184.490       216.820    
loop,thermsimp(1:2)       47   91.7575       15.7023    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162        187.77          0.84          1.11         25.16          0.13          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    163        188.70          0.84          1.11         25.08          0.11          0.04         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       47
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       48
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      162     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -16.4212       16.4212       186.849       203.270    
   2  0.216137      -1.53184      -44.3083       44.3083       186.626       230.934    
   3  0.476425     -0.741444      -21.4462       21.4462       185.359       206.806    
   4  0.184047      -1.69256      -48.9572       48.9572       191.810       240.767    
   5  0.722630     -0.324858      -9.39648       9.39648       190.048       199.444    
   6  0.887750     -0.119065      -3.44393       3.44393       189.277       192.721    
   7  0.236344      -1.44247      -41.7232       41.7232       189.875       231.598    
   8  0.798055     -0.225578      -6.52480       6.52480       195.694       202.219    
   9  0.425454     -0.854597      -24.7191       24.7191       190.711       215.430    
  10  0.605701     -0.501368      -14.5020       14.5020       193.388       207.890    
  11  0.742456     -0.297792      -8.61360       8.61360       191.935       200.548    
  12  0.378462E-01  -3.27423      -94.7065       94.7065       192.832       287.539    
  13  0.341910      -1.07321      -31.0424       31.0424       192.707       223.750    
  14  0.794971E-01  -2.53203      -73.2387       73.2387       188.127       261.365    
  15  0.586423     -0.533715      -15.4376       15.4376       197.741       213.179    
  16  0.990523     -0.952170E-02 -0.275414      0.275414       192.832       193.108    
  17  0.348475      -1.05419      -30.4922       30.4922       191.708       222.200    
  18  0.998034     -0.196755E-02 -0.569110E-01  0.569110E-01   192.249       192.306    
  19  0.616072     -0.484391      -14.0109       14.0109       191.114       205.125    
  20  0.427239     -0.850411      -24.5980       24.5980       191.786       216.384    
  21  0.598160     -0.513898      -14.8644       14.8644       193.483       208.347    
  22  0.642831     -0.441873      -12.7811       12.7811       190.448       203.229    
  23  0.392766     -0.934541      -27.0314       27.0314       186.433       213.465    
  24  0.738407     -0.303260      -8.77176       8.77176       192.049       200.821    
  25  0.334341      -1.09559      -31.6899       31.6899       191.670       223.360    
  26  0.997912     -0.208996E-02 -0.604517E-01  0.604517E-01   191.800       191.860    
  27  0.492305E-01  -3.01124      -87.0997       87.0997       191.444       278.544    
  28  0.304734      -1.18832      -34.3718       34.3718       194.280       228.652    
  29  0.159886      -1.83330      -53.0278       53.0278       204.512       257.540    
  30  0.991331     -0.870666E-02 -0.251839      0.251839       191.801       192.052    
  31  0.735164     -0.307662      -8.89908       8.89908       192.845       201.744    
  32  0.279948      -1.27315      -36.8257       36.8257       189.745       226.570    
  33  0.457260     -0.782502      -22.6338       22.6338       191.350       213.984    
  34  0.678170     -0.388358      -11.2332       11.2332       190.529       201.762    
  35  0.689603     -0.371639      -10.7496       10.7496       194.094       204.844    
  36  0.468470     -0.758283      -21.9332       21.9332       199.085       221.019    
  37  0.937429     -0.646141E-01  -1.86895       1.86895       189.969       191.838    
  38  0.115915      -2.15490      -62.3301       62.3301       190.223       252.553    
  39  0.125789      -2.07315      -59.9654       59.9654       192.507       252.472    
  40  0.137562      -1.98368      -57.3777       57.3777       192.044       249.421    
  41  0.273901      -1.29499      -37.4573       37.4573       184.490       221.947    
  42  0.934963     -0.672484E-01  -1.94515       1.94515       192.832       194.777    
  43  0.450296     -0.797850      -23.0777       23.0777       192.846       215.924    
  44  0.681645     -0.383246      -11.0853       11.0853       192.832       203.918    
  45  0.282914E-01  -3.56520      -103.123       103.123       191.073       294.196    
  46  0.962226     -0.385062E-01  -1.11379       1.11379       192.177       193.291    
  47  0.771412     -0.259533      -7.50694       7.50694       193.212       200.719    
  48  0.778208     -0.250761      -7.25324       7.25324       189.576       196.829    
  49  0.945686     -0.558450E-01  -1.61531       1.61531       196.763       198.378    
  50  0.648669     -0.432833      -12.5196       12.5196       189.841       202.360    
  51  0.214283      -1.54046      -44.5575       44.5575       204.357       248.914    
  52  0.692999     -0.366726      -10.6075       10.6075       196.028       206.636    
  53  0.966323     -0.342573E-01 -0.990887      0.990887       192.091       193.082    
  54  0.975007     -0.253104E-01 -0.732100      0.732100       191.517       192.249    
  55  0.947991E-01  -2.35600      -68.1468       68.1468       191.883       260.029    
  56  0.195092      -1.63429      -47.2715       47.2715       197.273       244.545    
  57  0.459282     -0.778091      -22.5062       22.5062       193.218       215.724    
  58  0.563954     -0.572782      -16.5676       16.5676       192.192       208.760    
  59  0.482884     -0.727978      -21.0567       21.0567       192.832       213.889    
  60  0.270357      -1.30801      -37.8341       37.8341       199.721       237.555    
  61  0.184282      -1.69129      -48.9202       48.9202       202.792       251.712    
  62  0.486455     -0.720611      -20.8436       20.8436       191.913       212.757    
  63  0.348603      -1.05382      -30.4817       30.4817       215.979       246.461    
  64  0.556175     -0.586673      -16.9694       16.9694       239.831       256.800    
  65  0.125277      -2.07723      -60.0835       60.0835       192.832       252.916    
  66  0.473622     -0.747346      -21.6169       21.6169       258.696       280.313    
  67  0.762738     -0.270841      -7.83403       7.83403       184.706       192.540    
  68  0.898920     -0.106561      -3.08227       3.08227       185.450       188.532    
  69  0.646772E-01  -2.73835      -79.2063       79.2063       189.245       268.452    
  70  0.303985      -1.19078      -34.4430       34.4430       212.657       247.100    
  71  0.561577     -0.577006      -16.6898       16.6898       189.414       206.104    
  72  0.522748     -0.648656      -18.7623       18.7623       187.765       206.528    
loop,thermsimp(1:2)       48   16.4212       44.3083    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164        190.18          0.84          1.11         25.05          0.17          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    165        195.46          0.84          1.11         25.05          0.19          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       48
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       49
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      164     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -49.4448       49.4448       185.450       234.895    
   2  0.335083      -1.09338      -31.6258       31.6258       189.969       221.594    
   3  0.585160     -0.535871      -15.5000       15.5000       191.800       207.300    
   4  0.445729     -0.808044      -23.3725       23.3725       191.801       215.173    
   5  0.963605     -0.370741E-01  -1.07236       1.07236       191.517       192.590    
   6  0.538074     -0.619758      -17.9264       17.9264       192.249       210.176    
   7  0.971443     -0.289729E-01 -0.838038      0.838038       184.706       185.544    
   8  0.817136     -0.201950      -5.84137       5.84137       189.277       195.119    
   9  0.216943      -1.52812      -44.2007       44.2007       192.091       236.292    
  10  0.572311     -0.558074      -16.1422       16.1422       192.832       208.975    
  11  0.511761     -0.669897      -19.3767       19.3767       192.177       211.554    
  12  0.331920E-01  -3.40545      -98.5020       98.5020       192.832       291.334    
  13  0.662680     -0.411462      -11.9015       11.9015       189.576       201.478    
  14  0.578679     -0.547007      -15.8221       15.8221       196.763       212.585    
  15  0.473979     -0.746592      -21.5951       21.5951       190.048       211.643    
  16  0.243750      -1.41161      -40.8307       40.8307       191.935       232.766    
  17  0.784227     -0.243057      -7.03040       7.03040       193.212       200.242    
  18  0.215065      -1.53682      -44.4521       44.4521       192.049       236.501    
  19  0.813272     -0.206689      -5.97846       5.97846       192.845       198.824    
  20  0.877336     -0.130865      -3.78526       3.78526       190.529       194.314    
  21  0.911070     -0.931357E-01  -2.69394       2.69394       195.694       198.388    
  22  0.424500     -0.856844      -24.7841       24.7841       189.841       214.625    
  23  0.122508      -2.09958      -60.7301       60.7301       190.448       251.178    
  24  0.173199      -1.75331      -50.7144       50.7144       186.849       237.563    
  25  0.243010      -1.41465      -40.9186       40.9186       192.832       233.751    
  26  0.618804     -0.479966      -13.8829       13.8829       194.094       207.977    
  27  0.365303      -1.00703      -29.1281       29.1281       191.114       220.242    
  28  0.178054      -1.72567      -49.9147       49.9147       189.414       239.329    
  29  0.416122     -0.876776      -25.3606       25.3606       187.765       213.126    
  30  0.789287     -0.236625      -6.84435       6.84435       196.028       202.873    
  31  0.786736     -0.239863      -6.93801       6.93801       185.359       192.297    
  32  0.295880      -1.21780      -35.2247       35.2247       193.388       228.613    
  33  0.418649     -0.870722      -25.1855       25.1855       193.483       218.668    
  34  0.706992     -0.346736      -10.0293       10.0293       192.192       202.222    
  35  0.281863      -1.26633      -36.6285       36.6285       191.913       228.542    
  36  0.357290      -1.02921      -29.7697       29.7697       197.741       227.511    
  37  0.174180      -1.74767      -50.5510       50.5510       186.433       236.984    
  38  0.190924      -1.65588      -47.8961       47.8961       192.832       240.728    
  39  0.630369     -0.461449      -13.3473       13.3473       191.350       204.697    
  40  0.252261      -1.37729      -39.8379       39.8379       190.711       230.549    
  41  0.359213      -1.02384      -29.6144       29.6144       193.218       222.833    
  42  0.740344     -0.300640      -8.69598       8.69598       192.846       201.542    
  43  0.283211      -1.26156      -36.4905       36.4905       191.786       228.277    
  44  0.965119     -0.355039E-01  -1.02694       1.02694       199.085       200.112    
  45  0.389600     -0.942634      -27.2655       27.2655       184.490       211.755    
  46  0.598383     -0.513525      -14.8536       14.8536       191.708       206.562    
  47  0.631795     -0.459190      -13.2820       13.2820       191.670       204.952    
  48  0.997460     -0.254363E-02 -0.735742E-01  0.735742E-01   192.707       192.781    
  49  0.192532      -1.64749      -47.6535       47.6535       189.745       237.398    
  50  0.769348     -0.262212      -7.58443       7.58443       194.280       201.865    
  51  0.740745     -0.300099      -8.68032       8.68032       186.626       195.306    
  52  0.590587     -0.526639      -15.2330       15.2330       189.875       205.108    
  53  0.628310E-01  -2.76731      -80.0439       80.0439       199.721       279.765    
  54  0.515529     -0.662562      -19.1645       19.1645       191.810       210.974    
  55  0.306025      -1.18409      -34.2496       34.2496       197.273       231.523    
  56  0.686790     -0.375726      -10.8678       10.8678       215.979       226.847    
  57  0.357910      -1.02747      -29.7195       29.7195       212.657       242.376    
  58  0.267469      -1.31875      -38.1447       38.1447       204.357       242.501    
  59  0.410193     -0.891128      -25.7757       25.7757       192.044       217.820    
  60  0.490314     -0.712709      -20.6150       20.6150       202.792       223.407    
  61  0.395217     -0.928320      -26.8515       26.8515       192.507       219.358    
  62  0.641491E-01  -2.74655      -79.4434       79.4434       190.223       269.667    
  63  0.610173     -0.494012      -14.2892       14.2892       192.832       207.122    
  64  0.657523     -0.419276      -12.1275       12.1275       239.831       251.958    
  65  0.172961      -1.75469      -50.7541       50.7541       204.512       255.266    
  66  0.166793      -1.79100      -51.8044       51.8044       191.883       243.687    
  67  0.184181      -1.69184      -48.9361       48.9361       188.127       237.063    
  68  0.728490     -0.316781      -9.16286       9.16286       189.245       198.408    
  69  0.307541      -1.17915      -34.1066       34.1066       191.444       225.551    
  70  0.929000     -0.736468E-01  -2.13022       2.13022       258.696       260.826    
  71  0.111633      -2.19254      -63.4190       63.4190       192.832       256.251    
  72  0.920233     -0.831286E-01  -2.40448       2.40448       190.179       192.583    
loop,thermsimp(1:2)       49   49.4448       31.6258    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166        187.90          0.84          1.11         25.12          0.07          0.05         27.19
Just calling func    0   0         27.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       49
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       50
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      165     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -99.8116       99.8116       184.706       284.517    
   2  0.601445     -0.508421      -14.7060       14.7060       185.359       200.065    
   3  0.651191     -0.428952      -12.4074       12.4074       190.179       202.586    
   4  0.187303      -1.67503      -48.4499       48.4499       191.517       239.967    
   5  0.664603     -0.408566      -11.8177       11.8177       192.707       204.525    
   6  0.945236     -0.563208E-01  -1.62907       1.62907       190.529       192.158    
   7  0.865870     -0.144020      -4.16576       4.16576       189.277       193.443    
   8  0.674117     -0.394351      -11.4065       11.4065       186.626       198.032    
   9  0.959689E-01  -2.34373      -67.7921       67.7921       195.694       263.486    
  10  0.663337     -0.410472      -11.8728       11.8728       189.245       201.118    
  11  0.384854     -0.954891      -27.6201       27.6201       192.845       220.465    
  12  0.892338     -0.113910      -3.29484       3.29484       199.085       202.380    
  13  0.470837     -0.753243      -21.7874       21.7874       193.212       214.999    
  14  0.262618      -1.33706      -38.6741       38.6741       189.576       228.250    
  15  0.877143     -0.131085      -3.79161       3.79161       192.846       196.638    
  16  0.262102      -1.33902      -38.7310       38.7310       194.280       233.011    
  17  0.306130      -1.18375      -34.2397       34.2397       192.192       226.432    
  18  0.251844      -1.37895      -39.8858       39.8858       196.028       235.914    
  19  0.371147     -0.991157      -28.6691       28.6691       191.350       220.019    
  20  0.244393E-01  -3.71156      -107.356       107.356       191.670       299.026    
  21  0.550903     -0.596197      -17.2449       17.2449       189.875       207.119    
  22  0.509078     -0.675154      -19.5287       19.5287       191.708       211.237    
  23  0.741178     -0.299515      -8.66343       8.66343       192.832       201.496    
  24  0.585965     -0.534496      -15.4602       15.4602       191.800       207.260    
  25  0.602491     -0.506683      -14.6557       14.6557       194.094       208.750    
  26  0.532366     -0.630423      -18.2349       18.2349       192.832       211.067    
  27  0.264247      -1.33087      -38.4952       38.4952       192.249       230.745    
  28  0.468512     -0.758194      -21.9307       21.9307       191.810       213.740    
  29  0.338122      -1.08435      -31.3646       31.3646       192.177       223.542    
  30  0.815455     -0.204008      -5.90091       5.90091       190.048       195.949    
  31  0.126007      -2.07142      -59.9155       59.9155       184.490       244.405    
  32  0.391435     -0.937937      -27.1297       27.1297       196.763       223.893    
  33  0.477179     -0.739864      -21.4005       21.4005       187.765       209.166    
  34  0.926058     -0.768180E-01  -2.22195       2.22195       189.841       192.063    
  35  0.305992E-01  -3.48678      -100.855       100.855       191.801       292.655    
  36  0.142122      -1.95107      -56.4344       56.4344       192.044       248.478    
  37  0.934627E-01  -2.37019      -68.5575       68.5575       193.483       262.040    
  38  0.933240     -0.690924E-01  -1.99849       1.99849       192.507       194.505    
  39  0.551354     -0.595378      -17.2212       17.2212       191.114       208.335    
  40  0.167646      -1.78590      -51.6569       51.6569       189.969       241.626    
  41  0.657770     -0.418900      -12.1166       12.1166       193.218       205.335    
  42  0.937012     -0.650587E-01  -1.88181       1.88181       202.792       204.674    
  43  0.435130     -0.832109      -24.0686       24.0686       191.444       215.513    
  44  0.346278E-01  -3.36310      -97.2771       97.2771       215.979       313.256    
  45  0.529273     -0.636251      -18.4035       18.4035       197.741       216.145    
  46  0.543808     -0.609159      -17.6198       17.6198       191.786       209.406    
  47  0.476993     -0.740254      -21.4117       21.4117       191.913       213.325    
  48  0.602365     -0.506891      -14.6617       14.6617       193.388       208.050    
  49  0.429141     -0.845970      -24.4696       24.4696       190.711       215.180    
  50  0.161300E-01  -4.12707      -119.375       119.375       197.273       316.648    
  51  0.806405     -0.215169      -6.22374       6.22374       191.935       198.159    
  52  0.577848E-01  -2.85103      -82.4656       82.4656       192.832       275.298    
  53  0.992308     -0.772154E-02 -0.223344      0.223344       185.450       185.673    
  54  0.130687      -2.03495      -58.8607       58.8607       192.091       250.952    
  55  0.844072     -0.169518      -4.90327       4.90327       192.049       196.952    
  56  0.900890     -0.104372      -3.01896       3.01896       186.433       189.452    
  57  0.886923E-01  -2.42258      -70.0728       70.0728       188.127       258.199    
  58  0.675479     -0.392334      -11.3482       11.3482       189.745       201.093    
  59  0.486368     -0.720791      -20.8488       20.8488       186.849       207.697    
  60  0.868319E-01  -2.44378      -70.6860       70.6860       189.414       260.100    
  61  0.536051     -0.623527      -18.0354       18.0354       192.832       210.868    
  62  0.916344     -0.873636E-01  -2.52698       2.52698       212.657       215.184    
  63  0.264660E-01  -3.63190      -105.052       105.052       204.357       309.409    
  64  0.765006     -0.267871      -7.74813       7.74813       191.883       199.631    
  65  0.755495     -0.280383      -8.11003       8.11003       190.448       198.558    
  66  0.149819      -1.89833      -54.9088       54.9088       239.831       294.740    
  67  0.514409     -0.664736      -19.2274       19.2274       204.512       223.740    
  68  0.902494E-01  -2.40518      -69.5694       69.5694       192.832       262.402    
  69  0.837965     -0.176779      -5.11331       5.11331       258.696       263.809    
  70  0.833448     -0.182184      -5.26965       5.26965       190.223       195.493    
  71  0.830623     -0.185580      -5.36787       5.36787       199.721       205.088    
  72  0.391825     -0.936940      -27.1008       27.1008       187.901       215.002    
loop,thermsimp(1:2)       50   99.8116       14.7060    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167        187.99          0.84          1.11         25.10          0.08          0.05         27.17
Just calling func    0   0         27.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168        195.46          0.84          1.11         25.21          0.09          0.04         27.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       50
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       51
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      167     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -2.12102       2.12102       185.450       187.571    
   2  0.669511     -0.401208      -11.6049       11.6049       186.433       198.038    
   3  0.863337E-01  -2.44954      -70.8524       70.8524       189.841       260.693    
   4  0.279945      -1.27316      -36.8260       36.8260       190.529       227.355    
   5  0.832640     -0.183154      -5.29770       5.29770       189.277       194.575    
   6  0.848933     -0.163775      -4.73718       4.73718       192.507       197.244    
   7  0.141794      -1.95338      -56.5013       56.5013       190.223       246.725    
   8  0.208764      -1.56655      -45.3123       45.3123       190.048       235.360    
   9  0.755787     -0.279996      -8.09884       8.09884       192.846       200.945    
  10  0.177416      -1.72926      -50.0186       50.0186       192.049       242.068    
  11  0.405148     -0.903503      -26.1337       26.1337       186.626       212.759    
  12  0.640380     -0.445693      -12.8916       12.8916       191.935       204.826    
  13  0.548060     -0.601370      -17.3946       17.3946       190.448       207.842    
  14  0.773287     -0.257105      -7.43672       7.43672       191.883       199.319    
  15  0.180768      -1.71054      -49.4771       49.4771       185.359       234.837    
  16  0.135846      -1.99624      -57.7408       57.7408       189.745       247.486    
  17  0.601016     -0.509133      -14.7266       14.7266       189.245       203.972    
  18  0.302263      -1.19646      -34.6074       34.6074       192.832       227.440    
  19  0.189428      -1.66374      -48.1236       48.1236       199.085       247.209    
  20  0.737158     -0.304953      -8.82072       8.82072       190.179       198.999    
  21  0.790680     -0.234862      -6.79334       6.79334       192.707       199.501    
  22  0.177192E-01  -4.03310      -116.657       116.657       202.792       319.449    
  23  0.236042      -1.44375      -41.7601       41.7601       199.721       241.481    
  24  0.459229     -0.778206      -22.5095       22.5095       193.218       215.728    
  25  0.586479E-01  -2.83620      -82.0367       82.0367       189.875       271.911    
  26  0.263766      -1.33269      -38.5479       38.5479       191.800       230.347    
  27  0.942550     -0.591663E-01  -1.71138       1.71138       186.849       188.560    
  28  0.106855      -2.23628      -64.6840       64.6840       193.388       258.072    
  29  0.710700     -0.341505      -9.87797       9.87797       191.114       200.992    
  30  0.207109E-01  -3.87709      -112.144       112.144       194.094       306.238    
  31  0.901203     -0.104025      -3.00891       3.00891       187.765       190.774    
  32  0.949751     -0.515555E-01  -1.49124       1.49124       191.786       193.278    
  33  0.343487      -1.06861      -30.9093       30.9093       192.832       223.742    
  34  0.875043     -0.133483      -3.86097       3.86097       192.832       196.693    
  35  0.122447E-01  -4.40266      -127.346       127.346       191.708       319.054    
  36  0.820650     -0.197659      -5.71725       5.71725       191.913       197.631    
  37  0.748866     -0.289195      -8.36493       8.36493       191.810       200.175    
  38  0.594525     -0.519992      -15.0407       15.0407       193.212       208.252    
  39  0.927863E-01  -2.37746      -68.7676       68.7676       187.901       256.668    
  40  0.631335     -0.459918      -13.3031       13.3031       190.711       204.014    
  41  0.282620      -1.26365      -36.5510       36.5510       212.657       249.208    
  42  0.707811     -0.345578      -9.99578       9.99578       191.444       201.440    
  43  0.930463     -0.720730E-01  -2.08470       2.08470       197.741       199.826    
  44  0.988563     -0.115032E-01 -0.332730      0.332730       191.350       191.683    
  45  0.869439     -0.139907      -4.04679       4.04679       192.845       196.892    
  46  0.693921     -0.365397      -10.5691       10.5691       192.177       202.746    
  47  0.731753     -0.312312      -9.03358       9.03358       204.512       213.546    
  48  0.848712     -0.164035      -4.74469       4.74469       196.763       201.508    
  49  0.174447      -1.74613      -50.5067       50.5067       192.192       242.699    
  50  0.313212      -1.16087      -33.5781       33.5781       189.576       223.154    
  51  0.880789     -0.126937      -3.67163       3.67163       192.249       195.921    
  52  0.441967     -0.816520      -23.6177       23.6177       194.280       217.898    
  53  0.624106     -0.471435      -13.6362       13.6362       196.028       209.664    
  54  0.447426     -0.804244      -23.2626       23.2626       191.517       214.780    
  55  0.681696     -0.383171      -11.0832       11.0832       189.969       201.052    
  56  0.336384      -1.08950      -31.5137       31.5137       184.490       216.003    
  57  0.197044      -1.62433      -46.9834       46.9834       192.044       239.027    
  58  0.186834E-01  -3.98012      -115.124       115.124       192.091       307.215    
  59  0.467980     -0.759329      -21.9635       21.9635       188.127       210.090    
  60  0.607270     -0.498782      -14.4272       14.4272       189.414       203.841    
  61  0.299128      -1.20689      -34.9090       34.9090       193.483       228.392    
  62  0.166354      -1.79364      -51.8806       51.8806       192.832       244.713    
  63  0.542834     -0.610952      -17.6717       17.6717       195.694       213.366    
  64  0.811476     -0.208901      -6.04242       6.04242       258.696       264.738    
  65  0.520065     -0.653802      -18.9111       18.9111       192.832       211.743    
  66  0.955839     -0.451662E-01  -1.30643       1.30643       184.706       186.012    
  67  0.729602     -0.315256      -9.11872       9.11872       191.801       200.919    
  68  0.792398     -0.232691      -6.73056       6.73056       239.831       246.561    
  69  0.803787     -0.218421      -6.31778       6.31778       191.670       197.988    
  70  0.812756     -0.207324      -5.99683       5.99683       204.357       210.354    
  71  0.189528      -1.66322      -48.1084       48.1084       215.979       264.088    
  72  0.898459     -0.107074      -3.09710       3.09710       187.995       191.092    
loop,thermsimp(1:2)       51   2.12102       11.6049    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169        187.45          0.84          1.11         25.47          0.16          0.05         27.63
Just calling func    0   0         27.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    170        192.95          0.84          1.11         25.14          0.06          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       51
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       52
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      169     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -12.1051       12.1051       184.706       196.811    
   2  0.385391     -0.953496      -27.5797       27.5797       185.450       213.030    
   3  0.323679      -1.12800      -32.6273       32.6273       186.849       219.476    
   4  0.402516E-01  -3.21260      -92.9241       92.9241       187.765       280.689    
   5  0.866022     -0.143846      -4.16071       4.16071       187.995       192.155    
   6  0.560147     -0.579555      -16.7636       16.7636       191.350       208.114    
   7  0.389098     -0.943925      -27.3029       27.3029       191.786       219.089    
   8  0.470755     -0.753417      -21.7925       21.7925       189.277       211.070    
   9  0.794299     -0.230295      -6.66125       6.66125       192.249       198.911    
  10  0.897132     -0.108553      -3.13987       3.13987       192.832       195.972    
  11  0.359474      -1.02311      -29.5934       29.5934       192.845       222.439    
  12  0.604694     -0.503032      -14.5501       14.5501       192.507       207.057    
  13  0.101554      -2.28717      -66.1559       66.1559       191.913       258.069    
  14  0.274480      -1.29288      -37.3962       37.3962       191.670       229.066    
  15  0.916086     -0.876445E-01  -2.53510       2.53510       186.433       188.968    
  16  0.820070E-01  -2.50095      -72.3396       72.3396       190.179       262.518    
  17  0.975902     -0.243929E-01 -0.705562      0.705562       191.883       192.588    
  18  0.131665      -2.02750      -58.6451       58.6451       192.707       251.352    
  19  0.751313     -0.285933      -8.27058       8.27058       197.741       206.012    
  20  0.775324     -0.254475      -7.36064       7.36064       191.810       199.170    
  21  0.237000      -1.43969      -41.6429       41.6429       191.801       233.444    
  22  0.113641      -2.17471      -62.9031       62.9031       192.846       255.749    
  23  0.762281     -0.271440      -7.85135       7.85135       191.114       198.965    
  24  0.783730     -0.243690      -7.04870       7.04870       189.969       197.017    
  25  0.492891     -0.707468      -20.4634       20.4634       191.444       211.907    
  26  0.471904     -0.750980      -21.7220       21.7220       196.763       218.485    
  27  0.855781     -0.155740      -4.50477       4.50477       192.177       196.682    
  28  0.636473     -0.451814      -13.0686       13.0686       189.414       202.483    
  29  0.433340     -0.836232      -24.1879       24.1879       189.245       213.433    
  30  0.482236     -0.729321      -21.0955       21.0955       190.711       211.806    
  31  0.855143E-01  -2.45907      -71.1283       71.1283       191.935       263.063    
  32  0.916579     -0.871071E-01  -2.51956       2.51956       190.448       192.967    
  33  0.232519      -1.45878      -42.1951       42.1951       193.212       235.407    
  34  0.283977      -1.25886      -36.4124       36.4124       196.028       232.441    
  35  0.401228E-01  -3.21581      -93.0169       93.0169       188.127       281.143    
  36  0.235231      -1.44719      -41.8597       41.8597       204.357       246.217    
  37  0.233426      -1.45489      -42.0824       42.0824       192.832       234.915    
  38  0.903594     -0.101376      -2.93227       2.93227       186.626       189.558    
  39  0.857571     -0.153651      -4.44433       4.44433       195.694       200.139    
  40  0.444085     -0.811739      -23.4794       23.4794       204.512       227.992    
  41  0.151055      -1.89011      -54.6712       54.6712       191.517       246.189    
  42  0.745694     -0.293440      -8.48770       8.48770       193.218       201.706    
  43  0.470647E-01  -3.05623      -88.4010       88.4010       184.490       272.891    
  44  0.344459      -1.06578      -30.8276       30.8276       194.280       225.108    
  45  0.592738     -0.523004      -15.1278       15.1278       189.576       204.704    
  46  0.754292     -0.281975      -8.15609       8.15609       192.832       200.988    
  47  0.162950      -1.81431      -52.4787       52.4787       190.529       243.007    
  48  0.939100     -0.628333E-01  -1.81744       1.81744       192.832       194.650    
  49  0.966845     -0.337175E-01 -0.975274      0.975274       193.483       194.458    
  50  0.287323      -1.24715      -36.0735       36.0735       191.800       227.873    
  51  0.835081     -0.180227      -5.21303       5.21303       185.359       190.572    
  52  0.836052     -0.179064      -5.17940       5.17940       190.048       195.227    
  53  0.382321     -0.961495      -27.8111       27.8111       192.044       219.855    
  54  0.873869     -0.134824      -3.89977       3.89977       199.721       203.620    
  55  0.169635      -1.77411      -51.3157       51.3157       192.049       243.365    
  56  0.511680     -0.670055      -19.3813       19.3813       192.192       211.574    
  57  0.687848     -0.374188      -10.8233       10.8233       192.832       203.656    
  58  0.659885     -0.415689      -12.0237       12.0237       239.831       251.855    
  59  0.615967     -0.484562      -14.0159       14.0159       190.223       204.239    
  60  0.600029     -0.510778      -14.7742       14.7742       199.085       213.860    
  61  0.166513      -1.79268      -51.8530       51.8530       189.745       241.598    
  62  0.730640     -0.313835      -9.07763       9.07763       212.657       221.734    
  63  0.168194      -1.78264      -51.5626       51.5626       187.901       239.463    
  64  0.562652E-01  -2.87768      -83.2365       83.2365       193.388       276.624    
  65  0.787921     -0.238357      -6.89444       6.89444       189.841       196.735    
  66  0.937052     -0.650163E-01  -1.88059       1.88059       215.979       217.860    
  67  0.548780     -0.600057      -17.3566       17.3566       258.696       276.052    
  68  0.893892     -0.112170      -3.24450       3.24450       189.875       193.119    
  69  0.192558E-01  -3.94994      -114.252       114.252       194.094       308.345    
  70  0.818438     -0.200358      -5.79533       5.79533       192.091       197.886    
  71  0.621039     -0.476361      -13.7787       13.7787       191.708       205.487    
  72  0.868045     -0.141511      -4.09319       4.09319       187.446       191.539    
loop,thermsimp(1:2)       52   12.1051       27.5797    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171        183.84          0.84          1.12         25.18          0.12          0.06         27.31
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    172        184.64          0.82          1.13         25.17          0.01          0.04         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       52
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       53
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      171     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -15.6691       15.6691       186.433       202.102    
   2  0.307993      -1.17768      -34.0641       34.0641       186.626       220.690    
   3  0.551684     -0.594779      -17.2039       17.2039       185.359       202.563    
   4  0.969976     -0.304835E-01 -0.881731      0.881731       187.446       188.328    
   5  0.401714     -0.912015      -26.3799       26.3799       187.995       214.375    
   6  0.336211      -1.09002      -31.5285       31.5285       191.883       223.411    
   7  0.649191     -0.432028      -12.4963       12.4963       190.448       202.944    
   8  0.426986     -0.851005      -24.6152       24.6152       189.875       214.490    
   9  0.479997     -0.733976      -21.2301       21.2301       193.483       214.713    
  10  0.441527     -0.817516      -23.6465       23.6465       192.832       216.479    
  11  0.218988      -1.51874      -43.9293       43.9293       190.048       233.977    
  12  0.935549     -0.666221E-01  -1.92703       1.92703       192.832       194.759    
  13  0.159996      -1.83261      -53.0079       53.0079       192.177       245.185    
  14  0.486870     -0.719759      -20.8189       20.8189       189.841       210.660    
  15  0.835520     -0.179701      -5.19781       5.19781       184.706       189.904    
  16  0.643759     -0.440431      -12.7394       12.7394       189.969       202.708    
  17  0.177188      -1.73054      -50.0557       50.0557       192.091       242.147    
  18  0.408356     -0.895617      -25.9056       25.9056       192.249       218.155    
  19  0.463768     -0.768371      -22.2250       22.2250       191.114       213.339    
  20  0.616820     -0.483178      -13.9758       13.9758       191.810       205.786    
  21  0.377083     -0.975289      -28.2101       28.2101       195.694       223.904    
  22  0.278016      -1.28008      -37.0260       37.0260       192.832       229.858    
  23  0.746435     -0.292446      -8.45896       8.45896       193.218       201.677    
  24  0.872234     -0.136697      -3.95394       3.95394       189.414       193.368    
  25  0.887073E-01  -2.42241      -70.0679       70.0679       199.721       269.789    
  26  0.124913      -2.08014      -60.1677       60.1677       192.832       253.000    
  27  0.918160     -0.853835E-01  -2.46970       2.46970       190.223       192.693    
  28  0.924603     -0.783912E-01  -2.26745       2.26745       189.576       191.844    
  29  0.863214     -0.147092      -4.25463       4.25463       191.708       195.963    
  30  0.823499E-02  -4.79936      -138.821       138.821       197.741       336.562    
  31  0.548113     -0.601275      -17.3918       17.3918       192.507       209.898    
  32  0.800553     -0.222452      -6.43439       6.43439       191.350       197.784    
  33  0.180829      -1.71020      -49.4673       49.4673       189.277       238.745    
  34  0.968975E-01  -2.33410      -67.5135       67.5135       192.192       259.706    
  35  0.749847     -0.287886      -8.32707       8.32707       190.711       199.038    
  36  0.902028     -0.103110      -2.98244       2.98244       191.444       194.426    
  37  0.312083      -1.16449      -33.6826       33.6826       185.450       219.133    
  38  0.472691     -0.749313      -21.6738       21.6738       189.245       210.919    
  39  0.970346     -0.301026E-01 -0.870712      0.870712       199.085       199.956    
  40  0.485853     -0.721850      -20.8794       20.8794       215.979       236.859    
  41  0.604658     -0.503092      -14.5519       14.5519       196.763       211.315    
  42  0.172238      -1.75888      -50.8754       50.8754       191.786       242.662    
  43  0.359079E-01  -3.32680      -96.2271       96.2271       186.849       283.076    
  44  0.464923     -0.765884      -22.1531       22.1531       192.044       214.197    
  45  0.293512      -1.22584      -35.4571       35.4571       212.657       248.114    
  46  0.572788     -0.557239      -16.1181       16.1181       192.845       208.963    
  47  0.931713     -0.707300E-01  -2.04585       2.04585       194.280       196.326    
  48  0.983012     -0.171340E-01 -0.495599      0.495599       191.800       192.295    
  49  0.572194     -0.558278      -16.1481       16.1481       204.512       220.660    
  50  0.272189      -1.30126      -37.6387       37.6387       191.670       229.309    
  51  0.521081     -0.651849      -18.8546       18.8546       196.028       214.883    
  52  0.560075     -0.579685      -16.7673       16.7673       191.801       208.568    
  53  0.442251     -0.815877      -23.5991       23.5991       192.832       216.431    
  54  0.541873     -0.612723      -17.7229       17.7229       193.212       210.935    
  55  0.619019     -0.479619      -13.8729       13.8729       187.901       201.774    
  56  0.554460     -0.589760      -17.0587       17.0587       189.745       206.803    
  57  0.942853     -0.588454E-01  -1.70209       1.70209       190.529       192.231    
  58  0.289656E-01  -3.54165      -102.442       102.442       192.049       294.491    
  59  0.420166     -0.867105      -25.0809       25.0809       191.517       216.598    
  60  0.304886      -1.18782      -34.3574       34.3574       204.357       238.714    
  61  0.799970     -0.223182      -6.45550       6.45550       192.707       199.163    
  62  0.330194      -1.10808      -32.0509       32.0509       239.831       271.882    
  63  0.193095      -1.64457      -47.5690       47.5690       192.846       240.415    
  64  0.151812      -1.88511      -54.5265       54.5265       191.913       246.440    
  65  0.463265     -0.769456      -22.2564       22.2564       190.179       212.435    
  66  0.468691     -0.757811      -21.9196       21.9196       191.935       213.854    
  67  0.442877     -0.814463      -23.5582       23.5582       184.490       208.048    
  68  0.652140     -0.427496      -12.3652       12.3652       258.696       271.061    
  69  0.258134      -1.35428      -39.1723       39.1723       193.388       232.560    
  70  0.530519E-01  -2.93648      -84.9374       84.9374       187.765       272.703    
  71  0.479897     -0.734184      -21.2362       21.2362       188.127       209.363    
  72  0.266463      -1.32252      -38.2537       38.2537       183.837       222.091    
loop,thermsimp(1:2)       53   15.6691       34.0641    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173        180.52          0.82          1.11         25.00          0.21          0.06         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    174        175.71          0.82          1.11         25.06          0.13          0.05         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    175.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       53
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       54
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      173     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -16.4645       16.4645       187.446       203.911    
   2  0.698829     -0.358349      -10.3652       10.3652       184.706       195.071    
   3  0.550231     -0.597418      -17.2802       17.2802       189.576       206.856    
   4  0.844966     -0.168459      -4.87264       4.87264       190.529       195.401    
   5  0.139804      -1.96751      -56.9100       56.9100       191.800       248.710    
   6  0.119451      -2.12485      -61.4609       61.4609       190.223       251.684    
   7  0.474112     -0.746312      -21.5870       21.5870       189.414       211.001    
   8  0.293024      -1.22750      -35.5052       35.5052       191.444       226.949    
   9  0.760137     -0.274256      -7.93281       7.93281       192.832       200.765    
  10  0.216376      -1.53074      -44.2764       44.2764       191.708       235.984    
  11  0.837069     -0.177849      -5.14425       5.14425       194.280       199.425    
  12  0.969258     -0.312245E-01 -0.903165      0.903165       191.350       192.253    
  13  0.335918      -1.09089      -31.5538       31.5538       190.711       222.265    
  14  0.966643     -0.339265E-01 -0.981319      0.981319       192.707       193.689    
  15  0.723887     -0.323119      -9.34618       9.34618       199.085       208.432    
  16  0.459929E-01  -3.07927      -89.0674       89.0674       193.218       282.285    
  17  0.536724     -0.622271      -17.9991       17.9991       187.901       205.900    
  18  0.432574     -0.838001      -24.2391       24.2391       186.433       210.672    
  19  0.160308      -1.83066      -52.9515       52.9515       185.359       238.311    
  20  0.885158     -0.121989      -3.52851       3.52851       189.969       193.497    
  21  0.753783     -0.282650      -8.17562       8.17562       190.448       198.623    
  22  0.135562      -1.99832      -57.8012       57.8012       191.810       249.611    
  23  0.817964     -0.200937      -5.81207       5.81207       189.745       195.557    
  24  0.286617      -1.24961      -36.1448       36.1448       184.490       220.635    
  25  0.319126      -1.14217      -33.0371       33.0371       191.801       224.838    
  26  0.104479E-01  -4.56135      -131.936       131.936       192.845       324.782    
  27  0.671407     -0.398379      -11.5231       11.5231       188.127       199.650    
  28  0.782955     -0.244680      -7.07734       7.07734       192.507       199.584    
  29  0.186689      -1.67831      -48.5450       48.5450       189.841       238.386    
  30  0.462519     -0.771067      -22.3030       22.3030       189.245       211.548    
  31  0.203171      -1.59371      -46.0977       46.0977       193.212       239.309    
  32  0.851762E-01  -2.46303      -71.2429       71.2429       196.763       268.006    
  33  0.702824     -0.352649      -10.2003       10.2003       190.179       200.379    
  34  0.747923     -0.290456      -8.40139       8.40139       191.114       199.515    
  35  0.224450      -1.49410      -43.2167       43.2167       191.935       235.152    
  36  0.243563E-02  -6.01755      -174.057       174.057       192.044       366.100    
  37  0.160790      -1.82766      -52.8647       52.8647       187.995       240.859    
  38  0.880431     -0.127343      -3.68338       3.68338       189.875       193.558    
  39  0.507306     -0.678640      -19.6296       19.6296       193.483       213.113    
  40  0.266019      -1.32419      -38.3020       38.3020       196.028       234.330    
  41  0.310751      -1.16876      -33.8063       33.8063       192.832       226.639    
  42  0.945006     -0.565640E-01  -1.63611       1.63611       192.832       194.468    
  43  0.265699E-01  -3.62797      -104.939       104.939       191.517       296.456    
  44  0.652842     -0.426420      -12.3341       12.3341       192.249       204.584    
  45  0.799409     -0.223882      -6.47576       6.47576       185.450       191.926    
  46  0.543529     -0.609672      -17.6347       17.6347       204.512       222.147    
  47  0.361947      -1.01626      -29.3951       29.3951       186.626       216.021    
  48  0.398721     -0.919492      -26.5962       26.5962       183.837       210.433    
  49  0.349489      -1.05128      -30.4082       30.4082       191.883       222.291    
  50  0.948739     -0.526212E-01  -1.52206       1.52206       195.694       197.216    
  51  0.346176      -1.06081      -30.6837       30.6837       191.670       222.354    
  52  0.678244     -0.388248      -11.2300       11.2300       192.832       204.062    
  53  0.858518     -0.152547      -4.41241       4.41241       193.388       197.800    
  54  0.835860E-01  -2.48188      -71.7880       71.7880       190.048       261.836    
  55  0.762568     -0.271063      -7.84047       7.84047       215.979       223.820    
  56  0.273927      -1.29489      -37.4546       37.4546       204.357       241.811    
  57  0.729557     -0.315318      -9.12053       9.12053       189.277       198.398    
  58  0.320381      -1.13825      -32.9236       32.9236       192.846       225.770    
  59  0.818134     -0.200729      -5.80605       5.80605       192.091       197.897    
  60  0.639548     -0.446993      -12.9292       12.9292       191.786       204.715    
  61  0.976107     -0.241828E-01 -0.699484      0.699484       192.177       192.877    
  62  0.232128      -1.46046      -42.2437       42.2437       191.913       234.157    
  63  0.215412      -1.53520      -44.4056       44.4056       212.657       257.062    
  64  0.770868     -0.260238      -7.52736       7.52736       192.832       200.360    
  65  0.147419E-01  -4.21706      -121.978       121.978       192.192       314.170    
  66  0.102273      -2.28010      -65.9517       65.9517       199.721       265.672    
  67  0.625951     -0.468483      -13.5508       13.5508       258.696       272.247    
  68  0.176925      -1.73203      -50.0986       50.0986       239.831       289.930    
  69  0.638162E-02  -5.05433      -146.196       146.196       187.765       333.961    
  70  0.301443      -1.19917      -34.6859       34.6859       186.849       221.535    
  71  0.586975     -0.532773      -15.4104       15.4104       192.049       207.460    
  72  0.595449     -0.518439      -14.9958       14.9958       175.715       190.711    
loop,thermsimp(1:2)       54   16.4645       10.3652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175        185.11          0.84          1.11         25.12          0.15          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    176        195.66          0.84          1.12         25.37          0.12          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    185.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       54
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       55
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      175     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -47.3803       47.3803       175.715       223.095    
   2  0.875287     -0.133204      -3.85289       3.85289       185.450       189.303    
   3  0.103612      -2.26710      -65.5755       65.5755       191.350       256.925    
   4  0.159072      -1.83840      -53.1754       53.1754       192.177       245.353    
   5  0.118738      -2.13084      -61.6341       61.6341       189.969       251.603    
   6  0.294105      -1.22382      -35.3987       35.3987       189.875       225.273    
   7  0.967643     -0.328919E-01 -0.951394      0.951394       192.707       193.659    
   8  0.675183     -0.392772      -11.3609       11.3609       192.832       204.193    
   9  0.170112      -1.77130      -51.2345       51.2345       184.706       235.940    
  10  0.990992     -0.904902E-02 -0.261741      0.261741       190.529       190.790    
  11  0.198513      -1.61690      -46.7687       46.7687       189.745       236.513    
  12  0.404817E-01  -3.20690      -92.7592       92.7592       195.694       288.453    
  13  0.834933E-01  -2.48299      -71.8201       71.8201       193.388       265.208    
  14  0.458935     -0.778848      -22.5280       22.5280       192.091       214.619    
  15  0.929311     -0.733118E-01  -2.12053       2.12053       189.277       191.398    
  16  0.593071     -0.522440      -15.1115       15.1115       190.448       205.559    
  17  0.963359E-01  -2.33991      -67.6817       67.6817       194.280       261.962    
  18  0.383119E-01  -3.26200      -94.3527       94.3527       191.114       285.466    
  19  0.841843     -0.172161      -4.97974       4.97974       192.507       197.486    
  20  0.874261     -0.134376      -3.88682       3.88682       188.127       192.013    
  21  0.706443     -0.347513      -10.0518       10.0518       192.832       202.884    
  22  0.423649E-01  -3.16143      -91.4440       91.4440       190.179       281.623    
  23  0.904835     -0.100003      -2.89257       2.89257       192.832       195.725    
  24  0.728800     -0.316356      -9.15055       9.15055       187.446       196.597    
  25  0.764304     -0.268790      -7.77472       7.77472       192.832       200.607    
  26  0.578519     -0.547284      -15.8301       15.8301       192.249       208.080    
  27  0.321737      -1.13402      -32.8014       32.8014       191.786       224.588    
  28  0.592944     -0.522656      -15.1177       15.1177       187.901       203.018    
  29  0.159596      -1.83511      -53.0803       53.0803       189.576       242.657    
  30  0.797332     -0.226484      -6.55101       6.55101       192.049       198.600    
  31  0.263979      -1.33189      -38.5246       38.5246       199.085       237.610    
  32  0.449355     -0.799942      -23.1382       23.1382       183.837       206.976    
  33  0.859901     -0.150938      -4.36585       4.36585       186.433       190.799    
  34  0.730093     -0.314584      -9.09928       9.09928       189.414       198.514    
  35  0.484666     -0.724295      -20.9501       20.9501       189.245       210.195    
  36  0.180217      -1.71359      -49.5654       49.5654       193.483       243.048    
  37  0.857397     -0.153854      -4.45021       4.45021       186.626       191.076    
  38  0.502370     -0.688418      -19.9124       19.9124       184.490       204.402    
  39  0.245408      -1.40484      -40.6346       40.6346       186.849       227.483    
  40  0.134540      -2.00590      -58.0202       58.0202       204.512       262.533    
  41  0.468137     -0.758995      -21.9538       21.9538       190.711       212.665    
  42  0.864548E-01  -2.44813      -70.8119       70.8119       191.883       262.695    
  43  0.178791      -1.72154      -49.7953       49.7953       191.670       241.465    
  44  0.690351     -0.370555      -10.7182       10.7182       215.979       226.697    
  45  0.731648     -0.312455      -9.03772       9.03772       191.801       200.838    
  46  0.857623     -0.153591      -4.44259       4.44259       192.846       197.289    
  47  0.754956     -0.281095      -8.13064       8.13064       192.832       200.963    
  48  0.355557      -1.03407      -29.9103       29.9103       191.444       221.354    
  49  0.200964      -1.60463      -46.4137       46.4137       191.913       238.327    
  50  0.243499      -1.41264      -40.8605       40.8605       196.028       236.889    
  51  0.796288     -0.227794      -6.58892       6.58892       191.935       198.524    
  52  0.256937      -1.35892      -39.3067       39.3067       191.708       231.015    
  53  0.591760     -0.524655      -15.1756       15.1756       185.359       200.535    
  54  0.799227     -0.224110      -6.48234       6.48234       189.841       196.323    
  55  0.115295E-01  -4.46285      -129.087       129.087       193.212       322.299    
  56  0.559205     -0.581239      -16.8123       16.8123       187.995       204.807    
  57  0.742198     -0.298139      -8.62363       8.62363       204.357       212.980    
  58  0.543157     -0.610356      -17.6545       17.6545       191.800       209.454    
  59  0.100933      -2.29330      -66.3333       66.3333       191.810       258.143    
  60  0.201228      -1.60332      -46.3757       46.3757       190.223       236.599    
  61  0.602159E-01  -2.80982      -81.2736       81.2736       212.657       293.930    
  62  0.107777      -2.22769      -64.4357       64.4357       190.048       254.484    
  63  0.131787E-01  -4.32915      -125.220       125.220       199.721       324.941    
  64  0.756826     -0.278622      -8.05909       8.05909       196.763       204.822    
  65  0.617120     -0.482691      -13.9618       13.9618       258.696       272.658    
  66  0.885328     -0.121797      -3.52296       3.52296       193.218       196.741    
  67  0.617093     -0.482736      -13.9631       13.9631       239.831       253.794    
  68  0.654899     -0.423274      -12.2431       12.2431       191.517       203.760    
  69  0.847740     -0.165181      -4.77783       4.77783       192.192       196.970    
  70  0.121451E-01  -4.41083      -127.583       127.583       192.845       320.428    
  71  0.861782     -0.148752      -4.30264       4.30264       187.765       192.068    
  72  0.786555     -0.240093      -6.94464       6.94464       185.115       192.060    
loop,thermsimp(1:2)       55   47.3803       3.85289    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177        193.65          0.84          1.11         25.07          0.14          0.06         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178        260.20          0.85          1.11         25.01          0.13          0.05         27.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    193.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       55
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       56
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      177     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -56.6025       56.6025       185.450       242.053    
   2  0.197548      -1.62177      -46.9096       46.9096       190.529       237.438    
   3  0.774000     -0.256183      -7.41005       7.41005       186.433       193.843    
   4  0.170284      -1.77029      -51.2053       51.2053       186.626       237.831    
   5  0.250636      -1.38376      -40.0249       40.0249       189.277       229.302    
   6  0.907951     -0.965652E-01  -2.79313       2.79313       188.127       190.920    
   7  0.611678     -0.491549      -14.2180       14.2180       185.115       199.333    
   8  0.735945E-02  -4.91177      -142.072       142.072       187.765       329.838    
   9  0.309131      -1.17399      -33.9575       33.9575       192.707       226.665    
  10  0.577854     -0.548434      -15.8634       15.8634       192.832       208.696    
  11  0.931529     -0.709274E-01  -2.05157       2.05157       189.841       191.892    
  12  0.665703     -0.406912      -11.7699       11.7699       187.446       199.216    
  13  0.585695     -0.534955      -15.4735       15.4735       193.218       208.692    
  14  0.295001      -1.22078      -35.3108       35.3108       192.192       227.503    
  15  0.317712E-01  -3.44920      -99.7675       99.7675       192.846       292.614    
  16  0.222963      -1.50075      -43.4090       43.4090       192.507       235.916    
  17  0.325931      -1.12107      -32.4268       32.4268       189.414       221.841    
  18  0.785098     -0.241947      -6.99827       6.99827       191.935       198.933    
  19  0.550467     -0.596988      -17.2678       17.2678       192.049       209.317    
  20  0.780222     -0.248176      -7.17846       7.17846       185.359       192.538    
  21  0.130712      -2.03476      -58.8550       58.8550       192.832       251.687    
  22  0.873397     -0.135365      -3.91541       3.91541       191.801       195.716    
  23  0.366975      -1.00246      -28.9960       28.9960       192.832       221.828    
  24  0.813244     -0.206724      -5.97946       5.97946       192.832       198.812    
  25  0.782660E-01  -2.54764      -73.6901       73.6901       187.901       261.591    
  26  0.700327     -0.356208      -10.3033       10.3033       191.517       201.821    
  27  0.437766     -0.826071      -23.8940       23.8940       192.832       216.726    
  28  0.508966E-01  -2.97796      -86.1370       86.1370       184.490       270.627    
  29  0.276850      -1.28428      -37.1475       37.1475       187.995       225.142    
  30  0.792031     -0.233154      -6.74395       6.74395       196.763       203.507    
  31  0.174747      -1.74441      -50.4569       50.4569       190.448       240.905    
  32  0.469718     -0.755623      -21.8563       21.8563       183.837       205.694    
  33  0.252316      -1.37707      -39.8316       39.8316       192.249       232.081    
  34  0.980061     -0.201409E-01 -0.582571      0.582571       191.800       192.382    
  35  0.838300     -0.176379      -5.10175       5.10175       189.245       194.347    
  36  0.369385     -0.995915      -28.8067       28.8067       190.711       219.517    
  37  0.923139     -0.799751E-01  -2.31327       2.31327       204.357       206.670    
  38  0.592446     -0.523496      -15.1421       15.1421       192.091       207.233    
  39  0.348787      -1.05329      -30.4663       30.4663       191.444       221.910    
  40  0.569584     -0.562850      -16.2803       16.2803       175.715       191.995    
  41  0.543034E-01  -2.91317      -84.2630       84.2630       191.786       276.049    
  42  0.582662     -0.540148      -15.6237       15.6237       189.875       205.498    
  43  0.702825     -0.352648      -10.2003       10.2003       215.979       226.179    
  44  0.941375     -0.604140E-01  -1.74747       1.74747       186.849       188.596    
  45  0.258857      -1.35148      -39.0913       39.0913       191.708       230.799    
  46  0.116535      -2.14956      -62.1758       62.1758       184.706       246.882    
  47  0.102671      -2.27622      -65.8394       65.8394       189.745       255.584    
  48  0.172023      -1.76013      -50.9114       50.9114       190.223       241.135    
  49  0.434982E-01  -3.13504      -90.6805       90.6805       196.028       286.709    
  50  0.852122     -0.160026      -4.62873       4.62873       199.085       203.714    
  51  0.583521     -0.538675      -15.5811       15.5811       191.913       207.495    
  52  0.843374     -0.170345      -4.92720       4.92720       191.670       196.597    
  53  0.194743      -1.63607      -47.3232       47.3232       189.576       236.899    
  54  0.191808      -1.65126      -47.7624       47.7624       193.483       241.245    
  55  0.656555     -0.420749      -12.1701       12.1701       192.177       204.347    
  56  0.468384E-01  -3.06105      -88.5404       88.5404       189.969       278.509    
  57  0.812217     -0.207988      -6.01601       6.01601       239.831       245.847    
  58  0.852265     -0.159858      -4.62385       4.62385       190.048       194.672    
  59  0.340213      -1.07818      -31.1863       31.1863       191.350       222.536    
  60  0.655911     -0.421730      -12.1985       12.1985       191.810       204.008    
  61  0.329724      -1.10950      -32.0921       32.0921       194.280       226.373    
  62  0.362242      -1.01544      -29.3715       29.3715       204.512       233.884    
  63  0.273539      -1.29631      -37.4956       37.4956       191.883       229.378    
  64  0.524351     -0.645594      -18.6737       18.6737       193.388       212.062    
  65  0.817273     -0.201783      -5.83653       5.83653       258.696       264.532    
  66  0.642237     -0.442797      -12.8078       12.8078       190.179       202.986    
  67  0.276178      -1.28671      -37.2179       37.2179       191.114       228.331    
  68  0.721954     -0.325793      -9.42353       9.42353       195.694       205.118    
  69  0.676913     -0.390212      -11.2868       11.2868       212.657       223.943    
  70  0.148059      -1.91014      -55.2506       55.2506       192.845       248.096    
  71  0.692932     -0.366824      -10.6103       10.6103       193.212       203.822    
  72  0.749770     -0.287989      -8.33004       8.33004       193.650       201.980    
loop,thermsimp(1:2)       56   56.6025       46.9096    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179        189.31          0.84          1.11         25.03          0.18          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    180        195.42          0.84          1.11         25.05          0.25          0.05         27.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       56
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       57
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      179     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -11.9194       11.9194       186.849       198.768    
   2  0.724212     -0.322671      -9.33322       9.33322       188.127       197.460    
   3  0.633711     -0.456163      -13.1944       13.1944       189.841       203.035    
   4  0.448566     -0.801700      -23.1891       23.1891       175.715       198.904    
   5  0.964228     -0.364273E-01  -1.05365       1.05365       191.800       192.853    
   6  0.714306     -0.336444      -9.73160       9.73160       185.359       195.091    
   7  0.528330     -0.638035      -18.4551       18.4551       186.433       204.888    
   8  0.654127     -0.424453      -12.2772       12.2772       189.245       201.523    
   9  0.368899     -0.997232      -28.8448       28.8448       190.048       218.893    
  10  0.227697      -1.47974      -42.8013       42.8013       191.801       234.602    
  11  0.612266     -0.490588      -14.1902       14.1902       191.670       205.860    
  12  0.313777      -1.15907      -33.5260       33.5260       192.832       226.358    
  13  0.258526      -1.35276      -39.1284       39.1284       191.935       231.063    
  14  0.119298      -2.12613      -61.4981       61.4981       187.446       248.944    
  15  0.213331      -1.54491      -44.6862       44.6862       185.115       229.801    
  16  0.294218      -1.22343      -35.3877       35.3877       191.517       226.905    
  17  0.352988      -1.04132      -30.1201       30.1201       193.650       223.770    
  18  0.348706      -1.05353      -30.4731       30.4731       190.179       220.652    
  19  0.449249     -0.800179      -23.1450       23.1450       196.763       219.908    
  20  0.879121     -0.128833      -3.72647       3.72647       199.085       202.812    
  21  0.464081     -0.767695      -22.2055       22.2055       193.212       215.417    
  22  0.497582     -0.697995      -20.1894       20.1894       191.810       211.999    
  23  0.920207     -0.831566E-01  -2.40529       2.40529       192.177       194.583    
  24  0.811773     -0.208535      -6.03184       6.03184       195.694       201.726    
  25  0.190651      -1.65731      -47.9374       47.9374       189.875       237.812    
  26  0.645174     -0.438235      -12.6759       12.6759       183.837       196.513    
  27  0.668343     -0.402954      -11.6554       11.6554       204.357       216.012    
  28  0.765111     -0.267735      -7.74419       7.74419       192.091       199.835    
  29  0.991779     -0.825499E-02 -0.238774      0.238774       191.913       192.152    
  30  0.136888      -1.98859      -57.5198       57.5198       193.218       250.738    
  31  0.645145E-01  -2.74086      -79.2791       79.2791       192.832       272.111    
  32  0.408515E-01  -3.19781      -92.4962       92.4962       192.049       284.545    
  33  0.264109      -1.33140      -38.5104       38.5104       193.388       231.898    
  34  0.382737     -0.960407      -27.7796       27.7796       192.832       220.612    
  35  0.402738E-02  -5.51464      -159.510       159.510       190.711       350.221    
  36  0.318074      -1.14547      -33.1325       33.1325       192.832       225.965    
  37  0.245237      -1.40553      -40.6548       40.6548       189.414       230.069    
  38  0.519766     -0.654377      -18.9278       18.9278       191.444       210.372    
  39  0.255147      -1.36592      -39.5089       39.5089       191.350       230.859    
  40  0.833841     -0.181712      -5.25599       5.25599       212.657       217.913    
  41  0.696242E-01  -2.66464      -77.0744       77.0744       187.995       265.069    
  42  0.487295     -0.718886      -20.7937       20.7937       215.979       236.773    
  43  0.276229E-01  -3.58911      -103.815       103.815       194.280       298.095    
  44  0.638327     -0.448905      -12.9845       12.9845       192.707       205.692    
  45  0.206684      -1.57657      -45.6019       45.6019       192.192       237.794    
  46  0.736003     -0.306521      -8.86608       8.86608       191.114       199.980    
  47  0.217444E-01  -3.82840      -110.736       110.736       189.277       300.013    
  48  0.956929     -0.440260E-01  -1.27345       1.27345       191.883       193.156    
  49  0.883561     -0.123795      -3.58074       3.58074       191.708       195.289    
  50  0.700901     -0.355388      -10.2796       10.2796       192.249       202.529    
  51  0.201997      -1.59950      -46.2653       46.2653       204.512       250.778    
  52  0.412152     -0.886362      -25.6379       25.6379       192.507       218.144    
  53  0.890450     -0.116029      -3.35612       3.35612       189.576       192.932    
  54  0.417423     -0.873654      -25.2703       25.2703       190.529       215.799    
  55  0.426501     -0.852140      -24.6480       24.6480       186.626       211.274    
  56  0.983871     -0.162605E-01 -0.470332      0.470332       190.448       190.918    
  57  0.384350     -0.956201      -27.6580       27.6580       190.223       217.881    
  58  0.155937      -1.85830      -53.7511       53.7511       193.483       247.234    
  59  0.361264      -1.01815      -29.4498       29.4498       185.450       214.900    
  60  0.538177     -0.619568      -17.9209       17.9209       239.831       257.752    
  61  0.514362E-01  -2.96741      -85.8320       85.8320       184.706       270.538    
  62  0.994100     -0.591759E-02 -0.171165      0.171165       192.845       193.016    
  63  0.622557     -0.473920      -13.7081       13.7081       192.832       206.540    
  64  0.703606     -0.351537      -10.1682       10.1682       189.745       199.913    
  65  0.151986      -1.88396      -54.4934       54.4934       187.901       242.394    
  66  0.105360      -2.25037      -65.0916       65.0916       258.696       323.788    
  67  0.572995     -0.556878      -16.1076       16.1076       184.490       200.597    
  68  0.201032      -1.60429      -46.4039       46.4039       191.786       238.190    
  69  0.786519     -0.240139      -6.94598       6.94598       189.969       196.915    
  70  0.251709E-01  -3.68207      -106.503       106.503       196.028       302.531    
  71  0.574605     -0.554072      -16.0265       16.0265       192.846       208.873    
  72  0.842012     -0.171961      -4.97395       4.97395       189.306       194.279    
loop,thermsimp(1:2)       57   11.9194       9.33322    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181        184.67          0.84          1.11         25.15          0.09          0.05         27.23
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    182        183.29          0.84          1.11         25.15          0.09          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    184.67       0.9730     -1.362      1.667     -102.6     0.8861    
                      0.3705      1.836     -99.70      3.674     0.9414E-01
                       2.020     -1.423      1.905      0.000     -40.00    
                      -1.841      0.000      0.000      0.000     -1.221    

                      -2.500     0.2885E+05 0.3284E+05  0.000      0.000    
                     -0.5672     -6.298     -4.406     -7.490      3.595    
                      -14.28     -2.946      1785.      0.000      2836.    

                      0.1096E+05  8519.      5356.      6963.      2559.    
                       4140.     0.1553E-01 0.1553E-01  0.000     0.1553E-01
                      0.1553E-01 0.2251E-01-0.1779E-02 0.1586E-01 0.1553E-01

                     -0.1086    -0.9741      0.000     0.4205E-02 0.1553E-01
                       0.000    -0.7988E-02-0.2087E-02 0.1553E-01-0.5268E-02
                      0.1553E-01 0.1553E-01-0.1202     -1.009      0.000    

                      0.5178E-01-0.1870    -0.5482    -0.5482    -0.1861    
                      0.2401      8.916      8.803     -4892.     -4.000    
                     -0.4258    -0.6261      8.921      8.816     -5259.    

                      -4.000     0.1322    -0.6216      8.916      8.816    
                      -112.7     -7.000    -0.3905    -0.7433      8.903    
                       8.816     -5259.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       57
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       58
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      181     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -82.1165       82.1165       190.448       272.564    
   2  0.104884      -2.25490      -65.2228       65.2228       191.913       257.136    
   3  0.784254     -0.243023      -7.02939       7.02939       191.800       198.829    
   4  0.813133     -0.206861      -5.98342       5.98342       189.576       195.560    
   5  0.490778     -0.711764      -20.5877       20.5877       192.845       213.433    
   6  0.168573      -1.78039      -51.4974       51.4974       191.883       243.380    
   7  0.450161     -0.798149      -23.0863       23.0863       189.306       212.392    
   8  0.828233     -0.188461      -5.45120       5.45120       192.177       197.629    
   9  0.994731     -0.528342E-02 -0.152822      0.152822       185.359       185.512    
  10  0.813340     -0.206606      -5.97605       5.97605       191.708       197.684    
  11  0.776133     -0.253432      -7.33048       7.33048       183.837       191.168    
  12  0.729556     -0.315319      -9.12055       9.12055       189.969       199.089    
  13  0.530451     -0.634028      -18.3392       18.3392       188.127       206.466    
  14  0.752564E-01  -2.58685      -74.8244       74.8244       186.849       261.673    
  15  0.918457     -0.850597E-01  -2.46034       2.46034       175.715       178.175    
  16  0.162642      -1.81621      -52.5335       52.5335       192.091       244.624    
  17  0.725851     -0.320411      -9.26783       9.26783       189.745       199.013    
  18  0.322292      -1.13230      -32.7515       32.7515       191.114       223.865    
  19  0.838064     -0.176661      -5.10990       5.10990       184.490       189.600    
  20  0.346062E-01  -3.36372      -97.2951       97.2951       189.245       286.540    
  21  0.442915     -0.814377      -23.5557       23.5557       195.694       219.250    
  22  0.143708      -1.93997      -56.1134       56.1134       192.249       248.363    
  23  0.940845     -0.609769E-01  -1.76375       1.76375       199.085       200.849    
  24  0.972503     -0.278816E-01 -0.806472      0.806472       189.841       190.647    
  25  0.291831      -1.23158      -35.6233       35.6233       186.433       222.056    
  26  0.211976      -1.55128      -44.8706       44.8706       192.707       237.578    
  27  0.695427     -0.363229      -10.5064       10.5064       191.670       202.176    
  28  0.982540E-01  -2.32020      -67.1114       67.1114       192.832       259.944    
  29  0.730742     -0.313695      -9.07357       9.07357       192.846       201.920    
  30  0.417794     -0.872766      -25.2446       25.2446       191.444       216.689    
  31  0.868385     -0.141121      -4.08189       4.08189       186.626       190.708    
  32  0.300897      -1.20099      -34.7383       34.7383       191.810       226.548    
  33  0.917219     -0.864093E-01  -2.49938       2.49938       185.450       187.949    
  34  0.304394      -1.18943      -34.4042       34.4042       193.212       227.616    
  35  0.856500     -0.154901      -4.48050       4.48050       190.529       195.009    
  36  0.310652      -1.16908      -33.8155       33.8155       204.357       238.172    
  37  0.846275     -0.166911      -4.82788       4.82788       190.223       195.051    
  38  0.206825      -1.57588      -45.5822       45.5822       212.657       258.239    
  39  0.606376     -0.500256      -14.4698       14.4698       192.507       206.976    
  40  0.840015     -0.174336      -5.04263       5.04263       190.048       195.091    
  41  0.348835      -1.05315      -30.4623       30.4623       196.763       227.225    
  42  0.857325     -0.153939      -4.45265       4.45265       192.832       197.285    
  43  0.308035E-01  -3.48013      -100.662       100.662       190.179       290.841    
  44  0.400632     -0.914711      -26.4579       26.4579       193.650       220.108    
  45  0.242237      -1.41784      -41.0107       41.0107       192.832       233.843    
  46  0.407771     -0.897050      -25.9470       25.9470       192.832       218.779    
  47  0.430691     -0.842364      -24.3652       24.3652       191.517       215.883    
  48  0.415503     -0.878266      -25.4037       25.4037       185.115       210.519    
  49  0.593575     -0.521591      -15.0869       15.0869       189.414       204.501    
  50  0.973620     -0.267342E-01 -0.773282      0.773282       191.350       192.123    
  51  0.510257     -0.672840      -19.4618       19.4618       191.935       211.397    
  52  0.796475     -0.227560      -6.58213       6.58213       193.388       199.970    
  53  0.213576      -1.54376      -44.6531       44.6531       191.801       236.454    
  54  0.865534     -0.144409      -4.17701       4.17701       215.979       220.156    
  55  0.920053     -0.833240E-01  -2.41013       2.41013       192.192       194.602    
  56  0.534624     -0.626192      -18.1125       18.1125       189.875       207.987    
  57  0.963687     -0.369888E-01  -1.06989       1.06989       191.786       192.856    
  58  0.498139     -0.696877      -20.1571       20.1571       187.901       208.058    
  59  0.987058     -0.130264E-01 -0.376787      0.376787       193.483       193.860    
  60  0.488276E-01  -3.01946      -87.3374       87.3374       187.446       274.784    
  61  0.597381E-01  -2.81779      -81.5040       81.5040       193.218       274.722    
  62  0.589016     -0.529301      -15.3100       15.3100       204.512       219.822    
  63  0.680503     -0.384923      -11.1338       11.1338       239.831       250.965    
  64  0.793494     -0.231310      -6.69060       6.69060       187.995       194.685    
  65  0.269936E-01  -3.61216      -104.481       104.481       184.706       289.187    
  66  0.392490     -0.935245      -27.0518       27.0518       192.832       219.884    
  67  0.150218      -1.89567      -54.8319       54.8319       192.049       246.881    
  68  0.959939     -0.408856E-01  -1.18261       1.18261       194.280       195.463    
  69  0.559076     -0.581471      -16.8189       16.8189       189.277       206.096    
  70  0.820359     -0.198013      -5.72750       5.72750       196.028       201.756    
  71  0.876568     -0.131741      -3.81058       3.81058       258.696       262.507    
  72  0.338606      -1.08292      -31.3232       31.3232       183.292       214.615    
loop,thermsimp(1:2)       58   82.1165       65.2228    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183        187.20          0.84          1.11         25.04          0.16          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184        189.21          0.83          1.11         25.10          0.11          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       58
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       59
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      183     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -32.0651       32.0651       175.715       207.780    
   2  0.939148     -0.627826E-01  -1.81598       1.81598       185.359       187.175    
   3  0.130906      -2.03328      -58.8123       58.8123       185.450       244.262    
   4  0.664370     -0.408916      -11.8278       11.8278       184.490       196.318    
   5  0.490908     -0.711498      -20.5800       20.5800       189.841       210.421    
   6  0.711731     -0.340055      -9.83604       9.83604       186.626       196.462    
   7  0.676080     -0.391444      -11.3225       11.3225       183.837       195.160    
   8  0.611139     -0.492432      -14.2435       14.2435       191.350       205.593    
   9  0.614246     -0.487359      -14.0968       14.0968       191.786       205.883    
  10  0.988045     -0.120275E-01 -0.347895      0.347895       193.483       193.831    
  11  0.232883      -1.45722      -42.1498       42.1498       192.192       234.342    
  12  0.450825     -0.796675      -23.0437       23.0437       187.995       211.038    
  13  0.493319     -0.706599      -20.4383       20.4383       190.529       210.967    
  14  0.191184      -1.65452      -47.8567       47.8567       190.223       238.080    
  15  0.894136     -0.111897      -3.23661       3.23661       190.048       193.285    
  16  0.391751     -0.937128      -27.1063       27.1063       194.280       221.387    
  17  0.236278      -1.44275      -41.7313       41.7313       189.576       231.308    
  18  0.496874E-01  -3.00200      -86.8325       86.8325       192.832       279.665    
  19  0.784524     -0.242678      -7.01944       7.01944       192.177       199.197    
  20  0.292328      -1.22988      -35.5741       35.5741       191.708       227.282    
  21  0.832247E-01  -2.48621      -71.9133       71.9133       191.800       263.713    
  22  0.423133     -0.860069      -24.8774       24.8774       189.745       214.622    
  23  0.234472      -1.45042      -41.9531       41.9531       189.969       231.922    
  24  0.868463     -0.141031      -4.07929       4.07929       193.388       197.467    
  25  0.122969      -2.09582      -60.6213       60.6213       199.085       259.707    
  26  0.811771     -0.208537      -6.03190       6.03190       196.028       202.060    
  27  0.786834     -0.239738      -6.93440       6.93440       192.846       199.781    
  28  0.163144      -1.81312      -52.4442       52.4442       191.670       244.114    
  29  0.571103     -0.560186      -16.2033       16.2033       189.414       205.618    
  30  0.769982     -0.261388      -7.56060       7.56060       189.277       196.838    
  31  0.471769     -0.751265      -21.7302       21.7302       188.127       209.857    
  32  0.584935     -0.536254      -15.5111       15.5111       192.507       208.018    
  33  0.416140     -0.876734      -25.3594       25.3594       189.875       215.234    
  34  0.106525E-01  -4.54196      -131.376       131.376       187.901       319.276    
  35  0.595424     -0.518482      -14.9970       14.9970       185.115       200.112    
  36  0.302400      -1.19600      -34.5942       34.5942       191.935       226.529    
  37  0.629701     -0.462510      -13.3780       13.3780       189.306       202.684    
  38  0.939026E-01  -2.36550      -68.4217       68.4217       192.845       261.267    
  39  0.911727     -0.924151E-01  -2.67309       2.67309       183.292       185.965    
  40  0.289502      -1.23959      -35.8550       35.8550       191.517       227.372    
  41  0.326571      -1.11911      -32.3700       32.3700       191.444       223.814    
  42  0.972366     -0.280231E-01 -0.810563      0.810563       192.832       193.643    
  43  0.823413     -0.194297      -5.62001       5.62001       195.694       201.314    
  44  0.790717     -0.234815      -6.79198       6.79198       204.512       211.304    
  45  0.167922      -1.78426      -51.6094       51.6094       192.832       244.442    
  46  0.804665     -0.217329      -6.28622       6.28622       193.650       199.936    
  47  0.154714      -1.86617      -53.9788       53.9788       215.979       269.958    
  48  0.240456      -1.42522      -41.2243       41.2243       186.433       227.657    
  49  0.351787      -1.04473      -30.2187       30.2187       191.114       221.332    
  50  0.666429E-01  -2.70841      -78.3403       78.3403       191.810       270.150    
  51  0.484113     -0.725437      -20.9831       20.9831       196.763       217.746    
  52  0.298509      -1.20896      -34.9689       34.9689       193.212       228.181    
  53  0.982136     -0.180253E-01 -0.521379      0.521379       192.832       193.354    
  54  0.799723     -0.223490      -6.46442       6.46442       191.801       198.265    
  55  0.559799     -0.580177      -16.7815       16.7815       192.707       209.489    
  56  0.492929     -0.707390      -20.4612       20.4612       204.357       224.818    
  57  0.655290     -0.422678      -12.2259       12.2259       191.883       204.109    
  58  0.426949     -0.851091      -24.6177       24.6177       192.091       216.709    
  59  0.575269     -0.552918      -15.9931       15.9931       192.049       208.042    
  60  0.252283      -1.37721      -39.8355       39.8355       192.249       232.085    
  61  0.628464     -0.464477      -13.4349       13.4349       239.831       253.266    
  62  0.847342E-01  -2.46824      -71.3934       71.3934       191.913       263.307    
  63  0.701567     -0.354439      -10.2521       10.2521       212.657       222.909    
  64  0.171664      -1.76222      -50.9719       50.9719       192.832       243.804    
  65  0.395346     -0.927995      -26.8421       26.8421       186.849       213.691    
  66  0.397662     -0.922153      -26.6731       26.6731       258.696       285.369    
  67  0.166798      -1.79097      -51.8035       51.8035       190.448       242.251    
  68  0.100957      -2.29306      -66.3265       66.3265       193.218       259.545    
  69  0.725220     -0.321280      -9.29297       9.29297       187.446       196.739    
  70  0.856561     -0.154829      -4.47841       4.47841       189.245       193.724    
  71  0.421738     -0.863372      -24.9729       24.9729       184.706       209.679    
  72  0.294072      -1.22393      -35.4020       35.4020       187.201       222.603    
loop,thermsimp(1:2)       59   32.0651       1.81598    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185        189.67          0.84          1.11         25.03          0.17          0.05         27.21
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186        194.73          0.85          1.12         25.21          0.02          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       59
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       60
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      185     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -34.4287       34.4287       183.292       217.720    
   2  0.843344     -0.170380      -4.92821       4.92821       185.359       190.288    
   3  0.457815     -0.781289      -22.5987       22.5987       190.048       212.647    
   4  0.933709     -0.685899E-01  -1.98395       1.98395       192.832       194.816    
   5  0.887159     -0.119731      -3.46319       3.46319       192.832       196.296    
   6  0.786211     -0.240530      -6.95730       6.95730       189.245       196.203    
   7  0.794803     -0.229661      -6.64291       6.64291       193.483       200.126    
   8  0.573435E-01  -2.85870      -82.6874       82.6874       183.837       266.525    
   9  0.647106     -0.435245      -12.5894       12.5894       184.490       197.079    
  10  0.110118      -2.20620      -63.8141       63.8141       186.626       250.440    
  11  0.339548      -1.08014      -31.2429       31.2429       187.446       218.689    
  12  0.635246     -0.453742      -13.1244       13.1244       189.277       202.402    
  13  0.488392     -0.716638      -20.7286       20.7286       193.388       214.117    
  14  0.602571     -0.506549      -14.6519       14.6519       191.801       206.452    
  15  0.710041     -0.342433      -9.90483       9.90483       192.177       202.082    
  16  0.585763     -0.534840      -15.4702       15.4702       192.846       208.316    
  17  0.288010      -1.24476      -36.0045       36.0045       193.650       229.654    
  18  0.455238     -0.786934      -22.7620       22.7620       185.115       207.877    
  19  0.723984     -0.322986      -9.34232       9.34232       195.694       205.037    
  20  0.554067     -0.590470      -17.0793       17.0793       196.028       213.107    
  21  0.646516     -0.436157      -12.6158       12.6158       189.306       201.921    
  22  0.271985      -1.30201      -37.6604       37.6604       191.883       229.543    
  23  0.901636E-02  -4.70871      -136.199       136.199       191.350       327.549    
  24  0.383616     -0.958114      -27.7133       27.7133       189.414       217.128    
  25  0.443516     -0.813022      -23.5165       23.5165       191.786       215.303    
  26  0.223023      -1.50048      -43.4012       43.4012       175.715       219.116    
  27  0.123255      -2.09350      -60.5541       60.5541       192.507       253.061    
  28  0.817485     -0.201523      -5.82902       5.82902       192.049       197.878    
  29  0.333893      -1.09693      -31.7286       31.7286       192.707       224.436    
  30  0.867877     -0.141706      -4.09882       4.09882       184.706       188.805    
  31  0.365747      -1.00581      -29.0930       29.0930       188.127       217.220    
  32  0.429445     -0.845262      -24.4491       24.4491       189.841       214.290    
  33  0.856620     -0.154761      -4.47644       4.47644       190.529       195.005    
  34  0.729532     -0.315352      -9.12152       9.12152       187.995       197.116    
  35  0.315845      -1.15251      -33.3360       33.3360       204.512       237.848    
  36  0.547596     -0.602217      -17.4190       17.4190       186.849       204.268    
  37  0.752130     -0.284846      -8.23914       8.23914       189.745       197.984    
  38  0.806451     -0.215112      -6.22209       6.22209       189.875       196.097    
  39  0.618613     -0.480275      -13.8919       13.8919       192.091       205.983    
  40  0.630350     -0.461480      -13.3482       13.3482       196.763       210.111    
  41  0.251741      -1.37935      -39.8976       39.8976       191.114       231.011    
  42  0.846504     -0.166640      -4.82003       4.82003       194.280       199.100    
  43  0.830791     -0.185377      -5.36199       5.36199       187.201       192.563    
  44  0.566838     -0.567681      -16.4201       16.4201       212.657       229.077    
  45  0.499450E-01  -2.99683      -86.6830       86.6830       191.444       278.127    
  46  0.976301     -0.239838E-01 -0.693729      0.693729       204.357       205.051    
  47  0.401049     -0.913672      -26.4278       26.4278       191.935       218.363    
  48  0.709931E-01  -2.64517      -76.5112       76.5112       191.708       268.219    
  49  0.920370E-02  -4.68815      -135.604       135.604       191.517       327.121    
  50  0.379723     -0.968314      -28.0083       28.0083       186.433       214.441    
  51  0.207569      -1.57229      -45.4783       45.4783       193.212       238.690    
  52  0.745673     -0.293468      -8.48851       8.48851       189.576       198.065    
  53  0.915877     -0.878737E-01  -2.54173       2.54173       189.969       192.510    
  54  0.836769     -0.178207      -5.15462       5.15462       192.249       197.404    
  55  0.769684E-01  -2.56436      -74.1737       74.1737       192.192       266.366    
  56  0.797754     -0.225955      -6.53572       6.53572       190.223       196.759    
  57  0.555189     -0.588446      -17.0207       17.0207       190.448       207.469    
  58  0.134224      -2.00825      -58.0883       58.0883       192.832       250.921    
  59  0.796234     -0.227862      -6.59088       6.59088       191.670       198.261    
  60  0.628721     -0.464068      -13.4231       13.4231       185.450       198.873    
  61  0.460391     -0.775679      -22.4364       22.4364       192.832       215.269    
  62  0.137302      -1.98558      -57.4325       57.4325       239.831       297.263    
  63  0.504249     -0.684686      -19.8044       19.8044       193.218       213.023    
  64  0.548486     -0.600594      -17.3721       17.3721       199.085       216.458    
  65  0.479259     -0.735514      -21.2746       21.2746       192.845       214.120    
  66  0.763784     -0.269471      -7.79440       7.79440       191.913       199.708    
  67  0.896024     -0.109788      -3.17560       3.17560       191.800       194.975    
  68  0.873307     -0.135468      -3.91839       3.91839       215.979       219.898    
  69  0.469885     -0.755268      -21.8460       21.8460       191.810       213.656    
  70  0.705401     -0.348988      -10.0944       10.0944       192.832       202.927    
  71  0.997081     -0.292289E-02 -0.845442E-01  0.845442E-01   258.696       258.780    
  72  0.204925      -1.58511      -45.8491       45.8491       189.670       235.519    
loop,thermsimp(1:2)       60   34.4287       4.92821    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187        185.33          0.84          1.11         25.02          0.18          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    188        190.15          0.84          1.11         25.13          0.08          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    185.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       60
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       61
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      187     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -5.40064       5.40064       184.706       190.107    
   2  0.735850     -0.306729      -8.87209       8.87209       185.359       194.232    
   3  0.828786     -0.187793      -5.43189       5.43189       189.969       195.401    
   4  0.592078     -0.524118      -15.1600       15.1600       187.201       202.361    
   5  0.691797E-01  -2.67105      -77.2597       77.2597       192.832       270.092    
   6  0.772335     -0.258337      -7.47236       7.47236       191.800       199.272    
   7  0.504563     -0.684063      -19.7864       19.7864       190.529       210.315    
   8  0.700615     -0.355797      -10.2914       10.2914       189.875       200.166    
   9  0.764596     -0.268408      -7.76365       7.76365       189.245       197.009    
  10  0.459614     -0.777368      -22.4853       22.4853       192.832       215.318    
  11  0.931193     -0.712882E-01  -2.06200       2.06200       190.223       192.285    
  12  0.502482E-01  -2.99078      -86.5079       86.5079       184.490       270.998    
  13  0.498197     -0.696760      -20.1537       20.1537       187.995       208.148    
  14  0.551534E-01  -2.89764      -83.8137       83.8137       192.249       276.063    
  15  0.172209      -1.75905      -50.8802       50.8802       192.049       242.929    
  16  0.238868E-01  -3.73443      -108.018       108.018       189.745       297.763    
  17  0.699366     -0.357581      -10.3430       10.3430       189.576       199.919    
  18  0.764093     -0.269066      -7.78270       7.78270       191.670       199.453    
  19  0.465633     -0.764357      -22.1089       22.1089       185.450       207.559    
  20  0.209906      -1.56110      -45.1545       45.1545       194.280       239.435    
  21  0.216891      -1.52836      -44.2076       44.2076       191.913       236.121    
  22  0.795854E-01  -2.53092      -73.2066       73.2066       193.483       266.690    
  23  0.701683     -0.354273      -10.2473       10.2473       189.306       199.553    
  24  0.574425     -0.554385      -16.0355       16.0355       192.177       208.213    
  25  0.674968     -0.393090      -11.3701       11.3701       189.277       200.647    
  26  0.684189     -0.379521      -10.9776       10.9776       192.832       203.810    
  27  0.541862     -0.612745      -17.7235       17.7235       186.849       204.572    
  28  0.668027     -0.403426      -11.6690       11.6690       195.694       207.363    
  29  0.353251      -1.04058      -30.0985       30.0985       204.357       234.455    
  30  0.778708     -0.250119      -7.23467       7.23467       192.091       199.326    
  31  0.829283     -0.187194      -5.41456       5.41456       191.801       197.215    
  32  0.679297     -0.386697      -11.1851       11.1851       190.448       201.633    
  33  0.536301     -0.623060      -18.0219       18.0219       185.115       203.137    
  34  0.247738      -1.39538      -40.3612       40.3612       192.846       233.207    
  35  0.271399      -1.30416      -37.7227       37.7227       196.763       234.486    
  36  0.284124      -1.25835      -36.3975       36.3975       190.048       226.445    
  37  0.664442     -0.408808      -11.8247       11.8247       193.218       205.043    
  38  0.874508     -0.134094      -3.87864       3.87864       196.028       199.907    
  39  0.916444     -0.872538E-01  -2.52380       2.52380       191.810       194.334    
  40  0.295165      -1.22022      -35.2947       35.2947       193.388       228.683    
  41  0.242592      -1.41637      -40.9684       40.9684       192.845       233.814    
  42  0.396124     -0.926028      -26.7852       26.7852       189.841       216.626    
  43  0.509193E-01  -2.97751      -86.1241       86.1241       186.433       272.557    
  44  0.778911     -0.249858      -7.22711       7.22711       192.832       200.059    
  45  0.351009      -1.04694      -30.2827       30.2827       191.786       222.069    
  46  0.480934     -0.732025      -21.1737       21.1737       199.085       220.259    
  47  0.908579     -0.958731E-01  -2.77312       2.77312       189.414       192.187    
  48  0.898885     -0.106600      -3.08338       3.08338       188.127       191.210    
  49  0.561121     -0.577819      -16.7133       16.7133       183.292       200.005    
  50  0.851109     -0.161215      -4.66313       4.66313       191.935       196.598    
  51  0.975854     -0.244425E-01 -0.706996      0.706996       187.446       188.153    
  52  0.187829      -1.67223      -48.3689       48.3689       175.715       224.084    
  53  0.962131     -0.386049E-01  -1.11664       1.11664       215.979       217.096    
  54  0.823812     -0.193813      -5.60601       5.60601       192.707       198.313    
  55  0.765207     -0.267609      -7.74056       7.74056       212.657       220.397    
  56  0.207984      -1.57030      -45.4206       45.4206       191.883       237.303    
  57  0.675792     -0.391869      -11.3348       11.3348       193.650       204.985    
  58  0.641275     -0.444296      -12.8512       12.8512       191.114       203.965    
  59  0.621346E-01  -2.77845      -80.3663       80.3663       189.670       270.036    
  60  0.911977E-01  -2.39473      -69.2671       69.2671       204.512       273.779    
  61  0.697078     -0.360859      -10.4378       10.4378       193.212       203.649    
  62  0.760976     -0.273154      -7.90093       7.90093       186.626       194.527    
  63  0.812117     -0.208111      -6.01958       6.01958       192.832       198.852    
  64  0.654868     -0.423322      -12.2445       12.2445       192.507       204.751    
  65  0.263345E-02  -5.93946      -171.798       171.798       258.696       430.494    
  66  0.180895      -1.70984      -49.4568       49.4568       192.192       241.649    
  67  0.830100     -0.186209      -5.38606       5.38606       183.837       189.223    
  68  0.396842E-01  -3.22680      -93.3348       93.3348       191.708       285.043    
  69  0.862274     -0.148182      -4.28614       4.28614       191.444       195.730    
  70  0.362095      -1.01585      -29.3833       29.3833       239.831       269.214    
  71  0.156544      -1.85442      -53.6388       53.6388       191.517       245.156    
  72  0.103594      -2.26727      -65.5806       65.5806       185.330       250.911    
loop,thermsimp(1:2)       61   5.40064       8.87209    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189        204.40          0.85          1.11         25.08          0.15          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       61
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       62
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      188     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -2.49380       2.49380       187.446       189.940    
   2  0.899579E-01  -2.40841      -69.6630       69.6630       183.837       253.500    
   3  0.997625     -0.237830E-02 -0.687921E-01  0.687921E-01   184.706       184.775    
   4  0.224083      -1.49574      -43.2641       43.2641       188.127       231.391    
   5  0.120769      -2.11388      -61.1437       61.1437       189.414       250.558    
   6  0.302676E-01  -3.49768      -101.170       101.170       190.223       291.393    
   7  0.315161      -1.15467      -33.3987       33.3987       185.359       218.758    
   8  0.155895      -1.85857      -53.7590       53.7590       191.810       245.569    
   9  0.467639     -0.760060      -21.9846       21.9846       186.626       208.610    
  10  0.277823      -1.28077      -37.0461       37.0461       189.969       227.015    
  11  0.712282     -0.339281      -9.81365       9.81365       191.444       201.258    
  12  0.929560     -0.730437E-01  -2.11278       2.11278       191.935       194.048    
  13  0.499024     -0.695101      -20.1057       20.1057       189.245       209.351    
  14  0.940347     -0.615066E-01  -1.77907       1.77907       191.801       193.580    
  15  0.714006     -0.336864      -9.74374       9.74374       192.707       202.451    
  16  0.162603      -1.81644      -52.5404       52.5404       192.832       245.373    
  17  0.663729     -0.409881      -11.8557       11.8557       191.800       203.655    
  18  0.314148      -1.15789      -33.4918       33.4918       192.091       225.583    
  19  0.497386     -0.698388      -20.2008       20.2008       191.670       211.871    
  20  0.368387     -0.998622      -28.8850       28.8850       189.306       218.191    
  21  0.326342      -1.11981      -32.3903       32.3903       196.028       228.419    
  22  0.442952     -0.814294      -23.5533       23.5533       189.576       213.130    
  23  0.929694     -0.729000E-01  -2.10862       2.10862       183.292       185.400    
  24  0.945450E-01  -2.35868      -68.2244       68.2244       192.832       261.057    
  25  0.407158     -0.898555      -25.9906       25.9906       189.875       215.865    
  26  0.706679     -0.347179      -10.0421       10.0421       189.277       199.319    
  27  0.657848     -0.418781      -12.1132       12.1132       190.448       202.561    
  28  0.968040     -0.324817E-01 -0.939529      0.939529       187.201       188.140    
  29  0.330387      -1.10749      -32.0340       32.0340       185.115       217.149    
  30  0.756161     -0.279501      -8.08453       8.08453       193.212       201.296    
  31  0.307772      -1.17840      -34.0849       34.0849       192.832       226.917    
  32  0.759008E-01  -2.57833      -74.5777       74.5777       191.114       265.691    
  33  0.615618E-01  -2.78771      -80.6342       80.6342       186.849       267.483    
  34  0.545984     -0.605166      -17.5043       17.5043       192.507       210.011    
  35  0.339865      -1.07921      -31.2159       31.2159       193.650       224.866    
  36  0.816477     -0.202757      -5.86472       5.86472       193.218       199.083    
  37  0.932889     -0.694691E-01  -2.00938       2.00938       195.694       197.704    
  38  0.667042     -0.404902      -11.7117       11.7117       185.450       197.162    
  39  0.583049     -0.539484      -15.6045       15.6045       187.995       203.599    
  40  0.210192      -1.55973      -45.1151       45.1151       192.177       237.292    
  41  0.158846      -1.83982      -53.2166       53.2166       190.529       243.745    
  42  0.360401      -1.02054      -29.5189       29.5189       192.832       222.351    
  43  0.508154     -0.676971      -19.5813       19.5813       189.841       209.422    
  44  0.873303     -0.135473      -3.91853       3.91853       215.979       219.898    
  45  0.650524     -0.429977      -12.4370       12.4370       199.085       211.522    
  46  0.805601     -0.216166      -6.25257       6.25257       212.657       218.909    
  47  0.312590E-03  -8.07062      -233.441       233.441       191.786       425.228    
  48  0.892261     -0.113997      -3.29734       3.29734       175.715       179.012    
  49  0.504672     -0.683846      -19.7801       19.7801       190.048       209.828    
  50  0.269834      -1.30995      -37.8900       37.8900       193.388       231.278    
  51  0.752889     -0.283838      -8.20996       8.20996       192.846       201.056    
  52  0.952800     -0.483498E-01  -1.39851       1.39851       192.845       194.244    
  53  0.147189E-01  -4.21863      -122.023       122.023       204.357       326.380    
  54  0.213392      -1.54462      -44.6780       44.6780       196.763       241.441    
  55  0.278061      -1.27992      -37.0214       37.0214       191.913       228.935    
  56  0.668800     -0.402271      -11.6356       11.6356       191.883       203.518    
  57  0.674989     -0.393058      -11.3692       11.3692       194.280       205.650    
  58  0.186370      -1.68002      -48.5943       48.5943       192.192       240.787    
  59  0.133078      -2.01682      -58.3361       58.3361       192.049       250.385    
  60  0.519821     -0.654270      -18.9247       18.9247       191.517       210.442    
  61  0.136847      -1.98889      -57.5284       57.5284       185.330       242.859    
  62  0.604880     -0.502725      -14.5413       14.5413       193.483       208.024    
  63  0.301519      -1.19892      -34.6786       34.6786       239.831       274.510    
  64  0.531506     -0.632040      -18.2817       18.2817       189.670       207.951    
  65  0.554963     -0.588854      -17.0325       17.0325       192.832       209.865    
  66  0.264726      -1.32906      -38.4429       38.4429       184.490       222.933    
  67  0.520437     -0.653087      -18.8904       18.8904       186.433       205.324    
  68  0.457095     -0.782865      -22.6442       22.6442       204.512       227.157    
  69  0.349515      -1.05121      -30.4061       30.4061       192.249       222.656    
  70  0.624446E-01  -2.77348      -80.2224       80.2224       191.708       271.930    
  71  0.659983     -0.415541      -12.0194       12.0194       189.745       201.764    
  72  0.171300      -1.76434      -51.0332       51.0332       204.404       255.437    
loop,thermsimp(1:2)       62   2.49380       69.6630    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190        191.64          0.84          1.11         25.13          0.19          0.05         27.32
Just calling func    0   0         27.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191        200.93          0.84          1.11         25.42          0.14          0.05         27.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       62
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       63
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      190     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -13.9583       13.9583       175.715       189.673    
   2  0.828850     -0.187716      -5.42964       5.42964       184.706       190.136    
   3  0.138898      -1.97402      -57.0982       57.0982       183.292       240.390    
   4  0.174947      -1.74327      -50.4239       50.4239       187.201       237.624    
   5  0.452367E-01  -3.09585      -89.5469       89.5469       187.446       276.993    
   6  0.982229     -0.179305E-01 -0.518636      0.518636       191.801       192.319    
   7  0.855728     -0.155803      -4.50658       4.50658       191.935       196.441    
   8  0.350750      -1.04768      -30.3040       30.3040       192.845       223.149    
   9  0.880054     -0.127772      -3.69579       3.69579       185.450       189.146    
  10  0.106511      -2.23950      -64.7773       64.7773       195.694       260.472    
  11  0.336060      -1.09047      -31.5416       31.5416       193.218       224.760    
  12  0.904819     -0.100020      -2.89307       2.89307       189.277       192.170    
  13  0.765597     -0.267099      -7.72579       7.72579       192.846       200.572    
  14  0.551789     -0.594589      -17.1984       17.1984       191.444       208.642    
  15  0.832435     -0.183400      -5.30481       5.30481       193.212       198.516    
  16  0.353494      -1.03989      -30.0787       30.0787       189.745       219.823    
  17  0.510104     -0.673140      -19.4705       19.4705       192.707       212.178    
  18  0.523162     -0.647863      -18.7393       18.7393       190.448       209.187    
  19  0.953043     -0.480957E-01  -1.39116       1.39116       191.883       193.274    
  20  0.267001E-01  -3.62309      -104.797       104.797       187.995       292.792    
  21  0.280924      -1.26967      -36.7250       36.7250       191.800       228.525    
  22  0.956868     -0.440901E-01  -1.27530       1.27530       186.433       187.708    
  23  0.779725     -0.248814      -7.19690       7.19690       194.280       201.477    
  24  0.901061     -0.104183      -3.01347       3.01347       189.670       192.683    
  25  0.533391     -0.628501      -18.1793       18.1793       193.483       211.662    
  26  0.642536     -0.442333      -12.7944       12.7944       186.626       199.420    
  27  0.520565E-01  -2.95543      -85.4852       85.4852       189.245       274.731    
  28  0.330080      -1.10842      -32.0609       32.0609       189.841       221.902    
  29  0.280801      -1.27011      -36.7377       36.7377       190.048       226.786    
  30  0.144013      -1.93785      -56.0520       56.0520       192.832       248.884    
  31  0.201537      -1.60178      -46.3312       46.3312       192.507       238.838    
  32  0.920188     -0.831777E-01  -2.40590       2.40590       191.517       193.923    
  33  0.747222     -0.291393      -8.42850       8.42850       199.085       207.514    
  34  0.697959     -0.359595      -10.4012       10.4012       191.670       202.071    
  35  0.492949     -0.707349      -20.4600       20.4600       189.576       210.036    
  36  0.378001     -0.972857      -28.1398       28.1398       189.875       218.014    
  37  0.936484     -0.656225E-01  -1.89812       1.89812       185.115       187.013    
  38  0.458232     -0.780381      -22.5724       22.5724       189.306       211.878    
  39  0.286796      -1.24898      -36.1267       36.1267       185.359       221.486    
  40  0.524458     -0.645389      -18.6678       18.6678       212.657       231.324    
  41  0.126679      -2.06610      -59.7616       59.7616       215.979       275.741    
  42  0.645270     -0.438086      -12.6716       12.6716       192.832       205.504    
  43  0.996049     -0.395919E-02 -0.114519      0.114519       192.249       192.364    
  44  0.470695     -0.753545      -21.7962       21.7962       184.490       206.286    
  45  0.783048     -0.244561      -7.07389       7.07389       193.650       200.724    
  46  0.682425     -0.382103      -11.0523       11.0523       192.091       203.143    
  47  0.623779     -0.471960      -13.6514       13.6514       192.832       206.484    
  48  0.138146      -1.97945      -57.2552       57.2552       189.969       247.224    
  49  0.317697      -1.14666      -33.1668       33.1668       204.512       237.679    
  50  0.215616      -1.53426      -44.3781       44.3781       196.028       240.406    
  51  0.392653     -0.934829      -27.0398       27.0398       191.913       218.953    
  52  0.311957      -1.16489      -33.6943       33.6943       193.388       227.082    
  53  0.665567     -0.407116      -11.7758       11.7758       188.127       199.902    
  54  0.124333      -2.08479      -60.3022       60.3022       192.177       252.480    
  55  0.175373      -1.74084      -50.3535       50.3535       192.192       242.546    
  56  0.712195E-01  -2.64199      -76.4191       76.4191       196.763       273.182    
  57  0.626551E-01  -2.77011      -80.1250       80.1250       185.330       265.455    
  58  0.869671     -0.139640      -4.03907       4.03907       190.529       194.568    
  59  0.112950      -2.18081      -63.0795       63.0795       192.832       255.912    
  60  0.837299     -0.177574      -5.13629       5.13629       191.810       196.946    
  61  0.380546     -0.966149      -27.9457       27.9457       192.049       219.995    
  62  0.225371      -1.49001      -43.0983       43.0983       189.414       232.513    
  63  0.556139     -0.586737      -16.9713       16.9713       183.837       200.809    
  64  0.909618     -0.947309E-01  -2.74008       2.74008       204.404       207.144    
  65  0.432012     -0.839301      -24.2767       24.2767       192.832       217.109    
  66  0.554192     -0.590244      -17.0727       17.0727       191.114       208.186    
  67  0.264884      -1.32846      -38.4256       38.4256       186.849       225.274    
  68  0.667330     -0.404471      -11.6993       11.6993       191.708       203.407    
  69  0.445504     -0.808549      -23.3871       23.3871       239.831       263.218    
  70  0.194275      -1.63848      -47.3929       47.3929       190.223       237.616    
  71  0.886150     -0.120869      -3.49610       3.49610       204.357       207.853    
  72  0.487114     -0.719257      -20.8044       20.8044       191.640       212.444    
loop,thermsimp(1:2)       63   13.9583       5.42964    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192        196.09          0.84          1.11         25.10          0.17          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       63
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       64
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      191     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -5.86219       5.86219       185.115       190.977    
   2  0.209930      -1.56098      -45.1512       45.1512       186.433       231.584    
   3  0.710991     -0.341096      -9.86615       9.86615       185.450       195.316    
   4  0.967365     -0.331789E-01 -0.959694      0.959694       175.715       176.675    
   5  0.650635E-01  -2.73239      -79.0340       79.0340       184.706       263.740    
   6  0.578340     -0.547593      -15.8390       15.8390       189.277       205.116    
   7  0.928890E-01  -2.37635      -68.7356       68.7356       191.801       260.536    
   8  0.486974     -0.719546      -20.8127       20.8127       192.249       213.062    
   9  0.560625     -0.578703      -16.7389       16.7389       189.670       206.409    
  10  0.552834     -0.592698      -17.1437       17.1437       191.883       209.026    
  11  0.744529E-01  -2.59759      -75.1348       75.1348       191.517       266.652    
  12  0.937600     -0.644318E-01  -1.86368       1.86368       190.529       192.392    
  13  0.154459      -1.86783      -54.0266       54.0266       191.935       245.962    
  14  0.186893E-02  -6.28239      -181.717       181.717       191.810       373.527    
  15  0.250797      -1.38311      -40.0063       40.0063       193.212       233.218    
  16  0.924847E-01  -2.38071      -68.8618       68.8618       186.626       255.488    
  17  0.476680     -0.740911      -21.4307       21.4307       188.127       209.557    
  18  0.266527      -1.32228      -38.2467       38.2467       192.846       231.093    
  19  0.369755     -0.994916      -28.7778       28.7778       193.650       222.428    
  20  0.595561     -0.518252      -14.9904       14.9904       183.837       198.828    
  21  0.636070     -0.452447      -13.0870       13.0870       194.280       207.367    
  22  0.447294     -0.804540      -23.2712       23.2712       191.670       214.941    
  23  0.964945     -0.356839E-01  -1.03215       1.03215       192.091       193.123    
  24  0.752421     -0.284460      -8.22795       8.22795       191.708       199.936    
  25  0.705556     -0.348769      -10.0881       10.0881       192.832       202.920    
  26  0.943467     -0.581939E-01  -1.68325       1.68325       184.490       186.173    
  27  0.272564      -1.29988      -37.5989       37.5989       192.832       230.431    
  28  0.215815      -1.53333      -44.3514       44.3514       204.404       248.755    
  29  0.756955     -0.278452      -8.05418       8.05418       199.085       207.140    
  30  0.538381     -0.619189      -17.9099       17.9099       204.357       222.267    
  31  0.182967      -1.69845      -49.1274       49.1274       191.114       240.241    
  32  0.644758     -0.438881      -12.6946       12.6946       191.444       204.139    
  33  0.939477     -0.624320E-01  -1.80584       1.80584       190.448       192.254    
  34  0.663186     -0.410699      -11.8794       11.8794       189.576       201.456    
  35  0.795014     -0.229396      -6.63525       6.63525       193.483       200.118    
  36  0.630792     -0.460779      -13.3280       13.3280       189.306       202.633    
  37  0.151039      -1.89022      -54.6742       54.6742       192.707       247.382    
  38  0.668306     -0.403009      -11.6570       11.6570       191.640       203.297    
  39  0.683820     -0.380061      -10.9932       10.9932       192.832       203.826    
  40  0.122229      -2.10186      -60.7959       60.7959       189.875       250.670    
  41  0.664453     -0.408791      -11.8242       11.8242       191.913       203.738    
  42  0.548687     -0.600228      -17.3615       17.3615       189.745       207.106    
  43  0.931535     -0.709210E-01  -2.05138       2.05138       192.049       194.101    
  44  0.139742      -1.96796      -56.9229       56.9229       185.359       242.282    
  45  0.429142     -0.845967      -24.4695       24.4695       189.841       214.310    
  46  0.531147     -0.632717      -18.3012       18.3012       192.845       211.147    
  47  0.575558     -0.552416      -15.9785       15.9785       193.218       209.197    
  48  0.336537      -1.08905      -31.5005       31.5005       186.849       218.349    
  49  0.324486      -1.12551      -32.5553       32.5553       190.048       222.603    
  50  0.652768     -0.426534      -12.3374       12.3374       193.388       205.725    
  51  0.537860     -0.620158      -17.9380       17.9380       191.800       209.738    
  52  0.415288     -0.878782      -25.4186       25.4186       212.657       238.075    
  53  0.771827     -0.258995      -7.49140       7.49140       189.414       196.906    
  54  0.537995     -0.619906      -17.9307       17.9307       190.223       208.154    
  55  0.438537     -0.824310      -23.8430       23.8430       187.201       211.044    
  56  0.872114     -0.136835      -3.95792       3.95792       204.512       208.470    
  57  0.974519E-01  -2.32840      -67.3485       67.3485       192.507       259.855    
  58  0.245035      -1.40635      -40.6786       40.6786       183.292       223.970    
  59  0.285418      -1.25380      -36.2660       36.2660       196.028       232.294    
  60  0.598735     -0.512936      -14.8366       14.8366       192.192       207.029    
  61  0.440039     -0.820892      -23.7442       23.7442       189.969       213.713    
  62  0.115587      -2.15774      -62.4122       62.4122       192.832       255.245    
  63  0.479716     -0.734560      -21.2470       21.2470       192.177       213.424    
  64  0.423297     -0.859681      -24.8662       24.8662       192.832       217.698    
  65  0.385689E-01  -3.25531      -94.1593       94.1593       195.694       289.854    
  66  0.504564     -0.684061      -19.7863       19.7863       239.831       259.617    
  67  0.406483     -0.900213      -26.0385       26.0385       185.330       211.369    
  68  0.362573E-01  -3.31712      -95.9471       95.9471       196.763       292.710    
  69  0.666448E-03  -7.31355      -211.543       211.543       189.245       400.789    
  70  0.428061     -0.848489      -24.5424       24.5424       215.979       240.522    
  71  0.324089      -1.12674      -32.5907       32.5907       187.446       220.037    
  72  0.491354     -0.710591      -20.5537       20.5537       196.089       216.643    
loop,thermsimp(1:2)       64   5.86219       45.1512    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193        189.47          0.84          1.11         25.10          0.18          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    194        202.54          0.84          1.12         25.02          0.24          0.04         27.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       64
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       65
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      193     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -28.9530       28.9530       175.715       204.668    
   2  0.298218      -1.20993      -34.9971       34.9971       184.490       219.487    
   3  0.374092     -0.983254      -28.4405       28.4405       185.115       213.555    
   4  0.417366     -0.873791      -25.2743       25.2743       190.448       215.722    
   5  0.299382      -1.20604      -34.8844       34.8844       190.529       225.413    
   6  0.373029     -0.986099      -28.5228       28.5228       192.091       220.614    
   7  0.628224     -0.464858      -13.4460       13.4460       192.049       205.495    
   8  0.111397      -2.19465      -63.4800       63.4800       185.450       248.930    
   9  0.983555     -0.165818E-01 -0.479625      0.479625       189.414       189.894    
  10  0.394578     -0.929938      -26.8983       26.8983       183.837       210.736    
  11  0.410639     -0.890042      -25.7443       25.7443       191.708       217.452    
  12  0.700680     -0.355705      -10.2887       10.2887       193.483       203.772    
  13  0.223946      -1.49635      -43.2818       43.2818       189.576       232.858    
  14  0.651113E-01  -2.73166      -79.0128       79.0128       189.306       268.318    
  15  0.704010     -0.350963      -10.1516       10.1516       192.832       202.984    
  16  0.172411      -1.75787      -50.8462       50.8462       191.640       242.486    
  17  0.567412     -0.566670      -16.3908       16.3908       191.913       208.304    
  18  0.186334      -1.68021      -48.5999       48.5999       192.832       241.432    
  19  0.677524     -0.389310      -11.2607       11.2607       191.444       202.705    
  20  0.362270      -1.01537      -29.3693       29.3693       189.277       218.647    
  21  0.603880     -0.504381      -14.5891       14.5891       193.388       207.977    
  22  0.782208     -0.245635      -7.10495       7.10495       189.670       196.775    
  23  0.129808      -2.04170      -59.0559       59.0559       192.192       251.248    
  24  0.284816      -1.25591      -36.3271       36.3271       189.745       226.072    
  25  0.246930      -1.39865      -40.4558       40.4558       199.085       239.541    
  26  0.256917      -1.35900      -39.3089       39.3089       194.280       233.589    
  27  0.240545      -1.42485      -41.2135       41.2135       190.223       231.437    
  28  0.218018      -1.52318      -44.0577       44.0577       204.512       248.570    
  29  0.235583E-01  -3.74828      -108.418       108.418       191.883       300.301    
  30  0.114660      -2.16578      -62.6449       62.6449       193.218       255.863    
  31  0.119129      -2.12755      -61.5391       61.5391       188.127       249.666    
  32  0.471707     -0.751398      -21.7341       21.7341       191.800       213.534    
  33  0.607413     -0.498546      -14.4204       14.4204       187.201       201.621    
  34  0.568731     -0.564347      -16.3236       16.3236       192.845       209.169    
  35  0.587492     -0.531893      -15.3849       15.3849       185.330       200.715    
  36  0.411259     -0.888533      -25.7007       25.7007       192.249       217.950    
  37  0.836192     -0.178897      -5.17456       5.17456       192.177       197.352    
  38  0.152977      -1.87747      -54.3054       54.3054       189.969       244.274    
  39  0.941831     -0.599291E-01  -1.73344       1.73344       189.841       191.574    
  40  0.936595     -0.655045E-01  -1.89471       1.89471       191.670       193.565    
  41  0.856621     -0.154759      -4.47639       4.47639       196.089       200.565    
  42  0.484786     -0.724047      -20.9429       20.9429       192.832       213.775    
  43  0.188261      -1.66993      -48.3024       48.3024       186.849       235.151    
  44  0.957606     -0.433189E-01  -1.25299       1.25299       187.446       188.699    
  45  0.234891      -1.44863      -41.9015       41.9015       204.357       246.258    
  46  0.758920     -0.275858      -7.97916       7.97916       193.650       201.629    
  47  0.135340      -1.99997      -57.8487       57.8487       190.048       247.897    
  48  0.779121E-01  -2.55217      -73.8212       73.8212       183.292       257.113    
  49  0.573767     -0.555531      -16.0687       16.0687       192.832       208.901    
  50  0.982512     -0.176424E-01 -0.510303      0.510303       192.846       193.356    
  51  0.109579      -2.21111      -63.9560       63.9560       186.433       250.389    
  52  0.714543     -0.336113      -9.72201       9.72201       196.028       205.750    
  53  0.573216     -0.556492      -16.0964       16.0964       193.212       209.308    
  54  0.389116     -0.943877      -27.3015       27.3015       212.657       239.958    
  55  0.149817      -1.89834      -54.9093       54.9093       191.114       246.023    
  56  0.623269     -0.472778      -13.6750       13.6750       215.979       229.654    
  57  0.682320E-02  -4.98743      -144.261       144.261       185.359       329.620    
  58  0.641698     -0.443637      -12.8321       12.8321       191.935       204.767    
  59  0.233363      -1.45516      -42.0903       42.0903       192.707       234.798    
  60  0.881483     -0.126150      -3.64887       3.64887       204.404       208.053    
  61  0.264921      -1.32832      -38.4215       38.4215       189.875       228.296    
  62  0.941652     -0.601200E-01  -1.73896       1.73896       192.832       194.571    
  63  0.179971      -1.71496      -49.6049       49.6049       186.626       236.231    
  64  0.381207E-01  -3.26700      -94.4974       94.4974       239.831       334.328    
  65  0.998657     -0.134405E-02 -0.388765E-01  0.388765E-01   192.507       192.545    
  66  0.553871     -0.590823      -17.0895       17.0895       191.801       208.890    
  67  0.599651     -0.511408      -14.7924       14.7924       184.706       199.498    
  68  0.834589     -0.180815      -5.23006       5.23006       191.517       196.747    
  69  0.622560     -0.473915      -13.7079       13.7079       195.694       209.402    
  70  0.437672E-03  -7.73404      -223.706       223.706       196.763       420.469    
  71  0.881230     -0.126437      -3.65717       3.65717       191.810       195.467    
  72  0.793726     -0.231017      -6.68214       6.68214       189.474       196.156    
loop,thermsimp(1:2)       65   28.9530       34.9971    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195        191.16          0.84          1.11         25.09          0.22          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    196        194.61          0.84          1.11         25.16          0.11          0.05         27.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       65
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       66
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      195     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -39.4732       39.4732       187.446       226.919    
   2  0.513427E-01  -2.96923      -85.8846       85.8846       189.414       275.299    
   3  0.288453      -1.24322      -35.9601       35.9601       189.841       225.801    
   4  0.107044      -2.23452      -64.6330       64.6330       192.507       257.140    
   5  0.756779     -0.278684      -8.06089       8.06089       192.846       200.907    
   6  0.333762      -1.09733      -31.7401       31.7401       191.670       223.410    
   7  0.270335      -1.30809      -37.8364       37.8364       192.832       230.669    
   8  0.666278E-01  -2.70863      -78.3468       78.3468       191.810       270.157    
   9  0.517510     -0.658727      -19.0536       19.0536       189.474       208.527    
  10  0.719680     -0.328949      -9.51479       9.51479       191.517       201.032    
  11  0.401542     -0.912442      -26.3923       26.3923       189.670       216.062    
  12  0.408125     -0.896181      -25.9219       25.9219       192.177       218.099    
  13  0.481086     -0.731710      -21.1646       21.1646       184.706       205.870    
  14  0.166952E-01  -4.09263      -118.379       118.379       196.089       314.468    
  15  0.913266     -0.907286E-01  -2.62431       2.62431       185.330       187.955    
  16  0.972084     -0.283134E-01 -0.818961      0.818961       187.201       188.020    
  17  0.889421     -0.117184      -3.38954       3.38954       193.650       197.039    
  18  0.171754      -1.76169      -50.9567       50.9567       191.444       242.401    
  19  0.925876     -0.770155E-01  -2.22766       2.22766       192.832       195.060    
  20  0.992897     -0.712866E-02 -0.206195      0.206195       193.483       193.689    
  21  0.118575E-01  -4.43479      -128.276       128.276       175.715       303.991    
  22  0.492413     -0.708438      -20.4915       20.4915       191.935       212.426    
  23  0.952433     -0.487360E-01  -1.40968       1.40968       192.049       193.459    
  24  0.591826     -0.524543      -15.1723       15.1723       196.028       211.201    
  25  0.762199     -0.271548      -7.85448       7.85448       193.388       201.242    
  26  0.613492     -0.488588      -14.1323       14.1323       204.404       218.536    
  27  0.134863      -2.00350      -57.9509       57.9509       191.913       249.864    
  28  0.633670     -0.456227      -13.1963       13.1963       191.801       204.997    
  29  0.829625     -0.186782      -5.40263       5.40263       192.832       198.235    
  30  0.148219      -1.90906      -55.2194       55.2194       192.845       248.065    
  31  0.198093      -1.61902      -46.8299       46.8299       193.212       240.042    
  32  0.321318      -1.13532      -32.8391       32.8391       195.694       228.533    
  33  0.475408     -0.743582      -21.5080       21.5080       183.837       205.345    
  34  0.196520      -1.62699      -47.0605       47.0605       191.800       238.860    
  35  0.637413     -0.450337      -13.0259       13.0259       185.115       198.141    
  36  0.596751     -0.516255      -14.9326       14.9326       192.832       207.765    
  37  0.351361      -1.04594      -30.2537       30.2537       190.448       220.702    
  38  0.111764      -2.19136      -63.3848       63.3848       191.708       255.093    
  39  0.213579      -1.54375      -44.6527       44.6527       192.249       236.902    
  40  0.799647     -0.223585      -6.46718       6.46718       189.277       195.745    
  41  0.670682     -0.399460      -11.5543       11.5543       184.490       196.044    
  42  0.104235      -2.26111      -65.4022       65.4022       192.091       257.493    
  43  0.607160E-01  -2.80155      -81.0344       81.0344       190.529       271.563    
  44  0.462312     -0.771516      -22.3160       22.3160       189.745       212.061    
  45  0.269658      -1.31060      -37.9089       37.9089       189.875       227.783    
  46  0.678606     -0.387714      -11.2146       11.2146       215.979       227.194    
  47  0.669051     -0.401895      -11.6248       11.6248       190.223       201.848    
  48  0.551912     -0.594367      -17.1920       17.1920       189.576       206.768    
  49  0.116070E-01  -4.45614      -128.893       128.893       194.280       323.174    
  50  0.911337     -0.928428E-01  -2.68546       2.68546       192.707       195.393    
  51  0.302404      -1.19599      -34.5938       34.5938       186.849       221.443    
  52  0.527926     -0.638800      -18.4772       18.4772       186.626       205.103    
  53  0.204835      -1.58555      -45.8618       45.8618       199.085       244.947    
  54  0.761388     -0.272612      -7.88525       7.88525       212.657       220.542    
  55  0.189928      -1.66111      -48.0474       48.0474       192.832       240.880    
  56  0.423830     -0.858422      -24.8297       24.8297       191.640       216.470    
  57  0.895148     -0.110767      -3.20391       3.20391       189.969       193.173    
  58  0.109823      -2.20889      -63.8917       63.8917       191.114       255.005    
  59  0.960076     -0.407431E-01  -1.17849       1.17849       204.357       205.535    
  60  0.694180     -0.365024      -10.5583       10.5583       190.048       200.606    
  61  0.302866      -1.19446      -34.5497       34.5497       204.512       239.062    
  62  0.213503      -1.54410      -44.6629       44.6629       185.450       230.113    
  63  0.949162     -0.521754E-01  -1.50916       1.50916       188.127       189.636    
  64  0.912779     -0.912617E-01  -2.63973       2.63973       186.433       189.073    
  65  0.393978     -0.931461      -26.9424       26.9424       192.192       219.135    
  66  0.957683     -0.432380E-01  -1.25065       1.25065       193.218       194.469    
  67  0.785605     -0.241301      -6.97960       6.97960       183.292       190.271    
  68  0.670559     -0.399644      -11.5596       11.5596       189.306       200.865    
  69  0.793392     -0.231438      -6.69430       6.69430       191.883       198.577    
  70  0.594443     -0.520131      -15.0447       15.0447       185.359       200.404    
  71  0.298128      -1.21023      -35.0058       35.0058       239.831       274.837    
  72  0.233680      -1.45380      -42.0510       42.0510       191.159       233.210    
loop,thermsimp(1:2)       66   39.4732       85.8846    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197        189.53          0.84          1.11         25.15          0.09          0.05         27.23
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198        219.88          0.84          1.11         25.07          0.13          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       66
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       67
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      197     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -35.0267       35.0267       185.330       220.357    
   2  0.840396     -0.173882      -5.02950       5.02950       187.201       192.230    
   3  0.165782      -1.79708      -51.9803       51.9803       186.433       238.413    
   4  0.516202E-01  -2.96384      -85.7287       85.7287       188.127       273.855    
   5  0.163201      -1.81278      -52.4342       52.4342       183.292       235.726    
   6  0.201529      -1.60182      -46.3324       46.3324       189.969       236.301    
   7  0.791805     -0.233441      -6.75223       6.75223       192.049       198.801    
   8  0.306466      -1.18265      -34.2079       34.2079       193.483       227.691    
   9  0.625963     -0.468465      -13.5503       13.5503       193.218       206.768    
  10  0.255827      -1.36325      -39.4319       39.4319       192.832       232.264    
  11  0.275269      -1.29001      -37.3133       37.3133       192.707       230.021    
  12  0.546374     -0.604451      -17.4837       17.4837       189.277       206.761    
  13  0.738275E-01  -2.60602      -75.3788       75.3788       184.490       259.869    
  14  0.459460     -0.777704      -22.4950       22.4950       193.650       216.145    
  15  0.245891      -1.40287      -40.5777       40.5777       185.115       225.693    
  16  0.818144E-01  -2.50330      -72.4076       72.4076       192.832       265.240    
  17  0.791963     -0.233241      -6.74647       6.74647       191.883       198.629    
  18  0.652560     -0.426852      -12.3466       12.3466       185.359       197.706    
  19  0.743237     -0.296740      -8.58315       8.58315       190.048       198.631    
  20  0.146095      -1.92350      -55.6369       55.6369       189.306       244.942    
  21  0.747148     -0.291492      -8.43137       8.43137       192.846       201.278    
  22  0.935024E-01  -2.36977      -68.5452       68.5452       191.517       260.062    
  23  0.924202     -0.788243E-01  -2.27998       2.27998       193.388       195.668    
  24  0.193934      -1.64024      -47.4436       47.4436       190.223       237.667    
  25  0.112499      -2.18481      -63.1952       63.1952       191.801       254.996    
  26  0.609079     -0.495807      -14.3412       14.3412       186.626       200.967    
  27  0.387822     -0.947210      -27.3979       27.3979       183.837       211.235    
  28  0.151976      -1.88403      -54.4954       54.4954       204.357       258.852    
  29  0.820125     -0.198299      -5.73576       5.73576       184.706       190.442    
  30  0.100865      -2.29397      -66.3528       66.3528       189.576       255.929    
  31  0.246930      -1.39865      -40.4558       40.4558       192.832       233.288    
  32  0.101973      -2.28305      -66.0367       66.0367       189.474       255.510    
  33  0.389401     -0.943145      -27.2803       27.2803       196.028       223.309    
  34  0.573635     -0.555762      -16.0753       16.0753       189.745       205.820    
  35  0.730896E-01  -2.61607      -75.6694       75.6694       191.935       267.604    
  36  0.260104      -1.34667      -38.9523       38.9523       189.670       228.622    
  37  0.562102     -0.576073      -16.6628       16.6628       191.640       208.303    
  38  0.159056      -1.83850      -53.1784       53.1784       192.177       245.356    
  39  0.779134E-02  -4.85474      -140.423       140.423       204.404       344.827    
  40  0.693208     -0.366425      -10.5988       10.5988       192.192       202.791    
  41  0.600279     -0.510361      -14.7621       14.7621       212.657       227.419    
  42  0.419387     -0.868962      -25.1346       25.1346       190.448       215.582    
  43  0.952036     -0.491524E-01  -1.42173       1.42173       186.849       188.270    
  44  0.613955     -0.487834      -14.1105       14.1105       191.670       205.781    
  45  0.842752     -0.171082      -4.94853       4.94853       189.841       194.789    
  46  0.733219     -0.310311      -8.97570       8.97570       187.446       196.422    
  47  0.776088     -0.253489      -7.33214       7.33214       215.979       223.311    
  48  0.965215     -0.354047E-01  -1.02407       1.02407       189.875       190.899    
  49  0.487812     -0.717826      -20.7630       20.7630       195.694       216.457    
  50  0.864492     -0.145613      -4.21183       4.21183       185.450       189.662    
  51  0.334607      -1.09480      -31.6669       31.6669       192.832       224.499    
  52  0.267438      -1.31887      -38.1480       38.1480       191.159       229.307    
  53  0.333561      -1.09793      -31.7574       31.7574       192.249       224.007    
  54  0.593184     -0.522250      -15.1060       15.1060       191.800       206.906    
  55  0.832475     -0.183352      -5.30344       5.30344       204.512       209.816    
  56  0.642050     -0.443089      -12.8163       12.8163       193.212       206.028    
  57  0.799223     -0.224116      -6.48251       6.48251       192.832       199.315    
  58  0.184219      -1.69163      -48.9302       48.9302       191.444       240.374    
  59  0.478229     -0.737666      -21.3369       21.3369       199.085       220.422    
  60  0.604888     -0.502712      -14.5409       14.5409       192.845       207.386    
  61  0.575395     -0.552698      -15.9867       15.9867       191.913       207.900    
  62  0.325892E-01  -3.42377      -99.0321       99.0321       191.114       290.146    
  63  0.759877     -0.274599      -7.94273       7.94273       191.708       199.651    
  64  0.214378      -1.54002      -44.5447       44.5447       192.507       237.051    
  65  0.668091     -0.403331      -11.6663       11.6663       192.091       203.757    
  66  0.601122     -0.508958      -14.7215       14.7215       191.810       206.531    
  67  0.378138     -0.972496      -28.1293       28.1293       190.529       218.658    
  68  0.849119     -0.163556      -4.73084       4.73084       239.831       244.562    
  69  0.426509     -0.852121      -24.6475       24.6475       189.414       214.062    
  70  0.558114E-01  -2.88578      -83.4707       83.4707       175.715       259.186    
  71  0.344448      -1.06581      -30.8284       30.8284       196.089       226.917    
  72  0.354132      -1.03809      -30.0265       30.0265       189.531       219.558    
loop,thermsimp(1:2)       67   35.0267       5.02950    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199        258.35          0.84          1.11         25.04          0.13          0.05         27.16
Just calling func    0   0         27.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    258.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       67
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       68
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      198     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -134.862       134.862       186.849       321.710    
   2  0.714357     -0.336373      -9.72954       9.72954       185.450       195.180    
   3  0.997096     -0.290808E-02 -0.841159E-01  0.841159E-01   184.706       184.790    
   4  0.905437     -0.993373E-01  -2.87332       2.87332       189.875       192.748    
   5  0.307060      -1.18071      -34.1519       34.1519       187.201       221.353    
   6  0.179061      -1.72003      -49.7515       49.7515       189.841       239.592    
   7  0.384312     -0.956301      -27.6609       27.6609       193.388       221.049    
   8  0.901101     -0.104138      -3.01219       3.01219       187.446       190.458    
   9  0.606170     -0.500594      -14.4796       14.4796       185.359       199.839    
  10  0.515234     -0.663133      -19.1810       19.1810       191.883       211.064    
  11  0.639447     -0.447152      -12.9338       12.9338       190.048       202.982    
  12  0.820429     -0.197928      -5.72503       5.72503       192.049       197.774    
  13  0.521739     -0.650587      -18.8181       18.8181       192.832       211.650    
  14  0.767979     -0.263993      -7.63596       7.63596       191.708       199.344    
  15  0.530366     -0.634187      -18.3438       18.3438       186.626       204.970    
  16  0.732471     -0.311332      -9.00524       9.00524       192.846       201.851    
  17  0.440461     -0.819933      -23.7164       23.7164       192.192       215.909    
  18  0.595715     -0.517993      -14.9829       14.9829       192.091       207.074    
  19  0.407958     -0.896592      -25.9338       25.9338       191.670       217.604    
  20  0.544683     -0.607550      -17.5733       17.5733       189.745       207.318    
  21  0.611386E-01  -2.79461      -80.8337       80.8337       193.212       274.045    
  22  0.135041      -2.00218      -57.9126       57.9126       191.810       249.722    
  23  0.547242     -0.602864      -17.4377       17.4377       189.277       206.715    
  24  0.214436      -1.53975      -44.5369       44.5369       193.218       237.755    
  25  0.340220      -1.07816      -31.1857       31.1857       191.800       222.985    
  26  0.270394      -1.30787      -37.8301       37.8301       192.845       230.675    
  27  0.605229     -0.502149      -14.5246       14.5246       191.913       206.438    
  28  0.630206     -0.461709      -13.3549       13.3549       191.640       204.995    
  29  0.942476     -0.592449E-01  -1.71365       1.71365       204.512       206.226    
  30  0.293125      -1.22716      -35.4954       35.4954       183.837       219.333    
  31  0.526210     -0.642056      -18.5714       18.5714       189.414       207.986    
  32  0.972201     -0.281927E-01 -0.815468      0.815468       190.448       191.263    
  33  0.570000     -0.562119      -16.2592       16.2592       193.650       209.909    
  34  0.752945     -0.283763      -8.20781       8.20781       195.694       203.902    
  35  0.333005      -1.09960      -31.8057       31.8057       190.529       222.334    
  36  0.430444     -0.842939      -24.3819       24.3819       189.531       213.913    
  37  0.106505      -2.23957      -64.7791       64.7791       185.330       250.109    
  38  0.327953      -1.11488      -32.2479       32.2479       199.085       231.333    
  39  0.586631     -0.533359      -15.4273       15.4273       196.028       211.456    
  40  0.563274     -0.573989      -16.6026       16.6026       215.979       232.582    
  41  0.802100     -0.220522      -6.37855       6.37855       192.249       198.628    
  42  0.594871     -0.519411      -15.0239       15.0239       192.832       207.856    
  43  0.816066     -0.203261      -5.87928       5.87928       185.115       190.994    
  44  0.170795E-01  -4.06987      -117.721       117.721       196.089       313.809    
  45  0.554958     -0.588864      -17.0328       17.0328       212.657       229.689    
  46  0.674023     -0.394492      -11.4106       11.4106       193.483       204.894    
  47  0.371758     -0.989512      -28.6215       28.6215       189.670       218.291    
  48  0.309440      -1.17299      -33.9286       33.9286       191.159       225.087    
  49  0.182337      -1.70190      -49.2272       49.2272       192.707       241.934    
  50  0.443504     -0.813049      -23.5173       23.5173       192.832       216.350    
  51  0.407824     -0.896918      -25.9432       25.9432       192.832       218.776    
  52  0.140254      -1.96430      -56.8170       56.8170       183.292       240.109    
  53  0.801043     -0.221840      -6.41669       6.41669       189.969       196.385    
  54  0.922923     -0.802099E-01  -2.32006       2.32006       192.507       194.827    
  55  0.982391     -0.177663E-01 -0.513887      0.513887       190.223       190.737    
  56  0.830509     -0.185717      -5.37184       5.37184       186.433       191.805    
  57  0.459056     -0.778583      -22.5204       22.5204       191.444       213.964    
  58  0.918078     -0.854734E-01  -2.47230       2.47230       239.831       242.303    
  59  0.858811E-01  -2.45479      -71.0045       71.0045       189.306       260.310    
  60  0.642813E-01  -2.74449      -79.3839       79.3839       192.177       271.561    
  61  0.328642      -1.11279      -32.1872       32.1872       191.801       223.988    
  62  0.238578      -1.43306      -41.4510       41.4510       189.474       230.925    
  63  0.183249      -1.69691      -49.0828       49.0828       189.576       238.659    
  64  0.575307     -0.552852      -15.9912       15.9912       204.357       220.348    
  65  0.509614     -0.674103      -19.4983       19.4983       175.715       195.213    
  66  0.528199     -0.638283      -18.4622       18.4622       184.490       202.952    
  67  0.114575      -2.16652      -62.6664       62.6664       191.517       254.184    
  68  0.227493      -1.48064      -42.8272       42.8272       192.832       235.660    
  69  0.451305     -0.795613      -23.0130       23.0130       191.935       214.948    
  70  0.873604     -0.135128      -3.90855       3.90855       188.127       192.035    
  71  0.457086     -0.782884      -22.6448       22.6448       191.114       213.758    
  72  0.587276     -0.532261      -15.3956       15.3956       258.347       273.743    
loop,thermsimp(1:2)       68   134.862       9.72954    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200        190.90          0.84          1.11         25.03          0.14          0.05         27.17
Just calling func    0   0         27.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    201        210.22          0.84          1.11         25.06          0.14          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    210.22       0.7999     -1.281      1.694     -102.6     0.8776    
                      0.4394      1.638     -99.70      3.707     0.2867    
                       1.939     -1.624      1.869      0.000     -40.00    
                      -1.669      0.000      0.000      0.000     -1.221    

                      -2.500     0.3083E+05 0.2938E+05  0.000      0.000    
                     -0.5672     -6.459     -4.461     -7.566      3.435    
                      -14.36     -3.027      1307.      0.000      2440.    

                       8024.      8519.      3923.     0.2108E+05  2197.    
                       3032.    -0.4808E-01-0.8690E-02  0.000    -0.8690E-02
                     -0.8690E-02 0.4830E-01 0.7318E-02-0.4852E-03-0.8690E-02

                     -0.1490     -1.014      0.000    -0.1423E-02-0.8690E-02
                       0.000     0.8792    -0.5553E-01-0.8690E-02-0.2460E-01
                     -0.8690E-02-0.8690E-02-0.1431     -1.013      0.000    

                     -0.2897E-01-0.2162    -0.6290    -0.6290    -0.2668    
                      0.1554      8.891      8.795     -4676.     -4.000    
                     -0.5066    -0.5876      9.002      8.791     -4855.    

                      -4.000     0.5141E-01-0.8092      8.891      8.791    
                      -3587.     -7.000    -0.4712    -0.7253      8.892    
                       8.752     -4855.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       68
neval is:      200
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       69
neval is:      200


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      200     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -18.8565       18.8565       184.706       203.562    
   2  0.554375     -0.589913      -17.0632       17.0632       187.446       204.509    
   3  0.404373     -0.905418      -26.1891       26.1891       190.223       216.412    
   4  0.632877     -0.457478      -13.2325       13.2325       185.115       198.347    
   5  0.395261     -0.928209      -26.8483       26.8483       190.448       217.296    
   6  0.715068     -0.335378      -9.70077       9.70077       186.433       196.134    
   7  0.918313     -0.852174E-01  -2.46490       2.46490       188.127       190.591    
   8  0.529514E-01  -2.93838      -84.9922       84.9922       189.875       274.867    
   9  0.284219      -1.25801      -36.3878       36.3878       192.507       228.894    
  10  0.809402     -0.211460      -6.11645       6.11645       185.450       191.567    
  11  0.604758     -0.502928      -14.5471       14.5471       175.715       190.262    
  12  0.624772     -0.470369      -13.6054       13.6054       189.969       203.574    
  13  0.622683     -0.473718      -13.7022       13.7022       192.049       205.751    
  14  0.491656     -0.709976      -20.5360       20.5360       192.249       212.785    
  15  0.823484     -0.194211      -5.61752       5.61752       191.708       197.326    
  16  0.185629E-01  -3.98659      -115.311       115.311       185.359       300.671    
  17  0.911253     -0.929346E-01  -2.68812       2.68812       192.846       195.534    
  18  0.825116     -0.192231      -5.56026       5.56026       184.490       190.050    
  19  0.902913     -0.102129      -2.95408       2.95408       190.048       193.002    
  20  0.869925     -0.139348      -4.03063       4.03063       195.694       199.725    
  21  0.135445      -1.99919      -57.8263       57.8263       193.483       251.309    
  22  0.516840     -0.660022      -19.0910       19.0910       186.626       205.717    
  23  0.127583      -2.05899      -59.5560       59.5560       191.640       251.196    
  24  0.237062E-01  -3.74202      -108.237       108.237       204.512       312.750    
  25  0.456233     -0.784753      -22.6989       22.6989       191.913       214.612    
  26  0.547397     -0.602581      -17.4296       17.4296       189.277       206.707    
  27  0.231746E-02  -6.06728      -175.495       175.495       192.091       367.586    
  28  0.467213     -0.760969      -22.0109       22.0109       189.745       211.756    
  29  0.397333     -0.922981      -26.6971       26.6971       192.832       219.529    
  30  0.291343      -1.23325      -35.6717       35.6717       189.414       225.086    
  31  0.964262     -0.363922E-01  -1.05264       1.05264       193.650       194.703    
  32  0.260485      -1.34521      -38.9100       38.9100       191.883       230.793    
  33  0.868574     -0.140902      -4.07558       4.07558       196.028       200.104    
  34  0.832573     -0.183235      -5.30004       5.30004       192.832       198.132    
  35  0.240383      -1.42552      -41.2330       41.2330       191.114       232.347    
  36  0.878342     -0.129719      -3.75210       3.75210       189.531       193.283    
  37  0.168707      -1.77959      -51.4745       51.4745       191.444       242.919    
  38  0.348015      -1.05551      -30.5305       30.5305       191.935       222.465    
  39  0.846224     -0.166971      -4.82963       4.82963       192.192       197.022    
  40  0.842580     -0.171286      -4.95443       4.95443       192.832       197.787    
  41  0.230401      -1.46794      -42.4598       42.4598       191.670       234.130    
  42  0.441962     -0.816531      -23.6180       23.6180       189.670       213.288    
  43  0.772036     -0.258724      -7.48356       7.48356       192.832       200.316    
  44  0.970063     -0.303946E-01 -0.879158      0.879158       183.837       184.716    
  45  0.610535     -0.493419      -14.2721       14.2721       204.357       218.629    
  46  0.548201     -0.601114      -17.3871       17.3871       193.388       210.775    
  47  0.322533      -1.13155      -32.7299       32.7299       187.201       219.930    
  48  0.194318E-01  -3.94084      -113.988       113.988       190.529       304.517    
  49  0.219930      -1.51445      -43.8051       43.8051       191.800       235.605    
  50  0.538995E-01  -2.92063      -84.4789       84.4789       191.801       276.280    
  51  0.189941      -1.66104      -48.0453       48.0453       191.159       239.204    
  52  0.339787      -1.07944      -31.2226       31.2226       212.657       243.879    
  53  0.783417     -0.244091      -7.06028       7.06028       192.845       199.906    
  54  0.347888      -1.05587      -30.5410       30.5410       189.474       220.015    
  55  0.511342     -0.670716      -19.4004       19.4004       199.085       218.486    
  56  0.656791     -0.420389      -12.1597       12.1597       215.979       228.139    
  57  0.433072E-01  -3.13944      -90.8077       90.8077       192.832       283.640    
  58  0.940019     -0.618557E-01  -1.78917       1.78917       193.218       195.007    
  59  0.560131     -0.579584      -16.7644       16.7644       189.576       206.341    
  60  0.335604      -1.09182      -31.5809       31.5809       189.841       221.422    
  61  0.677192     -0.389801      -11.2749       11.2749       183.292       194.567    
  62  0.166447      -1.79308      -51.8645       51.8645       192.707       244.572    
  63  0.966787     -0.337766E-01 -0.976983      0.976983       239.831       240.808    
  64  0.501486     -0.690179      -19.9633       19.9633       191.810       211.773    
  65  0.339741      -1.07957      -31.2264       31.2264       185.330       216.557    
  66  0.920721     -0.825986E-01  -2.38915       2.38915       191.517       193.906    
  67  0.215901      -1.53293      -44.3399       44.3399       189.306       233.645    
  68  0.259645      -1.34844      -39.0035       39.0035       192.177       231.181    
  69  0.927059     -0.757381E-01  -2.19071       2.19071       258.347       260.538    
  70  0.766870E-02  -4.87061      -140.882       140.882       193.212       334.093    
  71  0.398597     -0.919805      -26.6052       26.6052       196.089       222.694    
  72  0.870407     -0.138794      -4.01459       4.01459       190.902       194.917    
loop,thermsimp(1:2)       69   18.8565       17.0632    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    202        185.25          0.84          1.11         25.19          0.15          0.05         27.33
Just calling func    0   0         27.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    203        186.87          0.84          1.11         25.06          0.14          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    185.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       69
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       70
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      202     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -41.0179       41.0179       183.837       224.855    
   2  0.384023     -0.957054      -27.6826       27.6826       184.490       212.172    
   3  0.672379     -0.396933      -11.4812       11.4812       175.715       187.196    
   4  0.204591      -1.58674      -45.8963       45.8963       188.127       234.023    
   5  0.145151      -1.92998      -55.8243       55.8243       185.450       241.274    
   6  0.235757      -1.44495      -41.7951       41.7951       190.048       231.843    
   7  0.882595     -0.124889      -3.61240       3.61240       189.531       193.144    
   8  0.215562      -1.53451      -44.3854       44.3854       191.517       235.903    
   9  0.248905      -1.39068      -40.2253       40.2253       183.292       223.517    
  10  0.695481     -0.363152      -10.5041       10.5041       193.650       204.154    
  11  0.515786     -0.662063      -19.1501       19.1501       190.902       210.052    
  12  0.956817     -0.441428E-01  -1.27682       1.27682       193.218       194.495    
  13  0.256477      -1.36072      -39.3585       39.3585       192.846       232.205    
  14  0.870409     -0.138792      -4.01454       4.01454       186.433       190.448    
  15  0.296335      -1.21627      -35.1803       35.1803       192.192       227.373    
  16  0.563087     -0.574322      -16.6122       16.6122       191.708       208.320    
  17  0.860973     -0.149692      -4.32982       4.32982       192.832       197.162    
  18  0.336353      -1.08959      -31.5163       31.5163       192.832       224.349    
  19  0.432238     -0.838780      -24.2616       24.2616       185.115       209.377    
  20  0.411587     -0.887734      -25.6776       25.6776       195.694       221.372    
  21  0.685679     -0.377346      -10.9147       10.9147       192.845       203.760    
  22  0.178038E-01  -4.02835      -116.519       116.519       196.028       312.548    
  23  0.330516      -1.10710      -32.0227       32.0227       192.832       224.855    
  24  0.987115     -0.129685E-01 -0.375111      0.375111       184.706       185.081    
  25  0.702947     -0.352474      -10.1953       10.1953       189.969       200.164    
  26  0.159040      -1.83860      -53.1812       53.1812       187.446       240.627    
  27  0.329714      -1.10953      -32.0930       32.0930       186.626       218.719    
  28  0.542452     -0.611656      -17.6921       17.6921       192.049       209.741    
  29  0.484074     -0.725518      -20.9855       20.9855       189.576       210.562    
  30  0.574330     -0.554551      -16.0403       16.0403       189.277       205.318    
  31  0.987944     -0.121288E-01 -0.350825      0.350825       193.388       193.739    
  32  0.565195E-01  -2.87317      -83.1060       83.1060       189.745       272.851    
  33  0.662626     -0.411545      -11.9039       11.9039       191.810       203.714    
  34  0.462195     -0.771769      -22.3233       22.3233       192.249       214.573    
  35  0.413957     -0.881994      -25.5115       25.5115       189.670       215.181    
  36  0.627825     -0.465493      -13.4643       13.4643       191.913       205.378    
  37  0.373783E-01  -3.28667      -95.0663       95.0663       190.223       285.290    
  38  0.318481      -1.14419      -33.0956       33.0956       185.330       218.426    
  39  0.193037      -1.64487      -47.5777       47.5777       190.448       238.026    
  40  0.246573      -1.40010      -40.4977       40.4977       199.085       239.583    
  41  0.913643     -0.903152E-01  -2.61235       2.61235       204.357       206.969    
  42  0.593287     -0.522077      -15.1010       15.1010       192.832       207.933    
  43  0.323913      -1.12728      -32.6064       32.6064       187.201       219.807    
  44  0.270579E-01  -3.60978      -104.412       104.412       189.474       293.886    
  45  0.684823     -0.378595      -10.9508       10.9508       189.841       200.792    
  46  0.279340      -1.27532      -36.8886       36.8886       191.935       228.823    
  47  0.285511      -1.25348      -36.2566       36.2566       196.089       232.345    
  48  0.361874      -1.01646      -29.4009       29.4009       189.414       218.815    
  49  0.779291     -0.249370      -7.21300       7.21300       215.979       223.192    
  50  0.590933     -0.526053      -15.2160       15.2160       192.507       207.723    
  51  0.493821E-01  -3.00817      -87.0108       87.0108       191.883       278.893    
  52  0.736348     -0.306053      -8.85253       8.85253       192.177       201.030    
  53  0.300670      -1.20174      -34.7602       34.7602       191.114       225.874    
  54  0.329072      -1.11148      -32.1493       32.1493       189.306       221.455    
  55  0.238483      -1.43346      -41.4625       41.4625       191.670       233.133    
  56  0.296796      -1.21471      -35.1353       35.1353       191.800       226.935    
  57  0.878745     -0.129261      -3.73885       3.73885       191.159       194.898    
  58  0.493874     -0.705475      -20.4058       20.4058       239.831       260.237    
  59  0.112522      -2.18461      -63.1895       63.1895       191.444       254.634    
  60  0.642649     -0.442156      -12.7893       12.7893       212.657       225.446    
  61  0.688378     -0.373417      -10.8010       10.8010       192.707       203.508    
  62  0.879214     -0.128727      -3.72341       3.72341       191.640       195.363    
  63  0.621151E-01  -2.77877      -80.3754       80.3754       193.483       273.858    
  64  0.270748      -1.30657      -37.7922       37.7922       258.347       296.140    
  65  0.871636     -0.137384      -3.97380       3.97380       189.875       193.848    
  66  0.188105      -1.67075      -48.3263       48.3263       191.801       240.127    
  67  0.394507     -0.930118      -26.9035       26.9035       192.832       219.736    
  68  0.532895     -0.629431      -18.2062       18.2062       185.359       203.566    
  69  0.925318     -0.776179E-01  -2.24508       2.24508       190.529       192.774    
  70  0.306237      -1.18340      -34.2295       34.2295       204.512       238.742    
  71  0.214861E-01  -3.84035      -111.081       111.081       193.212       304.293    
  72  0.995041     -0.497146E-02 -0.143799      0.143799       185.247       185.391    
loop,thermsimp(1:2)       70   41.0179       27.6826    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204        180.76          0.84          1.11         25.33          0.20          0.05         27.54
Just calling func    0   0         27.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    205        174.48          0.84          1.12         25.29          0.11          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    174.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       70
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       71
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      204     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -6.08417       6.08417       184.706       190.790    
   2  0.601567     -0.508218      -14.7001       14.7001       185.247       199.947    
   3  0.190401      -1.65862      -47.9754       47.9754       175.715       223.690    
   4  0.827263     -0.189632      -5.48508       5.48508       186.433       191.918    
   5  0.581677     -0.541840      -15.6726       15.6726       190.529       206.201    
   6  0.680336     -0.385169      -11.1410       11.1410       189.531       200.672    
   7  0.641383     -0.444128      -12.8463       12.8463       193.388       206.234    
   8  0.593931     -0.520992      -15.0696       15.0696       189.875       204.944    
   9  0.326400      -1.11963      -32.3852       32.3852       193.218       225.603    
  10  0.964323     -0.363286E-01  -1.05080       1.05080       191.159       192.210    
  11  0.481751     -0.730328      -21.1246       21.1246       191.640       212.765    
  12  0.230624E-01  -3.76955      -109.034       109.034       192.832       301.866    
  13  0.214859      -1.53777      -44.4799       44.4799       189.969       234.449    
  14  0.325804      -1.12146      -32.4380       32.4380       189.841       222.279    
  15  0.668745     -0.402353      -11.6380       11.6380       192.177       203.815    
  16  0.803263     -0.219073      -6.33665       6.33665       192.707       199.044    
  17  0.465531     -0.764577      -22.1153       22.1153       185.359       207.475    
  18  0.589796     -0.527978      -15.2717       15.2717       191.810       207.082    
  19  0.783335     -0.244195      -7.06331       7.06331       192.845       199.909    
  20  0.937099     -0.649659E-01  -1.87913       1.87913       193.650       195.529    
  21  0.504081     -0.685019      -19.8141       19.8141       189.277       209.091    
  22  0.368431E-01  -3.30109      -95.4834       95.4834       191.913       287.397    
  23  0.462712     -0.770651      -22.2910       22.2910       204.357       226.648    
  24  0.172447      -1.75767      -50.8402       50.8402       192.507       243.347    
  25  0.361979      -1.01617      -29.3926       29.3926       192.832       222.225    
  26  0.616189     -0.484202      -14.0055       14.0055       191.708       205.714    
  27  0.495582     -0.702023      -20.3059       20.3059       185.115       205.421    
  28  0.492859     -0.707532      -20.4653       20.4653       192.049       212.514    
  29  0.189027      -1.66586      -48.1849       48.1849       190.902       239.087    
  30  0.336237      -1.08994      -31.5263       31.5263       189.576       221.103    
  31  0.997382     -0.262184E-02 -0.758362E-01  0.758362E-01   184.490       184.566    
  32  0.629287     -0.463168      -13.3971       13.3971       192.249       205.646    
  33  0.226178      -1.48644      -42.9949       42.9949       189.670       232.665    
  34  0.522315     -0.649483      -18.7862       18.7862       185.330       204.116    
  35  0.238835E-02  -6.03715      -174.624       174.624       186.626       361.250    
  36  0.123092E-01  -4.39741      -127.194       127.194       189.414       316.609    
  37  0.488141     -0.717152      -20.7435       20.7435       192.832       213.576    
  38  0.925188     -0.777584E-01  -2.24915       2.24915       187.201       189.450    
  39  0.676413     -0.390952      -11.3082       11.3082       195.694       207.002    
  40  0.638827     -0.448121      -12.9618       12.9618       189.306       202.267    
  41  0.789998     -0.235725      -6.81830       6.81830       215.979       222.797    
  42  0.453703E-01  -3.09290      -89.4616       89.4616       183.292       272.753    
  43  0.866893     -0.142840      -4.13163       4.13163       192.832       196.964    
  44  0.122493E-01  -4.40228      -127.335       127.335       192.832       320.168    
  45  0.172311      -1.75846      -50.8631       50.8631       183.837       234.700    
  46  0.899580     -0.105827      -3.06102       3.06102       212.657       215.718    
  47  0.857845     -0.153332      -4.43510       4.43510       191.114       195.549    
  48  0.176813      -1.73266      -50.1170       50.1170       191.800       241.917    
  49  0.795271E-01  -2.53166      -73.2278       73.2278       192.192       265.420    
  50  0.461368     -0.773559      -22.3751       22.3751       191.935       214.310    
  51  0.727625     -0.317970      -9.19723       9.19723       190.048       199.245    
  52  0.106879      -2.23606      -64.6777       64.6777       192.846       257.524    
  53  0.169411      -1.77543      -51.3539       51.3539       196.089       247.443    
  54  0.150923      -1.89099      -54.6965       54.6965       191.670       246.367    
  55  0.970144     -0.303104E-01 -0.876724      0.876724       188.127       189.003    
  56  0.819386     -0.199200      -5.76182       5.76182       191.517       197.279    
  57  0.855509     -0.156059      -4.51398       4.51398       190.448       194.962    
  58  0.248182      -1.39359      -40.3094       40.3094       204.512       244.822    
  59  0.632181     -0.458580      -13.2643       13.2643       199.085       212.350    
  60  0.626090     -0.468262      -13.5444       13.5444       191.801       205.345    
  61  0.122722      -2.09783      -60.6794       60.6794       187.446       248.126    
  62  0.656077     -0.421477      -12.1912       12.1912       185.450       197.641    
  63  0.811645     -0.208692      -6.03639       6.03639       191.444       197.480    
  64  0.241419E-05  -12.9341      -374.118       374.118       239.831       613.949    
  65  0.450747     -0.796849      -23.0487       23.0487       189.745       212.793    
  66  0.299124      -1.20690      -34.9094       34.9094       193.483       228.392    
  67  0.156254      -1.85627      -53.6924       53.6924       191.883       245.575    
  68  0.323711      -1.12790      -32.6244       32.6244       190.223       222.848    
  69  0.447335     -0.804447      -23.2685       23.2685       189.474       212.742    
  70  0.457702     -0.781538      -22.6059       22.6059       258.347       280.953    
  71  0.532478     -0.630214      -18.2289       18.2289       193.212       211.441    
  72  0.847970E-01  -2.46749      -71.3719       71.3719       174.483       245.855    
loop,thermsimp(1:2)       71   6.08417       14.7001    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206        243.15          0.84          1.11         25.17          0.13          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    207        351.62          0.84          1.12         25.14          0.03          0.05         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    243.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       71
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       72
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      206     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -4.01717       4.01717       184.490       188.507    
   2  0.470451     -0.754063      -21.8112       21.8112       188.127       209.938    
   3  0.615627     -0.485114      -14.0319       14.0319       187.201       201.232    
   4  0.291899      -1.23135      -35.6165       35.6165       184.706       220.322    
   5  0.584822     -0.536448      -15.5167       15.5167       186.433       201.950    
   6  0.681731     -0.383120      -11.0817       11.0817       191.159       202.240    
   7  0.680149     -0.385444      -11.1489       11.1489       190.448       201.597    
   8  0.560478     -0.578966      -16.7465       16.7465       193.650       210.396    
   9  0.392299     -0.935730      -27.0658       27.0658       191.114       218.179    
  10  0.586793     -0.533083      -15.4193       15.4193       192.832       208.252    
  11  0.461418     -0.773452      -22.3720       22.3720       191.517       213.889    
  12  0.142886      -1.94571      -56.2794       56.2794       191.444       247.723    
  13  0.960325     -0.404831E-01  -1.17097       1.17097       185.450       186.621    
  14  0.547176     -0.602984      -17.4412       17.4412       192.707       210.149    
  15  0.817596     -0.201386      -5.82507       5.82507       190.048       195.873    
  16  0.184065      -1.69247      -48.9543       48.9543       192.845       241.800    
  17  0.763954     -0.269247      -7.78794       7.78794       185.247       193.035    
  18  0.740640     -0.300240      -8.68440       8.68440       189.531       198.216    
  19  0.257299      -1.35751      -39.2659       39.2659       189.306       228.571    
  20  0.274950      -1.29117      -37.3468       37.3468       192.177       229.524    
  21  0.850599     -0.161814      -4.68045       4.68045       185.330       190.011    
  22  0.265651      -1.32557      -38.3420       38.3420       189.875       228.217    
  23  0.388810     -0.944665      -27.3243       27.3243       191.801       219.125    
  24  0.921262     -0.820106E-01  -2.37214       2.37214       185.115       187.487    
  25  0.622168     -0.474545      -13.7261       13.7261       192.249       205.976    
  26  0.831499     -0.184526      -5.33737       5.33737       191.708       197.045    
  27  0.777776     -0.251317      -7.26930       7.26930       190.529       197.798    
  28  0.519638     -0.654624      -18.9349       18.9349       193.388       212.323    
  29  0.343480      -1.06863      -30.9099       30.9099       195.694       226.604    
  30  0.379182     -0.969738      -28.0495       28.0495       191.810       219.859    
  31  0.509964     -0.673415      -19.4784       19.4784       185.359       204.838    
  32  0.457294E-01  -3.08501      -89.2335       89.2335       189.277       278.511    
  33  0.952238     -0.489400E-01  -1.41558       1.41558       193.212       194.627    
  34  0.198116      -1.61890      -46.8265       46.8265       199.085       245.912    
  35  0.863922     -0.146273      -4.23093       4.23093       192.049       196.280    
  36  0.765944     -0.266646      -7.71270       7.71270       189.474       197.186    
  37  0.849389     -0.163238      -4.72165       4.72165       191.640       196.362    
  38  0.488339     -0.716745      -20.7317       20.7317       189.745       210.476    
  39  0.969632     -0.308388E-01 -0.892008      0.892008       192.832       193.724    
  40  0.971690     -0.287184E-01 -0.830674      0.830674       191.935       192.766    
  41  0.690522     -0.370307      -10.7111       10.7111       212.657       223.368    
  42  0.266028      -1.32415      -38.3010       38.3010       189.576       227.877    
  43  0.581296     -0.542495      -15.6916       15.6916       192.832       208.524    
  44  0.636654     -0.451529      -13.0604       13.0604       189.841       202.901    
  45  0.947680     -0.537383E-01  -1.55437       1.55437       215.979       217.534    
  46  0.792806     -0.232176      -6.71567       6.71567       190.223       196.939    
  47  0.420588     -0.866101      -25.0518       25.0518       175.715       200.767    
  48  0.780043     -0.248407      -7.18512       7.18512       193.218       200.403    
  49  0.834700E-01  -2.48327      -71.8282       71.8282       204.357       276.185    
  50  0.707823     -0.345562      -9.99532       9.99532       193.483       203.478    
  51  0.836500     -0.178529      -5.16393       5.16393       189.670       194.834    
  52  0.111614      -2.19271      -63.4237       63.4237       189.969       253.392    
  53  0.690314     -0.370608      -10.7198       10.7198       183.837       194.557    
  54  0.200139      -1.60874      -46.5327       46.5327       190.902       237.435    
  55  0.182543E-01  -4.00336      -115.796       115.796       191.800       307.596    
  56  0.248611      -1.39187      -40.2595       40.2595       192.507       232.766    
  57  0.951106     -0.501293E-01  -1.44998       1.44998       204.512       205.962    
  58  0.576942     -0.550013      -15.9091       15.9091       191.883       207.792    
  59  0.335384      -1.09248      -31.5998       31.5998       174.483       206.083    
  60  0.137719E-01  -4.28512      -123.947       123.947       191.670       315.617    
  61  0.839758     -0.174642      -5.05149       5.05149       196.089       201.140    
  62  0.324640      -1.12504      -32.5416       32.5416       187.446       219.988    
  63  0.758550     -0.276346      -7.99327       7.99327       192.846       200.839    
  64  0.704737     -0.349931      -10.1217       10.1217       192.192       202.314    
  65  0.848812     -0.163918      -4.74130       4.74130       183.292       188.033    
  66  0.881053     -0.126637      -3.66295       3.66295       258.347       262.010    
  67  0.191937      -1.65059      -47.7430       47.7430       191.913       239.656    
  68  0.646624     -0.435990      -12.6110       12.6110       192.832       205.443    
  69  0.424145     -0.857680      -24.8083       24.8083       189.414       214.223    
  70  0.760934     -0.273209      -7.90254       7.90254       192.832       200.735    
  71  0.774467     -0.255580      -7.39261       7.39261       186.626       194.018    
  72  0.253405      -1.37276      -39.7070       39.7070       243.153       282.860    
loop,thermsimp(1:2)       72   4.01717       21.8112    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208        187.15          0.84          1.11         25.07          0.18          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    209        194.48          0.84          1.11         25.12          0.11          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       72
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       73
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      208     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -8.63489       8.63489       185.450       194.085    
   2  0.823468     -0.194230      -5.61808       5.61808       185.115       190.733    
   3  0.352913      -1.04153      -30.1262       30.1262       183.292       213.418    
   4  0.268511      -1.31486      -38.0322       38.0322       184.490       222.522    
   5  0.137541      -1.98383      -57.3821       57.3821       185.330       242.712    
   6  0.953738     -0.473661E-01  -1.37006       1.37006       191.935       193.305    
   7  0.366602      -1.00348      -29.0254       29.0254       185.247       214.272    
   8  0.861530     -0.149046      -4.31113       4.31113       192.832       197.143    
   9  0.190086      -1.66028      -48.0233       48.0233       186.626       234.649    
  10  0.931621     -0.708293E-01  -2.04873       2.04873       183.837       185.886    
  11  0.135562      -1.99833      -57.8013       57.8013       193.212       251.013    
  12  0.577052     -0.549824      -15.9036       15.9036       189.670       205.573    
  13  0.937511     -0.645266E-01  -1.86642       1.86642       190.048       191.914    
  14  0.836727     -0.178258      -5.15607       5.15607       192.049       197.205    
  15  0.124731      -2.08159      -60.2097       60.2097       191.640       251.850    
  16  0.830758     -0.185417      -5.36316       5.36316       190.223       195.586    
  17  0.925849     -0.770442E-01  -2.22849       2.22849       191.708       193.937    
  18  0.945668     -0.558633E-01  -1.61584       1.61584       189.474       191.089    
  19  0.700762     -0.355587      -10.2853       10.2853       190.529       200.814    
  20  0.585168E-01  -2.83844      -82.1015       82.1015       189.531       271.633    
  21  0.241985      -1.41888      -41.0409       41.0409       193.218       234.259    
  22  0.426115     -0.853047      -24.6742       24.6742       192.832       217.507    
  23  0.730656     -0.313813      -9.07699       9.07699       175.715       184.792    
  24  0.227460      -1.48078      -42.8314       42.8314       192.846       235.678    
  25  0.824070     -0.193500      -5.59695       5.59695       196.089       201.686    
  26  0.912829     -0.912064E-01  -2.63813       2.63813       187.201       189.839    
  27  0.130860      -2.03363      -58.8224       58.8224       190.448       249.270    
  28  0.126999      -2.06358      -59.6886       59.6886       186.433       246.122    
  29  0.394828E-01  -3.23189      -93.4819       93.4819       191.159       284.641    
  30  0.927793     -0.749466E-01  -2.16782       2.16782       192.192       194.360    
  31  0.161762      -1.82163      -52.6904       52.6904       189.841       242.531    
  32  0.510374     -0.672611      -19.4552       19.4552       193.483       212.938    
  33  0.930607     -0.719186E-01  -2.08023       2.08023       185.359       187.440    
  34  0.825283E-01  -2.49461      -72.1563       72.1563       192.832       264.989    
  35  0.569143     -0.563624      -16.3027       16.3027       204.512       220.815    
  36  0.732951     -0.310676      -8.98627       8.98627       192.249       201.236    
  37  0.554950     -0.588877      -17.0332       17.0332       174.483       191.517    
  38  0.614368     -0.487160      -14.0910       14.0910       191.883       205.974    
  39  0.127889      -2.05659      -59.4867       59.4867       192.832       252.319    
  40  0.510007     -0.673330      -19.4760       19.4760       192.832       212.308    
  41  0.206107      -1.57936      -45.6828       45.6828       188.127       233.809    
  42  0.812962E-01  -2.50966      -72.5914       72.5914       192.707       265.299    
  43  0.711913     -0.339799      -9.82865       9.82865       193.650       203.479    
  44  0.649899     -0.430939      -12.4648       12.4648       189.745       202.210    
  45  0.102708      -2.27587      -65.8291       65.8291       193.388       259.217    
  46  0.152702      -1.87927      -54.3575       54.3575       191.517       245.875    
  47  0.827734     -0.189064      -5.46865       5.46865       189.414       194.883    
  48  0.558329     -0.582808      -16.8576       16.8576       215.979       232.837    
  49  0.174746      -1.74442      -50.4572       50.4572       191.114       241.571    
  50  0.107247      -2.23262      -64.5783       64.5783       191.801       256.379    
  51  0.988891     -0.111711E-01 -0.323122      0.323122       191.810       192.133    
  52  0.388651     -0.945075      -27.3361       27.3361       187.446       214.782    
  53  0.580190     -0.544399      -15.7467       15.7467       184.706       200.453    
  54  0.519409E-01  -2.95765      -85.5495       85.5495       212.657       298.206    
  55  0.418368     -0.871393      -25.2049       25.2049       195.694       220.899    
  56  0.435950     -0.830228      -24.0142       24.0142       189.576       213.590    
  57  0.226091      -1.48682      -43.0060       43.0060       189.875       232.881    
  58  0.371316     -0.990702      -28.6559       28.6559       189.306       217.961    
  59  0.113770      -2.17358      -62.8705       62.8705       192.177       255.048    
  60  0.335886      -1.09098      -31.5566       31.5566       192.507       224.063    
  61  0.733883     -0.309406      -8.94953       8.94953       190.902       199.852    
  62  0.127704      -2.05804      -59.5286       59.5286       191.913       251.442    
  63  0.205687      -1.58140      -45.7418       45.7418       192.845       238.587    
  64  0.315213      -1.15451      -33.3939       33.3939       199.085       232.479    
  65  0.329345      -1.11065      -32.1254       32.1254       191.444       223.569    
  66  0.193213      -1.64396      -47.5513       47.5513       189.969       237.520    
  67  0.593921     -0.521008      -15.0701       15.0701       258.347       273.418    
  68  0.128520      -2.05167      -59.3443       59.3443       204.357       263.701    
  69  0.201122      -1.60384      -46.3909       46.3909       189.277       235.668    
  70  0.699786E-01  -2.65957      -76.9275       76.9275       243.153       320.080    
  71  0.830255     -0.186022      -5.38066       5.38066       191.800       197.180    
  72  0.266599      -1.32201      -38.2389       38.2389       187.149       225.388    
loop,thermsimp(1:2)       73   8.63489       5.61808    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210        239.33          0.84          1.11         25.28          0.07          0.05         27.34
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    239.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       73
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       74
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      209     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -5.18261       5.18261       175.715       180.898    
   2  0.439366     -0.822423      -23.7885       23.7885       183.837       207.626    
   3  0.603094     -0.505682      -14.6268       14.6268       185.359       199.986    
   4  0.695854E-01  -2.66520      -77.0905       77.0905       187.201       264.291    
   5  0.273021      -1.29821      -37.5505       37.5505       185.115       222.665    
   6  0.418319     -0.871511      -25.2083       25.2083       189.474       214.682    
   7  0.688437     -0.373331      -10.7986       10.7986       174.483       185.282    
   8  0.400930     -0.913969      -26.4364       26.4364       190.048       216.484    
   9  0.569492     -0.563010      -16.2850       16.2850       191.810       208.095    
  10  0.812441     -0.207712      -6.00804       6.00804       191.935       197.943    
  11  0.222094      -1.50465      -43.5219       43.5219       191.708       235.230    
  12  0.695761     -0.362749      -10.4925       10.4925       185.450       195.943    
  13  0.909536E-01  -2.39741      -69.3446       69.3446       192.192       261.537    
  14  0.297191      -1.21338      -35.0968       35.0968       189.414       224.511    
  15  0.806729     -0.214767      -6.21211       6.21211       190.223       196.435    
  16  0.407021     -0.898891      -26.0003       26.0003       192.832       218.833    
  17  0.520426     -0.653107      -18.8910       18.8910       191.800       210.691    
  18  0.826852     -0.190129      -5.49946       5.49946       192.049       197.549    
  19  0.729268     -0.315714      -9.13198       9.13198       190.902       200.034    
  20  0.344086      -1.06687      -30.8589       30.8589       184.706       215.565    
  21  0.280849      -1.26994      -36.7328       36.7328       190.529       227.262    
  22  0.301244E-01  -3.50242      -101.307       101.307       192.249       293.556    
  23  0.503253     -0.686663      -19.8616       19.8616       196.089       215.950    
  24  0.549007     -0.599644      -17.3446       17.3446       189.745       207.089    
  25  0.814230     -0.205513      -5.94442       5.94442       193.650       199.594    
  26  0.641489     -0.443963      -12.8416       12.8416       189.670       202.511    
  27  0.248696      -1.39152      -40.2496       40.2496       191.883       232.132    
  28  0.684472     -0.379107      -10.9656       10.9656       192.832       203.798    
  29  0.815126     -0.204413      -5.91260       5.91260       193.483       199.396    
  30  0.388210     -0.946208      -27.3689       27.3689       183.292       210.661    
  31  0.670538     -0.399675      -11.5605       11.5605       189.576       201.137    
  32  0.851104     -0.161221      -4.66329       4.66329       185.247       189.910    
  33  0.381078     -0.964752      -27.9053       27.9053       187.446       215.352    
  34  0.776256     -0.253273      -7.32588       7.32588       192.832       200.158    
  35  0.168040      -1.78355      -51.5890       51.5890       189.306       240.894    
  36  0.229069      -1.47373      -42.6274       42.6274       204.512       247.140    
  37  0.917563     -0.860337E-01  -2.48851       2.48851       195.694       198.183    
  38  0.161815      -1.82130      -52.6809       52.6809       184.490       237.171    
  39  0.355170      -1.03516      -29.9418       29.9418       191.444       221.386    
  40  0.221709      -1.50639      -43.5721       43.5721       192.507       236.079    
  41  0.424436     -0.856993      -24.7884       24.7884       187.149       211.938    
  42  0.337698      -1.08560      -31.4009       31.4009       199.085       230.486    
  43  0.574481     -0.554289      -16.0327       16.0327       215.979       232.012    
  44  0.614536     -0.486888      -14.0832       14.0832       189.875       203.958    
  45  0.345602      -1.06247      -30.7317       30.7317       188.127       218.858    
  46  0.330006      -1.10864      -32.0674       32.0674       193.218       225.286    
  47  0.934389     -0.678626E-01  -1.96292       1.96292       186.626       188.589    
  48  0.884466     -0.122771      -3.55114       3.55114       189.277       192.828    
  49  0.928979     -0.736686E-01  -2.13085       2.13085       192.846       194.977    
  50  0.788461     -0.237672      -6.87462       6.87462       189.969       196.843    
  51  0.963462     -0.372219E-01  -1.07664       1.07664       192.845       193.922    
  52  0.630201     -0.461716      -13.3551       13.3551       191.114       204.469    
  53  0.797085     -0.226794      -6.55998       6.55998       189.841       196.401    
  54  0.389249     -0.943537      -27.2917       27.2917       185.330       212.622    
  55  0.660522     -0.414724      -11.9958       11.9958       191.517       203.513    
  56  0.520011     -0.653905      -18.9141       18.9141       186.433       205.347    
  57  0.270094      -1.30899      -37.8622       37.8622       190.448       228.310    
  58  0.218485      -1.52104      -43.9957       43.9957       193.212       237.207    
  59  0.391194     -0.938551      -27.1474       27.1474       191.913       219.061    
  60  0.740024     -0.301073      -8.70849       8.70849       191.640       200.348    
  61  0.184403      -1.69063      -48.9013       48.9013       192.832       241.734    
  62  0.309007E-01  -3.47698      -100.571       100.571       192.177       292.748    
  63  0.916682     -0.869952E-01  -2.51632       2.51632       191.801       194.317    
  64  0.268894      -1.31344      -37.9910       37.9910       193.388       231.379    
  65  0.705018     -0.349532      -10.1102       10.1102       204.357       214.467    
  66  0.748256     -0.290010      -8.38850       8.38850       192.832       201.221    
  67  0.828532     -0.188099      -5.44074       5.44074       192.707       198.148    
  68  0.336848      -1.08812      -31.4738       31.4738       189.531       221.005    
  69  0.686319     -0.376413      -10.8877       10.8877       258.347       269.235    
  70  0.731123     -0.313173      -9.05850       9.05850       191.159       200.217    
  71  0.793361     -0.231477      -6.69543       6.69543       212.657       219.352    
  72  0.755239     -0.280722      -8.11983       8.11983       239.328       247.448    
loop,thermsimp(1:2)       74   5.18261       23.7885    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211        184.81          0.85          1.11         25.18          0.10          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212        181.19          0.84          1.11         25.45          0.06          0.05         27.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    181.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       74
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       75
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      211     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -28.3876       28.3876       175.715       204.103    
   2  0.269095      -1.31269      -37.9694       37.9694       174.483       212.453    
   3  0.301960      -1.19746      -34.6363       34.6363       186.626       221.262    
   4  0.927593     -0.751619E-01  -2.17405       2.17405       185.247       187.421    
   5  0.783450     -0.244048      -7.05905       7.05905       189.277       196.336    
   6  0.716705     -0.333091      -9.63462       9.63462       192.845       202.480    
   7  0.728578     -0.316661      -9.15938       9.15938       191.801       200.960    
   8  0.752541     -0.284300      -8.22332       8.22332       192.846       201.069    
   9  0.111710      -2.19185      -63.3989       63.3989       185.450       248.849    
  10  0.202752E-01  -3.89836      -112.759       112.759       189.841       302.600    
  11  0.967738     -0.327937E-01 -0.948553      0.948553       190.223       191.172    
  12  0.530869     -0.633240      -18.3164       18.3164       189.969       208.285    
  13  0.752699E-01  -2.58668      -74.8192       74.8192       192.049       266.868    
  14  0.658334     -0.418043      -12.0918       12.0918       191.935       204.027    
  15  0.383542     -0.958305      -27.7188       27.7188       192.707       220.426    
  16  0.280803      -1.27010      -36.7375       36.7375       195.694       232.432    
  17  0.976909     -0.233616E-01 -0.675730      0.675730       193.483       194.159    
  18  0.611898     -0.491189      -14.2076       14.2076       193.650       207.857    
  19  0.860469     -0.150278      -4.34677       4.34677       185.359       189.706    
  20  0.375446     -0.979641      -28.3360       28.3360       190.902       219.238    
  21  0.964573     -0.360702E-01  -1.04332       1.04332       192.832       193.876    
  22  0.865663     -0.144259      -4.17267       4.17267       191.159       195.331    
  23  0.498009     -0.697137      -20.1646       20.1646       191.640       211.805    
  24  0.732547     -0.311228      -9.00222       9.00222       189.576       198.578    
  25  0.293766      -1.22497      -35.4321       35.4321       192.832       228.264    
  26  0.805097     -0.216793      -6.27071       6.27071       189.670       195.940    
  27  0.236791      -1.44058      -41.6685       41.6685       191.517       233.186    
  28  0.759809     -0.274688      -7.94532       7.94532       192.832       200.778    
  29  0.279804      -1.27367      -36.8406       36.8406       189.875       226.715    
  30  0.862550     -0.147862      -4.27690       4.27690       191.114       195.390    
  31  0.784800     -0.242327      -7.00926       7.00926       186.433       193.442    
  32  0.231425      -1.46350      -42.3315       42.3315       189.745       232.076    
  33  0.839725     -0.174681      -5.05263       5.05263       183.837       188.890    
  34  0.204862      -1.58542      -45.8580       45.8580       191.810       237.668    
  35  0.741170     -0.299525      -8.66372       8.66372       183.292       191.955    
  36  0.838703     -0.175898      -5.08782       5.08782       191.800       196.887    
  37  0.287711      -1.24580      -36.0345       36.0345       187.149       223.184    
  38  0.937479     -0.645611E-01  -1.86742       1.86742       185.330       187.198    
  39  0.188655      -1.66783      -48.2418       48.2418       204.357       252.599    
  40  0.818317     -0.200505      -5.79958       5.79958       189.474       195.273    
  41  0.903487     -0.101493      -2.93567       2.93567       187.446       190.382    
  42  0.148828      -1.90496      -55.1008       55.1008       184.706       239.807    
  43  0.573616E-01  -2.85838      -82.6782       82.6782       196.089       278.767    
  44  0.792726E-01  -2.53486      -73.3205       73.3205       190.048       263.368    
  45  0.150401      -1.89445      -54.7968       54.7968       192.832       247.629    
  46  0.511444     -0.670518      -19.3946       19.3946       188.127       207.521    
  47  0.179810      -1.71585      -49.6308       49.6308       191.913       241.544    
  48  0.167282      -1.78808      -51.7199       51.7199       212.657       264.377    
  49  0.589016     -0.529302      -15.3100       15.3100       189.531       204.841    
  50  0.974997     -0.253206E-01 -0.732396      0.732396       191.444       192.176    
  51  0.750240     -0.287363      -8.31192       8.31192       185.115       193.427    
  52  0.695153     -0.363624      -10.5178       10.5178       189.414       199.932    
  53  0.166976      -1.78991      -51.7727       51.7727       193.218       244.991    
  54  0.228686      -1.47540      -42.6758       42.6758       190.529       233.205    
  55  0.728220     -0.317152      -9.17357       9.17357       190.448       199.621    
  56  0.321968      -1.13330      -32.7807       32.7807       199.085       231.866    
  57  0.494283     -0.704647      -20.3818       20.3818       193.388       213.770    
  58  0.398916     -0.919004      -26.5821       26.5821       215.979       242.561    
  59  0.130321      -2.03776      -58.9418       58.9418       191.883       250.824    
  60  0.131470E-01  -4.33156      -125.290       125.290       191.708       316.998    
  61  0.868361E-03  -7.04890      -203.888       203.888       192.507       396.395    
  62  0.572113     -0.558419      -16.1522       16.1522       184.490       200.642    
  63  0.201897      -1.60000      -46.2797       46.2797       193.212       239.491    
  64  0.795960     -0.228206      -6.60083       6.60083       189.306       195.906    
  65  0.904277E-01  -2.40321      -69.5123       69.5123       192.832       262.345    
  66  0.976775E-01  -2.32608      -67.2816       67.2816       204.512       271.794    
  67  0.231524      -1.46307      -42.3191       42.3191       239.328       281.647    
  68  0.542363     -0.611819      -17.6968       17.6968       192.192       209.889    
  69  0.332318      -1.10166      -31.8654       31.8654       187.201       219.066    
  70  0.840822     -0.173375      -5.01485       5.01485       258.347       263.362    
  71  0.528412E-01  -2.94046      -85.0525       85.0525       192.177       277.230    
  72  0.191882      -1.65087      -47.7513       47.7513       181.185       228.937    
loop,thermsimp(1:2)       75   28.3876       37.9694    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213        187.77          0.84          1.11         25.12          0.16          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    214        198.70          0.84          1.12         25.18          0.01          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       75
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       76
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      214
neval,tstepnext:      213     214

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -86.8085       86.8085       185.330       272.139    
   2  0.604222     -0.503814      -14.5727       14.5727       185.247       199.819    
   3  0.106168      -2.24273      -64.8706       64.8706       183.837       248.708    
   4  0.342113      -1.07261      -31.0252       31.0252       185.359       216.385    
   5  0.473442     -0.747725      -21.6278       21.6278       187.446       209.074    
   6  0.100866E-01  -4.59655      -132.955       132.955       190.223       323.178    
   7  0.911848     -0.922817E-01  -2.66924       2.66924       183.292       185.961    
   8  0.633547     -0.456421      -13.2019       13.2019       191.444       204.646    
   9  0.729024     -0.316048      -9.14165       9.14165       185.115       194.257    
  10  0.620163     -0.477772      -13.8195       13.8195       186.433       200.253    
  11  0.867018     -0.142695      -4.12744       4.12744       192.832       196.960    
  12  0.969344E-01  -2.33372      -67.5025       67.5025       193.483       260.986    
  13  0.358466      -1.02592      -29.6746       29.6746       189.474       219.148    
  14  0.953168     -0.479638E-01  -1.38734       1.38734       191.159       192.546    
  15  0.684510     -0.379052      -10.9640       10.9640       191.114       202.078    
  16  0.482047     -0.729713      -21.1068       21.1068       189.306       210.412    
  17  0.974791     -0.255318E-01 -0.738505      0.738505       189.670       190.408    
  18  0.978669     -0.215619E-01 -0.623676      0.623676       189.277       189.901    
  19  0.929785     -0.728022E-01  -2.10579       2.10579       191.800       193.905    
  20  0.715020     -0.335444      -9.70267       9.70267       189.576       199.279    
  21  0.598247     -0.513752      -14.8602       14.8602       190.448       205.308    
  22  0.107080      -2.23418      -64.6233       64.6233       189.414       254.038    
  23  0.559093     -0.581439      -16.8180       16.8180       184.490       201.308    
  24  0.933094     -0.692491E-01  -2.00302       2.00302       192.832       194.835    
  25  0.470169E-01  -3.05725      -88.4304       88.4304       191.801       280.231    
  26  0.166768      -1.79115      -51.8088       51.8088       192.846       244.655    
  27  0.331277      -1.10480      -31.9562       31.9562       192.845       224.801    
  28  0.961755     -0.389952E-01  -1.12793       1.12793       191.935       193.063    
  29  0.464366E-01  -3.06967      -88.7897       88.7897       175.715       264.505    
  30  0.966136E-03  -6.94221      -200.802       200.802       189.531       390.334    
  31  0.941012     -0.607999E-01  -1.75863       1.75863       188.127       189.885    
  32  0.201947E-01  -3.90233      -112.874       112.874       193.650       306.524    
  33  0.679249     -0.386768      -11.1872       11.1872       189.969       201.156    
  34  0.318772      -1.14328      -33.0691       33.0691       192.192       225.261    
  35  0.388100     -0.946493      -27.3772       27.3772       191.640       219.017    
  36  0.658606     -0.417629      -12.0799       12.0799       174.483       186.563    
  37  0.774362     -0.255715      -7.39653       7.39653       193.388       200.784    
  38  0.704871     -0.349740      -10.1162       10.1162       187.201       197.317    
  39  0.274189      -1.29394      -37.4269       37.4269       190.902       228.329    
  40  0.881806     -0.125783      -3.63825       3.63825       192.707       196.346    
  41  0.198448      -1.61723      -46.7780       46.7780       186.626       233.404    
  42  0.342590      -1.07122      -30.9849       30.9849       187.149       218.134    
  43  0.603787     -0.504534      -14.5936       14.5936       189.875       204.468    
  44  0.667409     -0.404353      -11.6958       11.6958       192.832       204.528    
  45  0.317014      -1.14881      -33.2291       33.2291       181.185       214.414    
  46  0.368458     -0.998429      -28.8794       28.8794       199.085       227.965    
  47  0.139912      -1.96674      -56.8878       56.8878       189.745       246.632    
  48  0.537645     -0.620557      -17.9495       17.9495       195.694       213.644    
  49  0.159021      -1.83872      -53.1847       53.1847       191.517       244.702    
  50  0.729011     -0.316067      -9.14219       9.14219       190.529       199.671    
  51  0.802486     -0.220041      -6.36467       6.36467       191.810       198.174    
  52  0.249203      -1.38949      -40.1907       40.1907       193.212       233.402    
  53  0.282362      -1.26456      -36.5773       36.5773       184.706       221.283    
  54  0.803878     -0.218308      -6.31452       6.31452       191.913       198.228    
  55  0.183401      -1.69608      -49.0588       49.0588       215.979       265.038    
  56  0.144999      -1.93103      -55.8547       55.8547       193.218       249.073    
  57  0.821026     -0.197200      -5.70399       5.70399       192.832       198.536    
  58  0.391750     -0.937132      -27.1064       27.1064       185.450       212.556    
  59  0.605745     -0.501297      -14.4999       14.4999       191.883       206.383    
  60  0.759982E-01  -2.57705      -74.5406       74.5406       204.357       278.897    
  61  0.856619     -0.154762      -4.47646       4.47646       192.832       197.309    
  62  0.200085      -1.60901      -46.5405       46.5405       258.347       304.888    
  63  0.623969     -0.471654      -13.6425       13.6425       190.048       203.690    
  64  0.668527     -0.402679      -11.6474       11.6474       212.657       224.304    
  65  0.926898     -0.759121E-01  -2.19574       2.19574       192.049       194.245    
  66  0.972428     -0.279590E-01 -0.808710      0.808710       204.512       205.321    
  67  0.230218      -1.46873      -42.4827       42.4827       192.177       234.660    
  68  0.756442E-01  -2.58171      -74.6757       74.6757       196.089       270.764    
  69  0.209346      -1.56377      -45.2317       45.2317       239.328       284.560    
  70  0.198646      -1.61623      -46.7492       46.7492       189.841       236.590    
  71  0.196542E-01  -3.92947      -113.659       113.659       191.708       305.367    
  72  0.654679     -0.423610      -12.2529       12.2529       187.767       200.020    
loop,thermsimp(1:2)       76   86.8085       14.5727    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215        189.84          0.82          1.11         25.10          0.21          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216        191.72          0.84          1.11         25.05          0.13          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    28.9248               214
loop is:       76
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    28.9248               214
loop is:       77
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    14.4624               285

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      215     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -7.46605       7.46605       183.292       190.758    
   2  0.476930     -0.740385      -10.7078       10.7078       174.483       185.191    
   3  0.845382     -0.167966      -2.42920       2.42920       188.127       190.556    
   4  0.397814     -0.921770      -13.3310       13.3310       189.277       202.608    
   5  0.249923      -1.38660      -20.0536       20.0536       189.670       209.723    
   6  0.591552     -0.525005      -7.59285       7.59285       191.159       198.752    
   7  0.143111      -1.94414      -28.1169       28.1169       191.935       220.052    
   8  0.306099      -1.18385      -17.1213       17.1213       191.800       208.921    
   9  0.441827     -0.816836      -11.8134       11.8134       192.049       203.863    
  10  0.504521     -0.684146      -9.89441       9.89441       185.115       195.009    
  11  0.127660      -2.05839      -29.7693       29.7693       192.832       222.602    
  12  0.333524      -1.09804      -15.8803       15.8803       192.707       208.588    
  13  0.130890      -2.03340      -29.4078       29.4078       192.832       222.240    
  14  0.307732      -1.17853      -17.0443       17.0443       192.832       209.877    
  15  0.154434E-01  -4.17057      -60.3166       60.3166       187.201       247.517    
  16  0.357863      -1.02761      -14.8617       14.8617       191.810       206.671    
  17  0.271898      -1.30233      -18.8348       18.8348       191.913       210.748    
  18  0.906228E-01  -2.40105      -34.7250       34.7250       192.832       227.557    
  19  0.344142      -1.06670      -15.4271       15.4271       189.576       205.003    
  20  0.392886     -0.934237      -13.5113       13.5113       190.529       204.040    
  21  0.454318     -0.788958      -11.4103       11.4103       185.247       196.657    
  22  0.384129     -0.956778      -13.8373       13.8373       187.767       201.605    
  23  0.354037      -1.03835      -15.0171       15.0171       186.433       201.450    
  24  0.154212      -1.86943      -27.0365       27.0365       193.388       220.424    
  25  0.816320     -0.202949      -2.93514       2.93514       189.969       192.904    
  26  0.994970     -0.504291E-02 -0.729326E-01  0.729326E-01   184.490       184.563    
  27  0.374719E-01  -3.28416      -47.4970       47.4970       191.114       238.611    
  28  0.227113      -1.48231      -21.4377       21.4377       190.048       211.486    
  29  0.410587     -0.890167      -12.8740       12.8740       189.875       202.749    
  30  0.104540E-01  -4.56077      -65.9598       65.9598       192.832       258.792    
  31  0.994826     -0.518730E-02 -0.750209E-01  0.750209E-01   191.444       191.519    
  32  0.738930     -0.302553      -4.37564       4.37564       190.448       194.823    
  33  0.715904     -0.334209      -4.83347       4.83347       204.512       209.346    
  34  0.128324      -2.05320      -29.6942       29.6942       191.883       221.577    
  35  0.856095     -0.155374      -2.24708       2.24708       187.446       189.693    
  36  0.423967     -0.858099      -12.4102       12.4102       189.306       201.716    
  37  0.504650     -0.683890      -9.89071       9.89071       185.450       195.341    
  38  0.347036      -1.05833      -15.3060       15.3060       195.694       211.000    
  39  0.906779     -0.978566E-01  -1.41524       1.41524       181.185       182.601    
  40  0.616911     -0.483030      -6.98579       6.98579       185.359       192.345    
  41  0.540209     -0.615800      -8.90596       8.90596       187.149       196.055    
  42  0.772932     -0.257564      -3.72500       3.72500       191.640       195.365    
  43  0.544989     -0.606989      -8.77854       8.77854       189.474       198.252    
  44  0.951523     -0.496917E-01 -0.718663      0.718663       184.706       185.425    
  45  0.172505      -1.75733      -25.4153       25.4153       212.657       238.072    
  46  0.871391     -0.137665      -1.99096       1.99096       192.845       194.836    
  47  0.127604      -2.05882      -29.7755       29.7755       192.192       221.968    
  48  0.785934     -0.240882      -3.48374       3.48374       199.085       202.569    
  49  0.815977     -0.203369      -2.94121       2.94121       190.902       193.843    
  50  0.350587      -1.04815      -15.1587       15.1587       193.212       208.370    
  51  0.739645     -0.301584      -4.36164       4.36164       186.626       190.987    
  52  0.996274     -0.373345E-02 -0.539947E-01  0.539947E-01   192.177       192.231    
  53  0.303822      -1.19131      -17.2293       17.2293       189.841       207.070    
  54  0.708260     -0.344944      -4.98873       4.98873       192.846       197.835    
  55  0.646268     -0.436541      -6.31343       6.31343       191.517       197.831    
  56  0.696585     -0.361566      -5.22912       5.22912       189.745       194.974    
  57  0.439732     -0.821591      -11.8822       11.8822       183.837       195.719    
  58  0.791452     -0.233886      -3.38256       3.38256       193.218       196.601    
  59  0.202743      -1.59581      -23.0793       23.0793       189.414       212.494    
  60  0.547790E-01  -2.90445      -42.0054       42.0054       193.483       235.488    
  61  0.663631     -0.410029      -5.93001       5.93001       175.715       181.645    
  62  0.838292     -0.176388      -2.55100       2.55100       215.979       218.530    
  63  0.450238     -0.797979      -11.5407       11.5407       196.089       207.629    
  64  0.209610      -1.56251      -22.5976       22.5976       185.330       207.928    
  65  0.502241     -0.688676      -9.95992       9.95992       204.357       214.317    
  66  0.837306     -0.177566      -2.56804       2.56804       191.801       194.369    
  67  0.345973      -1.06139      -15.3503       15.3503       239.328       254.679    
  68  0.558861     -0.581855      -8.41503       8.41503       258.347       266.762    
  69  0.293365      -1.22634      -17.7358       17.7358       191.708       209.444    
  70  0.234701      -1.44944      -20.9625       20.9625       193.650       214.612    
  71  0.762859E-01  -2.57327      -37.2157       37.2157       190.223       227.439    
  72  0.994504     -0.551100E-02 -0.797024E-01  0.797024E-01   189.841       189.921    
loop,thermsimp(1:2)       77   7.46605       10.7078    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217        203.13          0.84          1.11         25.19          0.11          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    203.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       77
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       78
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      216     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01 -0.865919      0.865919       175.715       176.581    
   2  0.368209     -0.999105      -14.4495       14.4495       181.185       195.635    
   3  0.508630     -0.676034      -9.77709       9.77709       184.490       194.267    
   4  0.744324     -0.295279      -4.27046       4.27046       174.483       178.754    
   5  0.401586     -0.912333      -13.1945       13.1945       184.706       197.900    
   6  0.712794     -0.338563      -4.89645       4.89645       187.446       192.343    
   7  0.186976      -1.67678      -24.2502       24.2502       189.841       214.092    
   8  0.688451     -0.373311      -5.39899       5.39899       188.127       193.526    
   9  0.668652     -0.402492      -5.82101       5.82101       183.292       189.113    
  10  0.656767     -0.420426      -6.08039       6.08039       186.626       192.706    
  11  0.853336     -0.158602      -2.29377       2.29377       191.444       193.738    
  12  0.556440     -0.586195      -8.47780       8.47780       192.177       200.655    
  13  0.258558E-01  -3.65522      -52.8633       52.8633       185.359       238.223    
  14  0.121003E-01  -4.41452      -63.8447       63.8447       189.969       253.813    
  15  0.150890      -1.89120      -27.3514       27.3514       190.902       218.253    
  16  0.820074     -0.198360      -2.86877       2.86877       191.801       194.669    
  17  0.151452      -1.88748      -27.2976       27.2976       190.448       217.745    
  18  0.305465      -1.18592      -17.1513       17.1513       192.845       209.997    
  19  0.533202     -0.628854      -9.09476       9.09476       189.745       198.839    
  20  0.143416      -1.94201      -28.0861       28.0861       185.115       213.201    
  21  0.687081     -0.375303      -5.42779       5.42779       185.450       190.878    
  22  0.546247     -0.604685      -8.74521       8.74521       191.640       200.385    
  23  0.356987      -1.03006      -14.8971       14.8971       183.837       198.734    
  24  0.545718     -0.605653      -8.75922       8.75922       187.149       195.909    
  25  0.789688     -0.236117      -3.41482       3.41482       193.218       196.633    
  26  0.752086     -0.284904      -4.12041       4.12041       185.247       189.367    
  27  0.388816     -0.944650      -13.6619       13.6619       191.517       205.179    
  28  0.988428     -0.116395E-01 -0.168336      0.168336       192.846       193.014    
  29  0.124991      -2.07952      -30.0749       30.0749       189.474       219.548    
  30  0.568214     -0.565257      -8.17499       8.17499       191.159       199.334    
  31  0.551032     -0.595962      -8.61906       8.61906       186.433       195.052    
  32  0.423622     -0.858913      -12.4220       12.4220       187.767       200.189    
  33  0.647554     -0.434553      -6.28469       6.28469       189.306       195.590    
  34  0.686255     -0.376506      -5.44519       5.44519       199.085       204.531    
  35  0.548072     -0.601349      -8.69697       8.69697       189.277       197.974    
  36  0.880777     -0.126951      -1.83602       1.83602       189.875       191.711    
  37  0.894918     -0.111023      -1.60566       1.60566       192.049       193.655    
  38  0.241077      -1.42264      -20.5748       20.5748       190.529       211.104    
  39  0.546141     -0.604877      -8.74799       8.74799       189.576       198.324    
  40  0.266590      -1.32204      -19.1199       19.1199       191.810       210.930    
  41  0.575085     -0.553238      -8.00116       8.00116       189.841       197.842    
  42  0.907139     -0.974596E-01  -1.40950       1.40950       196.089       197.498    
  43  0.469109     -0.756920      -10.9469       10.9469       185.330       196.277    
  44  0.738008     -0.303801      -4.39370       4.39370       193.212       197.605    
  45  0.557598     -0.584116      -8.44774       8.44774       192.707       201.155    
  46  0.305677      -1.18523      -17.1412       17.1412       191.800       208.941    
  47  0.392927     -0.934131      -13.5098       13.5098       204.512       218.022    
  48  0.121997      -2.10376      -30.4254       30.4254       191.708       222.133    
  49  0.712082     -0.339563      -4.91090       4.91090       189.670       194.581    
  50  0.342132      -1.07256      -15.5118       15.5118       192.832       208.344    
  51  0.288307      -1.24373      -17.9874       17.9874       191.913       209.901    
  52  0.554777     -0.589188      -8.52109       8.52109       195.694       204.215    
  53  0.116597E-01  -4.45161      -64.3811       64.3811       190.048       254.429    
  54  0.844148     -0.169427      -2.45032       2.45032       189.414       191.865    
  55  0.910896     -0.933267E-01  -1.34973       1.34973       204.357       205.707    
  56  0.257100      -1.35829      -19.6442       19.6442       193.650       213.294    
  57  0.340199      -1.07823      -15.5938       15.5938       215.979       231.573    
  58  0.656010     -0.421580      -6.09707       6.09707       191.935       198.032    
  59  0.894739     -0.111224      -1.60856       1.60856       193.388       194.996    
  60  0.226933      -1.48310      -21.4492       21.4492       191.883       213.332    
  61  0.478182     -0.737763      -10.6698       10.6698       192.192       202.862    
  62  0.361863      -1.01649      -14.7009       14.7009       192.832       207.533    
  63  0.415757     -0.877654      -12.6930       12.6930       192.832       205.525    
  64  0.540919     -0.614487      -8.88697       8.88697       190.223       199.110    
  65  0.489341     -0.714697      -10.3362       10.3362       192.832       203.169    
  66  0.963632     -0.370456E-01 -0.535770      0.535770       193.483       194.019    
  67  0.312700      -1.16251      -16.8127       16.8127       212.657       229.469    
  68  0.145861      -1.92510      -27.8416       27.8416       191.114       218.955    
  69  0.960223     -0.405895E-01 -0.587022      0.587022       187.201       187.788    
  70  0.490262     -0.712815      -10.3090       10.3090       239.328       249.637    
  71  0.565539     -0.569975      -8.24322       8.24322       192.832       201.076    
  72  0.818412     -0.200389      -2.89811       2.89811       203.127       206.026    
loop,thermsimp(1:2)       78  0.865919       14.4495    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218        192.39          0.84          1.11         25.08          0.09          0.05         27.18
Just calling func    0   0         27.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       78
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       79
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      217     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -38.2781       38.2781       175.715       213.993    
   2  0.952063     -0.491245E-01 -0.710459      0.710459       174.483       175.194    
   3  0.207928      -1.57057      -22.7142       22.7142       187.201       209.915    
   4  0.564009     -0.572686      -8.28242       8.28242       183.292       191.574    
   5  0.461636     -0.772979      -11.1791       11.1791       185.247       196.426    
   6  0.683812     -0.380072      -5.49676       5.49676       185.450       190.947    
   7  0.153569      -1.87360      -27.0968       27.0968       189.875       216.971    
   8  0.605650     -0.501453      -7.25223       7.25223       189.414       196.667    
   9  0.257296      -1.35753      -19.6332       19.6332       187.446       207.079    
  10  0.517987     -0.657805      -9.51345       9.51345       186.626       196.139    
  11  0.571129     -0.560140      -8.10099       8.10099       192.846       200.947    
  12  0.735134     -0.307703      -4.45013       4.45013       188.127       192.577    
  13  0.766340E-02  -4.87130      -70.4508       70.4508       192.049       262.500    
  14  0.435932     -0.830269      -12.0077       12.0077       191.444       203.452    
  15  0.513945     -0.665639      -9.62676       9.62676       193.483       203.110    
  16  0.447046     -0.805095      -11.6436       11.6436       184.490       196.133    
  17  0.244813      -1.40726      -20.3524       20.3524       189.670       210.022    
  18  0.183933      -1.69318      -24.4875       24.4875       191.801       216.288    
  19  0.413164     -0.883910      -12.7835       12.7835       193.388       206.171    
  20  0.869613     -0.139707      -2.02051       2.02051       186.433       188.454    
  21  0.853260     -0.158691      -2.29505       2.29505       189.306       191.601    
  22  0.138067      -1.98001      -28.6358       28.6358       181.185       209.821    
  23  0.940528     -0.613134E-01 -0.886740      0.886740       187.149       188.036    
  24  0.694939     -0.363931      -5.26333       5.26333       185.330       190.594    
  25  0.962776     -0.379346E-01 -0.548627      0.548627       193.218       193.767    
  26  0.378266     -0.972158      -14.0598       14.0598       196.089       210.149    
  27  0.855922     -0.155576      -2.25000       2.25000       193.212       195.462    
  28  0.393452     -0.932797      -13.4905       13.4905       189.841       203.331    
  29  0.253590      -1.37204      -19.8430       19.8430       184.706       204.549    
  30  0.777948     -0.251096      -3.63145       3.63145       189.277       192.909    
  31  0.654890     -0.423288      -6.12178       6.12178       191.935       198.057    
  32  0.690016E-01  -2.67363      -38.6671       38.6671       189.576       228.243    
  33  0.101034      -2.29229      -33.1521       33.1521       183.837       216.989    
  34  0.684533     -0.379019      -5.48153       5.48153       189.745       195.226    
  35  0.592603     -0.523230      -7.56718       7.56718       190.223       197.790    
  36  0.904830     -0.100009      -1.44637       1.44637       191.159       192.605    
  37  0.400244     -0.915681      -13.2430       13.2430       187.767       201.010    
  38  0.698191     -0.359263      -5.19582       5.19582       191.640       196.836    
  39  0.551449E-01  -2.89779      -41.9091       41.9091       192.177       234.086    
  40  0.500493     -0.692161      -10.0103       10.0103       192.832       202.843    
  41  0.289592      -1.23928      -17.9230       17.9230       192.707       210.630    
  42  0.447163     -0.804833      -11.6398       11.6398       192.192       203.832    
  43  0.690940     -0.369702      -5.34678       5.34678       192.832       198.179    
  44  0.631068     -0.460341      -6.65765       6.65765       195.694       202.352    
  45  0.926041     -0.768363E-01  -1.11124       1.11124       199.085       200.197    
  46  0.436187     -0.829684      -11.9992       11.9992       191.517       203.517    
  47  0.314139      -1.15792      -16.7463       16.7463       192.832       209.579    
  48  0.363110      -1.01305      -14.6512       14.6512       204.357       219.008    
  49  0.446982     -0.805238      -11.6457       11.6457       203.127       214.773    
  50  0.541529     -0.613360      -8.87067       8.87067       192.832       201.703    
  51  0.415529     -0.878202      -12.7009       12.7009       192.832       205.533    
  52  0.559792     -0.580190      -8.39096       8.39096       191.800       200.191    
  53  0.931332     -0.711389E-01  -1.02884       1.02884       191.913       192.942    
  54  0.653342     -0.425655      -6.15600       6.15600       192.845       199.001    
  55  0.254324E-01  -3.67173      -53.1021       53.1021       191.810       244.912    
  56  0.365877      -1.00546      -14.5414       14.5414       190.529       205.070    
  57  0.187661      -1.67312      -24.1973       24.1973       185.115       209.312    
  58  0.592744     -0.522993      -7.56375       7.56375       193.650       201.214    
  59  0.211036      -1.55573      -22.4996       22.4996       191.883       214.382    
  60  0.718956     -0.329955      -4.77195       4.77195       189.841       194.613    
  61  0.170082      -1.77147      -25.6198       25.6198       190.448       216.068    
  62  0.190051      -1.66046      -24.0143       24.0143       204.512       228.527    
  63  0.275889      -1.28776      -18.6241       18.6241       190.902       209.526    
  64  0.670664     -0.399487      -5.77755       5.77755       191.114       196.891    
  65  0.294211      -1.22346      -17.6941       17.6941       189.474       207.168    
  66  0.710312     -0.342050      -4.94688       4.94688       191.708       196.655    
  67  0.432365     -0.838485      -12.1265       12.1265       212.657       224.783    
  68  0.488453     -0.716511      -10.3625       10.3625       215.979       226.342    
  69  0.250523      -1.38421      -20.0190       20.0190       185.359       205.378    
  70  0.842097     -0.171860      -2.48551       2.48551       239.328       241.814    
  71  0.403041     -0.908716      -13.1422       13.1422       189.969       203.111    
  72  0.576391     -0.550969      -7.96835       7.96835       192.392       200.360    
loop,thermsimp(1:2)       79   38.2781      0.710459    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219        188.82          0.84          1.11         25.11          0.11          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       79
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       80
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      218     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -5.82592       5.82592       174.483       180.309    
   2  0.238500      -1.43339      -20.7302       20.7302       187.149       207.880    
   3  0.689211     -0.372208      -5.38303       5.38303       186.433       191.816    
   4  0.540774     -0.614753      -8.89082       8.89082       185.330       194.221    
   5  0.178857      -1.72117      -24.8923       24.8923       185.450       210.342    
   6  0.884253     -0.123012      -1.77906       1.77906       183.292       185.071    
   7  0.755546     -0.280314      -4.05403       4.05403       189.306       193.360    
   8  0.654086E-01  -2.72710      -39.4405       39.4405       188.127       227.567    
   9  0.802958     -0.219452      -3.17381       3.17381       191.159       194.333    
  10  0.840665     -0.173562      -2.51012       2.51012       189.277       191.787    
  11  0.864930     -0.145107      -2.09859       2.09859       191.913       194.012    
  12  0.728243     -0.317120      -4.58633       4.58633       193.218       197.804    
  13  0.453086     -0.791672      -11.4495       11.4495       189.841       201.291    
  14  0.702549E-01  -2.65563      -38.4068       38.4068       189.745       228.152    
  15  0.610595     -0.493321      -7.13462       7.13462       193.212       200.346    
  16  0.728410E-02  -4.92206      -71.1849       71.1849       184.490       255.675    
  17  0.913763     -0.901841E-01  -1.30428       1.30428       186.626       187.930    
  18  0.165001      -1.80180      -26.0585       26.0585       185.247       211.305    
  19  0.917747E-01  -2.38842      -34.5423       34.5423       191.708       226.250    
  20  0.338507      -1.08321      -15.6659       15.6659       189.414       205.080    
  21  0.357666      -1.02815      -14.8696       14.8696       191.640       206.510    
  22  0.389441     -0.943044      -13.6387       13.6387       191.114       204.752    
  23  0.879897     -0.127950      -1.85047       1.85047       190.223       192.074    
  24  0.418897     -0.870129      -12.5842       12.5842       191.935       204.519    
  25  0.838426     -0.176230      -2.54871       2.54871       192.832       195.381    
  26  0.185169      -1.68649      -24.3907       24.3907       192.845       217.236    
  27  0.200952      -1.60469      -23.2077       23.2077       191.800       215.007    
  28  0.877256     -0.130957      -1.89395       1.89395       199.085       200.979    
  29  0.386592     -0.950385      -13.7449       13.7449       192.392       206.137    
  30  0.888706     -0.117988      -1.70640       1.70640       192.846       194.553    
  31  0.105408      -2.24991      -32.5392       32.5392       187.767       220.307    
  32  0.994268     -0.574873E-02 -0.831406E-01  0.831406E-01   193.650       193.733    
  33  0.764077     -0.269087      -3.89165       3.89165       192.832       196.724    
  34  0.812108     -0.208121      -3.00994       3.00994       195.694       198.704    
  35  0.121669      -2.10645      -30.4644       30.4644       192.832       223.297    
  36  0.637909     -0.449559      -6.50171       6.50171       193.483       199.985    
  37  0.316007E-02  -5.75716      -83.2625       83.2625       189.969       273.231    
  38  0.229677      -1.47108      -21.2754       21.2754       189.841       211.116    
  39  0.521374     -0.651288      -9.41920       9.41920       191.444       200.863    
  40  0.391402     -0.938019      -13.5660       13.5660       191.517       205.083    
  41  0.327357      -1.11670      -16.1502       16.1502       192.192       208.343    
  42  0.963139     -0.375576E-01 -0.543175      0.543175       184.706       185.249    
  43  0.174261      -1.74720      -25.2687       25.2687       190.529       215.797    
  44  0.331602      -1.10382      -15.9639       15.9639       185.359       201.323    
  45  0.526338     -0.641812      -9.28216       9.28216       192.832       202.114    
  46  0.413265     -0.883667      -12.7800       12.7800       193.388       206.168    
  47  0.541510E-02  -5.21856      -75.4731       75.4731       187.446       262.919    
  48  0.781613     -0.246396      -3.56348       3.56348       189.474       193.037    
  49  0.656825     -0.420337      -6.07910       6.07910       185.115       191.194    
  50  0.584791     -0.536501      -7.75911       7.75911       190.902       198.661    
  51  0.811204     -0.209236      -3.02606       3.02606       192.832       195.858    
  52  0.421027     -0.865059      -12.5108       12.5108       181.185       193.696    
  53  0.663739     -0.409866      -5.92766       5.92766       187.201       193.128    
  54  0.164765      -1.80323      -26.0791       26.0791       189.670       215.749    
  55  0.883187E-01  -2.42680      -35.0975       35.0975       196.089       231.186    
  56  0.825424     -0.191858      -2.77473       2.77473       192.707       195.482    
  57  0.201966E-01  -3.90224      -56.4359       56.4359       175.715       232.151    
  58  0.174898      -1.74355      -25.2160       25.2160       191.883       217.099    
  59  0.477008     -0.740222      -10.7054       10.7054       203.127       213.833    
  60  0.162167E-01  -4.12171      -59.6100       59.6100       190.448       250.058    
  61  0.378219     -0.972282      -14.0616       14.0616       191.801       205.862    
  62  0.980713     -0.194752E-01 -0.281659      0.281659       189.875       190.156    
  63  0.232487      -1.45892      -21.0995       21.0995       183.837       204.937    
  64  0.962055     -0.386832E-01 -0.559453      0.559453       204.357       204.916    
  65  0.761875     -0.271973      -3.93339       3.93339       212.657       216.590    
  66  0.673649     -0.395046      -5.71332       5.71332       215.979       221.693    
  67  0.979237     -0.209814E-01 -0.303442      0.303442       189.576       189.880    
  68  0.361942      -1.01627      -14.6978       14.6978       204.512       219.210    
  69  0.191552      -1.65259      -23.9005       23.9005       192.177       216.078    
  70  0.708040     -0.345254      -4.99321       4.99321       239.328       244.322    
  71  0.676759     -0.390440      -5.64671       5.64671       191.810       197.457    
  72  0.647357     -0.434857      -6.28909       6.28909       188.818       195.107    
loop,thermsimp(1:2)       80   5.82592       20.7302    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220        186.58          0.84          1.11         25.23          0.11          0.05         27.33
Just calling func    0   0         27.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221        219.75          0.84          1.11         25.10          0.07          0.05         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    219.75       0.8381     -1.328      1.762     -102.6     0.8221    
                      0.3638      1.773     -99.70      3.769     0.2983    
                       1.986     -1.611      1.938      0.000     -40.00    
                      -1.617      0.000      0.000      0.000     -1.221    

                      -2.500     0.3152E+05 0.2577E+05  0.000      0.000    
                     -0.5672     -6.365      1.334     -8.026      4.235    
                      -14.77     -2.980      31.36      0.000      1688.    

                       9725.      8519.      4754.     0.1082E+05  2607.    
                       3675.    -0.4498E-01 0.5365E-02  0.000     0.5365E-02
                      0.5365E-02 0.4498E-01 0.7199E-01-0.2129E-01 0.5365E-02

                     -0.1256    -0.9911      0.000    -0.1997E-01 0.5365E-02
                       0.000    -0.1959E-01-0.5675E-01 0.5365E-02-0.1761E-01
                      0.5365E-02-0.2891E-01-0.1293     -1.067      0.000    

                      0.1788E-01-0.4528    -0.5821    -0.5821    -0.2200    
                      0.1952      8.905      8.727     -4850.     -4.000    
                     -0.4597    -0.6612      9.012      8.763     -5089.    

                      -4.000     0.9825E-01-0.6627      8.905      8.805    
                      -4015.     -7.000    -0.4244    -0.9213      8.909    
                       8.753     -5089.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       80
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       81
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      220     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -18.9349       18.9349       174.483       193.418    
   2  0.879265     -0.128669      -1.86086       1.86086       183.292       185.153    
   3  0.684902     -0.378479      -5.47373       5.47373       184.706       190.180    
   4  0.893896     -0.112166      -1.62219       1.62219       186.626       188.248    
   5  0.476761     -0.740739      -10.7129       10.7129       189.576       200.289    
   6  0.755167     -0.280817      -4.06129       4.06129       189.875       193.936    
   7  0.452407     -0.793173      -11.4712       11.4712       185.115       196.586    
   8  0.723906     -0.323093      -4.67271       4.67271       189.277       193.950    
   9  0.451260     -0.795711      -11.5079       11.5079       186.433       197.941    
  10  0.668265     -0.403071      -5.82939       5.82939       190.223       196.053    
  11  0.777249     -0.251995      -3.64446       3.64446       189.474       193.118    
  12  0.342240      -1.07224      -15.5073       15.5073       187.201       202.708    
  13  0.639156     -0.447606      -6.47347       6.47347       189.306       195.779    
  14  0.166924      -1.79022      -25.8909       25.8909       181.185       207.076    
  15  0.375260     -0.980137      -14.1752       14.1752       193.650       207.825    
  16  0.299730      -1.20487      -17.4254       17.4254       191.913       209.339    
  17  0.407119     -0.898650      -12.9967       12.9967       185.330       198.327    
  18  0.762992E-01  -2.57309      -37.2132       37.2132       191.159       228.372    
  19  0.281066      -1.26917      -18.3552       18.3552       192.846       211.201    
  20  0.220512      -1.51180      -21.8643       21.8643       188.818       210.683    
  21  0.389846     -0.942004      -13.6237       13.6237       192.832       206.456    
  22  0.660048     -0.415443      -6.00831       6.00831       192.707       198.716    
  23  0.150026      -1.89695      -27.4345       27.4345       192.832       220.267    
  24  0.113767      -2.17360      -31.4355       31.4355       192.832       224.268    
  25  0.810589     -0.209994      -3.03702       3.03702       191.810       194.847    
  26  0.247911      -1.39468      -20.1705       20.1705       193.218       213.389    
  27  0.408875     -0.894345      -12.9344       12.9344       190.902       203.836    
  28  0.310528      -1.16948      -16.9135       16.9135       195.694       212.608    
  29  0.663027     -0.410939      -5.94318       5.94318       193.483       199.426    
  30  0.798362     -0.225193      -3.25683       3.25683       193.212       196.469    
  31  0.564885     -0.571133      -8.25997       8.25997       191.444       199.704    
  32  0.473510E-02  -5.35275      -77.4138       77.4138       199.085       276.499    
  33  0.933475E-01  -2.37143      -34.2966       34.2966       189.841       224.138    
  34  0.931702     -0.707423E-01  -1.02311       1.02311       185.359       186.383    
  35  0.341741      -1.07370      -15.5284       15.5284       192.832       208.361    
  36  0.171330      -1.76417      -25.5141       25.5141       191.935       217.449    
  37  0.355860      -1.03322      -14.9428       14.9428       191.114       206.056    
  38  0.469639     -0.755790      -10.9306       10.9306       204.357       215.287    
  39  0.805376     -0.216446      -3.13033       3.13033       183.837       186.968    
  40  0.651615     -0.428301      -6.19428       6.19428       189.414       195.609    
  41  0.126831      -2.06490      -29.8634       29.8634       191.517       221.381    
  42  0.715737     -0.334442      -4.83685       4.83685       191.801       196.637    
  43  0.444007     -0.811915      -11.7423       11.7423       192.392       204.134    
  44  0.887105     -0.119791      -1.73247       1.73247       193.388       195.120    
  45  0.492139     -0.708993      -10.2538       10.2538       191.640       201.894    
  46  0.590315     -0.527098      -7.62312       7.62312       187.149       194.773    
  47  0.313130      -1.16114      -16.7928       16.7928       192.192       208.985    
  48  0.824070     -0.193500      -2.79848       2.79848       185.450       188.249    
  49  0.785026     -0.242039      -3.50047       3.50047       189.841       193.341    
  50  0.105781      -2.24638      -32.4881       32.4881       185.247       217.735    
  51  0.644933     -0.438608      -6.34334       6.34334       203.127       209.471    
  52  0.656932     -0.420175      -6.07676       6.07676       191.800       197.876    
  53  0.418239     -0.871703      -12.6069       12.6069       189.670       202.277    
  54  0.191132      -1.65479      -23.9323       23.9323       190.529       214.461    
  55  0.493587     -0.706055      -10.2113       10.2113       192.177       202.389    
  56  0.490289     -0.712761      -10.3082       10.3082       212.657       222.965    
  57  0.703124     -0.352222      -5.09399       5.09399       191.883       196.977    
  58  0.514219E-01  -2.96769      -42.9200       42.9200       192.845       235.765    
  59  0.967122     -0.334307E-01 -0.483489      0.483489       204.512       204.996    
  60  0.164565      -1.80445      -26.0967       26.0967       187.767       213.864    
  61  0.787129     -0.239363      -3.46177       3.46177       215.979       219.441    
  62  0.877224     -0.130993      -1.89448       1.89448       192.832       194.727    
  63  0.826666     -0.190355      -2.75299       2.75299       191.708       194.461    
  64  0.478850     -0.736368      -10.6497       10.6497       188.127       198.776    
  65  0.850214E-01  -2.46485      -35.6477       35.6477       189.745       225.392    
  66  0.752587     -0.284239      -4.11079       4.11079       196.089       200.200    
  67  0.286540      -1.24988      -18.0762       18.0762       175.715       193.791    
  68  0.581717     -0.541771      -7.83532       7.83532       239.328       247.164    
  69  0.907599     -0.969526E-01  -1.40217       1.40217       190.448       191.850    
  70  0.159227      -1.83743      -26.5737       26.5737       184.490       211.063    
  71  0.740279     -0.300729      -4.34927       4.34927       187.446       191.795    
  72  0.899153     -0.106302      -1.53738       1.53738       186.584       188.121    
loop,thermsimp(1:2)       81   18.9349       1.86086    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222        186.58          0.85          1.11         25.03          0.19          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223        183.17          0.84          1.11         25.13          0.04          0.05         27.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       81
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       82
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      222     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -62.8060       62.8060       183.292       246.098    
   2  0.906957E-01  -2.40025      -34.7134       34.7134       185.359       220.073    
   3  0.973677     -0.266758E-01 -0.385797      0.385797       183.837       184.223    
   4  0.764409     -0.268653      -3.88537       3.88537       186.584       190.469    
   5  0.647718     -0.434300      -6.28103       6.28103       186.626       192.907    
   6  0.450945     -0.796410      -11.5180       11.5180       185.450       196.968    
   7  0.342138      -1.07254      -15.5115       15.5115       184.706       200.217    
   8  0.491560     -0.710170      -10.2708       10.2708       187.446       197.717    
   9  0.728901     -0.316218      -4.57328       4.57328       190.448       195.021    
  10  0.361124      -1.01853      -14.7305       14.7305       189.474       204.204    
  11  0.187026      -1.67651      -24.2464       24.2464       189.841       214.087    
  12  0.560514     -0.578901      -8.37232       8.37232       174.483       182.856    
  13  0.218776      -1.51971      -21.9786       21.9786       175.715       197.694    
  14  0.109271      -2.21392      -32.0187       32.0187       189.875       221.893    
  15  0.263420E-01  -3.63659      -52.5939       52.5939       189.277       241.871    
  16  0.654642     -0.423667      -6.12725       6.12725       191.708       197.835    
  17  0.975959     -0.243343E-01 -0.351933      0.351933       192.832       193.184    
  18  0.107212      -2.23295      -32.2938       32.2938       187.149       219.443    
  19  0.972340     -0.280494E-01 -0.405662      0.405662       191.810       192.215    
  20  0.259158      -1.35032      -19.5289       19.5289       193.388       212.917    
  21  0.889970     -0.116568      -1.68585       1.68585       189.414       191.100    
  22  0.956672     -0.442943E-01 -0.640603      0.640603       189.306       189.946    
  23  0.299261      -1.20644      -17.4480       17.4480       190.223       207.671    
  24  0.114836      -2.16425      -31.3003       31.3003       193.212       224.512    
  25  0.728848     -0.316291      -4.57433       4.57433       185.115       189.689    
  26  0.650336     -0.430267      -6.22270       6.22270       191.801       198.023    
  27  0.816983     -0.202137      -2.92340       2.92340       191.883       194.806    
  28  0.507860     -0.677550      -9.79901       9.79901       191.800       201.599    
  29  0.920661     -0.826634E-01  -1.19551       1.19551       186.433       187.629    
  30  0.253772      -1.37132      -19.8326       19.8326       185.330       205.163    
  31  0.667512     -0.404198      -5.84568       5.84568       192.707       198.553    
  32  0.772715     -0.257844      -3.72906       3.72906       188.127       191.856    
  33  0.757620     -0.277573      -4.01438       4.01438       193.483       197.497    
  34  0.776421     -0.253060      -3.65987       3.65987       191.444       195.104    
  35  0.886642     -0.120314      -1.74004       1.74004       196.089       197.829    
  36  0.238693E-01  -3.73516      -54.0195       54.0195       189.576       243.596    
  37  0.303957      -1.19087      -17.2229       17.2229       191.640       208.863    
  38  0.875267     -0.133226      -1.92677       1.92677       189.670       191.596    
  39  0.144246      -1.93624      -28.0027       28.0027       192.177       220.180    
  40  0.993963     -0.605564E-02 -0.875793E-01  0.875793E-01   187.201       187.288    
  41  0.172168      -1.75928      -25.4435       25.4435       190.902       216.346    
  42  0.979713     -0.204952E-01 -0.296411      0.296411       192.392       192.688    
  43  0.938694     -0.632658E-01 -0.914977      0.914977       204.512       205.427    
  44  0.716061     -0.333990      -4.83031       4.83031       191.114       195.944    
  45  0.764601     -0.268402      -3.88174       3.88174       192.832       196.714    
  46  0.546951     -0.603396      -8.72657       8.72657       181.185       189.912    
  47  0.104442      -2.25912      -32.6724       32.6724       193.650       226.322    
  48  0.669980     -0.400508      -5.79231       5.79231       192.832       198.625    
  49  0.255048      -1.36630      -19.7600       19.7600       192.192       211.952    
  50  0.761153     -0.272921      -3.94710       3.94710       191.913       195.861    
  51  0.273269      -1.29730      -18.7621       18.7621       203.127       221.890    
  52  0.789047E-01  -2.53951      -36.7275       36.7275       188.818       225.546    
  53  0.723703     -0.323374      -4.67677       4.67677       184.490       189.167    
  54  0.535422     -0.624699      -9.03467       9.03467       192.846       201.881    
  55  0.394266     -0.930730      -13.4606       13.4606       195.694       209.155    
  56  0.334209      -1.09599      -15.8506       15.8506       193.218       209.069    
  57  0.713084     -0.338156      -4.89055       4.89055       187.767       192.658    
  58  0.335811      -1.09121      -15.7815       15.7815       190.529       206.310    
  59  0.877329     -0.130873      -1.89274       1.89274       204.357       206.250    
  60  0.804760     -0.217212      -3.14141       3.14141       191.935       195.076    
  61  0.676806     -0.390371      -5.64571       5.64571       185.247       190.892    
  62  0.139025      -1.97310      -28.5359       28.5359       215.979       244.515    
  63  0.453238     -0.791339      -11.4447       11.4447       192.832       204.277    
  64  0.174629      -1.74509      -25.2383       25.2383       191.517       216.756    
  65  0.770625     -0.260553      -3.76823       3.76823       212.657       216.425    
  66  0.636484     -0.451797      -6.53407       6.53407       189.841       196.375    
  67  0.336462      -1.08927      -15.7535       15.7535       192.832       208.586    
  68  0.534955     -0.625573      -9.04730       9.04730       189.745       198.792    
  69  0.847446E-01  -2.46811      -35.6949       35.6949       191.159       226.854    
  70  0.917274     -0.863490E-01  -1.24882       1.24882       192.845       194.094    
  71  0.518675     -0.656478      -9.49426       9.49426       239.328       248.823    
  72  0.975471E-01  -2.32742      -33.6601       33.6601       183.165       216.826    
loop,thermsimp(1:2)       82   62.8060       34.7134    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224        243.93          0.84          1.11         25.21          0.12          0.04         27.33
Just calling func    0   0         27.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    243.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       82
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       83
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      223     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -7.16926       7.16926       174.483       181.653    
   2  0.266275      -1.32323      -19.1370       19.1370       183.837       202.974    
   3  0.545538     -0.605984      -8.76399       8.76399       187.201       195.965    
   4  0.196234      -1.62845      -23.5513       23.5513       186.433       209.984    
   5  0.786411     -0.240275      -3.47497       3.47497       184.490       187.965    
   6  0.453912     -0.789853      -11.4232       11.4232       185.115       196.538    
   7  0.900549     -0.104751      -1.51495       1.51495       181.185       182.700    
   8  0.339919      -1.07905      -15.6056       15.6056       189.306       204.911    
   9  0.511643     -0.670128      -9.69167       9.69167       186.584       196.276    
  10  0.628202     -0.464894      -6.72349       6.72349       185.247       191.970    
  11  0.672886E-01  -2.69876      -39.0307       39.0307       189.414       228.445    
  12  0.518493     -0.656829      -9.49934       9.49934       189.670       199.169    
  13  0.994926     -0.508642E-02 -0.735619E-01  0.735619E-01   188.127       188.200    
  14  0.733191     -0.310349      -4.48840       4.48840       191.810       196.298    
  15  0.952818     -0.483318E-01 -0.698995      0.698995       187.767       188.466    
  16  0.735955     -0.306586      -4.43398       4.43398       192.392       196.826    
  17  0.743149     -0.296859      -4.29330       4.29330       186.626       190.919    
  18  0.549375     -0.598975      -8.66263       8.66263       192.832       201.495    
  19  0.355140      -1.03524      -14.9721       14.9721       192.845       207.817    
  20  0.482165     -0.729469      -10.5499       10.5499       191.883       202.433    
  21  0.577197     -0.549571      -7.94814       7.94814       190.448       198.396    
  22  0.107316E-01  -4.53456      -65.5808       65.5808       191.935       257.516    
  23  0.923969     -0.790764E-01  -1.14364       1.14364       191.444       192.588    
  24  0.810451     -0.210164      -3.03948       3.03948       191.913       194.953    
  25  0.143346      -1.94249      -28.0931       28.0931       191.114       219.207    
  26  0.994184     -0.583318E-02 -0.843620E-01  0.843620E-01   189.841       189.926    
  27  0.870737     -0.138415      -2.00182       2.00182       192.832       194.834    
  28  0.970691     -0.297469E-01 -0.430213      0.430213       185.450       185.880    
  29  0.351269      -1.04620      -15.1306       15.1306       193.483       208.614    
  30  0.464982     -0.765756      -11.0747       11.0747       175.715       186.790    
  31  0.921785     -0.814432E-01  -1.17787       1.17787       187.446       188.624    
  32  0.110512      -2.20263      -31.8554       31.8554       196.089       227.944    
  33  0.261408      -1.34167      -19.4038       19.4038       191.708       211.112    
  34  0.908908     -0.955118E-01  -1.38133       1.38133       191.801       193.182    
  35  0.819412     -0.199168      -2.88045       2.88045       192.707       195.588    
  36  0.466482     -0.762536      -11.0281       11.0281       192.832       203.860    
  37  0.717237     -0.332349      -4.80657       4.80657       189.745       194.551    
  38  0.802331     -0.220234      -3.18511       3.18511       184.706       187.891    
  39  0.949390     -0.519355E-01 -0.751113      0.751113       191.800       192.551    
  40  0.258511      -1.35282      -19.5650       19.5650       192.846       212.411    
  41  0.270423      -1.30777      -18.9135       18.9135       189.474       208.387    
  42  0.366439      -1.00392      -14.5192       14.5192       192.832       207.352    
  43  0.934403     -0.678476E-01 -0.981241      0.981241       185.330       186.311    
  44  0.956654     -0.443133E-01 -0.640878      0.640878       204.512       205.153    
  45  0.377790     -0.973417      -14.0780       14.0780       204.357       218.435    
  46  0.203667      -1.59127      -23.0136       23.0136       190.529       213.542    
  47  0.673892     -0.394685      -5.70810       5.70810       190.223       195.931    
  48  0.347380      -1.05734      -15.2916       15.2916       192.832       208.124    
  49  0.144339      -1.93559      -27.9933       27.9933       191.640       219.633    
  50  0.728571     -0.316670      -4.57981       4.57981       193.218       197.798    
  51  0.243065      -1.41443      -20.4560       20.4560       195.694       216.150    
  52  0.686711     -0.375841      -5.43558       5.43558       192.192       197.628    
  53  0.159440      -1.83609      -26.5543       26.5543       193.388       219.942    
  54  0.426258     -0.852711      -12.3323       12.3323       189.841       202.173    
  55  0.929286     -0.733386E-01  -1.06065       1.06065       190.902       191.963    
  56  0.335987E-01  -3.39327      -49.0749       49.0749       212.657       261.732    
  57  0.539383     -0.617330      -8.92809       8.92809       191.517       200.445    
  58  0.384768     -0.955116      -13.8133       13.8133       183.165       196.979    
  59  0.267956      -1.31693      -19.0460       19.0460       187.149       206.195    
  60  0.116616      -2.14887      -31.0779       31.0779       185.359       216.437    
  61  0.852032     -0.160131      -2.31588       2.31588       192.177       194.493    
  62  0.456598     -0.783952      -11.3379       11.3379       203.127       214.465    
  63  0.157616      -1.84759      -26.7207       26.7207       189.875       216.595    
  64  0.928361     -0.743348E-01  -1.07506       1.07506       193.212       194.287    
  65  0.200440      -1.60724      -23.2446       23.2446       188.818       212.063    
  66  0.106743      -2.23733      -32.3572       32.3572       193.650       226.007    
  67  0.786346     -0.240359      -3.47617       3.47617       191.159       194.635    
  68  0.481815     -0.730195      -10.5604       10.5604       189.277       199.838    
  69  0.410111     -0.891327      -12.8908       12.8908       189.576       202.467    
  70  0.768538     -0.263265      -3.80745       3.80745       215.979       219.787    
  71  0.693325     -0.366257      -5.29696       5.29696       183.292       188.589    
  72  0.462914     -0.770214      -11.1392       11.1392       243.933       255.073    
loop,thermsimp(1:2)       83   7.16926       19.1370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225        266.81          0.84          1.11         25.38          0.13          0.05         27.51
Just calling func    0   0         27.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    226        198.79          0.85          1.11         25.22          0.09          0.05         27.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    198.79
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       83
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       84
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      225     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -8.06310       8.06310       174.483       182.546    
   2  0.468879     -0.757411      -10.9540       10.9540       181.185       192.139    
   3  0.886741E-01  -2.42279      -35.0394       35.0394       185.450       220.489    
   4  0.211783      -1.55219      -22.4485       22.4485       185.330       207.779    
   5  0.573306     -0.556336      -8.04596       8.04596       175.715       183.761    
   6  0.401711     -0.912021      -13.1900       13.1900       184.706       197.896    
   7  0.505706     -0.681800      -9.86048       9.86048       184.490       194.350    
   8  0.603045     -0.505763      -7.31457       7.31457       188.127       195.441    
   9  0.696575     -0.361580      -5.22933       5.22933       187.767       192.997    
  10  0.294614      -1.22209      -17.6744       17.6744       183.292       200.966    
  11  0.527550     -0.639511      -9.24889       9.24889       187.446       196.695    
  12  0.657157     -0.419832      -6.07179       6.07179       189.841       195.913    
  13  0.627866     -0.465428      -6.73122       6.73122       186.626       193.357    
  14  0.993353E-02  -4.61184      -66.6984       66.6984       190.902       257.600    
  15  0.885166E-01  -2.42456      -35.0651       35.0651       185.247       220.312    
  16  0.265764      -1.32515      -19.1649       19.1649       191.800       210.964    
  17  0.446403     -0.806534      -11.6644       11.6644       191.444       203.108    
  18  0.287864      -1.24527      -18.0096       18.0096       191.801       209.810    
  19  0.926928E-01  -2.37846      -34.3984       34.3984       193.212       227.610    
  20  0.394849     -0.929252      -13.4392       13.4392       192.177       205.617    
  21  0.540746     -0.614805      -8.89157       8.89157       189.745       198.636    
  22  0.846435     -0.166721      -2.41120       2.41120       191.159       193.570    
  23  0.417037     -0.874580      -12.6485       12.6485       192.832       205.481    
  24  0.210713      -1.55726      -22.5217       22.5217       191.913       214.435    
  25  0.764669     -0.268312      -3.88044       3.88044       192.707       196.588    
  26  0.219471E-01  -3.81912      -55.2338       55.2338       190.223       245.457    
  27  0.200728      -1.60581      -23.2239       23.2239       187.201       210.424    
  28  0.572660     -0.557463      -8.06227       8.06227       186.584       194.646    
  29  0.599083E-01  -2.81494      -40.7109       40.7109       191.810       232.521    
  30  0.214614      -1.53891      -22.2564       22.2564       185.115       207.371    
  31  0.489389     -0.714598      -10.3348       10.3348       192.392       202.727    
  32  0.162616      -1.81636      -26.2690       26.2690       183.165       209.434    
  33  0.710022     -0.342459      -4.95279       4.95279       192.192       197.145    
  34  0.753583     -0.282916      -4.09165       4.09165       193.218       197.310    
  35  0.743317     -0.296633      -4.29003       4.29003       190.448       194.738    
  36  0.155416      -1.86165      -26.9240       26.9240       189.670       216.594    
  37  0.643355     -0.441059      -6.37878       6.37878       189.277       195.656    
  38  0.656098     -0.421444      -6.09511       6.09511       191.517       197.612    
  39  0.327550      -1.11611      -16.1417       16.1417       192.832       208.974    
  40  0.192244      -1.64899      -23.8484       23.8484       189.841       213.689    
  41  0.433590     -0.835657      -12.0856       12.0856       191.883       203.968    
  42  0.788561     -0.237545      -3.43548       3.43548       189.576       193.012    
  43  0.978028     -0.222173E-01 -0.321316      0.321316       183.837       184.159    
  44  0.110322      -2.20435      -31.8803       31.8803       192.832       224.713    
  45  0.795332     -0.228995      -3.31183       3.31183       189.306       192.617    
  46  0.497518E-01  -3.00071      -43.3975       43.3975       204.512       247.910    
  47  0.852459     -0.159631      -2.30865       2.30865       187.149       189.458    
  48  0.133240      -2.01560      -29.1505       29.1505       192.832       221.983    
  49  0.671163     -0.398743      -5.76679       5.76679       192.845       198.612    
  50  0.245122      -1.40600      -20.3341       20.3341       192.832       213.166    
  51  0.820498     -0.197843      -2.86129       2.86129       189.474       192.335    
  52  0.422422     -0.861751      -12.4630       12.4630       193.483       205.946    
  53  0.946612E-01  -2.35745      -34.0945       34.0945       186.433       220.528    
  54  0.902486     -0.102603      -1.48388       1.48388       191.708       193.192    
  55  0.858585     -0.152469      -2.20507       2.20507       188.818       191.023    
  56  0.713346     -0.337789      -4.88524       4.88524       192.846       197.731    
  57  0.497785     -0.697587      -10.0888       10.0888       190.529       200.618    
  58  0.971461     -0.289536E-01 -0.418740      0.418740       203.127       203.546    
  59  0.714587     -0.336051      -4.86011       4.86011       195.694       200.554    
  60  0.194565E-01  -3.93958      -56.9758       56.9758       185.359       242.335    
  61  0.675786E-01  -2.69446      -38.9685       38.9685       189.875       228.843    
  62  0.924162     -0.788681E-01  -1.14062       1.14062       204.357       205.497    
  63  0.988536     -0.115299E-01 -0.166750      0.166750       191.114       191.280    
  64  0.136917      -1.98838      -28.7568       28.7568       191.640       220.397    
  65  0.529964     -0.634945      -9.18285       9.18285       215.979       225.162    
  66  0.369278     -0.996204      -14.4075       14.4075       193.388       207.795    
  67  0.186364      -1.68006      -24.2977       24.2977       193.650       217.948    
  68  0.314345      -1.15726      -16.7369       16.7369       196.089       212.826    
  69  0.451257     -0.795718      -11.5080       11.5080       189.414       200.922    
  70  0.194510      -1.63727      -23.6790       23.6790       243.933       267.612    
  71  0.690618     -0.370168      -5.35352       5.35352       191.935       197.288    
  72  0.828229     -0.188466      -2.72567       2.72567       198.791       201.516    
loop,thermsimp(1:2)       84   8.06310       10.9540    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227        240.97          0.83          1.10         25.04          0.20          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    240.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       84
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       85
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      226     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -23.4584       23.4584       174.483       197.942    
   2  0.793097     -0.231809      -3.35253       3.35253       175.715       179.067    
   3  0.261081      -1.34293      -19.4220       19.4220       183.837       203.259    
   4  0.912198     -0.918984E-01  -1.32907       1.32907       187.149       188.478    
   5  0.493539     -0.706153      -10.2127       10.2127       188.818       199.031    
   6  0.721001     -0.327115      -4.73087       4.73087       191.114       195.844    
   7  0.578790     -0.546816      -7.90829       7.90829       181.185       189.094    
   8  0.684127     -0.379612      -5.49011       5.49011       189.474       194.964    
   9  0.627712     -0.465674      -6.73477       6.73477       189.306       196.040    
  10  0.858540     -0.152522      -2.20584       2.20584       187.767       189.973    
  11  0.712254E-01  -2.64191      -38.2084       38.2084       189.576       227.785    
  12  0.927250     -0.755316E-01  -1.09237       1.09237       191.708       192.800    
  13  0.458073     -0.780727      -11.2912       11.2912       186.626       197.917    
  14  0.940004     -0.618714E-01 -0.894810      0.894810       191.159       192.054    
  15  0.322549      -1.13150      -16.3642       16.3642       184.490       200.854    
  16  0.939473     -0.624358E-01 -0.902973      0.902973       186.584       187.487    
  17  0.726080     -0.320095      -4.62935       4.62935       190.448       195.077    
  18  0.602088E-02  -5.11252      -73.9395       73.9395       188.127       262.066    
  19  0.735289     -0.307492      -4.44708       4.44708       189.277       193.724    
  20  0.847617     -0.165326      -2.39102       2.39102       189.841       192.232    
  21  0.747190E-01  -2.59402      -37.5158       37.5158       192.707       230.223    
  22  0.248374      -1.39282      -20.1435       20.1435       187.446       207.590    
  23  0.350184      -1.04930      -15.1754       15.1754       192.192       207.368    
  24  0.327739E-03  -8.02329      -116.036       116.036       191.935       307.971    
  25  0.130012      -2.04013      -29.5052       29.5052       193.218       222.723    
  26  0.609791     -0.494639      -7.15368       7.15368       191.517       198.671    
  27  0.793414     -0.231410      -3.34675       3.34675       192.846       196.193    
  28  0.962567     -0.381519E-01 -0.551769      0.551769       184.706       185.258    
  29  0.499469     -0.694211      -10.0400       10.0400       192.845       202.885    
  30  0.887491     -0.119357      -1.72620       1.72620       189.745       191.471    
  31  0.136374      -1.99236      -28.8143       28.8143       195.694       224.509    
  32  0.292356      -1.22978      -17.7856       17.7856       190.529       208.314    
  33  0.301564      -1.19877      -17.3372       17.3372       189.414       206.751    
  34  0.352543      -1.04258      -15.0783       15.0783       183.292       198.370    
  35  0.483726     -0.726236      -10.5031       10.5031       198.791       209.294    
  36  0.410499     -0.890381      -12.8771       12.8771       192.392       205.269    
  37  0.458111     -0.780644      -11.2900       11.2900       191.444       202.734    
  38  0.670071     -0.400372      -5.79035       5.79035       203.127       208.918    
  39  0.175486      -1.74020      -25.1674       25.1674       191.883       217.050    
  40  0.798907     -0.224511      -3.24697       3.24697       192.832       196.079    
  41  0.270487      -1.30753      -18.9101       18.9101       204.357       223.267    
  42  0.480368     -0.733202      -10.6039       10.6039       192.177       202.781    
  43  0.658406     -0.417933      -6.04433       6.04433       193.483       199.527    
  44  0.937976     -0.640304E-01 -0.926035      0.926035       185.115       186.041    
  45  0.710083     -0.342373      -4.95154       4.95154       185.330       190.282    
  46  0.567340     -0.566797      -8.19726       8.19726       193.388       201.585    
  47  0.201426      -1.60233      -23.1736       23.1736       192.832       216.006    
  48  0.660313     -0.415042      -6.00251       6.00251       183.165       189.168    
  49  0.524008     -0.646249      -9.34633       9.34633       191.801       201.147    
  50  0.513616     -0.666280      -9.63602       9.63602       187.201       196.837    
  51  0.951218     -0.500122E-01 -0.723298      0.723298       191.800       192.523    
  52  0.703465     -0.351737      -5.08698       5.08698       196.089       201.176    
  53  0.702859     -0.352600      -5.09945       5.09945       192.832       197.932    
  54  0.453067     -0.791715      -11.4501       11.4501       189.841       201.291    
  55  0.202116      -1.59891      -23.1242       23.1242       191.913       215.038    
  56  0.491988     -0.709301      -10.2582       10.2582       189.670       199.928    
  57  0.632131     -0.458659      -6.63332       6.63332       193.650       200.283    
  58  0.911086     -0.931178E-01  -1.34671       1.34671       185.247       186.593    
  59  0.888750     -0.117939      -1.70569       1.70569       191.640       193.346    
  60  0.468235     -0.758785      -10.9739       10.9739       185.450       196.424    
  61  0.971366     -0.290520E-01 -0.420163      0.420163       186.433       186.853    
  62  0.622947     -0.473294      -6.84498       6.84498       192.832       199.677    
  63  0.837000     -0.177932      -2.57332       2.57332       192.832       195.406    
  64  0.495636     -0.701913      -10.1514       10.1514       215.979       226.131    
  65  0.251386      -1.38077      -19.9692       19.9692       193.212       213.181    
  66  0.580065E-01  -2.84720      -41.1774       41.1774       189.875       231.052    
  67  0.601569     -0.508214      -7.35000       7.35000       191.810       199.160    
  68  0.249260      -1.38926      -20.0921       20.0921       185.359       205.452    
  69  0.309647E-01  -3.47491      -50.2556       50.2556       190.223       240.479    
  70  0.653539     -0.425353      -6.15163       6.15163       204.512       210.664    
  71  0.987034     -0.130508E-01 -0.188746      0.188746       190.902       191.091    
  72  0.712168     -0.339441      -4.90915       4.90915       240.974       245.883    
loop,thermsimp(1:2)       85   23.4584       3.35253    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228        188.85          0.83          1.11         25.13          0.13          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    229        189.35          0.84          1.11         25.09          0.12          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    188.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       85
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       86
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      228     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -11.0778       11.0778       175.715       186.793    
   2  0.948887     -0.524654E-01 -0.758777      0.758777       184.706       185.465    
   3  0.532332     -0.630488      -9.11838       9.11838       185.115       194.233    
   4  0.374267     -0.982785      -14.2135       14.2135       185.247       199.460    
   5  0.694531     -0.364519      -5.27183       5.27183       186.433       191.705    
   6  0.414371     -0.880994      -12.7413       12.7413       186.584       199.325    
   7  0.208827E-01  -3.86883      -55.9527       55.9527       187.149       243.102    
   8  0.627187     -0.466511      -6.74687       6.74687       181.185       187.932    
   9  0.148799E-01  -4.20774      -60.8542       60.8542       183.165       244.020    
  10  0.809008     -0.211946      -3.06526       3.06526       187.767       190.833    
  11  0.647680     -0.434359      -6.28189       6.28189       185.330       191.612    
  12  0.289351      -1.24012      -17.9351       17.9351       190.902       208.837    
  13  0.222457      -1.50302      -21.7373       21.7373       189.745       211.482    
  14  0.374268     -0.982782      -14.2134       14.2134       191.159       205.372    
  15  0.785765     -0.241097      -3.48685       3.48685       189.841       193.328    
  16  0.298051      -1.21049      -17.5067       17.5067       191.800       209.306    
  17  0.725075     -0.321480      -4.64939       4.64939       191.708       196.357    
  18  0.386364     -0.950976      -13.7534       13.7534       191.640       205.393    
  19  0.631686     -0.459363      -6.64350       6.64350       189.277       195.921    
  20  0.688282     -0.373557      -5.40254       5.40254       189.474       194.876    
  21  0.373817     -0.983990      -14.2309       14.2309       190.448       204.679    
  22  0.219845      -1.51483      -21.9082       21.9082       192.832       214.741    
  23  0.926271     -0.765889E-01  -1.10766       1.10766       191.114       192.221    
  24  0.618127     -0.481061      -6.95731       6.95731       189.306       196.263    
  25  0.176216      -1.73604      -25.1074       25.1074       192.832       217.940    
  26  0.742943     -0.297136      -4.29731       4.29731       192.846       197.143    
  27  0.357690      -1.02809      -14.8686       14.8686       185.450       200.319    
  28  0.478359     -0.737394      -10.6645       10.6645       187.201       197.865    
  29  0.395976     -0.926401      -13.3980       13.3980       186.626       200.024    
  30  0.803186     -0.219169      -3.16972       3.16972       192.832       196.002    
  31  0.231845      -1.46168      -21.1395       21.1395       174.483       195.623    
  32  0.808968     -0.211996      -3.06598       3.06598       183.292       186.358    
  33  0.579217     -0.546078      -7.89761       7.89761       191.517       199.415    
  34  0.384357     -0.956183      -13.8287       13.8287       188.818       202.647    
  35  0.856367     -0.155057      -2.24250       2.24250       191.810       194.052    
  36  0.265661      -1.32553      -19.1704       19.1704       193.483       212.653    
  37  0.288915      -1.24162      -17.9569       17.9569       192.832       210.789    
  38  0.224915      -1.49203      -21.5784       21.5784       189.670       211.248    
  39  0.685944     -0.376959      -5.45175       5.45175       193.650       199.102    
  40  0.265936      -1.32450      -19.1555       19.1555       184.490       203.645    
  41  0.412966     -0.884389      -12.7904       12.7904       191.801       204.591    
  42  0.440796     -0.819173      -11.8472       11.8472       196.089       207.936    
  43  0.572522     -0.557705      -8.06576       8.06576       189.841       197.907    
  44  0.798412     -0.225131      -3.25594       3.25594       193.388       196.644    
  45  0.127097      -2.06281      -29.8332       29.8332       191.444       221.277    
  46  0.243397      -1.41306      -20.4363       20.4363       192.177       212.614    
  47  0.322195      -1.13260      -16.3801       16.3801       192.845       209.225    
  48  0.512728     -0.668011      -9.66106       9.66106       183.837       193.498    
  49  0.786191     -0.240556      -3.47902       3.47902       192.392       195.871    
  50  0.733079     -0.310501      -4.49060       4.49060       185.359       189.850    
  51  0.601364     -0.508554      -7.35493       7.35493       189.414       196.769    
  52  0.348529      -1.05403      -15.2439       15.2439       192.192       207.436    
  53  0.923986     -0.790584E-01  -1.14338       1.14338       187.446       188.590    
  54  0.843742     -0.169908      -2.45728       2.45728       190.529       192.986    
  55  0.723581     -0.323543      -4.67921       4.67921       203.127       207.807    
  56  0.378158     -0.972444      -14.0639       14.0639       198.791       212.855    
  57  0.463644     -0.768638      -11.1164       11.1164       204.512       215.629    
  58  0.427569     -0.849641      -12.2879       12.2879       193.212       205.500    
  59  0.235852      -1.44455      -20.8917       20.8917       191.913       212.805    
  60  0.203797      -1.59063      -23.0044       23.0044       192.832       215.837    
  61  0.146982E-02  -6.52261      -94.3328       94.3328       191.883       286.215    
  62  0.681525     -0.383422      -5.54521       5.54521       193.218       198.763    
  63  0.931276     -0.711992E-01  -1.02971       1.02971       204.357       205.387    
  64  0.581849     -0.541545      -7.83205       7.83205       195.694       203.526    
  65  0.652684     -0.426663      -6.17058       6.17058       215.979       222.150    
  66  0.388365     -0.945809      -13.6787       13.6787       189.576       203.255    
  67  0.216086      -1.53208      -22.1575       22.1575       192.707       214.865    
  68  0.409967     -0.891679      -12.8958       12.8958       189.875       202.770    
  69  0.440345     -0.820196      -11.8620       11.8620       190.223       202.085    
  70  0.507524E-01  -2.98080      -43.1095       43.1095       240.974       284.084    
  71  0.734141     -0.309054      -4.46967       4.46967       188.127       192.596    
  72  0.701795     -0.354114      -5.12134       5.12134       188.847       193.969    
loop,thermsimp(1:2)       86   11.0778      0.758777    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230        187.80          0.84          1.11         25.22          0.05          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       86
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       87
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      229     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -24.5634       24.5634       184.706       209.269    
   2  0.721345     -0.326637      -4.72397       4.72397       183.292       188.016    
   3  0.842493     -0.171390      -2.47871       2.47871       175.715       178.194    
   4  0.260540      -1.34500      -19.4519       19.4519       181.185       200.637    
   5  0.782605     -0.245127      -3.54513       3.54513       187.446       190.991    
   6  0.208492      -1.56785      -22.6750       22.6750       185.359       208.034    
   7  0.290568E-01  -3.53850      -51.1753       51.1753       187.767       238.943    
   8  0.673682     -0.394997      -5.71261       5.71261       185.330       191.043    
   9  0.399393     -0.917808      -13.2737       13.2737       186.433       199.707    
  10  0.966971     -0.335863E-01 -0.485740      0.485740       191.114       191.599    
  11  0.390645     -0.939956      -13.5940       13.5940       188.127       201.721    
  12  0.259548      -1.34881      -19.5071       19.5071       190.529       210.036    
  13  0.260765      -1.34413      -19.4394       19.4394       189.841       209.281    
  14  0.110601E-01  -4.50441      -65.1448       65.1448       183.837       248.982    
  15  0.727710     -0.317852      -4.59691       4.59691       188.847       193.444    
  16  0.717076     -0.332574      -4.80983       4.80983       191.810       196.620    
  17  0.612129     -0.490811      -7.09832       7.09832       185.115       192.213    
  18  0.589376     -0.528691      -7.64615       7.64615       189.474       197.120    
  19  0.541615     -0.613199      -8.86835       8.86835       174.483       183.352    
  20  0.330403      -1.10744      -16.0163       16.0163       192.392       208.408    
  21  0.229530      -1.47172      -21.2847       21.2847       189.277       210.562    
  22  0.564010     -0.572684      -8.28240       8.28240       192.832       201.115    
  23  0.454226     -0.789161      -11.4132       11.4132       189.306       200.719    
  24  0.579528     -0.545541      -7.88985       7.88985       191.708       199.598    
  25  0.245500      -1.40446      -20.3119       20.3119       193.388       213.700    
  26  0.708019     -0.345284      -4.99364       4.99364       189.414       194.408    
  27  0.300215      -1.20326      -17.4020       17.4020       192.846       210.248    
  28  0.721461     -0.326478      -4.72166       4.72166       187.201       191.922    
  29  0.326772      -1.11849      -16.1761       16.1761       189.841       206.017    
  30  0.580879     -0.543212      -7.85617       7.85617       193.218       201.074    
  31  0.963075     -0.376241E-01 -0.544136      0.544136       193.650       194.194    
  32  0.656935     -0.420170      -6.07667       6.07667       186.584       192.661    
  33  0.908335     -0.961416E-01  -1.39044       1.39044       191.517       192.908    
  34  0.765938     -0.266654      -3.85647       3.85647       185.247       189.103    
  35  0.497301     -0.698561      -10.1029       10.1029       186.626       196.729    
  36  0.833603     -0.181997      -2.63212       2.63212       185.450       188.082    
  37  0.433057     -0.836886      -12.1034       12.1034       190.223       202.327    
  38  0.349547      -1.05112      -15.2017       15.2017       188.818       204.020    
  39  0.142838      -1.94604      -28.1445       28.1445       189.875       218.019    
  40  0.326780      -1.11847      -16.1758       16.1758       189.576       205.752    
  41  0.707709     -0.345723      -4.99999       4.99999       195.694       200.694    
  42  0.914339     -0.895538E-01  -1.29516       1.29516       184.490       185.785    
  43  0.392800     -0.934454      -13.5145       13.5145       191.801       205.315    
  44  0.434772     -0.832933      -12.0462       12.0462       190.448       202.494    
  45  0.229545      -1.47165      -21.2837       21.2837       191.159       212.442    
  46  0.661281     -0.413577      -5.98133       5.98133       204.357       210.338    
  47  0.459966     -0.776602      -11.2316       11.2316       191.640       202.871    
  48  0.352439      -1.04288      -15.0825       15.0825       193.212       208.294    
  49  0.490345     -0.712647      -10.3066       10.3066       192.192       202.499    
  50  0.837788     -0.176990      -2.55970       2.55970       203.127       205.687    
  51  0.247493      -1.39637      -20.1950       20.1950       196.089       216.284    
  52  0.221382      -1.50787      -21.8074       21.8074       190.902       212.709    
  53  0.374412     -0.982399      -14.2079       14.2079       192.845       207.053    
  54  0.170580      -1.76855      -25.5775       25.5775       191.800       217.377    
  55  0.464054     -0.767755      -11.1036       11.1036       192.832       203.936    
  56  0.936961     -0.651140E-01 -0.941707      0.941707       189.670       190.611    
  57  0.302357      -1.19615      -17.2992       17.2992       189.745       207.044    
  58  0.572748E-01  -2.85990      -41.3610       41.3610       192.177       233.538    
  59  0.495156     -0.702883      -10.1654       10.1654       193.483       203.648    
  60  0.101162      -2.29104      -33.1340       33.1340       191.913       225.047    
  61  0.786435E-02  -4.84542      -70.0765       70.0765       198.791       268.867    
  62  0.960492     -0.403100E-01 -0.582980      0.582980       192.832       193.415    
  63  0.902616     -0.102458      -1.48179       1.48179       192.707       194.189    
  64  0.646986     -0.435430      -6.29738       6.29738       204.512       210.810    
  65  0.218936      -1.51897      -21.9680       21.9680       192.832       214.800    
  66  0.491829     -0.709625      -10.2629       10.2629       192.832       203.095    
  67  0.873324     -0.135448      -1.95891       1.95891       191.444       193.403    
  68  0.419066     -0.869727      -12.5784       12.5784       215.979       228.558    
  69  0.390022     -0.941553      -13.6171       13.6171       187.149       200.767    
  70  0.843189     -0.170564      -2.46676       2.46676       183.165       185.632    
  71  0.992789     -0.723678E-02 -0.104661      0.104661       240.974       241.079    
  72  0.694490     -0.364577      -5.27267       5.27267       187.801       193.074    
loop,thermsimp(1:2)       87   24.5634       4.72397    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231        201.90          0.82          1.11         25.07          0.16          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    232        210.77          0.84          1.11         25.22          0.09          0.05         27.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    201.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       87
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       88
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      231     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -21.8861       21.8861       175.715       197.601    
   2  0.246752E-01  -3.70196      -53.5393       53.5393       174.483       228.023    
   3  0.679039     -0.387076      -5.59806       5.59806       183.165       188.763    
   4  0.709027     -0.343862      -4.97307       4.97307       184.490       189.463    
   5  0.577754     -0.548608      -7.93420       7.93420       183.292       191.226    
   6  0.738694     -0.302871      -4.38026       4.38026       185.450       189.830    
   7  0.181723      -1.70527      -24.6624       24.6624       185.247       209.909    
   8  0.103748      -2.26579      -32.7688       32.7688       189.670       222.438    
   9  0.456811E-02  -5.38866      -77.9330       77.9330       187.446       265.379    
  10  0.303247      -1.19321      -17.2567       17.2567       185.330       202.587    
  11  0.284736      -1.25619      -18.1676       18.1676       191.114       209.281    
  12  0.900494     -0.104812      -1.51584       1.51584       187.201       188.716    
  13  0.691792     -0.368470      -5.32897       5.32897       185.115       190.444    
  14  0.502714     -0.687735      -9.94631       9.94631       186.584       196.530    
  15  0.305219      -1.18673      -17.1630       17.1630       191.517       208.680    
  16  0.412005     -0.886720      -12.8241       12.8241       187.801       200.626    
  17  0.412225     -0.886186      -12.8164       12.8164       191.444       204.260    
  18  0.121697      -2.10622      -30.4611       30.4611       192.832       223.293    
  19  0.465374     -0.764915      -11.0625       11.0625       188.847       199.910    
  20  0.273016      -1.29823      -18.7755       18.7755       192.707       211.483    
  21  0.502763     -0.687636      -9.94488       9.94488       193.650       203.595    
  22  0.516442     -0.660793      -9.55667       9.55667       189.414       198.971    
  23  0.554333     -0.589990      -8.53269       8.53269       191.810       200.342    
  24  0.192397E-01  -3.95078      -57.1378       57.1378       186.626       243.764    
  25  0.451279E-01  -3.09825      -44.8083       44.8083       189.474       234.282    
  26  0.457340     -0.782327      -11.3144       11.3144       191.708       203.022    
  27  0.325184      -1.12336      -16.2466       16.2466       186.433       202.680    
  28  0.700952     -0.355315      -5.13872       5.13872       181.185       186.324    
  29  0.961087     -0.396906E-01 -0.574022      0.574022       195.694       196.268    
  30  0.195966E-02  -6.23498      -90.1730       90.1730       189.306       279.479    
  31  0.766376     -0.266082      -3.84820       3.84820       187.149       190.998    
  32  0.398846     -0.919180      -13.2936       13.2936       193.218       206.512    
  33  0.675249     -0.392674      -5.67902       5.67902       192.832       198.511    
  34  0.189468      -1.66354      -24.0588       24.0588       188.127       212.185    
  35  0.444608     -0.810562      -11.7227       11.7227       190.223       201.946    
  36  0.514006     -0.665520      -9.62503       9.62503       190.448       200.073    
  37  0.575199     -0.553039      -7.99828       7.99828       192.192       200.191    
  38  0.121449      -2.10826      -30.4906       30.4906       191.640       222.131    
  39  0.209130      -1.56480      -22.6308       22.6308       192.832       215.463    
  40  0.466284E-01  -3.06555      -44.3352       44.3352       193.483       237.818    
  41  0.386630E-01  -3.25287      -47.0444       47.0444       192.832       239.877    
  42  0.335751E-01  -3.39397      -49.0851       49.0851       188.818       237.903    
  43  0.878126     -0.129965      -1.87961       1.87961       191.801       193.680    
  44  0.652938     -0.426273      -6.16493       6.16493       203.127       209.292    
  45  0.932456E-01  -2.37252      -34.3124       34.3124       189.576       223.889    
  46  0.662683     -0.411458      -5.95068       5.95068       189.841       195.791    
  47  0.204704      -1.58619      -22.9402       22.9402       189.745       212.685    
  48  0.985446     -0.146609E-01 -0.212032      0.212032       192.845       193.057    
  49  0.105847      -2.24576      -32.4791       32.4791       185.359       217.839    
  50  0.843201     -0.170550      -2.46656       2.46656       193.212       195.678    
  51  0.364087      -1.01036      -14.6123       14.6123       192.392       207.004    
  52  0.650651E-01  -2.73237      -39.5166       39.5166       184.706       224.223    
  53  0.968103     -0.324171E-01 -0.468830      0.468830       189.841       190.310    
  54  0.131933      -2.02546      -29.2931       29.2931       190.529       219.822    
  55  0.906847     -0.977815E-01  -1.41416       1.41416       192.846       194.260    
  56  0.443328E-01  -3.11603      -45.0654       45.0654       204.357       249.422    
  57  0.507045     -0.679156      -9.82225       9.82225       189.277       199.100    
  58  0.287709      -1.24581      -18.0174       18.0174       204.512       222.530    
  59  0.900299     -0.105028      -1.51896       1.51896       191.159       192.678    
  60  0.689829E-01  -2.67390      -38.6710       38.6710       190.902       229.573    
  61  0.876407     -0.131925      -1.90795       1.90795       193.388       195.296    
  62  0.718081     -0.331173      -4.78956       4.78956       192.832       197.622    
  63  0.177063      -1.73125      -25.0381       25.0381       196.089       221.127    
  64  0.749425E-01  -2.59103      -37.4726       37.4726       191.800       229.272    
  65  0.136072      -1.99457      -28.8463       28.8463       189.875       218.721    
  66  0.662610     -0.411569      -5.95229       5.95229       191.913       197.866    
  67  0.612646     -0.489969      -7.08613       7.08613       215.979       223.065    
  68  0.258380      -1.35332      -19.5723       19.5723       192.177       211.750    
  69  0.406590     -0.899949      -13.0154       13.0154       187.767       200.783    
  70  0.889463     -0.117137      -1.69409       1.69409       240.974       242.668    
  71  0.568198     -0.565286      -8.17541       8.17541       183.837       192.013    
  72  0.280610      -1.27079      -18.3787       18.3787       201.904       220.283    
loop,thermsimp(1:2)       88   21.8861       53.5393    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233        189.44          0.84          1.11         25.47          0.03          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234        189.82          0.84          1.11         25.06          0.12          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       88
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       89
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      233     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -1.90212       1.90212       181.185       183.087    
   2  0.765270     -0.267527      -3.86909       3.86909       187.201       191.070    
   3  0.215687      -1.53393      -22.1843       22.1843       183.165       205.350    
   4  0.999601E-01  -2.30298      -33.3067       33.3067       184.490       217.796    
   5  0.706519     -0.347405      -5.02432       5.02432       185.450       190.474    
   6  0.201358      -1.60267      -23.1785       23.1785       189.841       213.020    
   7  0.450677     -0.797005      -11.5266       11.5266       185.115       196.642    
   8  0.897557     -0.108078      -1.56308       1.56308       187.149       188.712    
   9  0.161166      -1.82532      -26.3985       26.3985       183.292       209.690    
  10  0.972556E-01  -2.33041      -33.7034       33.7034       183.837       217.541    
  11  0.742112     -0.298255      -4.31348       4.31348       191.159       195.472    
  12  0.172377      -1.75807      -25.4260       25.4260       192.845       218.271    
  13  0.658751     -0.417410      -6.03675       6.03675       191.801       197.837    
  14  0.725340     -0.321114      -4.64409       4.64409       192.846       197.490    
  15  0.501488     -0.690175      -9.98160       9.98160       193.388       203.369    
  16  0.845372     -0.167978      -2.42938       2.42938       193.212       195.641    
  17  0.132369      -2.02216      -29.2453       29.2453       189.841       219.086    
  18  0.734515E-01  -2.61113      -37.7633       37.7633       195.694       233.458    
  19  0.391205     -0.938523      -13.5733       13.5733       186.584       200.157    
  20  0.376983     -0.975555      -14.1089       14.1089       175.715       189.824    
  21  0.315463      -1.15371      -16.6855       16.6855       192.832       209.518    
  22  0.267113      -1.32008      -19.0916       19.0916       191.913       211.005    
  23  0.965292     -0.353243E-01 -0.510875      0.510875       192.832       193.343    
  24  0.954592     -0.464714E-01 -0.672090      0.672090       189.414       190.086    
  25  0.992414     -0.761515E-02 -0.110134      0.110134       189.277       189.387    
  26  0.867953E-02  -4.74679      -68.6501       68.6501       188.847       257.497    
  27  0.829585     -0.186829      -2.70200       2.70200       190.448       193.150    
  28  0.349695      -1.05069      -15.1956       15.1956       192.192       207.388    
  29  0.673511     -0.395251      -5.71629       5.71629       191.810       197.526    
  30  0.340696      -1.07676      -15.5726       15.5726       187.801       203.374    
  31  0.558731     -0.582087      -8.41838       8.41838       187.767       196.186    
  32  0.747295     -0.291295      -4.21283       4.21283       190.223       194.436    
  33  0.123287      -2.09324      -30.2734       30.2734       185.330       215.604    
  34  0.355051      -1.03549      -14.9757       14.9757       186.433       201.409    
  35  0.511895     -0.669636      -9.68455       9.68455       191.708       201.393    
  36  0.571856E-01  -2.86145      -41.3835       41.3835       193.650       235.033    
  37  0.507517     -0.678226      -9.80879       9.80879       191.444       201.253    
  38  0.326770      -1.11850      -16.1762       16.1762       193.218       209.394    
  39  0.736001     -0.306523      -4.43307       4.43307       192.392       196.825    
  40  0.970046     -0.304120E-01 -0.439831      0.439831       191.517       191.957    
  41  0.673510     -0.395253      -5.71631       5.71631       191.114       196.830    
  42  0.335032      -1.09353      -15.8151       15.8151       203.127       218.943    
  43  0.872321E-01  -2.43918      -35.2765       35.2765       185.247       220.523    
  44  0.749956     -0.287741      -4.16143       4.16143       192.707       196.869    
  45  0.159001      -1.83884      -26.5941       26.5941       192.177       218.772    
  46  0.529687     -0.635468      -9.19041       9.19041       188.127       197.317    
  47  0.142415      -1.94901      -28.1874       28.1874       189.745       217.932    
  48  0.803387     -0.218919      -3.16609       3.16609       192.832       195.998    
  49  0.709133     -0.343713      -4.97092       4.97092       185.359       190.330    
  50  0.261172      -1.34258      -19.4169       19.4169       189.875       209.291    
  51  0.106599      -2.23868      -32.3768       32.3768       190.529       222.906    
  52  0.955666     -0.453468E-01 -0.655824      0.655824       201.904       202.560    
  53  0.376236     -0.977539      -14.1376       14.1376       196.089       210.226    
  54  0.890774     -0.115665      -1.67280       1.67280       191.640       193.313    
  55  0.554077     -0.590452      -8.53937       8.53937       189.670       198.209    
  56  0.892825E-01  -2.41595      -34.9405       34.9405       204.512       239.453    
  57  0.941033     -0.607774E-01 -0.878988      0.878988       215.979       216.858    
  58  0.209380E-01  -3.86619      -55.9145       55.9145       192.832       248.747    
  59  0.427794     -0.849113      -12.2802       12.2802       189.576       201.856    
  60  0.194887      -1.63533      -23.6509       23.6509       184.706       208.357    
  61  0.840289     -0.174009      -2.51659       2.51659       174.483       177.000    
  62  0.634527     -0.454875      -6.57860       6.57860       191.800       198.378    
  63  0.159135      -1.83800      -26.5819       26.5819       190.902       217.484    
  64  0.182987      -1.69834      -24.5621       24.5621       189.474       214.036    
  65  0.520726     -0.652532      -9.43719       9.43719       193.483       202.920    
  66  0.249623      -1.38781      -20.0710       20.0710       188.818       208.889    
  67  0.801631     -0.221107      -3.19774       3.19774       192.832       196.030    
  68  0.329011      -1.11166      -16.0773       16.0773       240.974       257.052    
  69  0.995152     -0.485930E-02 -0.702773E-01  0.702773E-01   186.626       186.696    
  70  0.187107      -1.67607      -24.2401       24.2401       204.357       228.597    
  71  0.122259      -2.10161      -30.3944       30.3944       187.446       217.841    
  72  0.311222      -1.16725      -16.8812       16.8812       189.440       206.321    
loop,thermsimp(1:2)       89   1.90212       3.86909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235        192.60          0.84          1.11         25.30          0.13          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       89
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       90
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      234     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -26.7431       26.7431       174.483       201.227    
   2  0.894146     -0.111886      -1.61814       1.61814       181.185       182.803    
   3  0.721270     -0.326741      -4.72547       4.72547       186.626       191.351    
   4  0.536866     -0.622006      -8.99571       8.99571       187.149       196.145    
   5  0.418107     -0.872017      -12.6115       12.6115       189.277       201.889    
   6  0.391189     -0.938564      -13.5739       13.5739       175.715       189.289    
   7  0.799669     -0.223558      -3.23318       3.23318       189.414       192.647    
   8  0.595070     -0.519076      -7.50710       7.50710       185.359       192.867    
   9  0.384356E-03  -7.86394      -113.732       113.732       185.450       299.182    
  10  0.654302     -0.424187      -6.13477       6.13477       187.201       193.335    
  11  0.873355     -0.135413      -1.95840       1.95840       191.517       193.476    
  12  0.303212      -1.19332      -17.2583       17.2583       190.448       207.706    
  13  0.434159     -0.834344      -12.0666       12.0666       191.640       203.707    
  14  0.970825     -0.296089E-01 -0.428217      0.428217       192.832       193.261    
  15  0.405896     -0.901659      -13.0402       13.0402       190.223       203.263    
  16  0.250423      -1.38461      -20.0248       20.0248       191.159       211.184    
  17  0.517030     -0.659654      -9.54019       9.54019       193.212       202.752    
  18  0.165468      -1.79897      -26.0175       26.0175       192.832       218.850    
  19  0.679403     -0.386541      -5.59032       5.59032       192.832       198.423    
  20  0.554013     -0.590567      -8.54103       8.54103       187.767       196.308    
  21  0.211764E-01  -3.85487      -55.7508       55.7508       185.115       240.866    
  22  0.453828     -0.790038      -11.4259       11.4259       192.392       203.818    
  23  0.377409     -0.974426      -14.0926       14.0926       191.114       205.206    
  24  0.496879     -0.699408      -10.1151       10.1151       192.707       202.822    
  25  0.214619      -1.53889      -22.2561       22.2561       188.127       210.383    
  26  0.724154     -0.322751      -4.66777       4.66777       192.846       197.514    
  27  0.385609     -0.952932      -13.7817       13.7817       191.810       205.592    
  28  0.777864     -0.251204      -3.63301       3.63301       191.801       195.434    
  29  0.709283     -0.343500      -4.96784       4.96784       189.670       194.638    
  30  0.191760      -1.65151      -23.8849       23.8849       191.800       215.684    
  31  0.347616      -1.05666      -15.2818       15.2818       186.584       201.866    
  32  0.191581      -1.65244      -23.8984       23.8984       191.444       215.342    
  33  0.770989     -0.260081      -3.76141       3.76141       191.708       195.469    
  34  0.788566E-01  -2.54012      -36.7363       36.7363       186.433       223.169    
  35  0.229474      -1.47197      -21.2882       21.2882       189.576       210.864    
  36  0.339326      -1.08079      -15.6309       15.6309       201.904       217.535    
  37  0.220886      -1.51011      -21.8398       21.8398       193.483       215.323    
  38  0.223644      -1.49770      -21.6604       21.6604       193.388       215.048    
  39  0.138287      -1.97842      -28.6128       28.6128       187.801       216.414    
  40  0.796402     -0.227651      -3.29239       3.29239       183.165       186.458    
  41  0.104384      -2.25968      -32.6804       32.6804       189.440       222.120    
  42  0.919642     -0.837713E-01  -1.21154       1.21154       192.192       193.404    
  43  0.360767      -1.01952      -14.7448       14.7448       184.706       199.451    
  44  0.924300     -0.787181E-01  -1.13845       1.13845       188.818       189.957    
  45  0.561139     -0.577786      -8.35619       8.35619       189.875       198.231    
  46  0.509073E-01  -2.97775      -43.0655       43.0655       193.218       236.284    
  47  0.715469     -0.334817      -4.84227       4.84227       192.832       197.675    
  48  0.294040E-01  -3.52662      -51.0035       51.0035       183.292       234.295    
  49  0.264026E-02  -5.93688      -85.8616       85.8616       196.089       281.950    
  50  0.634029     -0.455661      -6.58996       6.58996       191.913       198.503    
  51  0.319148      -1.14210      -16.5176       16.5176       189.841       206.359    
  52  0.495674     -0.701836      -10.1503       10.1503       189.474       199.624    
  53  0.838343     -0.176328      -2.55014       2.55014       185.330       187.880    
  54  0.240556      -1.42480      -20.6061       20.6061       215.979       236.585    
  55  0.919800     -0.835990E-01  -1.20904       1.20904       190.902       192.111    
  56  0.652899     -0.426332      -6.16580       6.16580       183.837       190.003    
  57  0.777375     -0.251832      -3.64211       3.64211       184.490       188.132    
  58  0.988137     -0.119340E-01 -0.172594      0.172594       187.446       187.619    
  59  0.771111     -0.259922      -3.75911       3.75911       189.745       193.504    
  60  0.980963     -0.192203E-01 -0.277972      0.277972       192.845       193.123    
  61  0.358823      -1.02493      -14.8229       14.8229       192.177       207.000    
  62  0.398479     -0.920100      -13.3069       13.3069       203.127       216.434    
  63  0.524779     -0.644778      -9.32506       9.32506       189.841       199.166    
  64  0.391693E-01  -3.23986      -46.8563       46.8563       185.247       232.103    
  65  0.494448     -0.704313      -10.1861       10.1861       190.529       200.715    
  66  0.224697      -1.49300      -21.5924       21.5924       204.357       225.949    
  67  0.585684     -0.534974      -7.73703       7.73703       195.694       203.431    
  68  0.558887     -0.581807      -8.41435       8.41435       193.650       202.064    
  69  0.540529     -0.615206      -8.89738       8.89738       204.512       213.410    
  70  0.314620      -1.15639      -16.7242       16.7242       192.832       209.557    
  71  0.763547     -0.269781      -3.90168       3.90168       240.974       244.876    
  72  0.314721      -1.15607      -16.7196       16.7196       192.598       209.318    
loop,thermsimp(1:2)       90   26.7431       1.61814    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236        195.17          0.84          1.11         25.21          0.04          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    237        212.33          0.84          1.11         25.14          0.10          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    195.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       90
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       91
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      236     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -32.8897       32.8897       181.185       214.075    
   2  0.846291     -0.166892      -2.41366       2.41366       183.165       185.579    
   3  0.167054      -1.78944      -25.8796       25.8796       187.446       213.326    
   4  0.786038     -0.240750      -3.48183       3.48183       185.330       188.812    
   5  0.680218     -0.385341      -5.57297       5.57297       184.490       190.063    
   6  0.843894     -0.169729      -2.45469       2.45469       175.715       178.170    
   7  0.295559      -1.21889      -17.6281       17.6281       188.818       206.446    
   8  0.383493     -0.958433      -13.8613       13.8613       183.837       197.699    
   9  0.867247     -0.142431      -2.05990       2.05990       186.626       188.686    
  10  0.241960      -1.41898      -20.5219       20.5219       190.902       211.424    
  11  0.486925     -0.719645      -10.4078       10.4078       189.414       199.822    
  12  0.750166     -0.287460      -4.15737       4.15737       185.359       189.517    
  13  0.507045     -0.679156      -9.82224       9.82224       192.845       202.668    
  14  0.237743      -1.43656      -20.7762       20.7762       192.832       213.609    
  15  0.256837E-01  -3.66190      -52.9599       52.9599       187.201       240.161    
  16  0.776460     -0.253010      -3.65913       3.65913       192.192       195.851    
  17  0.316300      -1.15106      -16.6472       16.6472       191.517       208.164    
  18  0.493161     -0.706919      -10.2238       10.2238       189.745       199.968    
  19  0.807271     -0.214096      -3.09635       3.09635       189.670       192.766    
  20  0.338915      -1.08201      -15.6484       15.6484       191.801       207.449    
  21  0.132986      -2.01751      -29.1781       29.1781       191.708       220.886    
  22  0.409975     -0.891659      -12.8956       12.8956       187.149       200.045    
  23  0.525021     -0.644317      -9.31839       9.31839       187.767       197.086    
  24  0.393064     -0.933783      -13.5048       13.5048       192.846       206.351    
  25  0.176068      -1.73689      -25.1196       25.1196       192.832       217.952    
  26  0.965490     -0.351191E-01 -0.507908      0.507908       189.875       190.382    
  27  0.387767     -0.947350      -13.7010       13.7010       192.832       206.533    
  28  0.936248     -0.658753E-01 -0.952716      0.952716       191.913       192.866    
  29  0.914720     -0.891370E-01  -1.28914       1.28914       189.841       191.130    
  30  0.332171      -1.10211      -15.9391       15.9391       184.706       200.645    
  31  0.845314E-01  -2.47063      -35.7313       35.7313       189.474       225.205    
  32  0.687741     -0.374343      -5.41391       5.41391       190.529       195.943    
  33  0.899776     -0.105610      -1.52737       1.52737       174.483       176.011    
  34  0.558791     -0.581980      -8.41684       8.41684       186.584       195.001    
  35  0.882799     -0.124658      -1.80286       1.80286       189.277       191.080    
  36  0.235569      -1.44575      -20.9091       20.9091       193.650       214.559    
  37  0.533400     -0.628484      -9.08940       9.08940       193.212       202.301    
  38  0.147169      -1.91617      -27.7125       27.7125       192.707       220.420    
  39  0.966208E-01  -2.33696      -33.7981       33.7981       190.223       224.021    
  40  0.952887     -0.482588E-01 -0.697939      0.697939       195.694       196.392    
  41  0.155551      -1.86078      -26.9114       26.9114       191.640       218.551    
  42  0.645067     -0.438401      -6.34035       6.34035       192.392       198.732    
  43  0.394254     -0.930759      -13.4610       13.4610       191.114       204.575    
  44  0.546893     -0.603501      -8.72809       8.72809       191.810       200.538    
  45  0.390314     -0.940803      -13.6063       13.6063       189.841       203.448    
  46  0.311561      -1.16616      -16.8655       16.8655       192.177       209.043    
  47  0.752427E-01  -2.58704      -37.4148       37.4148       190.448       227.863    
  48  0.144673      -1.93328      -27.9600       27.9600       192.598       220.558    
  49  0.297567      -1.21212      -17.5301       17.5301       192.832       210.362    
  50  0.544131     -0.608565      -8.80133       8.80133       188.127       196.928    
  51  0.750603E-01  -2.58946      -37.4499       37.4499       189.576       227.026    
  52  0.127547      -2.05927      -29.7821       29.7821       191.159       220.941    
  53  0.839209     -0.175296      -2.53520       2.53520       204.512       207.048    
  54  0.718305     -0.330861      -4.78505       4.78505       193.388       198.173    
  55  0.246952      -1.39856      -20.2266       20.2266       193.483       213.710    
  56  0.550710     -0.596548      -8.62753       8.62753       191.444       200.072    
  57  0.588510     -0.530162      -7.66742       7.66742       191.800       199.467    
  58  0.361548      -1.01736      -14.7135       14.7135       187.801       202.515    
  59  0.962524     -0.381965E-01 -0.552414      0.552414       203.127       203.680    
  60  0.510442     -0.672478      -9.72566       9.72566       201.904       211.630    
  61  0.177498      -1.72880      -25.0026       25.0026       192.832       217.835    
  62  0.775349     -0.254441      -3.67984       3.67984       189.440       193.120    
  63  0.313518E-01  -3.46248      -50.0759       50.0759       186.433       236.509    
  64  0.136553      -1.99105      -28.7953       28.7953       204.357       233.152    
  65  0.694627E-01  -2.66696      -38.5708       38.5708       185.247       223.817    
  66  0.784048     -0.243285      -3.51849       3.51849       183.292       186.810    
  67  0.561706     -0.576776      -8.34159       8.34159       193.218       201.560    
  68  0.992642E-01  -2.30997      -33.4078       33.4078       215.979       249.387    
  69  0.111580      -2.19301      -31.7163       31.7163       185.115       216.831    
  70  0.655988     -0.421613      -6.09755       6.09755       240.974       247.072    
  71  0.739953     -0.301169      -4.35563       4.35563       196.089       200.444    
  72  0.899949     -0.105417      -1.52458       1.52458       195.166       196.690    
loop,thermsimp(1:2)       91   32.8897       2.41366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238        199.18          0.84          1.11         25.12          0.11          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    199.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       91
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       92
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      237     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -21.9887       21.9887       174.483       196.472    
   2  0.389473     -0.942961      -13.6375       13.6375       175.715       189.352    
   3  0.919121     -0.843378E-01  -1.21973       1.21973       183.165       184.385    
   4  0.970518     -0.299250E-01 -0.432788      0.432788       183.292       183.724    
   5  0.713317     -0.337830      -4.88584       4.88584       186.626       191.512    
   6  0.639607     -0.446902      -6.46329       6.46329       185.330       191.793    
   7  0.712661     -0.338749      -4.89913       4.89913       185.359       190.259    
   8  0.212311      -1.54970      -22.4125       22.4125       184.490       206.902    
   9  0.831769     -0.184200      -2.66398       2.66398       189.875       192.539    
  10  0.794875     -0.229571      -3.32015       3.32015       189.277       192.598    
  11  0.909815     -0.945137E-01  -1.36690       1.36690       189.841       191.208    
  12  0.753651E-01  -2.58541      -37.3913       37.3913       189.670       227.061    
  13  0.676081     -0.391442      -5.66120       5.66120       191.913       197.575    
  14  0.597437     -0.515107      -7.44970       7.44970       189.440       196.890    
  15  0.146947      -1.91768      -27.7343       27.7343       186.584       214.318    
  16  0.854910     -0.156760      -2.26712       2.26712       192.192       194.459    
  17  0.984999     -0.151146E-01 -0.218593      0.218593       190.529       190.747    
  18  0.533419     -0.628448      -9.08888       9.08888       195.694       204.783    
  19  0.383774     -0.957703      -13.8507       13.8507       195.166       209.016    
  20  0.691729     -0.368561      -5.33029       5.33029       188.127       193.457    
  21  0.313732E-01  -3.46180      -50.0660       50.0660       187.767       237.833    
  22  0.415635     -0.877947      -12.6972       12.6972       183.837       196.535    
  23  0.288746      -1.24221      -17.9653       17.9653       193.388       211.353    
  24  0.176464      -1.73464      -25.0870       25.0870       192.392       217.479    
  25  0.881312     -0.126344      -1.82724       1.82724       191.800       193.627    
  26  0.962783     -0.379267E-01 -0.548513      0.548513       189.414       189.963    
  27  0.415450     -0.878393      -12.7037       12.7037       189.745       202.448    
  28  0.271836      -1.30256      -18.8381       18.8381       187.149       205.988    
  29  0.926655     -0.761736E-01  -1.10165       1.10165       191.444       192.546    
  30  0.277790      -1.28089      -18.5248       18.5248       196.089       214.614    
  31  0.189974      -1.66087      -24.0202       24.0202       191.810       215.830    
  32  0.410540     -0.890281      -12.8756       12.8756       184.706       197.582    
  33  0.952387     -0.487839E-01 -0.705533      0.705533       193.218       193.924    
  34  0.896015     -0.109798      -1.58794       1.58794       193.212       194.800    
  35  0.121549E-01  -4.41002      -63.7796       63.7796       187.801       251.581    
  36  0.723911     -0.323087      -4.67263       4.67263       192.845       197.518    
  37  0.759053     -0.275683      -3.98705       3.98705       189.841       193.828    
  38  0.969929     -0.305320E-01 -0.441567      0.441567       203.127       203.569    
  39  0.852636     -0.159422      -2.30563       2.30563       191.114       193.419    
  40  0.730471     -0.314065      -4.54215       4.54215       192.846       197.388    
  41  0.528358     -0.637981      -9.22675       9.22675       188.818       198.045    
  42  0.404403     -0.905344      -13.0935       13.0935       192.832       205.926    
  43  0.232822      -1.45748      -21.0787       21.0787       204.512       225.591    
  44  0.847643     -0.165296      -2.39058       2.39058       191.801       194.191    
  45  0.429393E-01  -3.14797      -45.5272       45.5272       191.517       237.045    
  46  0.673157     -0.395777      -5.72390       5.72390       192.177       197.901    
  47  0.806068E-01  -2.51817      -36.4189       36.4189       192.832       229.251    
  48  0.926018     -0.768619E-01  -1.11161       1.11161       190.902       192.014    
  49  0.167973      -1.78395      -25.8003       25.8003       201.904       227.704    
  50  0.780773     -0.247471      -3.57903       3.57903       187.446       191.025    
  51  0.565702E-01  -2.87227      -41.5400       41.5400       192.832       234.372    
  52  0.646011     -0.436939      -6.31920       6.31920       193.483       199.802    
  53  0.455316     -0.786763      -11.3785       11.3785       181.185       192.564    
  54  0.410066     -0.891437      -12.8923       12.8923       193.650       206.542    
  55  0.934064     -0.682104E-01 -0.986488      0.986488       185.115       186.101    
  56  0.511079     -0.671231      -9.70763       9.70763       192.832       202.540    
  57  0.578130     -0.547957      -7.92478       7.92478       192.832       200.757    
  58  0.458047     -0.780783      -11.2920       11.2920       191.640       202.932    
  59  0.223630      -1.49776      -21.6613       21.6613       192.707       214.369    
  60  0.952824E-01  -2.35091      -33.9999       33.9999       192.598       226.598    
  61  0.995385     -0.462583E-02 -0.669007E-01  0.669007E-01   191.708       191.775    
  62  0.675298     -0.392602      -5.67797       5.67797       191.159       196.837    
  63  0.728172     -0.317218      -4.58774       4.58774       185.247       189.834    
  64  0.240868      -1.42350      -20.5873       20.5873       190.223       210.811    
  65  0.188028      -1.67116      -24.1691       24.1691       189.474       213.643    
  66  0.645358     -0.437951      -6.33383       6.33383       189.576       195.910    
  67  0.170606      -1.76840      -25.5753       25.5753       190.448       216.023    
  68  0.827167     -0.189749      -2.74423       2.74423       204.357       207.101    
  69  0.457642     -0.781668      -11.3048       11.3048       186.433       197.738    
  70  0.819756E-01  -2.50133      -36.1754       36.1754       187.201       223.376    
  71  0.965811     -0.347876E-01 -0.503113      0.503113       240.974       241.477    
  72  0.806837     -0.214633      -3.10412       3.10412       199.184       202.288    
loop,thermsimp(1:2)       92   21.9887       13.6375    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239        193.30          0.84          1.11         25.07          0.16          0.04         27.22
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    240        219.39          0.84          1.11         25.08          0.10          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    193.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       92
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       93
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      239     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -27.5731       27.5731       183.292       210.865    
   2  0.695074     -0.363738      -5.26053       5.26053       183.165       188.426    
   3  0.541180     -0.614003      -8.87997       8.87997       185.115       193.995    
   4  0.189791      -1.66183      -24.0341       24.0341       175.715       199.749    
   5  0.245553      -1.40424      -20.3087       20.3087       185.247       205.555    
   6  0.641474     -0.443986      -6.42112       6.42112       189.414       195.835    
   7  0.308462      -1.17616      -17.0101       17.0101       185.359       202.370    
   8  0.478005     -0.738133      -10.6752       10.6752       190.529       201.204    
   9  0.395759     -0.926951      -13.4060       13.4060       187.446       200.852    
  10  0.438776E-01  -3.12635      -45.2146       45.2146       189.841       235.055    
  11  0.294628E-01  -3.52463      -50.9747       50.9747       186.626       237.600    
  12  0.331052E-01  -3.40806      -49.2889       49.2889       191.708       240.997    
  13  0.916325E-01  -2.38997      -34.5648       34.5648       185.330       219.895    
  14  0.985908     -0.141919E-01 -0.205249      0.205249       190.902       191.107    
  15  0.511724     -0.669970      -9.68939       9.68939       189.875       199.564    
  16  0.185695      -1.68365      -24.3497       24.3497       191.444       215.794    
  17  0.830711     -0.185474      -2.68240       2.68240       181.185       183.868    
  18  0.765179E-04  -9.47799      -137.075       137.075       189.277       326.352    
  19  0.129365      -2.04512      -29.5774       29.5774       191.114       220.691    
  20  0.796363     -0.227700      -3.29309       3.29309       188.127       191.420    
  21  0.589256     -0.528895      -7.64911       7.64911       191.800       199.449    
  22  0.770995     -0.260073      -3.76129       3.76129       189.841       193.603    
  23  0.685430     -0.377709      -5.46259       5.46259       193.218       198.681    
  24  0.487688     -0.718080      -10.3852       10.3852       191.801       202.186    
  25  0.114898      -2.16371      -31.2925       31.2925       192.192       223.485    
  26  0.165093      -1.80124      -26.0504       26.0504       193.212       219.262    
  27  0.302275      -1.19642      -17.3031       17.3031       189.576       206.879    
  28  0.123669      -2.09014      -30.2285       30.2285       174.483       204.712    
  29  0.960526     -0.402739E-01 -0.582458      0.582458       183.837       184.420    
  30  0.744557     -0.294966      -4.26592       4.26592       191.159       195.425    
  31  0.418436     -0.871232      -12.6001       12.6001       189.440       202.040    
  32  0.624411     -0.470947      -6.81103       6.81103       192.846       199.657    
  33  0.920055     -0.833222E-01  -1.20504       1.20504       192.845       194.050    
  34  0.330507      -1.10713      -16.0118       16.0118       191.913       207.925    
  35  0.889566     -0.117022      -1.69242       1.69242       184.706       186.398    
  36  0.269410      -1.31152      -18.9678       18.9678       186.433       205.401    
  37  0.458780     -0.779184      -11.2689       11.2689       192.177       203.446    
  38  0.952588     -0.485730E-01 -0.702483      0.702483       188.818       189.521    
  39  0.213836      -1.54254      -22.3089       22.3089       193.483       215.792    
  40  0.460697     -0.775015      -11.2086       11.2086       192.832       204.041    
  41  0.571693     -0.559153      -8.08671       8.08671       199.184       207.271    
  42  0.201363      -1.60265      -23.1782       23.1782       189.745       212.923    
  43  0.707817     -0.345570      -4.99778       4.99778       192.832       197.830    
  44  0.927118     -0.756745E-01  -1.09444       1.09444       191.640       192.734    
  45  0.288916      -1.24162      -17.9568       17.9568       203.127       221.084    
  46  0.702737     -0.352773      -5.10195       5.10195       195.694       200.796    
  47  0.253190      -1.37362      -19.8658       19.8658       192.832       212.698    
  48  0.709086     -0.343779      -4.97187       4.97187       187.149       192.121    
  49  0.399421     -0.917738      -13.2727       13.2727       193.650       206.923    
  50  0.837301     -0.177572      -2.56812       2.56812       184.490       187.058    
  51  0.906694     -0.979507E-01  -1.41660       1.41660       204.357       205.773    
  52  0.479547     -0.734913      -10.6286       10.6286       195.166       205.794    
  53  0.573668     -0.555704      -8.03683       8.03683       190.223       198.260    
  54  0.616113     -0.484325      -7.00452       7.00452       193.388       200.392    
  55  0.899004     -0.106467      -1.53978       1.53978       189.474       191.013    
  56  0.668105     -0.403310      -5.83284       5.83284       186.584       192.417    
  57  0.464354     -0.767107      -11.0942       11.0942       192.707       203.802    
  58  0.298472E-01  -3.51166      -50.7872       50.7872       196.089       246.876    
  59  0.458507     -0.779779      -11.2775       11.2775       191.810       203.087    
  60  0.372295E-01  -3.29065      -47.5908       47.5908       190.448       238.039    
  61  0.349332      -1.05173      -15.2106       15.2106       192.392       207.602    
  62  0.396867     -0.924153      -13.3655       13.3655       187.201       200.566    
  63  0.599776     -0.511199      -7.39317       7.39317       204.512       211.905    
  64  0.175124      -1.74226      -25.1973       25.1973       192.598       217.795    
  65  0.723227     -0.324033      -4.68630       4.68630       189.670       194.356    
  66  0.738639     -0.302946      -4.38133       4.38133       201.904       206.285    
  67  0.691263     -0.369235      -5.34004       5.34004       192.832       198.172    
  68  0.575263     -0.552928      -7.99669       7.99669       192.832       200.829    
  69  0.312385      -1.16352      -16.8273       16.8273       191.517       208.345    
  70  0.708595     -0.344472      -4.98190       4.98190       187.767       192.749    
  71  0.674476     -0.393819      -5.69558       5.69558       240.974       246.670    
  72  0.196387      -1.62767      -23.5400       23.5400       193.304       216.844    
loop,thermsimp(1:2)       93   27.5731       5.26053    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241        191.93          0.84          1.11         25.11          0.13          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    242        197.70          0.84          1.11         25.19          0.04          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    191.93       0.9236     -1.401      1.750     -102.6     0.9428    
                      0.3289      1.858     -99.70      3.762     0.1256    
                       2.059     -1.476      1.954      0.000     -40.00    
                      -1.804      0.000      0.000      0.000     -1.221    

                      -2.500     0.2855E+05 0.2988E+05  0.000      0.000    
                     -0.5672     -6.219     -4.441     -7.656      3.748    
                      -14.42     -2.907      1087.      0.000      3002.    

                      0.1238E+05  8519.      3816.     -684.0      3429.    
                       4678.    -0.2834E-02 0.2731E-01  0.000     0.2731E-01
                      0.2731E-01 0.1470E-01 0.2050E-01 0.8940E-02 0.2731E-01

                     -0.8898E-01 -1.469      0.000    -0.2207E-01 0.2469E-01
                       0.000     0.1271E-01-0.8786E-02 0.2731E-01 0.1485E-01
                      0.2731E-01 0.6788E-02-0.1072     -1.016      0.000    

                      0.3230E-01-0.2696    -0.5244    -0.5090    -0.1468    
                      0.2166      8.909      8.781     -5335.     -4.000    
                     -0.3866    -0.6736      8.948      8.802     -5455.    

                      -4.000     0.1714    -0.6627      8.927      8.827    
                      -4184.     -7.000    -0.3512    -0.7785      8.930    
                       8.796     -5444.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       93
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       94
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      241     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -2.48230       2.48230       181.185       183.668    
   2  0.478368     -0.737375      -10.6642       10.6642       183.837       194.502    
   3  0.283498      -1.26055      -18.2306       18.2306       184.706       202.937    
   4  0.520516     -0.652935      -9.44302       9.44302       184.490       193.933    
   5  0.703282E-01  -2.65458      -38.3917       38.3917       183.165       221.557    
   6  0.914137     -0.897748E-01  -1.29836       1.29836       188.818       190.117    
   7  0.479535     -0.734938      -10.6290       10.6290       189.474       200.103    
   8  0.921875     -0.813456E-01  -1.17645       1.17645       190.902       192.079    
   9  0.739547     -0.301718      -4.36357       4.36357       188.127       192.490    
  10  0.790753     -0.234770      -3.39535       3.39535       187.149       190.545    
  11  0.212247E-01  -3.85259      -55.7178       55.7178       186.584       242.302    
  12  0.286971      -1.24837      -18.0545       18.0545       191.640       209.694    
  13  0.695666     -0.362886      -5.24821       5.24821       187.767       193.016    
  14  0.534590     -0.626255      -9.05716       9.05716       189.841       198.899    
  15  0.945577     -0.559603E-01 -0.809322      0.809322       185.115       185.924    
  16  0.619446     -0.478930      -6.92649       6.92649       192.845       199.772    
  17  0.291083E-01  -3.53673      -51.1497       51.1497       189.670       240.819    
  18  0.372584E-01  -3.28988      -47.5796       47.5796       191.159       238.738    
  19  0.713241     -0.337936      -4.88737       4.88737       189.414       194.302    
  20  0.280281      -1.27196      -18.3956       18.3956       192.832       211.228    
  21  0.254796      -1.36729      -19.7743       19.7743       192.832       212.607    
  22  0.498598     -0.695955      -10.0652       10.0652       190.223       200.288    
  23  0.515261E-01  -2.96567      -42.8907       42.8907       193.218       236.109    
  24  0.347627      -1.05662      -15.2813       15.2813       191.800       207.081    
  25  0.696212     -0.362102      -5.23687       5.23687       189.875       195.111    
  26  0.707749E-01  -2.64825      -38.3001       38.3001       192.846       231.146    
  27  0.364523E-01  -3.31175      -47.8959       47.8959       175.715       223.611    
  28  0.895087E-02  -4.71600      -68.2049       68.2049       193.388       261.593    
  29  0.333194      -1.09903      -15.8947       15.8947       187.201       203.095    
  30  0.451375     -0.795457      -11.5042       11.5042       195.694       207.198    
  31  0.849961E-01  -2.46515      -35.6520       35.6520       192.832       228.484    
  32  0.524791     -0.644756      -9.32473       9.32473       187.446       196.771    
  33  0.641068     -0.444619      -6.43028       6.43028       190.529       196.959    
  34  0.757376     -0.277895      -4.01904       4.01904       189.440       193.459    
  35  0.760597     -0.273651      -3.95766       3.95766       191.801       195.758    
  36  0.709070     -0.343801      -4.97219       4.97219       185.359       190.332    
  37  0.794718     -0.229768      -3.32300       3.32300       191.810       195.133    
  38  0.869679     -0.139632      -2.01941       2.01941       192.177       194.197    
  39  0.229100E-01  -3.77618      -54.6128       54.6128       192.707       247.320    
  40  0.935590     -0.665776E-01 -0.962874      0.962874       192.832       193.795    
  41  0.889453     -0.117149      -1.69425       1.69425       174.483       176.178    
  42  0.529054     -0.636665      -9.20772       9.20772       186.433       195.641    
  43  0.907902     -0.966186E-01  -1.39734       1.39734       185.247       186.644    
  44  0.693802     -0.365568      -5.28700       5.28700       204.357       209.644    
  45  0.883803     -0.123521      -1.78642       1.78642       195.166       196.952    
  46  0.275134E-01  -3.59308      -51.9647       51.9647       201.904       253.869    
  47  0.324767      -1.12465      -16.2651       16.2651       189.576       205.841    
  48  0.853326     -0.158614      -2.29394       2.29394       193.650       195.944    
  49  0.325639      -1.12197      -16.2264       16.2264       199.184       215.410    
  50  0.773280     -0.257115      -3.71850       3.71850       192.392       196.110    
  51  0.108890      -2.21741      -32.0692       32.0692       191.913       223.983    
  52  0.188532E-01  -3.97107      -57.4314       57.4314       191.517       248.949    
  53  0.970927     -0.295045E-01 -0.426707      0.426707       183.292       183.718    
  54  0.549714     -0.598357      -8.65369       8.65369       204.512       213.166    
  55  0.937888E-01  -2.36671      -34.2284       34.2284       192.832       227.061    
  56  0.293516      -1.22582      -17.7284       17.7284       189.745       207.473    
  57  0.598789     -0.512846      -7.41699       7.41699       193.483       200.900    
  58  0.173412      -1.75209      -25.3394       25.3394       191.444       216.783    
  59  0.552776     -0.592802      -8.57335       8.57335       193.304       201.877    
  60  0.586717     -0.533213      -7.71155       7.71155       192.598       200.310    
  61  0.902886     -0.102159      -1.47747       1.47747       193.212       194.689    
  62  0.423679     -0.858778      -12.4200       12.4200       185.330       197.750    
  63  0.796344E-01  -2.53031      -36.5944       36.5944       191.114       227.708    
  64  0.894023     -0.112024      -1.62014       1.62014       203.127       204.748    
  65  0.840662     -0.173566      -2.51019       2.51019       192.192       194.703    
  66  0.730459     -0.314083      -4.54240       4.54240       189.841       194.383    
  67  0.652850     -0.426409      -6.16690       6.16690       186.626       192.793    
  68  0.856696     -0.154672      -2.23694       2.23694       190.448       192.685    
  69  0.562214     -0.575873      -8.32852       8.32852       191.708       200.037    
  70  0.680885     -0.384362      -5.55881       5.55881       240.974       246.533    
  71  0.353093      -1.04102      -15.0557       15.0557       196.089       211.144    
  72  0.588480     -0.530213      -7.66817       7.66817       191.928       199.596    
loop,thermsimp(1:2)       94   2.48230       10.6642    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243        187.22          0.83          1.11         25.06          0.13          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       94
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       95
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      242     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -4.26411       4.26411       174.483       178.748    
   2  0.739179     -0.302215      -4.37076       4.37076       181.185       185.556    
   3  0.131167      -2.03128      -29.3772       29.3772       183.292       212.669    
   4  0.523356     -0.647493      -9.36432       9.36432       185.115       194.479    
   5  0.660412     -0.414891      -6.00033       6.00033       185.247       191.247    
   6  0.433074E-01  -3.13943      -45.4038       45.4038       188.818       234.222    
   7  0.480352     -0.733236      -10.6044       10.6044       185.359       195.964    
   8  0.808114     -0.213053      -3.08126       3.08126       187.149       190.231    
   9  0.723804     -0.323235      -4.67476       4.67476       190.902       195.577    
  10  0.322682      -1.13109      -16.3583       16.3583       188.127       204.485    
  11  0.898907     -0.106576      -1.54135       1.54135       190.448       191.989    
  12  0.359972      -1.02173      -14.7767       14.7767       186.626       201.402    
  13  0.879118     -0.128836      -1.86328       1.86328       187.767       189.631    
  14  0.963559     -0.371220E-01 -0.536874      0.536874       189.440       189.977    
  15  0.662848     -0.411210      -5.94709       5.94709       192.832       198.779    
  16  0.648402     -0.433244      -6.26576       6.26576       184.490       190.755    
  17  0.375343     -0.979916      -14.1720       14.1720       192.177       206.349    
  18  0.812441     -0.207712      -3.00402       3.00402       189.414       192.418    
  19  0.248177E-01  -3.69620      -53.4560       53.4560       189.841       243.297    
  20  0.653530     -0.425366      -6.15183       6.15183       183.837       189.989    
  21  0.712244     -0.339334      -4.90759       4.90759       193.212       198.119    
  22  0.358229      -1.02658      -14.8469       14.8469       192.192       207.039    
  23  0.325518      -1.12234      -16.2317       16.2317       189.875       206.106    
  24  0.770349     -0.260912      -3.77341       3.77341       191.810       195.583    
  25  0.633518E-01  -2.75905      -39.9026       39.9026       186.433       226.336    
  26  0.168796      -1.77907      -25.7296       25.7296       191.801       217.530    
  27  0.562007     -0.576241      -8.33384       8.33384       193.650       201.984    
  28  0.156316      -1.85588      -26.8405       26.8405       192.392       219.232    
  29  0.967732     -0.328002E-01 -0.474371      0.474371       187.446       187.921    
  30  0.538071     -0.619766      -8.96331       8.96331       195.166       204.129    
  31  0.967495     -0.330453E-01 -0.477915      0.477915       190.529       191.007    
  32  0.771619     -0.259265      -3.74959       3.74959       185.330       189.080    
  33  0.246044      -1.40225      -20.2799       20.2799       189.841       210.121    
  34  0.700731     -0.355631      -5.14329       5.14329       191.928       197.071    
  35  0.382714     -0.960468      -13.8907       13.8907       192.845       206.736    
  36  0.580395     -0.544047      -7.86824       7.86824       191.708       199.576    
  37  0.305131      -1.18701      -17.1671       17.1671       189.474       206.641    
  38  0.624250     -0.471204      -6.81475       6.81475       190.223       197.038    
  39  0.575432     -0.552634      -7.99242       7.99242       192.598       200.590    
  40  0.701335     -0.354770      -5.13083       5.13083       193.483       198.614    
  41  0.290211      -1.23715      -17.8921       17.8921       193.304       211.196    
  42  0.140976      -1.95916      -28.3342       28.3342       184.706       213.040    
  43  0.275714      -1.28839      -18.6333       18.6333       187.201       205.834    
  44  0.856479     -0.154925      -2.24060       2.24060       203.127       205.368    
  45  0.994286     -0.573084E-02 -0.828818E-01  0.828818E-01   189.576       189.659    
  46  0.913008     -0.910102E-01  -1.31623       1.31623       191.800       193.116    
  47  0.204063      -1.58933      -22.9855       22.9855       195.694       218.680    
  48  0.388833     -0.944605      -13.6613       13.6613       189.745       203.406    
  49  0.781619     -0.246387      -3.56336       3.56336       204.357       207.920    
  50  0.373421     -0.985049      -14.2462       14.2462       191.640       205.886    
  51  0.834918     -0.180422      -2.60934       2.60934       196.089       198.698    
  52  0.174969      -1.74315      -25.2101       25.2101       192.832       218.042    
  53  0.531353     -0.632329      -9.14501       9.14501       192.832       201.977    
  54  0.339530      -1.08019      -15.6222       15.6222       204.512       220.135    
  55  0.929760     -0.728288E-01  -1.05328       1.05328       199.184       200.237    
  56  0.223523      -1.49824      -21.6682       21.6682       191.444       213.112    
  57  0.557869     -0.583631      -8.44071       8.44071       183.165       191.606    
  58  0.521577     -0.650898      -9.41357       9.41357       175.715       185.129    
  59  0.856336     -0.155092      -2.24301       2.24301       191.913       194.156    
  60  0.645536     -0.437674      -6.32983       6.32983       192.832       199.162    
  61  0.438677     -0.823992      -11.9169       11.9169       191.114       203.030    
  62  0.346732      -1.05920      -15.3186       15.3186       192.832       208.151    
  63  0.902848     -0.102201      -1.47807       1.47807       192.846       194.324    
  64  0.578219     -0.547803      -7.92256       7.92256       193.218       201.141    
  65  0.602211     -0.507147      -7.33458       7.33458       191.159       198.493    
  66  0.432652     -0.837821      -12.1169       12.1169       189.670       201.787    
  67  0.123601      -2.09070      -30.2365       30.2365       186.584       216.821    
  68  0.840915     -0.173264      -2.50582       2.50582       240.974       243.480    
  69  0.638713     -0.448300      -6.48350       6.48350       192.707       199.191    
  70  0.127935      -2.05623      -29.7381       29.7381       191.517       221.255    
  71  0.555419     -0.588033      -8.50438       8.50438       201.904       210.408    
  72  0.860781     -0.149915      -2.16814       2.16814       187.220       189.388    
loop,thermsimp(1:2)       95   4.26411       4.37076    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244        245.25          0.84          1.11         25.16          0.09          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    245.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       95
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   8.25983    

hmean,hstd :    191.197       8.25983    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    191.197       8.25983    
h(1),h(best1),h(np1) :    174.483       174.483       245.251    
htherm(1),htherm(best1),htherm(np1) :    178.748       178.748       243.480    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        1
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      243     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -56.2536       56.2536       174.483       230.737    
   2  0.977100     -0.231667E-01 -0.335046      0.335046       175.715       176.050    
   3  0.491467     -0.710361      -10.2735       10.2735       181.185       191.459    
   4  0.802113E-01  -2.52309      -36.4900       36.4900       187.446       223.936    
   5  0.891044     -0.115361      -1.66840       1.66840       185.330       186.999    
   6  0.397551     -0.922433      -13.3406       13.3406       187.220       200.560    
   7  0.121203      -2.11029      -30.5199       30.5199       187.767       218.287    
   8  0.789985E-01  -2.53833      -36.7103       36.7103       189.576       226.287    
   9  0.921855     -0.813679E-01  -1.17678       1.17678       189.440       190.617    
  10  0.252671      -1.37567      -19.8955       19.8955       183.837       203.733    
  11  0.787271     -0.239182      -3.45915       3.45915       187.149       190.609    
  12  0.634653     -0.454676      -6.57572       6.57572       184.490       191.065    
  13  0.706648     -0.347222      -5.02167       5.02167       190.529       195.550    
  14  0.349740E-01  -3.35315      -48.4947       48.4947       185.247       233.741    
  15  0.686787     -0.375731      -5.43398       5.43398       183.165       188.599    
  16  0.309348      -1.17329      -16.9686       16.9686       190.448       207.416    
  17  0.703748     -0.351336      -5.08117       5.08117       189.414       194.495    
  18  0.985092     -0.150207E-01 -0.217236      0.217236       191.800       192.017    
  19  0.440741     -0.819298      -11.8490       11.8490       191.913       203.762    
  20  0.796112     -0.228015      -3.29765       3.29765       192.846       196.144    
  21  0.451938     -0.794210      -11.4862       11.4862       185.115       196.601    
  22  0.230902      -1.46576      -21.1985       21.1985       190.902       212.101    
  23  0.760212     -0.274159      -3.96500       3.96500       191.810       195.775    
  24  0.250434E-02  -5.98973      -86.6260       86.6260       185.359       271.985    
  25  0.627913E-01  -2.76794      -40.0311       40.0311       190.223       230.254    
  26  0.263128      -1.33511      -19.3090       19.3090       191.928       211.237    
  27  0.177986      -1.72605      -24.9629       24.9629       193.212       218.175    
  28  0.919776     -0.836247E-01  -1.20942       1.20942       191.159       192.368    
  29  0.854272     -0.157506      -2.27792       2.27792       193.483       195.761    
  30  0.648187     -0.433576      -6.27055       6.27055       196.089       202.359    
  31  0.853797     -0.158061      -2.28595       2.28595       192.832       195.118    
  32  0.484551     -0.724533      -10.4785       10.4785       192.832       203.311    
  33  0.423817     -0.858454      -12.4153       12.4153       192.707       205.123    
  34  0.932015     -0.704065E-01  -1.01825       1.01825       191.708       192.726    
  35  0.161906      -1.82074      -26.3323       26.3323       199.184       225.516    
  36  0.812519     -0.207617      -3.00264       3.00264       192.598       195.601    
  37  0.346838      -1.05890      -15.3142       15.3142       193.218       208.532    
  38  0.477141     -0.739943      -10.7014       10.7014       186.626       197.327    
  39  0.931946     -0.704808E-01  -1.01932       1.01932       189.670       190.689    
  40  0.189794      -1.66182      -24.0339       24.0339       192.832       216.866    
  41  0.361902      -1.01638      -14.6994       14.6994       193.650       208.349    
  42  0.775630E-02  -4.85925      -70.2765       70.2765       191.114       261.390    
  43  0.292497      -1.22930      -17.7787       17.7787       189.745       207.523    
  44  0.264300      -1.33067      -19.2447       19.2447       195.166       214.410    
  45  0.529597     -0.635638      -9.19287       9.19287       188.127       197.319    
  46  0.163272      -1.81234      -26.2108       26.2108       203.127       229.338    
  47  0.212593      -1.54838      -22.3933       22.3933       187.201       209.594    
  48  0.359173      -1.02395      -14.8088       14.8088       191.640       206.449    
  49  0.993707     -0.631295E-02 -0.913006E-01  0.913006E-01   189.875       189.966    
  50  0.261479      -1.34140      -19.3999       19.3999       192.177       211.577    
  51  0.441392     -0.817822      -11.8277       11.8277       189.474       201.301    
  52  0.624656     -0.470554      -6.80535       6.80535       192.845       199.651    
  53  0.646784     -0.435743      -6.30190       6.30190       192.192       198.494    
  54  0.343734      -1.06789      -15.4442       15.4442       204.357       219.801    
  55  0.438651     -0.824052      -11.9178       11.9178       192.832       204.750    
  56  0.476250     -0.741811      -10.7284       10.7284       189.841       200.570    
  57  0.665451     -0.407291      -5.89041       5.89041       201.904       207.794    
  58  0.903561E-01  -2.40400      -34.7676       34.7676       193.304       228.071    
  59  0.899286     -0.106155      -1.53525       1.53525       183.292       184.827    
  60  0.822477     -0.195434      -2.82646       2.82646       184.706       187.532    
  61  0.824462E-01  -2.49561      -36.0926       36.0926       191.444       227.537    
  62  0.689460     -0.371846      -5.37779       5.37779       186.584       191.962    
  63  0.124471      -2.08368      -30.1351       30.1351       191.801       221.936    
  64  0.215598      -1.53434      -22.1902       22.1902       192.832       215.023    
  65  0.671537     -0.398187      -5.75875       5.75875       195.694       201.453    
  66  0.330886      -1.10598      -15.9952       15.9952       192.392       208.387    
  67  0.198204      -1.61846      -23.4069       23.4069       204.512       227.919    
  68  0.774065     -0.256099      -3.70382       3.70382       191.517       195.221    
  69  0.787755     -0.238568      -3.45028       3.45028       186.433       189.883    
  70  0.613901     -0.487921      -7.05653       7.05653       188.818       195.875    
  71  0.427667     -0.849410      -12.2845       12.2845       189.841       202.125    
  72  0.898090     -0.107485      -1.55449       1.55449       245.251       246.805    
loop,thermsimp(1:2)        1   56.2536      0.335046    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245        199.18          0.84          1.11         25.20          0.12          0.04         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    199.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        1
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        2
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      244     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -21.5298       21.5298       175.715       197.245    
   2  0.726663     -0.319292      -4.61774       4.61774       183.292       187.909    
   3  0.929061     -0.735808E-01  -1.06416       1.06416       185.330       186.394    
   4  0.764703     -0.268268      -3.87981       3.87981       184.706       188.586    
   5  0.119617      -2.12346      -30.7104       30.7104       183.165       213.876    
   6  0.369672     -0.995138      -14.3921       14.3921       186.433       200.825    
   7  0.875806     -0.132611      -1.91788       1.91788       189.875       191.792    
   8  0.657886     -0.418723      -6.05575       6.05575       187.149       193.205    
   9  0.387095E-01  -3.25167      -47.0270       47.0270       189.440       236.467    
  10  0.454078     -0.789485      -11.4179       11.4179       189.670       201.088    
  11  0.890470     -0.116006      -1.67772       1.67772       184.490       186.167    
  12  0.118445      -2.13331      -30.8528       30.8528       181.185       212.038    
  13  0.190238      -1.65948      -24.0001       24.0001       186.584       210.584    
  14  0.435624     -0.830976      -12.0179       12.0179       191.800       203.817    
  15  0.768655     -0.263114      -3.80526       3.80526       191.159       194.964    
  16  0.870896E-01  -2.44082      -35.3001       35.3001       191.708       227.008    
  17  0.936453     -0.656556E-01 -0.949538      0.949538       189.414       190.364    
  18  0.159312      -1.83689      -26.5659       26.5659       192.832       219.398    
  19  0.988165     -0.119051E-01 -0.172177      0.172177       191.517       191.689    
  20  0.713347     -0.337787      -4.88522       4.88522       190.529       195.414    
  21  0.417075     -0.874489      -12.6472       12.6472       192.598       205.245    
  22  0.719048     -0.329827      -4.77009       4.77009       193.483       198.253    
  23  0.785519     -0.241411      -3.49139       3.49139       191.810       195.301    
  24  0.356994      -1.03004      -14.8968       14.8968       188.818       203.715    
  25  0.357951      -1.02736      -14.8581       14.8581       192.846       207.704    
  26  0.154816      -1.86552      -26.9799       26.9799       185.115       212.095    
  27  0.246912      -1.39872      -20.2289       20.2289       188.127       208.356    
  28  0.553458     -0.591570      -8.55553       8.55553       186.626       195.181    
  29  0.729602     -0.315256      -4.55937       4.55937       192.192       196.752    
  30  0.605470     -0.501750      -7.25653       7.25653       192.845       200.102    
  31  0.278987E-01  -3.57918      -51.7636       51.7636       187.220       238.983    
  32  0.187991      -1.67136      -24.1720       24.1720       189.841       214.013    
  33  0.543158     -0.610355      -8.82722       8.82722       189.474       198.301    
  34  0.996749     -0.325625E-02 -0.470932E-01  0.470932E-01   195.694       195.741    
  35  0.540727     -0.614841      -8.89209       8.89209       189.841       198.733    
  36  0.833271E-01  -2.48498      -35.9389       35.9389       196.089       232.028    
  37  0.404538     -0.905011      -13.0886       13.0886       192.832       205.921    
  38  0.147302      -1.91527      -27.6995       27.6995       183.837       211.537    
  39  0.364226E-01  -3.31257      -47.9078       47.9078       191.913       239.821    
  40  0.381304     -0.964158      -13.9441       13.9441       192.832       206.776    
  41  0.737758     -0.304140      -4.39860       4.39860       192.707       197.106    
  42  0.179374      -1.71828      -24.8505       24.8505       191.640       216.490    
  43  0.281757      -1.26671      -18.3197       18.3197       190.448       208.768    
  44  0.192633      -1.64697      -23.8191       23.8191       189.745       213.564    
  45  0.954983     -0.460617E-01 -0.666164      0.666164       201.904       202.570    
  46  0.710258     -0.342127      -4.94799       4.94799       193.650       198.598    
  47  0.831769     -0.184201      -2.66399       2.66399       192.392       195.056    
  48  0.912541     -0.915218E-01  -1.32363       1.32363       193.218       194.542    
  49  0.221543      -1.50714      -21.7969       21.7969       187.201       208.997    
  50  0.690803E-02  -4.97507      -71.9516       71.9516       191.928       263.880    
  51  0.162616      -1.81637      -26.2690       26.2690       192.177       218.446    
  52  0.869433     -0.139913      -2.02349       2.02349       190.902       192.926    
  53  0.541563     -0.613295      -8.86974       8.86974       195.166       204.035    
  54  0.310811      -1.16857      -16.9004       16.9004       192.832       209.733    
  55  0.879573     -0.128319      -1.85581       1.85581       192.832       194.688    
  56  0.262339      -1.33812      -19.3524       19.3524       193.212       212.564    
  57  0.651476     -0.428515      -6.19736       6.19736       187.767       193.965    
  58  0.498193     -0.696767      -10.0769       10.0769       204.357       214.434    
  59  0.251241      -1.38134      -19.9776       19.9776       191.801       211.778    
  60  0.704518     -0.350242      -5.06534       5.06534       187.446       192.512    
  61  0.387431     -0.948219      -13.7135       13.7135       199.184       212.897    
  62  0.447312     -0.804500      -11.6350       11.6350       189.576       201.211    
  63  0.842599     -0.171264      -2.47689       2.47689       191.444       193.921    
  64  0.754683     -0.281457      -4.07055       4.07055       204.512       208.583    
  65  0.160341      -1.83045      -26.4728       26.4728       193.304       219.776    
  66  0.388561     -0.945304      -13.6714       13.6714       203.127       216.799    
  67  0.504240     -0.684704      -9.90247       9.90247       190.223       200.126    
  68  0.340326      -1.07785      -15.5884       15.5884       174.483       190.072    
  69  0.995948     -0.406008E-02 -0.587186E-01  0.587186E-01   185.247       185.305    
  70  0.822310     -0.195638      -2.82939       2.82939       245.251       248.080    
  71  0.584501     -0.536996      -7.76627       7.76627       191.114       198.880    
  72  0.953467     -0.476500E-01 -0.689135      0.689135       199.180       199.869    
loop,thermsimp(1:2)        2   21.5298       4.61774    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246        190.16          0.84          1.11         25.42          0.15          0.05         27.57
Just calling func    0   0         27.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        2
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        3
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      245     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -12.7008       12.7008       185.247       197.948    
   2  0.117190E-02  -6.74913      -97.6087       97.6087       184.490       282.098    
   3  0.432199     -0.838870      -12.1321       12.1321       185.330       197.462    
   4  0.466381     -0.762753      -11.0313       11.0313       183.292       194.323    
   5  0.696685     -0.361422      -5.22703       5.22703       184.706       189.933    
   6  0.193714      -1.64137      -23.7382       23.7382       174.483       198.222    
   7  0.535145     -0.625217      -9.04215       9.04215       189.414       198.456    
   8  0.812984     -0.207044      -2.99436       2.99436       191.517       194.512    
   9  0.956789     -0.441723E-01 -0.638839      0.638839       189.875       190.513    
  10  0.496711E-01  -3.00233      -43.4210       43.4210       187.446       230.867    
  11  0.206308E-01  -3.88097      -56.1283       56.1283       190.902       247.030    
  12  0.423434     -0.859358      -12.4284       12.4284       187.149       199.578    
  13  0.216826      -1.52866      -22.1081       22.1081       191.444       213.552    
  14  0.792422     -0.232661      -3.36485       3.36485       187.767       191.132    
  15  0.265940      -1.32449      -19.1553       19.1553       193.218       212.373    
  16  0.993400     -0.662201E-02 -0.957704E-01  0.957704E-01   192.832       192.928    
  17  0.645200E-01  -2.74078      -39.6383       39.6383       191.159       230.797    
  18  0.651527     -0.428436      -6.19622       6.19622       192.392       198.588    
  19  0.858875     -0.152131      -2.20019       2.20019       186.626       188.826    
  20  0.126056      -2.07103      -29.9520       29.9520       191.810       221.762    
  21  0.772661E-01  -2.56050      -37.0310       37.0310       190.529       227.560    
  22  0.441429     -0.817737      -11.8265       11.8265       195.694       207.521    
  23  0.166586      -1.79224      -25.9201       25.9201       192.192       218.112    
  24  0.217490      -1.52560      -22.0639       22.0639       192.707       214.771    
  25  0.632871     -0.457488      -6.61639       6.61639       175.715       182.331    
  26  0.201694      -1.60100      -23.1544       23.1544       193.483       216.637    
  27  0.282690      -1.26341      -18.2719       18.2719       189.474       207.746    
  28  0.255086E-01  -3.66874      -53.0589       53.0589       193.650       246.709    
  29  0.562308     -0.575706      -8.32610       8.32610       189.841       198.167    
  30  0.283366E-01  -3.56360      -51.5383       51.5383       191.114       242.652    
  31  0.404254E-01  -3.20830      -46.3997       46.3997       199.180       245.579    
  32  0.170475      -1.76917      -25.5865       25.5865       192.845       218.432    
  33  0.141712      -1.95396      -28.2589       28.2589       190.223       218.482    
  34  0.773173     -0.257253      -3.72050       3.72050       186.433       190.154    
  35  0.255978      -1.36266      -19.7074       19.7074       189.670       209.377    
  36  0.823739     -0.193902      -2.80429       2.80429       189.576       192.381    
  37  0.166307      -1.79392      -25.9444       25.9444       201.904       227.848    
  38  0.676319     -0.391090      -5.65611       5.65611       188.818       194.474    
  39  0.144546      -1.93416      -27.9726       27.9726       191.800       219.772    
  40  0.593436     -0.521826      -7.54688       7.54688       195.166       202.713    
  41  0.762921     -0.270600      -3.91353       3.91353       192.598       196.512    
  42  0.855796     -0.155724      -2.25214       2.25214       192.832       195.084    
  43  0.433555     -0.835737      -12.0868       12.0868       192.832       204.919    
  44  0.252891      -1.37480      -19.8829       19.8829       192.846       212.729    
  45  0.942909     -0.587850E-01 -0.850174      0.850174       188.127       188.977    
  46  0.432313     -0.838605      -12.1283       12.1283       204.512       216.641    
  47  0.975713     -0.245869E-01 -0.355586      0.355586       190.448       190.803    
  48  0.541226     -0.613919      -8.87876       8.87876       187.201       196.079    
  49  0.255057      -1.36627      -19.7596       19.7596       192.832       212.592    
  50  0.202141      -1.59879      -23.1223       23.1223       186.584       209.706    
  51  0.949562     -0.517549E-01 -0.748501      0.748501       183.837       184.586    
  52  0.255660E-01  -3.66649      -53.0264       53.0264       191.801       244.827    
  53  0.306802      -1.18155      -17.0881       17.0881       181.185       198.273    
  54  0.243277E-01  -3.71614      -53.7444       53.7444       185.115       238.859    
  55  0.466793     -0.761870      -11.0185       11.0185       193.212       204.230    
  56  0.200407      -1.60740      -23.2470       23.2470       199.184       222.431    
  57  0.282970      -1.26241      -18.2576       18.2576       189.745       208.002    
  58  0.214232      -1.54069      -22.2822       22.2822       183.165       205.448    
  59  0.326606      -1.11900      -16.1835       16.1835       189.841       206.025    
  60  0.997507     -0.249621E-02 -0.361012E-01  0.361012E-01   204.357       204.393    
  61  0.426725     -0.851615      -12.3164       12.3164       191.640       203.956    
  62  0.862854     -0.147510      -2.13336       2.13336       203.127       205.261    
  63  0.737079     -0.305061      -4.41192       4.41192       192.177       196.589    
  64  0.976691     -0.235846E-01 -0.341090      0.341090       192.832       193.173    
  65  0.191821      -1.65119      -23.8802       23.8802       193.304       217.184    
  66  0.743386     -0.296540      -4.28869       4.28869       191.708       195.997    
  67  0.683162     -0.381024      -5.51053       5.51053       196.089       201.599    
  68  0.789040     -0.236939      -3.42671       3.42671       189.440       192.867    
  69  0.908546     -0.959094E-01  -1.38708       1.38708       187.220       188.607    
  70  0.562283     -0.575750      -8.32674       8.32674       191.913       200.240    
  71  0.151982E-01  -4.18658      -60.5481       60.5481       245.251       305.799    
  72  0.478777     -0.736520      -10.6519       10.6519       190.160       200.812    
loop,thermsimp(1:2)        3   12.7008       97.6087    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247        240.89          0.84          1.10         25.04          0.16          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    240.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        3
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        4
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      246     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -6.08347       6.08347       175.715       181.798    
   2  0.880966     -0.126736      -1.83291       1.83291       183.837       185.670    
   3  0.854972     -0.156687      -2.26607       2.26607       187.220       189.486    
   4  0.797101     -0.226774      -3.27970       3.27970       186.626       189.906    
   5  0.158477      -1.84214      -26.6419       26.6419       188.127       214.768    
   6  0.593839     -0.521148      -7.53706       7.53706       184.706       192.243    
   7  0.817101     -0.201993      -2.92131       2.92131       186.433       189.354    
   8  0.997190     -0.281377E-02 -0.406939E-01  0.406939E-01   189.875       189.915    
   9  0.402857     -0.909174      -13.1489       13.1489       190.448       203.597    
  10  0.690455     -0.370405      -5.35695       5.35695       187.767       193.124    
  11  0.609635     -0.494895      -7.15738       7.15738       189.576       196.734    
  12  0.491117     -0.711073      -10.2838       10.2838       189.440       199.724    
  13  0.990676     -0.936814E-02 -0.135486      0.135486       192.832       192.968    
  14  0.976919     -0.233519E-01 -0.337725      0.337725       192.832       193.170    
  15  0.692556     -0.367366      -5.31301       5.31301       183.292       188.605    
  16  0.549694     -0.598394      -8.65423       8.65423       188.818       197.472    
  17  0.538267E-01  -2.92199      -42.2590       42.2590       191.517       233.776    
  18  0.602193     -0.507178      -7.33502       7.33502       192.832       200.167    
  19  0.537276     -0.621243      -8.98468       8.98468       191.708       200.693    
  20  0.338220      -1.08406      -15.6781       15.6781       187.201       202.879    
  21  0.306772      -1.18165      -17.0895       17.0895       192.598       209.688    
  22  0.895389     -0.110497      -1.59806       1.59806       192.177       193.775    
  23  0.120096      -2.11946      -30.6525       30.6525       185.330       215.983    
  24  0.680166     -0.385418      -5.57408       5.57408       185.247       190.821    
  25  0.369434     -0.995782      -14.4014       14.4014       189.841       204.242    
  26  0.235484      -1.44611      -20.9143       20.9143       174.483       195.398    
  27  0.260836      -1.34386      -19.4355       19.4355       181.185       200.621    
  28  0.720259     -0.328144      -4.74576       4.74576       189.414       194.160    
  29  0.695069     -0.363744      -5.26062       5.26062       192.392       197.652    
  30  0.105076      -2.25307      -32.5849       32.5849       187.149       219.734    
  31  0.968349     -0.321628E-01 -0.465152      0.465152       191.913       192.379    
  32  0.974131     -0.262091E-01 -0.379047      0.379047       190.160       190.539    
  33  0.647785E-01  -2.73678      -39.5805       39.5805       196.089       235.669    
  34  0.910402     -0.938690E-01  -1.35757       1.35757       195.166       196.523    
  35  0.488733     -0.715939      -10.3542       10.3542       191.640       201.994    
  36  0.377436E-01  -3.27694      -47.3925       47.3925       193.212       240.604    
  37  0.154608      -1.86686      -26.9994       26.9994       204.357       231.356    
  38  0.277804      -1.28084      -18.5240       18.5240       192.832       211.356    
  39  0.969547     -0.309263E-01 -0.447269      0.447269       203.127       203.575    
  40  0.380083     -0.967367      -13.9905       13.9905       183.165       197.156    
  41  0.751822     -0.285256      -4.12549       4.12549       189.841       193.967    
  42  0.137692      -1.98274      -28.6752       28.6752       195.694       224.369    
  43  0.293470      -1.22598      -17.7307       17.7307       189.474       207.204    
  44  0.433705     -0.835390      -12.0818       12.0818       189.745       201.826    
  45  0.418034     -0.872194      -12.6140       12.6140       189.670       202.284    
  46  0.166728      -1.79139      -25.9079       25.9079       186.584       212.492    
  47  0.921960     -0.812537E-01  -1.17513       1.17513       193.218       194.393    
  48  0.412601     -0.885275      -12.8032       12.8032       192.832       205.636    
  49  0.925181     -0.777655E-01  -1.12468       1.12468       192.846       193.971    
  50  0.687711     -0.374386      -5.41454       5.41454       191.444       196.859    
  51  0.729890     -0.314862      -4.55367       4.55367       192.707       197.261    
  52  0.355028      -1.03556      -14.9767       14.9767       193.483       208.460    
  53  0.123338      -2.09283      -30.2674       30.2674       204.512       234.780    
  54  0.638370E-01  -2.75142      -39.7922       39.7922       193.304       233.096    
  55  0.379414     -0.969128      -14.0159       14.0159       192.192       206.208    
  56  0.643705     -0.440515      -6.37092       6.37092       192.845       199.216    
  57  0.172292      -1.75856      -25.4331       25.4331       190.223       215.656    
  58  0.996763     -0.324212E-02 -0.468889E-01  0.468889E-01   191.800       191.846    
  59  0.606366     -0.500272      -7.23515       7.23515       191.810       199.045    
  60  0.299698      -1.20498      -17.4269       17.4269       199.184       216.611    
  61  0.723907E-02  -4.92826      -71.2746       71.2746       190.529       261.803    
  62  0.197118      -1.62395      -23.4863       23.4863       201.904       225.390    
  63  0.316130      -1.15160      -16.6550       16.6550       191.159       207.814    
  64  0.115913      -2.15492      -31.1654       31.1654       187.446       218.612    
  65  0.661756     -0.412859      -5.97094       5.97094       185.115       191.086    
  66  0.838437     -0.176215      -2.54850       2.54850       191.114       193.662    
  67  0.929092     -0.735473E-01  -1.06367       1.06367       191.801       192.864    
  68  0.167251      -1.78826      -25.8626       25.8626       199.180       225.042    
  69  0.174207      -1.74751      -25.2733       25.2733       193.650       218.923    
  70  0.506799     -0.679641      -9.82925       9.82925       190.902       200.731    
  71  0.209504      -1.56301      -22.6049       22.6049       184.490       207.095    
  72  0.709189E-01  -2.64622      -38.2707       38.2707       240.888       279.159    
loop,thermsimp(1:2)        4   6.08347       1.83291    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248        245.25          0.84          1.11         25.09          0.21          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    245.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        4
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        5
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      247     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -6.67690       6.67690       175.715       182.392    
   2  0.876370     -0.131967      -1.90856       1.90856       183.837       185.746    
   3  0.840080     -0.174259      -2.52020       2.52020       183.292       185.812    
   4  0.608986E-01  -2.79854      -40.4737       40.4737       186.433       226.907    
   5  0.311901      -1.16507      -16.8497       16.8497       187.220       204.069    
   6  0.937552E-01  -2.36707      -34.2335       34.2335       186.626       220.859    
   7  0.608418     -0.496893      -7.18628       7.18628       189.875       197.061    
   8  0.297707      -1.21164      -17.5233       17.5233       190.160       207.683    
   9  0.365777      -1.00573      -14.5453       14.5453       185.247       199.792    
  10  0.194673      -1.63643      -23.6668       23.6668       185.115       208.782    
  11  0.941388     -0.604003E-01 -0.873535      0.873535       191.800       192.673    
  12  0.984881     -0.152343E-01 -0.220325      0.220325       184.706       184.926    
  13  0.750245     -0.287355      -4.15585       4.15585       191.913       196.069    
  14  0.437446     -0.826803      -11.9576       11.9576       191.801       203.758    
  15  0.174754      -1.74437      -25.2279       25.2279       192.832       218.060    
  16  0.300465E-01  -3.50501      -50.6909       50.6909       187.767       238.458    
  17  0.372924     -0.986380      -14.2654       14.2654       192.832       207.098    
  18  0.803506     -0.218771      -3.16396       3.16396       191.114       194.278    
  19  0.232583      -1.45851      -21.0936       21.0936       192.177       213.271    
  20  0.383368     -0.958759      -13.8660       13.8660       189.841       203.707    
  21  0.622786     -0.473552      -6.84871       6.84871       192.846       199.695    
  22  0.356422      -1.03164      -14.9200       14.9200       189.414       204.334    
  23  0.919964     -0.834212E-01  -1.20647       1.20647       193.218       194.425    
  24  0.550740     -0.596492      -8.62672       8.62672       174.483       183.110    
  25  0.402627     -0.909745      -13.1571       13.1571       195.166       208.323    
  26  0.256265      -1.36154      -19.6912       19.6912       189.576       209.267    
  27  0.763510     -0.269828      -3.90237       3.90237       191.444       195.346    
  28  0.388963     -0.944271      -13.6565       13.6565       183.165       196.822    
  29  0.981923     -0.182423E-01 -0.263828      0.263828       192.707       192.971    
  30  0.656629     -0.420635      -6.08341       6.08341       188.818       194.902    
  31  0.932472     -0.699161E-01  -1.01116       1.01116       192.392       193.403    
  32  0.336775      -1.08834      -15.7401       15.7401       191.810       207.550    
  33  0.810758     -0.209786      -3.03401       3.03401       192.845       195.879    
  34  0.557014     -0.585166      -8.46291       8.46291       189.440       197.903    
  35  0.652747     -0.426565      -6.16917       6.16917       192.832       199.001    
  36  0.890774     -0.115665      -1.67279       1.67279       181.185       182.858    
  37  0.703035     -0.352349      -5.09582       5.09582       191.708       196.804    
  38  0.534296     -0.626805      -9.06511       9.06511       190.902       199.967    
  39  0.604162     -0.503914      -7.28781       7.28781       189.745       197.033    
  40  0.545557     -0.605948      -8.76347       8.76347       191.640       200.403    
  41  0.371346     -0.990620      -14.3268       14.3268       189.670       203.996    
  42  0.491801     -0.709680      -10.2637       10.2637       187.201       197.464    
  43  0.879731     -0.128139      -1.85320       1.85320       203.127       204.981    
  44  0.995113     -0.489866E-02 -0.708464E-01  0.708464E-01   190.448       190.519    
  45  0.467927     -0.759444      -10.9834       10.9834       189.841       200.824    
  46  0.355083      -1.03540      -14.9744       14.9744       192.832       207.807    
  47  0.216960      -1.52804      -22.0992       22.0992       192.192       214.292    
  48  0.276988      -1.28378      -18.5666       18.5666       184.490       203.056    
  49  0.905458     -0.993144E-01  -1.43633       1.43633       189.474       190.910    
  50  0.704241     -0.350635      -5.07103       5.07103       191.159       196.230    
  51  0.784564     -0.242627      -3.50898       3.50898       193.483       196.992    
  52  0.329376      -1.11055      -16.0613       16.0613       192.598       208.659    
  53  0.845894     -0.167361      -2.42044       2.42044       192.832       195.253    
  54  0.645172     -0.438238      -6.33799       6.33799       186.584       192.922    
  55  0.279949      -1.27315      -18.4128       18.4128       188.127       206.539    
  56  0.149089      -1.90321      -27.5251       27.5251       190.223       217.748    
  57  0.887681     -0.119143      -1.72309       1.72309       185.330       187.053    
  58  0.582426     -0.540553      -7.81771       7.81771       199.184       207.002    
  59  0.221293      -1.50827      -21.8132       21.8132       187.446       209.259    
  60  0.839449     -0.175010      -2.53107       2.53107       193.650       196.181    
  61  0.383721     -0.957840      -13.8527       13.8527       187.149       201.002    
  62  0.933136     -0.692040E-01  -1.00086       1.00086       195.694       196.695    
  63  0.148663      -1.90607      -27.5665       27.5665       199.180       226.746    
  64  0.788780     -0.237267      -3.43146       3.43146       201.904       205.335    
  65  0.948785     -0.525734E-01 -0.760339      0.760339       204.357       205.117    
  66  0.246696      -1.39960      -20.2416       20.2416       193.304       213.545    
  67  0.297902      -1.21099      -17.5139       17.5139       191.517       209.031    
  68  0.402979     -0.908870      -13.1445       13.1445       204.512       217.657    
  69  0.946008     -0.555038E-01 -0.802719      0.802719       196.089       196.891    
  70  0.182802      -1.69935      -24.5768       24.5768       193.212       217.788    
  71  0.245157      -1.40586      -20.3321       20.3321       190.529       210.861    
  72  0.205669      -1.58149      -22.8721       22.8721       245.251       268.123    
loop,thermsimp(1:2)        5   6.67690       1.90856    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249        240.89          0.84          1.10         25.14          0.15          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    240.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        5
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        6
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      248     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -22.1649       22.1649       175.715       197.880    
   2  0.942431     -0.592928E-01 -0.857518      0.857518       181.185       182.043    
   3  0.193824      -1.64081      -23.7300       23.7300       174.483       198.213    
   4  0.162512      -1.81700      -26.2783       26.2783       184.706       210.984    
   5  0.625243     -0.469616      -6.79178       6.79178       183.837       190.629    
   6  0.499178     -0.694793      -10.0484       10.0484       183.292       193.340    
   7  0.706095     -0.348006      -5.03301       5.03301       185.330       190.363    
   8  0.527414     -0.639770      -9.25262       9.25262       190.448       199.700    
   9  0.575748     -0.552085      -7.98448       7.98448       189.474       197.458    
  10  0.490522     -0.712286      -10.3014       10.3014       191.800       202.101    
  11  0.306517      -1.18248      -17.1016       17.1016       186.584       203.686    
  12  0.798470     -0.225057      -3.25487       3.25487       192.707       195.962    
  13  0.333550      -1.09796      -15.8792       15.8792       192.392       208.271    
  14  0.166731      -1.79138      -25.9076       25.9076       191.114       217.021    
  15  0.443580     -0.812878      -11.7562       11.7562       193.218       204.974    
  16  0.669985     -0.400500      -5.79220       5.79220       188.818       194.610    
  17  0.339921      -1.07904      -15.6056       15.6056       192.832       208.438    
  18  0.201260      -1.60316      -23.1856       23.1856       191.444       214.630    
  19  0.772250     -0.258447      -3.73777       3.73777       192.845       196.583    
  20  0.401372E-01  -3.21545      -46.5032       46.5032       191.913       238.417    
  21  0.940962     -0.608526E-01 -0.880077      0.880077       193.650       194.530    
  22  0.115324      -2.16001      -31.2390       31.2390       191.159       222.398    
  23  0.939991E-01  -2.36447      -34.1960       34.1960       195.694       229.890    
  24  0.412221     -0.886196      -12.8165       12.8165       191.708       204.525    
  25  0.136462      -1.99171      -28.8050       28.8050       183.165       211.970    
  26  0.310095      -1.17088      -16.9337       16.9337       196.089       213.022    
  27  0.985727     -0.143755E-01 -0.207904      0.207904       193.483       193.691    
  28  0.900161     -0.105182      -1.52118       1.52118       189.745       191.266    
  29  0.250220      -1.38542      -20.0365       20.0365       189.875       209.911    
  30  0.780405     -0.247942      -3.58584       3.58584       187.201       190.786    
  31  0.228719      -1.47526      -21.3358       21.3358       189.440       210.776    
  32  0.407088     -0.898727      -12.9978       12.9978       192.832       205.830    
  33  0.975627     -0.246749E-01 -0.356859      0.356859       192.846       193.203    
  34  0.885140     -0.122009      -1.76455       1.76455       185.247       187.011    
  35  0.896135     -0.109664      -1.58601       1.58601       190.902       192.488    
  36  0.856661     -0.154713      -2.23753       2.23753       191.640       193.877    
  37  0.258643      -1.35231      -19.5576       19.5576       189.841       209.398    
  38  0.336283      -1.08980      -15.7612       15.7612       187.149       202.911    
  39  0.868205     -0.141327      -2.04393       2.04393       184.490       186.534    
  40  0.937935     -0.640747E-01 -0.926676      0.926676       189.841       190.768    
  41  0.418906     -0.870109      -12.5839       12.5839       191.801       204.384    
  42  0.351040      -1.04685      -15.1400       15.1400       189.670       204.810    
  43  0.611628E-01  -2.79422      -40.4111       40.4111       187.220       227.631    
  44  0.153518      -1.87394      -27.1017       27.1017       189.414       216.516    
  45  0.938341     -0.636423E-01 -0.920422      0.920422       203.127       204.048    
  46  0.598133     -0.513942      -7.43285       7.43285       204.357       211.790    
  47  0.795771     -0.228444      -3.30386       3.30386       201.904       205.208    
  48  0.295375      -1.21951      -17.6371       17.6371       188.127       205.764    
  49  0.804738     -0.217239      -3.14180       3.14180       199.184       202.326    
  50  0.260094      -1.34671      -19.4767       19.4767       192.832       212.309    
  51  0.640517     -0.445479      -6.44270       6.44270       191.810       198.253    
  52  0.221872      -1.50566      -21.7754       21.7754       190.160       211.936    
  53  0.837141     -0.177762      -2.57088       2.57088       192.832       195.403    
  54  0.212745      -1.54766      -22.3829       22.3829       195.166       217.549    
  55  0.162033      -1.81996      -26.3210       26.3210       192.598       218.919    
  56  0.631631     -0.459450      -6.64477       6.64477       185.115       191.760    
  57  0.816014E-01  -2.50591      -36.2415       36.2415       191.517       227.759    
  58  0.754954     -0.281099      -4.06537       4.06537       187.446       191.512    
  59  0.568761E-01  -2.86688      -41.4620       41.4620       189.576       231.038    
  60  0.610521     -0.493442      -7.13637       7.13637       190.529       197.665    
  61  0.691718     -0.368577      -5.33051       5.33051       192.177       197.508    
  62  0.330677      -1.10661      -16.0043       16.0043       193.304       209.308    
  63  0.669260     -0.401583      -5.80786       5.80786       192.192       198.000    
  64  0.677208     -0.389776      -5.63711       5.63711       204.512       210.149    
  65  0.440183     -0.820565      -11.8674       11.8674       190.223       202.091    
  66  0.258089      -1.35445      -19.5886       19.5886       193.212       212.800    
  67  0.109764      -2.20942      -31.9536       31.9536       192.832       224.786    
  68  0.440932     -0.818865      -11.8428       11.8428       186.626       198.469    
  69  0.361307      -1.01803      -14.7231       14.7231       199.180       213.903    
  70  0.304201      -1.19007      -17.2112       17.2112       186.433       203.644    
  71  0.279324      -1.27538      -18.4451       18.4451       187.767       206.212    
  72  0.833329     -0.182326      -2.63688       2.63688       240.888       243.525    
loop,thermsimp(1:2)        6   22.1649      0.857518    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250        245.25          0.84          1.11         25.16          0.06          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    251        213.94          0.84          1.11         25.14          0.07          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    213.94
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        6
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        7
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      250     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -19.2494       19.2494       181.185       200.435    
   2  0.401807     -0.911784      -13.1866       13.1866       184.490       197.676    
   3  0.418885     -0.870159      -12.5846       12.5846       185.247       197.831    
   4  0.753378     -0.283189      -4.09560       4.09560       185.330       189.426    
   5  0.792066     -0.233111      -3.37135       3.37135       183.837       187.209    
   6  0.868474     -0.141017      -2.03945       2.03945       189.841       191.881    
   7  0.318670      -1.14360      -16.5392       16.5392       187.201       203.740    
   8  0.863267     -0.147031      -2.12642       2.12642       189.745       191.871    
   9  0.589255     -0.528896      -7.64912       7.64912       187.446       195.095    
  10  0.632079E-01  -2.76133      -39.9355       39.9355       185.115       225.050    
  11  0.992270     -0.775975E-02 -0.112225      0.112225       190.902       191.014    
  12  0.466140     -0.763269      -11.0387       11.0387       192.846       203.885    
  13  0.177509      -1.72873      -25.0016       25.0016       183.292       208.293    
  14  0.933326     -0.690005E-01 -0.997915      0.997915       193.483       194.481    
  15  0.876357     -0.131982      -1.90877       1.90877       191.640       193.549    
  16  0.673496     -0.395274      -5.71662       5.71662       193.650       199.366    
  17  0.648708     -0.432773      -6.25895       6.25895       188.818       195.077    
  18  0.400813     -0.914259      -13.2224       13.2224       192.832       206.055    
  19  0.763164     -0.270282      -3.90893       3.90893       192.707       196.616    
  20  0.196240      -1.62842      -23.5509       23.5509       192.845       216.396    
  21  0.923666     -0.794046E-01  -1.14838       1.14838       189.474       190.622    
  22  0.999600     -0.400298E-03 -0.578927E-02  0.578927E-02   192.177       192.183    
  23  0.379715     -0.968335      -14.0045       14.0045       190.529       204.533    
  24  0.197375      -1.62265      -23.4674       23.4674       175.715       199.182    
  25  0.760736     -0.273468      -3.95502       3.95502       192.192       196.147    
  26  0.392182     -0.936030      -13.5373       13.5373       174.483       188.021    
  27  0.256208      -1.36177      -19.6945       19.6945       191.810       211.504    
  28  0.251796      -1.37914      -19.9456       19.9456       186.626       206.571    
  29  0.332089E-01  -3.40494      -49.2437       49.2437       190.448       239.692    
  30  0.970457     -0.299883E-01 -0.433704      0.433704       190.223       190.657    
  31  0.467370E-01  -3.06322      -44.3016       44.3016       191.800       236.101    
  32  0.716125     -0.333901      -4.82901       4.82901       199.184       204.013    
  33  0.757897     -0.277208      -4.00910       4.00910       187.149       191.158    
  34  0.765628     -0.267059      -3.86232       3.86232       186.433       190.295    
  35  0.323816      -1.12758      -16.3076       16.3076       186.584       202.892    
  36  0.909845     -0.944807E-01  -1.36642       1.36642       203.127       204.494    
  37  0.515782     -0.662071      -9.57515       9.57515       191.801       201.376    
  38  0.464370     -0.767074      -11.0937       11.0937       191.708       202.802    
  39  0.445707     -0.808094      -11.6870       11.6870       189.670       201.357    
  40  0.786320     -0.240391      -3.47664       3.47664       193.218       196.695    
  41  0.631860     -0.459087      -6.63951       6.63951       201.904       208.543    
  42  0.672488     -0.396772      -5.73828       5.73828       188.127       193.865    
  43  0.251717E-02  -5.98462      -86.5521       86.5521       192.832       279.384    
  44  0.245023      -1.40640      -20.3400       20.3400       187.767       208.107    
  45  0.252688      -1.37560      -19.8945       19.8945       192.392       212.286    
  46  0.268946      -1.31324      -18.9927       18.9927       192.832       211.825    
  47  0.550357     -0.597189      -8.63680       8.63680       193.304       201.940    
  48  0.826205     -0.190912      -2.76105       2.76105       189.841       192.602    
  49  0.964276     -0.363780E-01 -0.526114      0.526114       189.875       190.401    
  50  0.415479     -0.878324      -12.7027       12.7027       204.512       217.215    
  51  0.599143E-01  -2.81484      -40.7094       40.7094       189.440       230.149    
  52  0.348555      -1.05396      -15.2428       15.2428       184.706       199.949    
  53  0.243819      -1.41133      -20.4113       20.4113       204.357       224.768    
  54  0.233297      -1.45544      -21.0492       21.0492       190.160       211.209    
  55  0.705284     -0.349155      -5.04963       5.04963       183.165       188.215    
  56  0.258436      -1.35311      -19.5692       19.5692       192.832       212.402    
  57  0.328631      -1.11282      -16.0941       16.0941       193.212       209.306    
  58  0.676481     -0.390852      -5.65266       5.65266       196.089       201.741    
  59  0.784590     -0.242594      -3.50849       3.50849       199.180       202.688    
  60  0.546419E-01  -2.90695      -42.0416       42.0416       191.444       233.486    
  61  0.507256     -0.678740      -9.81622       9.81622       189.414       199.231    
  62  0.980797     -0.193899E-01 -0.280425      0.280425       191.114       191.394    
  63  0.193856      -1.64064      -23.7277       23.7277       195.166       218.893    
  64  0.101492      -2.28777      -33.0867       33.0867       192.598       225.685    
  65  0.245844E-01  -3.70564      -53.5926       53.5926       191.159       244.751    
  66  0.610050     -0.494214      -7.14753       7.14753       192.832       199.980    
  67  0.373100E-01  -3.28849      -47.5596       47.5596       187.220       234.779    
  68  0.476763     -0.740736      -10.7128       10.7128       191.517       202.230    
  69  0.412657     -0.885139      -12.8013       12.8013       195.694       208.495    
  70  0.580580     -0.543727      -7.86362       7.86362       189.576       197.440    
  71  0.241635      -1.42033      -20.5413       20.5413       191.913       212.455    
  72  0.463019     -0.769988      -11.1359       11.1359       213.941       225.077    
loop,thermsimp(1:2)        7   19.2494       13.1866    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252        190.06          0.84          1.11         25.07          0.15          0.05         27.22
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    253        187.28          0.84          1.11         25.15          0.06          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        7
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        8
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      252     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -32.4838       32.4838       183.837       216.321    
   2  0.476819     -0.740619      -10.7111       10.7111       174.483       185.195    
   3  0.564430     -0.571938      -8.27162       8.27162       183.165       191.437    
   4  0.211741      -1.55239      -22.4514       22.4514       185.330       207.782    
   5  0.154226E-01  -4.17192      -60.3361       60.3361       186.433       246.769    
   6  0.489577     -0.714213      -10.3292       10.3292       189.875       200.204    
   7  0.583965     -0.537914      -7.77954       7.77954       189.474       197.253    
   8  0.430258     -0.843370      -12.1972       12.1972       190.223       202.420    
   9  0.280982      -1.26946      -18.3595       18.3595       190.902       209.262    
  10  0.535183     -0.625146      -9.04113       9.04113       187.149       196.191    
  11  0.306750      -1.18172      -17.0906       17.0906       191.114       208.204    
  12  0.924930     -0.780370E-01  -1.12860       1.12860       189.745       190.873    
  13  0.829670E-01  -2.48931      -36.0015       36.0015       189.841       225.843    
  14  0.330275      -1.10783      -16.0219       16.0219       192.177       208.199    
  15  0.229751      -1.47076      -21.2707       21.2707       189.841       211.112    
  16  0.455737     -0.785839      -11.3651       11.3651       191.640       203.005    
  17  0.830949     -0.185187      -2.67826       2.67826       188.127       190.805    
  18  0.148624      -1.90634      -27.5703       27.5703       193.483       221.053    
  19  0.883001     -0.124429      -1.79955       1.79955       188.818       190.618    
  20  0.668001     -0.403466      -5.83509       5.83509       187.446       193.281    
  21  0.610583     -0.493341      -7.13491       7.13491       192.192       199.327    
  22  0.689050     -0.372441      -5.38640       5.38640       192.707       198.094    
  23  0.124417      -2.08412      -30.1414       30.1414       193.218       223.360    
  24  0.785584E-01  -2.54391      -36.7912       36.7912       189.576       226.367    
  25  0.936565     -0.655366E-01 -0.947818      0.947818       184.490       185.438    
  26  0.483719     -0.726252      -10.5034       10.5034       185.247       195.750    
  27  0.715685     -0.334515      -4.83790       4.83790       175.715       180.553    
  28  0.786437     -0.240243      -3.47449       3.47449       189.414       192.889    
  29  0.361023      -1.01881      -14.7345       14.7345       193.650       208.384    
  30  0.325559      -1.12221      -16.2299       16.2299       184.706       200.936    
  31  0.850460     -0.161978      -2.34259       2.34259       192.832       195.175    
  32  0.301358      -1.19946      -17.3471       17.3471       181.185       198.532    
  33  0.304725      -1.18834      -17.1863       17.1863       189.670       206.856    
  34  0.887065     -0.119838      -1.73314       1.73314       191.801       193.534    
  35  0.762822     -0.270730      -3.91542       3.91542       196.089       200.004    
  36  0.364130      -1.01024      -14.6106       14.6106       193.304       207.914    
  37  0.762041     -0.271754      -3.93023       3.93023       191.517       195.448    
  38  0.941180     -0.606207E-01 -0.876722      0.876722       199.180       200.056    
  39  0.449403     -0.799835      -11.5676       11.5676       191.708       203.276    
  40  0.743855     -0.295910      -4.27957       4.27957       186.584       190.864    
  41  0.743104     -0.296920      -4.29418       4.29418       187.201       191.495    
  42  0.350527      -1.04832      -15.1612       15.1612       192.846       208.007    
  43  0.607240     -0.498831      -7.21431       7.21431       199.184       206.398    
  44  0.557347     -0.584567      -8.45425       8.45425       203.127       211.582    
  45  0.217970      -1.52340      -22.0320       22.0320       190.529       212.561    
  46  0.364570      -1.00904      -14.5931       14.5931       192.832       207.425    
  47  0.330900      -1.10594      -15.9946       15.9946       186.626       202.620    
  48  0.861127     -0.149514      -2.16233       2.16233       187.767       189.930    
  49  0.710764E-01  -2.64400      -38.2386       38.2386       183.292       221.530    
  50  0.264543      -1.32975      -19.2314       19.2314       195.694       214.926    
  51  0.985836     -0.142654E-01 -0.206313      0.206313       201.904       202.110    
  52  0.296563      -1.21550      -17.5790       17.5790       193.212       210.791    
  53  0.875112     -0.133403      -1.92933       1.92933       190.160       192.089    
  54  0.808637     -0.212405      -3.07189       3.07189       191.810       194.882    
  55  0.394372     -0.930461      -13.4567       13.4567       192.832       206.289    
  56  0.209815      -1.56153      -22.5835       22.5835       192.392       214.975    
  57  0.154667      -1.86648      -26.9938       26.9938       192.832       219.826    
  58  0.741232     -0.299442      -4.33065       4.33065       191.913       196.244    
  59  0.386718E-01  -3.25265      -47.0411       47.0411       192.845       239.886    
  60  0.372867     -0.986533      -14.2677       14.2677       204.512       218.780    
  61  0.910828E-01  -2.39599      -34.6518       34.6518       195.166       229.817    
  62  0.660999     -0.414003      -5.98748       5.98748       204.357       210.344    
  63  0.631205E-01  -2.76271      -39.9555       39.9555       185.115       225.070    
  64  0.959104     -0.417554E-01 -0.603884      0.603884       213.941       214.545    
  65  0.132829      -2.01869      -29.1952       29.1952       192.598       221.793    
  66  0.162229      -1.81875      -26.3035       26.3035       189.440       215.743    
  67  0.155176      -1.86319      -26.9463       26.9463       191.444       218.390    
  68  0.950416E-01  -2.35344      -34.0365       34.0365       187.220       221.256    
  69  0.591456     -0.525169      -7.59521       7.59521       191.800       199.395    
  70  0.297427      -1.21259      -17.5369       17.5369       190.448       207.985    
  71  0.980650E-01  -2.32213      -33.5836       33.5836       191.159       224.742    
  72  0.795540     -0.228734      -3.30804       3.30804       187.278       190.586    
loop,thermsimp(1:2)        8   32.4838       10.7111    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254        183.50          0.84          1.11         25.08          0.17          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    255        181.08          0.84          1.12         25.15          0.02          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    181.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        8
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:        9
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      254     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -6.42230       6.42230       175.715       182.137    
   2  0.805197     -0.216668      -3.13354       3.13354       174.483       177.617    
   3  0.976428     -0.238543E-01 -0.344991      0.344991       184.490       184.835    
   4  0.599028     -0.512447      -7.41123       7.41123       187.767       195.179    
   5  0.591081     -0.525802      -7.60437       7.60437       187.278       194.882    
   6  0.151500      -1.88717      -27.2930       27.2930       188.818       216.111    
   7  0.565682     -0.569723      -8.23957       8.23957       188.127       196.366    
   8  0.345258      -1.06346      -15.3803       15.3803       186.584       201.964    
   9  0.658101     -0.418397      -6.05104       6.05104       189.745       195.796    
  10  0.691977E-01  -2.67079      -38.6261       38.6261       183.165       221.791    
  11  0.289062      -1.24111      -17.9495       17.9495       187.201       205.150    
  12  0.949819     -0.514835E-01 -0.744577      0.744577       190.160       190.905    
  13  0.791632     -0.233658      -3.37926       3.37926       189.414       192.794    
  14  0.400532     -0.914962      -13.2326       13.2326       187.446       200.679    
  15  0.241886      -1.41929      -20.5264       20.5264       191.801       212.327    
  16  0.383016     -0.959678      -13.8793       13.8793       191.810       205.689    
  17  0.993978     -0.604041E-02 -0.873589E-01  0.873589E-01   192.832       192.920    
  18  0.807089     -0.214322      -3.09961       3.09961       191.517       194.617    
  19  0.732161     -0.311755      -4.50873       4.50873       185.247       189.755    
  20  0.176507      -1.73440      -25.0836       25.0836       187.149       212.233    
  21  0.628098     -0.465059      -6.72588       6.72588       191.913       198.639    
  22  0.383392     -0.958697      -13.8651       13.8651       189.474       203.339    
  23  0.906421     -0.982517E-01  -1.42096       1.42096       192.707       194.128    
  24  0.329288      -1.11082      -16.0652       16.0652       181.185       197.250    
  25  0.869436     -0.139911      -2.02345       2.02345       192.192       194.216    
  26  0.354994      -1.03565      -14.9781       14.9781       191.800       206.778    
  27  0.127935      -2.05623      -29.7381       29.7381       196.089       225.827    
  28  0.840123     -0.174207      -2.51945       2.51945       199.180       201.699    
  29  0.625861     -0.468627      -6.77748       6.77748       189.875       196.652    
  30  0.488384     -0.716653      -10.3645       10.3645       184.706       195.070    
  31  0.888226E-01  -2.42111      -35.0152       35.0152       201.904       236.919    
  32  0.262955      -1.33577      -19.3185       19.3185       190.223       209.542    
  33  0.153205E-01  -4.17856      -60.4322       60.4322       186.626       247.058    
  34  0.432355     -0.838509      -12.1269       12.1269       191.640       203.767    
  35  0.225273      -1.49044      -21.5554       21.5554       191.708       213.263    
  36  0.812147     -0.208074      -3.00926       3.00926       192.832       195.842    
  37  0.832805E-01  -2.48554      -35.9469       35.9469       199.184       235.131    
  38  0.442280     -0.815813      -11.7986       11.7986       189.670       201.468    
  39  0.106639      -2.23831      -32.3714       32.3714       192.832       225.204    
  40  0.143053      -1.94454      -28.1227       28.1227       185.330       213.453    
  41  0.871774     -0.137225      -1.98461       1.98461       193.304       195.288    
  42  0.137692      -1.98273      -28.6751       28.6751       190.448       219.123    
  43  0.366512      -1.00372      -14.5163       14.5163       192.846       207.362    
  44  0.617157     -0.482633      -6.98004       6.98004       192.177       199.157    
  45  0.420337     -0.866700      -12.5346       12.5346       191.114       203.648    
  46  0.935846     -0.663044E-01 -0.958923      0.958923       193.650       194.609    
  47  0.979912     -0.202925E-01 -0.293478      0.293478       190.902       191.196    
  48  0.692793     -0.367024      -5.30806       5.30806       204.357       209.665    
  49  0.155424      -1.86160      -26.9233       26.9233       193.212       220.135    
  50  0.703218     -0.352088      -5.09205       5.09205       189.841       194.933    
  51  0.396734     -0.924489      -13.3704       13.3704       203.127       216.498    
  52  0.247863      -1.39488      -20.1734       20.1734       190.529       210.702    
  53  0.176690      -1.73336      -25.0686       25.0686       213.941       239.010    
  54  0.832421     -0.183417      -2.65265       2.65265       195.694       198.347    
  55  0.598900     -0.512660      -7.41431       7.41431       192.392       199.806    
  56  0.940005     -0.618702E-01 -0.894793      0.894793       189.440       190.335    
  57  0.556954     -0.585272      -8.46446       8.46446       183.837       192.302    
  58  0.920495     -0.828436E-01  -1.19812       1.19812       191.444       192.642    
  59  0.896932     -0.108775      -1.57316       1.57316       204.512       206.085    
  60  0.200022      -1.60933      -23.2748       23.2748       192.832       216.107    
  61  0.667904E-01  -2.70620      -39.1382       39.1382       193.483       232.621    
  62  0.146707      -1.91932      -27.7580       27.7580       187.220       214.978    
  63  0.305705      -1.18513      -17.1399       17.1399       183.292       200.432    
  64  0.975058     -0.252587E-01 -0.365302      0.365302       192.598       192.963    
  65  0.229625      -1.47131      -21.2787       21.2787       193.218       214.497    
  66  0.477708     -0.738756      -10.6842       10.6842       191.159       201.843    
  67  0.443063     -0.814043      -11.7730       11.7730       185.115       196.888    
  68  0.988727     -0.113371E-01 -0.163962      0.163962       189.841       190.005    
  69  0.338863      -1.08216      -15.6507       15.6507       189.576       205.227    
  70  0.929830     -0.727534E-01  -1.05219       1.05219       195.166       196.218    
  71  0.537152     -0.621475      -8.98803       8.98803       192.845       201.833    
  72  0.626264E-01  -2.77057      -40.0691       40.0691       181.080       221.149    
loop,thermsimp(1:2)        9   6.42230       3.13354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256        192.42          0.84          1.11         25.14          0.13          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:        9
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       10
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      255     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -2.63976       2.63976       174.483       177.123    
   2  0.367543      -1.00091      -14.4756       14.4756       175.715       190.191    
   3  0.528755     -0.637231      -9.21590       9.21590       184.490       193.706    
   4  0.776829     -0.252535      -3.65227       3.65227       185.247       188.899    
   5  0.149594E-01  -4.20242      -60.7771       60.7771       189.841       250.619    
   6  0.892228     -0.114033      -1.64919       1.64919       189.440       191.089    
   7  0.191037      -1.65529      -23.9395       23.9395       190.160       214.100    
   8  0.516533     -0.660616      -9.55410       9.55410       190.902       200.456    
   9  0.273230      -1.29744      -18.7642       18.7642       183.837       202.601    
  10  0.822225     -0.195741      -2.83089       2.83089       191.444       194.275    
  11  0.359850      -1.02207      -14.7816       14.7816       189.414       204.196    
  12  0.611658     -0.491581      -7.10946       7.10946       192.832       199.942    
  13  0.249481      -1.38837      -20.0792       20.0792       192.598       212.677    
  14  0.441252     -0.818139      -11.8323       11.8323       192.707       204.540    
  15  0.910514E-01  -2.39633      -34.6568       34.6568       192.192       226.849    
  16  0.745146     -0.294175      -4.25448       4.25448       193.650       197.904    
  17  0.758301     -0.276675      -4.00140       4.00140       191.517       195.519    
  18  0.638521     -0.448601      -6.48785       6.48785       187.278       193.765    
  19  0.150180      -1.89592      -27.4196       27.4196       189.841       217.260    
  20  0.144147      -1.93692      -28.0126       28.0126       184.706       212.718    
  21  0.104928      -2.25448      -32.6052       32.6052       187.767       220.373    
  22  0.398120     -0.921002      -13.3199       13.3199       193.304       206.624    
  23  0.802258     -0.220325      -3.18644       3.18644       189.745       192.931    
  24  0.399299     -0.918044      -13.2771       13.2771       192.832       206.109    
  25  0.493060     -0.707124      -10.2267       10.2267       195.166       205.392    
  26  0.504407     -0.684372      -9.89768       9.89768       188.127       198.024    
  27  0.762058     -0.271733      -3.92992       3.92992       189.875       193.804    
  28  0.430267     -0.843350      -12.1969       12.1969       185.115       197.312    
  29  0.993832     -0.618725E-02 -0.894826E-01  0.894826E-01   181.185       181.275    
  30  0.705390     -0.349005      -5.04746       5.04746       195.694       200.742    
  31  0.969760     -0.307069E-01 -0.444096      0.444096       191.913       192.358    
  32  0.245618      -1.40398      -20.3049       20.3049       192.177       212.482    
  33  0.685790     -0.377184      -5.45500       5.45500       192.392       197.847    
  34  0.905089     -0.997222E-01  -1.44222       1.44222       183.292       184.734    
  35  0.414065     -0.881732      -12.7520       12.7520       187.446       200.198    
  36  0.714747E-01  -2.63841      -38.1578       38.1578       189.670       227.828    
  37  0.694510     -0.364548      -5.27225       5.27225       199.180       204.452    
  38  0.770213E-01  -2.56367      -37.0769       37.0769       192.845       229.922    
  39  0.846173     -0.167031      -2.41567       2.41567       191.159       193.574    
  40  0.485012     -0.723582      -10.4648       10.4648       186.584       197.049    
  41  0.345787      -1.06193      -15.3581       15.3581       189.474       204.832    
  42  0.851861     -0.160332      -2.31879       2.31879       191.114       193.432    
  43  0.774151     -0.255989      -3.70222       3.70222       191.640       195.342    
  44  0.512382     -0.668685      -9.67080       9.67080       187.201       196.871    
  45  0.839798     -0.174594      -2.52506       2.52506       189.576       192.101    
  46  0.430550     -0.842692      -12.1874       12.1874       191.810       203.997    
  47  0.988263     -0.118067E-01 -0.170753      0.170753       204.512       204.683    
  48  0.349495      -1.05127      -15.2038       15.2038       191.800       207.003    
  49  0.290701      -1.23546      -17.8677       17.8677       192.846       210.714    
  50  0.210466      -1.55843      -22.5387       22.5387       190.223       212.762    
  51  0.361038      -1.01877      -14.7339       14.7339       204.357       219.091    
  52  0.168890      -1.77851      -25.7216       25.7216       190.529       216.250    
  53  0.176000      -1.73727      -25.1252       25.1252       187.149       212.275    
  54  0.494423     -0.704364      -10.1868       10.1868       191.801       201.987    
  55  0.887313     -0.119558      -1.72910       1.72910       191.708       193.437    
  56  0.318781      -1.14325      -16.5342       16.5342       185.330       201.864    
  57  0.385435     -0.953382      -13.7882       13.7882       193.218       207.006    
  58  0.557906     -0.583564      -8.43976       8.43976       187.220       195.659    
  59  0.262507      -1.33748      -19.3432       19.3432       192.832       212.176    
  60  0.573408     -0.556157      -8.04339       8.04339       188.818       196.862    
  61  0.334195      -1.09603      -15.8513       15.8513       203.127       218.979    
  62  0.365463      -1.00659      -14.5577       14.5577       190.448       205.006    
  63  0.182452      -1.70127      -24.6044       24.6044       193.212       217.816    
  64  0.224434      -1.49418      -21.6094       21.6094       181.080       202.689    
  65  0.599163     -0.512222      -7.40797       7.40797       183.165       190.573    
  66  0.549089     -0.599495      -8.67016       8.67016       192.832       201.502    
  67  0.830082     -0.186231      -2.69335       2.69335       196.089       198.782    
  68  0.824393     -0.193108      -2.79281       2.79281       193.483       196.276    
  69  0.814179     -0.205575      -2.97312       2.97312       199.184       202.157    
  70  0.731713E-01  -2.61495      -37.8185       37.8185       201.904       239.723    
  71  0.588145     -0.530782      -7.67639       7.67639       213.941       221.618    
  72  0.777400     -0.251801      -3.64165       3.64165       192.425       196.066    
loop,thermsimp(1:2)       10   2.63976       14.4756    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257        194.87          0.84          1.11         25.14          0.14          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       10
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       11
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      256     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -1.21539       1.21539       174.483       175.699    
   2  0.309089      -1.17413      -16.9807       16.9807       181.185       198.166    
   3  0.237901      -1.43590      -20.7666       20.7666       183.292       204.058    
   4  0.542467     -0.611627      -8.84561       8.84561       185.247       194.092    
   5  0.523672     -0.646889      -9.35559       9.35559       175.715       185.071    
   6  0.850058     -0.162450      -2.34942       2.34942       183.165       185.515    
   7  0.589343     -0.528746      -7.64695       7.64695       189.440       197.087    
   8  0.979269     -0.209490E-01 -0.302973      0.302973       189.576       189.879    
   9  0.110419      -2.20347      -31.8676       31.8676       191.913       223.781    
  10  0.557914     -0.583550      -8.43955       8.43955       189.745       198.184    
  11  0.474464     -0.745569      -10.7827       10.7827       191.114       201.896    
  12  0.312482      -1.16321      -16.8228       16.8228       191.708       208.531    
  13  0.297011      -1.21399      -17.5572       17.5572       191.159       208.716    
  14  0.857571     -0.153651      -2.22217       2.22217       184.490       186.712    
  15  0.792567     -0.232479      -3.36221       3.36221       187.278       190.640    
  16  0.963006     -0.376958E-01 -0.545173      0.545173       189.875       190.420    
  17  0.294103      -1.22382      -17.6995       17.6995       191.444       209.143    
  18  0.403484     -0.907618      -13.1264       13.1264       191.640       204.766    
  19  0.449313     -0.800035      -11.5704       11.5704       191.517       203.088    
  20  0.721912     -0.325852      -4.71261       4.71261       187.220       191.932    
  21  0.512488     -0.668479      -9.66782       9.66782       192.425       202.093    
  22  0.885190     -0.121953      -1.76373       1.76373       193.483       195.247    
  23  0.694751E-01  -2.66679      -38.5682       38.5682       188.818       227.386    
  24  0.820879     -0.197380      -2.85459       2.85459       187.201       190.055    
  25  0.211527      -1.55340      -22.4660       22.4660       186.584       209.050    
  26  0.937420     -0.646236E-01 -0.934613      0.934613       185.115       186.050    
  27  0.515756E-01  -2.96471      -42.8769       42.8769       192.392       235.269    
  28  0.695222     -0.363525      -5.25745       5.25745       193.650       198.907    
  29  0.718776     -0.330205      -4.77557       4.77557       188.127       192.902    
  30  0.536080     -0.623471      -9.01690       9.01690       196.089       205.106    
  31  0.585855     -0.534682      -7.73280       7.73280       192.832       200.565    
  32  0.693572     -0.365900      -5.29181       5.29181       187.446       192.738    
  33  0.700823     -0.355500      -5.14139       5.14139       190.902       196.043    
  34  0.250985      -1.38236      -19.9923       19.9923       195.694       215.687    
  35  0.290600      -1.23581      -17.8728       17.8728       192.832       210.705    
  36  0.828609     -0.188007      -2.71904       2.71904       185.330       188.049    
  37  0.225820      -1.48802      -21.5203       21.5203       191.801       213.321    
  38  0.999674     -0.326354E-03 -0.471987E-02  0.471987E-02   199.184       199.189    
  39  0.878216     -0.129862      -1.87813       1.87813       183.837       185.715    
  40  0.685898E-01  -2.67961      -38.7537       38.7537       181.080       219.833    
  41  0.273860      -1.29514      -18.7308       18.7308       191.810       210.541    
  42  0.697655     -0.360030      -5.20691       5.20691       189.414       194.621    
  43  0.293168      -1.22701      -17.7455       17.7455       199.180       216.925    
  44  0.319476      -1.14107      -16.5027       16.5027       192.707       209.210    
  45  0.874681     -0.133896      -1.93647       1.93647       204.512       206.449    
  46  0.408697     -0.894781      -12.9407       12.9407       189.474       202.414    
  47  0.142130E-01  -4.25360      -61.5173       61.5173       190.448       251.965    
  48  0.164528      -1.80468      -26.1000       26.1000       195.166       221.266    
  49  0.652669     -0.426685      -6.17090       6.17090       192.832       199.003    
  50  0.492107     -0.709060      -10.2547       10.2547       193.304       203.558    
  51  0.542705     -0.611189      -8.83928       8.83928       191.800       200.639    
  52  0.798603     -0.224891      -3.25247       3.25247       193.218       196.471    
  53  0.474092E-01  -3.04894      -44.0951       44.0951       192.846       236.941    
  54  0.425084     -0.855468      -12.3721       12.3721       192.832       205.204    
  55  0.349722      -1.05062      -15.1945       15.1945       187.149       202.344    
  56  0.499235     -0.694678      -10.0467       10.0467       192.177       202.224    
  57  0.193091      -1.64459      -23.7848       23.7848       192.598       216.383    
  58  0.876894     -0.131369      -1.89991       1.89991       184.706       186.606    
  59  0.634591     -0.454774      -6.57713       6.57713       190.223       196.800    
  60  0.571394     -0.559676      -8.09428       8.09428       190.160       198.254    
  61  0.749680     -0.288108      -4.16675       4.16675       190.529       194.695    
  62  0.111050      -2.19777      -31.7851       31.7851       189.841       221.626    
  63  0.456811     -0.783485      -11.3311       11.3311       193.212       204.543    
  64  0.686362     -0.376350      -5.44294       5.44294       203.127       208.570    
  65  0.160608      -1.82879      -26.4487       26.4487       204.357       230.806    
  66  0.557454     -0.584375      -8.45148       8.45148       187.767       196.219    
  67  0.914976     -0.888571E-01  -1.28509       1.28509       213.941       215.226    
  68  0.203755      -1.59084      -23.0074       23.0074       192.192       215.200    
  69  0.851702     -0.160519      -2.32150       2.32150       189.670       191.991    
  70  0.770841     -0.260273      -3.76418       3.76418       192.845       196.609    
  71  0.137106      -1.98700      -28.7369       28.7369       201.904       230.641    
  72  0.142091      -1.95129      -28.2203       28.2203       194.868       223.088    
loop,thermsimp(1:2)       11   1.21539       16.9807    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258        197.35          0.84          1.11         25.09          0.14          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    259        252.54          0.85          1.11         25.37          0.09          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    197.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       11
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       12
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      258     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -3.91455       3.91455       174.483       178.398    
   2  0.482922E-01  -3.03048      -43.8282       43.8282       175.715       219.543    
   3  0.612960     -0.489456      -7.07872       7.07872       183.165       190.244    
   4  0.910127     -0.941714E-01  -1.36195       1.36195       183.837       185.199    
   5  0.362433      -1.01492      -14.6782       14.6782       185.115       199.793    
   6  0.476779     -0.740702      -10.7124       10.7124       184.706       195.418    
   7  0.179006E-01  -4.02292      -58.1812       58.1812       184.490       242.671    
   8  0.589646     -0.528233      -7.63952       7.63952       185.330       192.970    
   9  0.926206     -0.766581E-01  -1.10866       1.10866       189.576       190.685    
  10  0.492629     -0.707999      -10.2394       10.2394       187.201       197.440    
  11  0.661123     -0.413815      -5.98477       5.98477       189.875       195.859    
  12  0.542248     -0.612032      -8.85146       8.85146       187.278       196.129    
  13  0.216527      -1.53004      -22.1281       22.1281       187.220       209.348    
  14  0.549832     -0.598143      -8.65060       8.65060       189.670       198.320    
  15  0.429556     -0.845003      -12.2208       12.2208       187.446       199.667    
  16  0.264838      -1.32864      -19.2153       19.2153       188.127       207.342    
  17  0.251706      -1.37949      -19.9508       19.9508       185.247       205.198    
  18  0.701724     -0.354215      -5.12280       5.12280       189.414       194.537    
  19  0.324289      -1.12612      -16.2864       16.2864       190.529       206.815    
  20  0.160749E-02  -6.43308      -93.0380       93.0380       193.483       286.521    
  21  0.533627     -0.628058      -9.08325       9.08325       190.902       199.985    
  22  0.883065     -0.124357      -1.79850       1.79850       187.767       189.566    
  23  0.484824     -0.723969      -10.4703       10.4703       193.218       203.688    
  24  0.724157     -0.322747      -4.66771       4.66771       192.845       197.513    
  25  0.847375     -0.165612      -2.39516       2.39516       190.223       192.618    
  26  0.167586      -1.78626      -25.8336       25.8336       189.440       215.274    
  27  0.890079     -0.116445      -1.68407       1.68407       181.185       182.869    
  28  0.235223      -1.44722      -20.9304       20.9304       189.745       210.675    
  29  0.206112      -1.57934      -22.8410       22.8410       190.160       213.001    
  30  0.463385     -0.769198      -11.1245       11.1245       193.650       204.774    
  31  0.487880E-01  -3.02027      -43.6804       43.6804       192.832       236.513    
  32  0.244157      -1.40994      -20.3912       20.3912       199.184       219.575    
  33  0.770602     -0.260583      -3.76866       3.76866       192.832       196.601    
  34  0.264159      -1.33120      -19.2524       19.2524       191.800       211.052    
  35  0.189030E-01  -3.96843      -57.3932       57.3932       191.114       248.507    
  36  0.635342     -0.453592      -6.56004       6.56004       192.425       198.985    
  37  0.139550      -1.96933      -28.4813       28.4813       192.177       220.659    
  38  0.561566     -0.577026      -8.34519       8.34519       187.149       195.495    
  39  0.951789     -0.494118E-01 -0.714615      0.714615       189.474       190.188    
  40  0.527693     -0.639242      -9.24498       9.24498       191.517       200.762    
  41  0.925337     -0.775972E-01  -1.12224       1.12224       193.304       194.426    
  42  0.795352     -0.228971      -3.31148       3.31148       183.292       186.603    
  43  0.530799     -0.633371      -9.16009       9.16009       193.212       202.372    
  44  0.642763     -0.441979      -6.39209       6.39209       191.640       198.032    
  45  0.485146     -0.723305      -10.4607       10.4607       196.089       206.550    
  46  0.795896     -0.228287      -3.30158       3.30158       192.832       196.134    
  47  0.519140     -0.655581      -9.48130       9.48130       204.512       213.994    
  48  0.694073E-01  -2.66776      -38.5823       38.5823       191.708       230.290    
  49  0.401486     -0.912583      -13.1982       13.1982       203.127       216.326    
  50  0.587982E-01  -2.83364      -40.9814       40.9814       191.159       232.140    
  51  0.752652     -0.284152      -4.10953       4.10953       186.584       190.693    
  52  0.139929      -1.96662      -28.4421       28.4421       191.444       219.886    
  53  0.136759      -1.98953      -28.7735       28.7735       192.707       221.481    
  54  0.690728     -0.370009      -5.35123       5.35123       191.810       197.161    
  55  0.409546     -0.892705      -12.9107       12.9107       192.832       205.743    
  56  0.422285     -0.862075      -12.4677       12.4677       191.801       204.268    
  57  0.160439      -1.82984      -26.4639       26.4639       192.192       218.656    
  58  0.230463      -1.46767      -21.2260       21.2260       213.941       235.167    
  59  0.836860     -0.178099      -2.57574       2.57574       195.694       198.270    
  60  0.635813     -0.452850      -6.54931       6.54931       192.598       199.147    
  61  0.464135     -0.767580      -11.1011       11.1011       199.180       210.281    
  62  0.999501     -0.498826E-03 -0.721423E-02  0.721423E-02   181.080       181.087    
  63  0.472031     -0.750710      -10.8571       10.8571       195.166       206.023    
  64  0.926290     -0.765681E-01  -1.10736       1.10736       189.841       190.948    
  65  0.825201E-01  -2.49471      -36.0796       36.0796       194.868       230.948    
  66  0.987125     -0.129587E-01 -0.187414      0.187414       191.913       192.101    
  67  0.902936     -0.102104      -1.47667       1.47667       188.818       190.295    
  68  0.269140E-01  -3.61511      -52.2832       52.2832       201.904       254.187    
  69  0.343181      -1.06950      -15.4675       15.4675       204.357       219.824    
  70  0.364015      -1.01056      -14.6151       14.6151       192.392       207.007    
  71  0.420237     -0.866937      -12.5380       12.5380       192.846       205.384    
  72  0.806946     -0.214499      -3.10217       3.10217       197.354       200.456    
loop,thermsimp(1:2)       12   3.91455       43.8282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260        184.25          0.85          1.11         25.23          0.16          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    261        179.76          0.83          1.11         25.08          0.14          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    179.76       0.9305     -1.521      1.876     -102.6     0.9551    
                      0.1832      1.834     -99.70      3.900     0.2281    
                       2.179     -1.505      1.997      0.000     -40.00    
                      -1.497      0.000      0.000      0.000     -1.221    

                      -2.500     0.2695E+05 0.2891E+05  0.000      0.000    
                     -0.5672     -5.980     -4.479     -7.924      4.380    
                      -14.65     -2.787      362.9      0.000      3161.    

                     -0.9423E+05  8519.      2301.     0.2320E+05  4457.    
                       6321.    -0.1528E-01 0.6324E-01  0.000     0.6324E-01
                     -0.1547E-01 0.3560E-01 0.2427E-01 0.1535E-01 0.6324E-01

                     -0.2910E-01-0.8998      0.000    -0.6046E-01 0.5633E-01
                       0.000     0.2310E-01-0.3092E-01 0.1833E-01 0.3061E-01
                      0.6324E-01 0.9294E-02-0.6950E-01 -1.011      0.000    

                      0.5628E-01-0.3931    -0.4251    -0.3892    -0.2705E-01
                      0.2074      8.916      8.746     -5740.     -4.000    
                     -0.2668    -0.8281      9.025      8.800     -6054.    

                      -4.000     0.2912    -0.7762      8.920      8.863    
                      -2793.     -7.000    -0.2314    -0.9132      8.969    
                       8.781     -6024.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    179.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       12
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       13
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      260     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -7.56217       7.56217       174.483       182.046    
   2  0.691791     -0.368472      -5.32899       5.32899       181.080       186.409    
   3  0.688173     -0.373715      -5.40482       5.40482       181.185       186.590    
   4  0.439966     -0.821058      -11.8745       11.8745       183.837       195.712    
   5  0.945690     -0.558403E-01 -0.807586      0.807586       183.292       184.099    
   6  0.238956      -1.43147      -20.7026       20.7026       187.767       208.470    
   7  0.280830E-01  -3.57259      -51.6683       51.6683       189.474       241.142    
   8  0.902031E-01  -2.40569      -34.7921       34.7921       183.165       217.958    
   9  0.198361      -1.61767      -23.3954       23.3954       188.818       212.214    
  10  0.201288      -1.60302      -23.1835       23.1835       189.576       212.760    
  11  0.710033     -0.342444      -4.95257       4.95257       186.584       191.537    
  12  0.182913      -1.69874      -24.5680       24.5680       189.841       214.409    
  13  0.817316     -0.201730      -2.91750       2.91750       191.913       194.831    
  14  0.894732     -0.111231      -1.60867       1.60867       190.223       191.832    
  15  0.854000     -0.157824      -2.28252       2.28252       185.330       187.613    
  16  0.248066      -1.39406      -20.1615       20.1615       193.304       213.465    
  17  0.670877     -0.399170      -5.77296       5.77296       189.414       195.187    
  18  0.701473     -0.354573      -5.12798       5.12798       184.706       189.834    
  19  0.199467      -1.61210      -23.3149       23.3149       187.149       210.464    
  20  0.391533     -0.937685      -13.5612       13.5612       189.875       203.436    
  21  0.586761     -0.533138      -7.71046       7.71046       187.278       194.988    
  22  0.163799      -1.80912      -26.1642       26.1642       192.832       218.997    
  23  0.955964     -0.450353E-01 -0.651319      0.651319       192.832       193.484    
  24  0.365727      -1.00587      -14.5473       14.5473       191.810       206.357    
  25  0.733577     -0.309822      -4.48078       4.48078       187.201       191.681    
  26  0.111597      -2.19286      -31.7141       31.7141       192.845       224.559    
  27  0.714895     -0.335619      -4.85386       4.85386       191.640       196.494    
  28  0.816688     -0.202498      -2.92861       2.92861       195.694       198.623    
  29  0.480603     -0.732714      -10.5968       10.5968       189.670       200.266    
  30  0.573891     -0.555316      -8.03121       8.03121       192.425       200.456    
  31  0.204452      -1.58742      -22.9580       22.9580       192.598       215.556    
  32  0.845356E-01  -2.47058      -35.7306       35.7306       187.446       223.177    
  33  0.524789E-01  -2.94734      -42.6257       42.6257       185.115       227.741    
  34  0.631781     -0.459213      -6.64133       6.64133       190.902       197.543    
  35  0.620363     -0.477450      -6.90508       6.90508       197.354       204.259    
  36  0.553551     -0.591402      -8.55311       8.55311       191.517       200.070    
  37  0.546271     -0.604640      -8.74456       8.74456       193.212       201.956    
  38  0.402204     -0.910797      -13.1723       13.1723       193.218       206.390    
  39  0.735174     -0.307648      -4.44933       4.44933       191.801       196.250    
  40  0.359565      -1.02286      -14.7930       14.7930       193.650       208.443    
  41  0.564111     -0.572504      -8.27980       8.27980       185.247       193.527    
  42  0.412661     -0.885128      -12.8011       12.8011       192.846       205.647    
  43  0.795853     -0.228341      -3.30236       3.30236       192.832       196.135    
  44  0.909991E-01  -2.39691      -34.6651       34.6651       195.166       229.831    
  45  0.830687     -0.185502      -2.68281       2.68281       196.089       198.772    
  46  0.592588     -0.523256      -7.56755       7.56755       190.529       198.096    
  47  0.489472     -0.714427      -10.3324       10.3324       192.392       202.724    
  48  0.992056     -0.797586E-02 -0.115350      0.115350       188.127       188.242    
  49  0.808208     -0.212936      -3.07957       3.07957       187.220       190.299    
  50  0.212569      -1.54849      -22.3949       22.3949       199.180       221.574    
  51  0.214041      -1.54159      -22.2951       22.2951       189.745       212.040    
  52  0.586527     -0.533536      -7.71622       7.71622       191.800       199.516    
  53  0.603460     -0.505075      -7.30461       7.30461       190.160       197.465    
  54  0.819887     -0.198589      -2.87207       2.87207       204.512       207.384    
  55  0.204248      -1.58842      -22.9724       22.9724       189.440       212.412    
  56  0.540917     -0.614489      -8.88700       8.88700       203.127       212.014    
  57  0.430522     -0.842757      -12.1883       12.1883       192.192       204.381    
  58  0.637009E-01  -2.75356      -39.8231       39.8231       175.715       215.538    
  59  0.872387     -0.136522      -1.97444       1.97444       199.184       201.158    
  60  0.740351     -0.300631      -4.34785       4.34785       204.357       208.705    
  61  0.844085     -0.169502      -2.45141       2.45141       191.444       193.895    
  62  0.574613     -0.554058      -8.01302       8.01302       192.177       200.190    
  63  0.382052     -0.962198      -13.9157       13.9157       192.707       206.623    
  64  0.564583     -0.571667      -8.26769       8.26769       191.708       199.976    
  65  0.700807     -0.355522      -5.14171       5.14171       194.868       200.010    
  66  0.237235      -1.43870      -20.8071       20.8071       191.159       211.966    
  67  0.745904     -0.293158      -4.23978       4.23978       213.941       218.181    
  68  0.369081     -0.996740      -14.4153       14.4153       192.832       207.248    
  69  0.512148     -0.669141      -9.67740       9.67740       184.490       194.167    
  70  0.239900E-01  -3.73012      -53.9465       53.9465       191.114       245.060    
  71  0.364860E-01  -3.31083      -47.8826       47.8826       201.904       249.787    
  72  0.792805E-01  -2.53476      -36.6588       36.6588       179.763       216.422    
loop,thermsimp(1:2)       13   7.56217       5.32899    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262        184.06          0.84          1.11         25.16          0.14          0.04         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       13
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       14
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      261     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -15.6456       15.6456       174.483       190.129    
   2  0.649641     -0.431335      -6.23815       6.23815       183.292       189.530    
   3  0.930116     -0.724456E-01  -1.04774       1.04774       181.080       182.127    
   4  0.297326      -1.21293      -17.5419       17.5419       181.185       198.727    
   5  0.751734     -0.285373      -4.12718       4.12718       185.330       189.457    
   6  0.409056     -0.893902      -12.9280       12.9280       188.127       201.055    
   7  0.115094      -2.16201      -31.2679       31.2679       184.706       215.974    
   8  0.606681     -0.499753      -7.22763       7.22763       187.220       194.447    
   9  0.140571      -1.96204      -28.3759       28.3759       186.584       214.960    
  10  0.447669E-01  -3.10629      -44.9244       44.9244       187.201       232.125    
  11  0.517394     -0.658951      -9.53003       9.53003       190.223       199.753    
  12  0.587057     -0.532633      -7.70317       7.70317       192.832       200.535    
  13  0.384993E-01  -3.25712      -47.1058       47.1058       185.247       232.352    
  14  0.829105E-01  -2.48999      -36.0113       36.0113       191.444       227.455    
  15  0.382179     -0.961866      -13.9109       13.9109       184.490       198.401    
  16  0.269516      -1.31113      -18.9621       18.9621       191.913       210.876    
  17  0.879580     -0.128311      -1.85568       1.85568       187.278       189.133    
  18  0.760503E-01  -2.57636      -37.2604       37.2604       189.414       226.675    
  19  0.482544     -0.728684      -10.5385       10.5385       183.837       194.376    
  20  0.561499     -0.577145      -8.34692       8.34692       192.832       201.179    
  21  0.254621      -1.36798      -19.7843       19.7843       191.801       211.585    
  22  0.479261     -0.735511      -10.6373       10.6373       191.640       202.277    
  23  0.638455     -0.448704      -6.48935       6.48935       190.160       196.649    
  24  0.289082      -1.24105      -17.9485       17.9485       190.902       208.851    
  25  0.656024     -0.421558      -6.09675       6.09675       190.529       196.625    
  26  0.597431     -0.515117      -7.44984       7.44984       195.694       203.144    
  27  0.859562     -0.151333      -2.18864       2.18864       196.089       198.277    
  28  0.554826     -0.589100      -8.51982       8.51982       191.800       200.319    
  29  0.128413      -2.05250      -29.6842       29.6842       191.708       221.392    
  30  0.311170      -1.16742      -16.8837       16.8837       194.868       211.752    
  31  0.606679     -0.499755      -7.22767       7.22767       191.517       198.745    
  32  0.923238     -0.798686E-01  -1.15509       1.15509       192.177       193.332    
  33  0.734154     -0.309037      -4.46943       4.46943       189.670       194.139    
  34  0.988670     -0.113947E-01 -0.164795      0.164795       192.425       192.590    
  35  0.136308      -1.99284      -28.8213       28.8213       199.184       228.005    
  36  0.345839      -1.06178      -15.3560       15.3560       193.212       208.568    
  37  0.349440      -1.05142      -15.2061       15.2061       192.392       207.598    
  38  0.625658E-01  -2.77154      -40.0831       40.0831       189.875       229.958    
  39  0.394804     -0.929365      -13.4409       13.4409       197.354       210.795    
  40  0.899667E-02  -4.71090      -68.1310       68.1310       192.192       260.323    
  41  0.823946     -0.193651      -2.80066       2.80066       192.846       195.647    
  42  0.834235     -0.181240      -2.62118       2.62118       191.810       194.431    
  43  0.777534     -0.251627      -3.63914       3.63914       193.218       196.857    
  44  0.384993     -0.954531      -13.8048       13.8048       192.707       206.512    
  45  0.247443E-01  -3.69916      -53.4988       53.4988       192.832       246.331    
  46  0.810695     -0.209863      -3.03513       3.03513       204.512       207.547    
  47  0.893618     -0.112477      -1.62669       1.62669       193.650       195.277    
  48  0.545617     -0.605837      -8.76188       8.76188       187.767       196.529    
  49  0.587193     -0.532402      -7.69983       7.69983       204.357       212.057    
  50  0.991207     -0.883185E-02 -0.127730      0.127730       187.149       187.277    
  51  0.477440     -0.739316      -10.6923       10.6923       191.159       201.851    
  52  0.444858     -0.810000      -11.7146       11.7146       203.127       214.842    
  53  0.103440      -2.26876      -32.8118       32.8118       189.745       222.557    
  54  0.320718      -1.13719      -16.4466       16.4466       188.818       205.265    
  55  0.161721      -1.82188      -26.3489       26.3489       189.440       215.789    
  56  0.912244     -0.918481E-01  -1.32835       1.32835       189.576       190.905    
  57  0.358583      -1.02559      -14.8326       14.8326       193.304       208.136    
  58  0.263871      -1.33229      -19.2682       19.2682       189.841       209.109    
  59  0.782230     -0.245606      -3.55206       3.55206       175.715       179.267    
  60  0.592946     -0.522652      -7.55882       7.55882       192.598       200.157    
  61  0.652732     -0.426589      -6.16951       6.16951       179.763       185.933    
  62  0.817021     -0.202091      -2.92273       2.92273       183.165       186.088    
  63  0.177213      -1.73040      -25.0258       25.0258       213.941       238.967    
  64  0.263258      -1.33462      -19.3018       19.3018       192.832       212.134    
  65  0.856937     -0.154391      -2.23286       2.23286       199.180       201.412    
  66  0.541629E-01  -2.91576      -42.1690       42.1690       187.446       229.615    
  67  0.919404     -0.840293E-01  -1.21527       1.21527       192.845       194.061    
  68  0.996572     -0.343426E-02 -0.496678E-01  0.496678E-01   185.115       185.165    
  69  0.257654      -1.35614      -19.6130       19.6130       195.166       214.779    
  70  0.684182     -0.379532      -5.48895       5.48895       189.474       194.963    
  71  0.870041     -0.139215      -2.01338       2.01338       191.114       193.127    
  72  0.854707     -0.156997      -2.27055       2.27055       184.056       186.326    
loop,thermsimp(1:2)       14   15.6456       6.23815    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263        187.47          0.84          1.11         25.08          0.21          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       14
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       15
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      262     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -21.9161       21.9161       175.715       197.631    
   2  0.894567E-01  -2.41400      -34.9123       34.9123       181.080       215.992    
   3  0.863615     -0.146628      -2.12060       2.12060       185.115       187.236    
   4  0.807990     -0.213206      -3.08347       3.08347       179.763       182.847    
   5  0.318173      -1.14516      -16.5618       16.5618       183.165       199.727    
   6  0.464606     -0.766566      -11.0864       11.0864       184.056       195.142    
   7  0.574933     -0.553501      -8.00497       8.00497       187.149       195.154    
   8  0.974939     -0.253802E-01 -0.367059      0.367059       187.278       187.645    
   9  0.415757     -0.877653      -12.6930       12.6930       185.330       198.023    
  10  0.187109      -1.67606      -24.2399       24.2399       183.292       207.532    
  11  0.730515E-01  -2.61659      -37.8422       37.8422       174.483       212.326    
  12  0.209185      -1.56454      -22.6270       22.6270       189.576       212.203    
  13  0.496690     -0.699790      -10.1207       10.1207       192.425       202.545    
  14  0.862986     -0.147356      -2.13113       2.13113       191.114       193.245    
  15  0.888200     -0.118558      -1.71464       1.71464       192.177       193.892    
  16  0.380888     -0.965250      -13.9599       13.9599       192.845       206.805    
  17  0.135305      -2.00022      -28.9281       28.9281       189.670       218.598    
  18  0.927079     -0.757167E-01  -1.09505       1.09505       183.837       184.932    
  19  0.603067     -0.505727      -7.31403       7.31403       191.810       199.124    
  20  0.136202      -1.99362      -28.8326       28.8326       187.220       216.052    
  21  0.954653     -0.464076E-01 -0.671167      0.671167       189.474       190.145    
  22  0.151192      -1.88920      -27.3225       27.3225       193.650       220.972    
  23  0.449259     -0.800155      -11.5722       11.5722       192.846       204.418    
  24  0.780874     -0.247341      -3.57716       3.57716       187.767       191.344    
  25  0.456238     -0.784740      -11.3492       11.3492       190.529       201.878    
  26  0.163284      -1.81227      -26.2098       26.2098       190.160       216.370    
  27  0.821444     -0.196692      -2.84464       2.84464       193.218       196.063    
  28  0.861448     -0.149141      -2.15694       2.15694       196.089       198.246    
  29  0.924167     -0.788621E-01  -1.14054       1.14054       184.490       185.630    
  30  0.195059      -1.63445      -23.6382       23.6382       181.185       204.823    
  31  0.375134     -0.980472      -14.1800       14.1800       191.517       205.697    
  32  0.909862     -0.944628E-01  -1.36616       1.36616       190.223       191.589    
  33  0.831459     -0.184574      -2.66939       2.66939       192.598       195.267    
  34  0.627278     -0.466365      -6.74477       6.74477       191.800       198.544    
  35  0.918890     -0.845891E-01  -1.22336       1.22336       192.832       194.056    
  36  0.475784     -0.742791      -10.7426       10.7426       188.127       198.869    
  37  0.344524      -1.06559      -15.4111       15.4111       192.832       208.243    
  38  0.286778      -1.24905      -18.0642       18.0642       199.180       217.244    
  39  0.336148      -1.09020      -15.7670       15.7670       191.159       206.926    
  40  0.709840     -0.342716      -4.95651       4.95651       191.640       196.596    
  41  0.219827      -1.51491      -21.9093       21.9093       195.694       217.604    
  42  0.347594      -1.05672      -15.2827       15.2827       188.818       204.101    
  43  0.905734     -0.990099E-01  -1.43192       1.43192       192.707       194.139    
  44  0.826231     -0.190881      -2.76060       2.76060       204.512       207.273    
  45  0.400277     -0.915599      -13.2418       13.2418       192.392       205.634    
  46  0.555153     -0.588512      -8.51131       8.51131       193.304       201.815    
  47  0.864397     -0.145723      -2.10751       2.10751       193.212       195.319    
  48  0.277380E-01  -3.58495      -51.8471       51.8471       190.902       242.749    
  49  0.993968     -0.605015E-02 -0.874999E-01  0.874999E-01   189.841       189.928    
  50  0.717076     -0.332573      -4.80981       4.80981       197.354       202.164    
  51  0.736253     -0.306182      -4.42813       4.42813       191.913       196.342    
  52  0.278813      -1.27722      -18.4716       18.4716       191.801       210.272    
  53  0.646460     -0.436245      -6.30915       6.30915       194.868       201.177    
  54  0.600312     -0.510306      -7.38026       7.38026       204.357       211.737    
  55  0.295434      -1.21931      -17.6342       17.6342       192.832       210.467    
  56  0.946129     -0.553767E-01 -0.800881      0.800881       195.166       195.967    
  57  0.722008     -0.325719      -4.71069       4.71069       203.127       207.838    
  58  0.789514     -0.236338      -3.41802       3.41802       186.584       190.002    
  59  0.955429     -0.455949E-01 -0.659413      0.659413       189.440       190.099    
  60  0.693546     -0.365938      -5.29234       5.29234       184.706       189.998    
  61  0.979434     -0.207808E-01 -0.300541      0.300541       191.708       192.009    
  62  0.860966     -0.149700      -2.16503       2.16503       189.745       191.910    
  63  0.329063      -1.11151      -16.0751       16.0751       189.414       205.489    
  64  0.839540     -0.174902      -2.52950       2.52950       191.444       193.974    
  65  0.511945     -0.669538      -9.68314       9.68314       199.184       208.867    
  66  0.265617      -1.32570      -19.1728       19.1728       187.446       206.619    
  67  0.793213     -0.231663      -3.35041       3.35041       189.875       193.225    
  68  0.515723     -0.662186      -9.57682       9.57682       187.201       196.777    
  69  0.928816     -0.738450E-01  -1.06798       1.06798       185.247       186.315    
  70  0.936254     -0.658686E-01 -0.952620      0.952620       213.941       214.894    
  71  0.735848     -0.306732      -4.43609       4.43609       192.832       197.268    
  72  0.194591      -1.63686      -23.6729       23.6729       187.470       211.143    
loop,thermsimp(1:2)       15   21.9161       34.9123    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264        193.51          0.84          1.11         25.05          0.15          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       15
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       16
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      263     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -21.1470       21.1470       179.763       200.910    
   2  0.641193     -0.444425      -6.42746       6.42746       183.837       190.265    
   3  0.353033      -1.04119      -15.0582       15.0582       184.490       199.548    
   4  0.928955     -0.736953E-01  -1.06581       1.06581       185.247       186.313    
   5  0.350257      -1.04909      -15.1724       15.1724       185.115       200.287    
   6  0.682617     -0.381821      -5.52206       5.52206       187.278       192.800    
   7  0.162763      -1.81546      -26.2559       26.2559       189.841       216.097    
   8  0.874032     -0.134639      -1.94720       1.94720       184.706       186.653    
   9  0.518909     -0.656027      -9.48774       9.48774       186.584       196.072    
  10  0.461984     -0.772226      -11.1683       11.1683       189.440       200.608    
  11  0.449468     -0.799691      -11.5655       11.5655       189.474       201.039    
  12  0.523281     -0.647637      -9.36641       9.36641       187.767       197.134    
  13  0.637377     -0.450394      -6.51380       6.51380       190.223       196.737    
  14  0.596329     -0.516963      -7.47654       7.47654       189.745       197.221    
  15  0.286246      -1.25090      -18.0911       18.0911       191.708       209.799    
  16  0.590425     -0.526913      -7.62045       7.62045       189.875       197.495    
  17  0.853637     -0.158249      -2.28866       2.28866       191.114       193.402    
  18  0.245572      -1.40416      -20.3076       20.3076       192.177       212.485    
  19  0.375654     -0.979088      -14.1600       14.1600       191.444       205.604    
  20  0.281654      -1.26708      -18.3250       18.3250       192.832       211.157    
  21  0.443392     -0.813302      -11.7623       11.7623       192.707       204.470    
  22  0.442934     -0.814335      -11.7773       11.7773       184.056       195.833    
  23  0.171790      -1.76149      -25.4753       25.4753       187.149       212.625    
  24  0.802582     -0.219921      -3.18060       3.18060       192.598       195.779    
  25  0.162733      -1.81564      -26.2586       26.2586       193.212       219.470    
  26  0.838320     -0.176355      -2.55052       2.55052       195.166       197.716    
  27  0.210754      -1.55706      -22.5189       22.5189       193.218       215.737    
  28  0.240377      -1.42554      -20.6168       20.6168       191.913       212.530    
  29  0.173042E-01  -4.05680      -58.6712       58.6712       191.640       250.311    
  30  0.640146     -0.446059      -6.45109       6.45109       187.201       193.652    
  31  0.749210     -0.288736      -4.17582       4.17582       192.832       197.008    
  32  0.666162     -0.406222      -5.87496       5.87496       175.715       181.590    
  33  0.601746     -0.507920      -7.34575       7.34575       185.330       192.676    
  34  0.677044     -0.390020      -5.64063       5.64063       196.089       201.729    
  35  0.290379      -1.23657      -17.8838       17.8838       191.800       209.683    
  36  0.439723     -0.821610      -11.8825       11.8825       188.127       200.009    
  37  0.680091     -0.385528      -5.57567       5.57567       191.810       197.385    
  38  0.803784     -0.218425      -3.15895       3.15895       183.165       186.324    
  39  0.507823     -0.677622      -9.80006       9.80006       194.868       204.668    
  40  0.894573     -0.111408      -1.61124       1.61124       193.304       194.915    
  41  0.826908     -0.190062      -2.74876       2.74876       190.529       193.278    
  42  0.815562     -0.203878      -2.94858       2.94858       197.354       200.303    
  43  0.352457      -1.04283      -15.0818       15.0818       192.425       207.507    
  44  0.104059      -2.26279      -32.7255       32.7255       188.818       221.544    
  45  0.601892     -0.507677      -7.34224       7.34224       192.846       200.188    
  46  0.988184     -0.118862E-01 -0.171903      0.171903       181.185       181.357    
  47  0.733912     -0.309366      -4.47418       4.47418       189.414       193.888    
  48  0.107394      -2.23125      -32.2692       32.2692       192.392       224.661    
  49  0.592150     -0.523995      -7.57824       7.57824       191.517       199.096    
  50  0.821901     -0.196136      -2.83660       2.83660       187.446       190.283    
  51  0.400070E-01  -3.21870      -46.5502       46.5502       192.845       239.396    
  52  0.271211      -1.30486      -18.8714       18.8714       191.159       210.030    
  53  0.296309      -1.21635      -17.5914       17.5914       204.512       222.104    
  54  0.436334     -0.829346      -11.9944       11.9944       183.292       195.286    
  55  0.372372     -0.987863      -14.2869       14.2869       203.127       217.414    
  56  0.806182     -0.215446      -3.11587       3.11587       192.832       195.948    
  57  0.194087      -1.63945      -23.7104       23.7104       199.184       222.894    
  58  0.739876     -0.301273      -4.35714       4.35714       191.801       196.158    
  59  0.348380      -1.05446      -15.2501       15.2501       192.832       208.082    
  60  0.850149     -0.162343      -2.34788       2.34788       187.470       189.818    
  61  0.123296      -2.09317      -30.2723       30.2723       204.357       234.629    
  62  0.855160     -0.156467      -2.26289       2.26289       189.576       191.839    
  63  0.959969E-01  -2.34344      -33.8918       33.8918       174.483       208.375    
  64  0.739916     -0.301218      -4.35635       4.35635       213.941       218.298    
  65  0.470406     -0.754159      -10.9070       10.9070       181.080       191.986    
  66  0.559264     -0.581134      -8.40461       8.40461       187.220       195.624    
  67  0.935836     -0.663155E-01 -0.959083      0.959083       190.160       191.119    
  68  0.190508      -1.65806      -23.9796       23.9796       199.180       223.159    
  69  0.410140     -0.891256      -12.8897       12.8897       195.694       208.584    
  70  0.289980E-01  -3.54053      -51.2046       51.2046       189.670       240.874    
  71  0.401138     -0.913450      -13.2107       13.2107       193.650       206.861    
  72  0.695873     -0.362588      -5.24390       5.24390       193.513       198.757    
loop,thermsimp(1:2)       16   21.1470       6.42746    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265        191.01          0.84          1.11         25.18          0.04          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    191.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       16
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       17
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      264     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -3.65070       3.65070       181.185       184.836    
   2  0.350417      -1.04863      -15.1658       15.1658       175.715       190.881    
   3  0.533846     -0.627648      -9.07731       9.07731       185.247       194.324    
   4  0.622955     -0.473280      -6.84478       6.84478       183.165       190.010    
   5  0.661091E-01  -2.71645      -39.2864       39.2864       184.706       223.992    
   6  0.759206     -0.275482      -3.98414       3.98414       187.470       191.454    
   7  0.430535     -0.842727      -12.1879       12.1879       183.837       196.025    
   8  0.257678      -1.35604      -19.6117       19.6117       187.446       207.058    
   9  0.296561      -1.21550      -17.5791       17.5791       190.160       207.739    
  10  0.805929     -0.215760      -3.12041       3.12041       189.576       192.697    
  11  0.421616     -0.863661      -12.4906       12.4906       181.080       193.570    
  12  0.767803     -0.264223      -3.82130       3.82130       185.330       189.152    
  13  0.605260     -0.502097      -7.26154       7.26154       187.278       194.539    
  14  0.566784     -0.567776      -8.21142       8.21142       190.529       198.740    
  15  0.292740      -1.22847      -17.7667       17.7667       191.114       208.880    
  16  0.898463     -0.107069      -1.54848       1.54848       187.201       188.749    
  17  0.218067      -1.52295      -22.0256       22.0256       189.414       211.440    
  18  0.856756     -0.154603      -2.23593       2.23593       193.304       195.540    
  19  0.338883      -1.08210      -15.6498       15.6498       183.292       198.941    
  20  0.796034     -0.228113      -3.29907       3.29907       187.220       190.519    
  21  0.778636     -0.250212      -3.61867       3.61867       192.598       196.217    
  22  0.575989     -0.551667      -7.97845       7.97845       184.056       192.034    
  23  0.355531      -1.03414      -14.9562       14.9562       192.832       207.789    
  24  0.164949      -1.80212      -26.0630       26.0630       186.584       212.647    
  25  0.315998      -1.15202      -16.6610       16.6610       191.801       208.462    
  26  0.330933      -1.10584      -15.9931       15.9931       190.223       206.216    
  27  0.429436     -0.845283      -12.2248       12.2248       192.832       205.057    
  28  0.464808     -0.766130      -11.0801       11.0801       187.767       198.847    
  29  0.192211      -1.64916      -23.8509       23.8509       189.745       213.596    
  30  0.866849     -0.142891      -2.06654       2.06654       191.810       193.876    
  31  0.474973     -0.744498      -10.7672       10.7672       189.875       200.642    
  32  0.667713     -0.403897      -5.84133       5.84133       195.166       201.007    
  33  0.994155     -0.586200E-02 -0.847788E-01  0.847788E-01   193.513       193.598    
  34  0.577739     -0.548634      -7.93458       7.93458       191.517       199.452    
  35  0.381919     -0.962546      -13.9207       13.9207       184.490       198.410    
  36  0.733204     -0.310331      -4.48814       4.48814       188.127       192.615    
  37  0.492382     -0.708500      -10.2466       10.2466       192.846       203.093    
  38  0.188899E-01  -3.96913      -57.4032       57.4032       185.115       242.518    
  39  0.741920E-01  -2.60110      -37.6182       37.6182       197.354       234.972    
  40  0.210592      -1.55783      -22.5300       22.5300       189.440       211.970    
  41  0.682838     -0.381498      -5.51739       5.51739       179.763       185.280    
  42  0.656831     -0.420328      -6.07897       6.07897       189.474       195.553    
  43  0.444670     -0.810424      -11.7207       11.7207       196.089       207.809    
  44  0.872301     -0.136621      -1.97587       1.97587       192.707       194.683    
  45  0.932741     -0.696282E-01  -1.00699       1.00699       194.868       195.875    
  46  0.601727     -0.507951      -7.34621       7.34621       191.444       198.790    
  47  0.940344     -0.615097E-01 -0.889579      0.889579       193.650       194.539    
  48  0.208477E-01  -3.87051      -55.9770       55.9770       192.425       248.402    
  49  0.257831      -1.35545      -19.6031       19.6031       192.832       212.435    
  50  0.522803     -0.648550      -9.37960       9.37960       174.483       183.863    
  51  0.676437     -0.390915      -5.65358       5.65358       195.694       201.348    
  52  0.612346     -0.490458      -7.09321       7.09321       191.800       198.893    
  53  0.206854      -1.57574      -22.7891       22.7891       191.708       214.497    
  54  0.201156      -1.60367      -23.1930       23.1930       191.159       214.352    
  55  0.785118     -0.241921      -3.49876       3.49876       192.832       196.331    
  56  0.534951     -0.625580      -9.04740       9.04740       192.177       201.225    
  57  0.147432      -1.91439      -27.6867       27.6867       191.913       219.600    
  58  0.696605     -0.361537      -5.22871       5.22871       187.149       192.378    
  59  0.711810     -0.339944      -4.91641       4.91641       193.218       198.135    
  60  0.934269     -0.679906E-01 -0.983308      0.983308       189.841       190.824    
  61  0.821040     -0.197183      -2.85174       2.85174       203.127       205.979    
  62  0.682914     -0.381386      -5.51576       5.51576       213.941       219.457    
  63  0.660876     -0.414189      -5.99018       5.99018       193.212       199.202    
  64  0.653213     -0.425852      -6.15885       6.15885       188.818       194.977    
  65  0.327611      -1.11593      -16.1390       16.1390       204.512       220.651    
  66  0.191936      -1.65059      -23.8716       23.8716       199.184       223.056    
  67  0.417647E-01  -3.17570      -45.9284       45.9284       199.180       245.108    
  68  0.629872     -0.462239      -6.68510       6.68510       192.392       199.077    
  69  0.391125     -0.938727      -13.5763       13.5763       204.357       217.933    
  70  0.111121      -2.19714      -31.7760       31.7760       192.845       224.621    
  71  0.315632      -1.15318      -16.6777       16.6777       189.670       206.347    
  72  0.335886      -1.09098      -15.7783       15.7783       191.012       206.790    
loop,thermsimp(1:2)       17   3.65070       15.1658    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266        183.58          0.84          1.11         25.04          0.16          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    267        183.09          0.84          1.11         25.00          0.15          0.05         27.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       17
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       18
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      266     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -20.6158       20.6158       174.483       195.099    
   2  0.711556E-02  -4.94547      -71.5235       71.5235       181.185       252.709    
   3  0.909796     -0.945347E-01  -1.36720       1.36720       179.763       181.130    
   4  0.659218     -0.416702      -6.02652       6.02652       187.201       193.227    
   5  0.833482     -0.182144      -2.63424       2.63424       185.330       187.964    
   6  0.726295E-01  -2.62238      -37.9260       37.9260       183.165       221.091    
   7  0.687091     -0.375288      -5.42758       5.42758       187.220       192.647    
   8  0.860775     -0.149922      -2.16823       2.16823       189.841       192.009    
   9  0.846215     -0.166982      -2.41497       2.41497       175.715       178.130    
  10  0.398551     -0.919919      -13.3043       13.3043       187.470       200.775    
  11  0.416092     -0.876849      -12.6814       12.6814       184.056       196.737    
  12  0.463389     -0.769189      -11.1243       11.1243       187.149       198.274    
  13  0.207356      -1.57332      -22.7540       22.7540       188.127       210.881    
  14  0.133003      -2.01738      -29.1763       29.1763       189.576       218.753    
  15  0.464971     -0.765779      -11.0750       11.0750       181.080       192.155    
  16  0.568281     -0.565140      -8.17330       8.17330       193.513       201.687    
  17  0.638811     -0.448147      -6.48129       6.48129       191.810       198.291    
  18  0.865664     -0.144259      -2.08633       2.08633       185.247       187.333    
  19  0.475002     -0.744436      -10.7664       10.7664       187.278       198.044    
  20  0.537086     -0.621597      -8.98980       8.98980       193.650       202.640    
  21  0.782345     -0.245459      -3.54993       3.54993       192.707       196.257    
  22  0.725469     -0.320937      -4.64153       4.64153       188.818       193.460    
  23  0.701426E-01  -2.65723      -38.4299       38.4299       193.304       231.734    
  24  0.297043      -1.21388      -17.5556       17.5556       189.474       207.029    
  25  0.444870     -0.809973      -11.7142       11.7142       194.868       206.582    
  26  0.685684     -0.377338      -5.45722       5.45722       183.837       189.295    
  27  0.651244     -0.428871      -6.20252       6.20252       192.598       198.800    
  28  0.269082      -1.31274      -18.9854       18.9854       192.832       211.818    
  29  0.177107      -1.73100      -25.0345       25.0345       193.218       218.253    
  30  0.766464     -0.265968      -3.84654       3.84654       184.490       188.336    
  31  0.801833     -0.220855      -3.19409       3.19409       190.529       193.723    
  32  0.759414     -0.275209      -3.98018       3.98018       191.444       195.424    
  33  0.566307     -0.568618      -8.22360       8.22360       187.767       195.991    
  34  0.297948      -1.21084      -17.5116       17.5116       191.800       209.311    
  35  0.430097E-01  -3.14633      -45.5035       45.5035       183.292       228.795    
  36  0.529414     -0.635984      -9.19787       9.19787       192.392       201.590    
  37  0.717133     -0.332494      -4.80866       4.80866       193.212       198.020    
  38  0.209457      -1.56323      -22.6082       22.6082       191.517       214.125    
  39  0.732428     -0.311390      -4.50345       4.50345       189.875       194.378    
  40  0.697782     -0.359849      -5.20429       5.20429       195.166       200.370    
  41  0.977227     -0.230362E-01 -0.333159      0.333159       192.177       192.511    
  42  0.744700     -0.294773      -4.26314       4.26314       195.694       199.957    
  43  0.713341     -0.337796      -4.88535       4.88535       192.846       197.731    
  44  0.497823     -0.697510      -10.0877       10.0877       192.832       202.920    
  45  0.968758     -0.317404E-01 -0.459043      0.459043       203.127       203.586    
  46  0.287665      -1.24596      -18.0196       18.0196       190.223       208.243    
  47  0.964672     -0.359674E-01 -0.520175      0.520175       189.670       190.190    
  48  0.733769     -0.309561      -4.47701       4.47701       191.012       195.489    
  49  0.692680     -0.367187      -5.31042       5.31042       187.446       192.757    
  50  0.328873      -1.11208      -16.0834       16.0834       190.160       206.244    
  51  0.744920     -0.294478      -4.25887       4.25887       192.832       197.091    
  52  0.655188     -0.422834      -6.11520       6.11520       196.089       202.204    
  53  0.255467      -1.36466      -19.7363       19.7363       191.801       211.537    
  54  0.262199E-02  -5.94382      -85.9621       85.9621       191.114       277.076    
  55  0.538310     -0.619321      -8.95688       8.95688       189.414       198.371    
  56  0.456270     -0.784671      -11.3482       11.3482       189.440       200.788    
  57  0.990209     -0.983957E-02 -0.142304      0.142304       192.832       192.975    
  58  0.262373      -1.33799      -19.3505       19.3505       186.584       205.934    
  59  0.645275     -0.438079      -6.33569       6.33569       189.745       196.080    
  60  0.423351     -0.859554      -12.4312       12.4312       191.159       203.590    
  61  0.353204      -1.04071      -15.0512       15.0512       191.708       206.759    
  62  0.721881     -0.325895      -4.71323       4.71323       204.357       209.070    
  63  0.213966      -1.54194      -22.3001       22.3001       213.941       236.242    
  64  0.176516      -1.73434      -25.0828       25.0828       191.913       216.996    
  65  0.885542     -0.121555      -1.75798       1.75798       204.512       206.270    
  66  0.551521     -0.595076      -8.60624       8.60624       199.184       207.790    
  67  0.847646     -0.165292      -2.39052       2.39052       184.706       187.096    
  68  0.825749E-01  -2.49405      -36.0700       36.0700       192.845       228.915    
  69  0.123448      -2.09193      -30.2544       30.2544       197.354       227.609    
  70  0.384918     -0.954725      -13.8076       13.8076       185.115       198.923    
  71  0.991208     -0.883065E-02 -0.127713      0.127713       199.180       199.307    
  72  0.864006     -0.146175      -2.11405       2.11405       183.092       185.206    
loop,thermsimp(1:2)       18   20.6158       71.5235    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268        193.31          0.84          1.11         25.31          0.08          0.05         27.39
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    269        214.32          0.84          1.11         25.40          0.14          0.05         27.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    193.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       18
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       19
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      268     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -4.70684       4.70684       175.715       180.422    
   2  0.240049      -1.42691      -20.6366       20.6366       179.763       200.400    
   3  0.365543      -1.00637      -14.5546       14.5546       183.092       197.646    
   4  0.399010     -0.918769      -13.2876       13.2876       184.706       197.994    
   5  0.685268     -0.377945      -5.46600       5.46600       185.247       190.713    
   6  0.335805E-01  -3.39381      -49.0827       49.0827       185.330       234.413    
   7  0.820520     -0.197817      -2.86091       2.86091       184.490       187.351    
   8  0.756560     -0.278973      -4.03463       4.03463       183.837       187.872    
   9  0.869461     -0.139882      -2.02304       2.02304       189.670       191.693    
  10  0.787378     -0.239047      -3.45719       3.45719       189.841       193.298    
  11  0.330926      -1.10586      -15.9934       15.9934       181.080       197.073    
  12  0.339084E-01  -3.38409      -48.9422       48.9422       192.177       241.120    
  13  0.672805     -0.396300      -5.73146       5.73146       187.220       192.951    
  14  0.822413     -0.195513      -2.82759       2.82759       187.446       190.274    
  15  0.928870     -0.737865E-01  -1.06713       1.06713       192.832       193.899    
  16  0.778944     -0.249816      -3.61295       3.61295       187.201       190.814    
  17  0.301602E-01  -3.50123      -50.6363       50.6363       188.818       239.455    
  18  0.292626      -1.22886      -17.7723       17.7723       190.529       208.301    
  19  0.149515      -1.90036      -27.4838       27.4838       189.875       217.358    
  20  0.500330E-01  -2.99507      -43.3160       43.3160       174.483       217.799    
  21  0.759114E-01  -2.57819      -37.2869       37.2869       191.444       228.731    
  22  0.613440     -0.488673      -7.06739       7.06739       191.012       198.079    
  23  0.132502      -2.02116      -29.2308       29.2308       187.767       216.998    
  24  0.189750E-02  -6.26722      -90.6392       90.6392       189.745       280.384    
  25  0.507622     -0.678018      -9.80579       9.80579       192.707       202.513    
  26  0.378733     -0.970924      -14.0419       14.0419       184.056       198.098    
  27  0.139411      -1.97033      -28.4957       28.4957       192.832       221.328    
  28  0.298599      -1.20865      -17.4801       17.4801       192.846       210.326    
  29  0.767617     -0.264464      -3.82479       3.82479       193.212       197.036    
  30  0.656077     -0.421478      -6.09559       6.09559       187.278       193.373    
  31  0.701883     -0.353988      -5.11953       5.11953       187.149       192.269    
  32  0.940950     -0.608655E-01 -0.880262      0.880262       191.810       192.690    
  33  0.621043     -0.476355      -6.88925       6.88925       189.414       196.304    
  34  0.622910     -0.473353      -6.84583       6.84583       192.598       199.444    
  35  0.525019     -0.644320      -9.31843       9.31843       185.115       194.433    
  36  0.871126     -0.137969      -1.99536       1.99536       199.180       201.175    
  37  0.475532     -0.743322      -10.7502       10.7502       195.694       206.444    
  38  0.320094      -1.13914      -16.4747       16.4747       195.166       211.640    
  39  0.688986     -0.372534      -5.38774       5.38774       187.470       192.858    
  40  0.831218     -0.184863      -2.67357       2.67357       189.440       192.114    
  41  0.639633     -0.446861      -6.46269       6.46269       192.392       198.855    
  42  0.628257     -0.464807      -6.72223       6.72223       193.513       200.236    
  43  0.925835     -0.770596E-01  -1.11447       1.11447       196.089       197.203    
  44  0.611089     -0.492512      -7.12292       7.12292       193.650       200.773    
  45  0.423003E-01  -3.16296      -45.7441       45.7441       192.832       238.576    
  46  0.430763     -0.842198      -12.1802       12.1802       203.127       215.308    
  47  0.374764     -0.981459      -14.1943       14.1943       191.159       205.353    
  48  0.109336      -2.21333      -32.0101       32.0101       186.584       218.594    
  49  0.642636E-02  -5.04735      -72.9969       72.9969       190.160       263.157    
  50  0.232984      -1.45679      -21.0686       21.0686       204.512       225.581    
  51  0.169005E-01  -4.08041      -59.0127       59.0127       194.868       253.881    
  52  0.183441      -1.69586      -24.5263       24.5263       191.708       216.234    
  53  0.257429      -1.35701      -19.6257       19.6257       189.474       209.099    
  54  0.784332     -0.242922      -3.51325       3.51325       199.184       202.697    
  55  0.417881     -0.872558      -12.6193       12.6193       190.223       202.843    
  56  0.597408E-01  -2.81774      -40.7513       40.7513       204.357       245.108    
  57  0.854186E-01  -2.46019      -35.5803       35.5803       191.800       227.380    
  58  0.484163     -0.725335      -10.4901       10.4901       188.127       198.617    
  59  0.392210     -0.935958      -13.5362       13.5362       191.801       205.337    
  60  0.544229     -0.608385      -8.79872       8.79872       192.832       201.631    
  61  0.846696     -0.166413      -2.40674       2.40674       191.517       193.924    
  62  0.273327      -1.29709      -18.7590       18.7590       191.913       210.672    
  63  0.253790      -1.37125      -19.8316       19.8316       193.218       213.050    
  64  0.683640     -0.380324      -5.50041       5.50041       189.576       195.077    
  65  0.707324     -0.346266      -5.00784       5.00784       183.165       188.173    
  66  0.664908     -0.408107      -5.90221       5.90221       197.354       203.256    
  67  0.269947      -1.30953      -18.9389       18.9389       183.292       202.231    
  68  0.112661      -2.18338      -31.5769       31.5769       192.845       224.422    
  69  0.392076     -0.936299      -13.5411       13.5411       193.304       206.845    
  70  0.711292     -0.340672      -4.92694       4.92694       213.941       218.868    
  71  0.887428     -0.119427      -1.72721       1.72721       181.185       182.912    
  72  0.620380     -0.477423      -6.90469       6.90469       193.313       200.217    
loop,thermsimp(1:2)       19   4.70684       20.6366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270        194.24          0.84          1.11         25.13          0.15          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       19
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       20
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      269     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -16.8518       16.8518       175.715       192.567    
   2  0.362384      -1.01505      -14.6801       14.6801       181.185       195.865    
   3  0.900627     -0.104664      -1.51370       1.51370       184.490       186.003    
   4  0.233893      -1.45289      -21.0123       21.0123       183.837       204.850    
   5  0.183338      -1.69642      -24.5344       24.5344       183.165       207.700    
   6  0.351708      -1.04495      -15.1125       15.1125       187.446       202.559    
   7  0.979617     -0.205938E-01 -0.297836      0.297836       185.247       185.545    
   8  0.801294     -0.221527      -3.20382       3.20382       187.201       190.404    
   9  0.423893     -0.858275      -12.4127       12.4127       189.670       202.082    
  10  0.486446     -0.720630      -10.4221       10.4221       189.440       199.862    
  11  0.430531     -0.842736      -12.1880       12.1880       187.149       199.337    
  12  0.214629      -1.53884      -22.2554       22.2554       191.810       214.065    
  13  0.860310     -0.150463      -2.17606       2.17606       187.470       189.646    
  14  0.450659     -0.797045      -11.5272       11.5272       187.220       198.747    
  15  0.867432     -0.142218      -2.05682       2.05682       189.841       191.898    
  16  0.850327     -0.162134      -2.34485       2.34485       187.278       189.622    
  17  0.914193     -0.897130E-01  -1.29747       1.29747       192.832       194.130    
  18  0.908448     -0.960172E-01  -1.38864       1.38864       191.517       192.906    
  19  0.349788E-01  -3.35301      -48.4927       48.4927       185.115       233.608    
  20  0.825048     -0.192314      -2.78133       2.78133       189.576       192.358    
  21  0.628933     -0.463730      -6.70666       6.70666       189.414       196.121    
  22  0.756366     -0.279229      -4.03833       4.03833       193.212       197.250    
  23  0.545707     -0.605674      -8.75951       8.75951       181.080       189.839    
  24  0.653619     -0.425231      -6.14987       6.14987       196.089       202.239    
  25  0.781643     -0.246357      -3.56291       3.56291       183.092       186.655    
  26  0.444411     -0.811005      -11.7291       11.7291       184.706       196.435    
  27  0.223111      -1.50008      -21.6949       21.6949       191.012       212.706    
  28  0.143901      -1.93863      -28.0373       28.0373       184.056       212.093    
  29  0.419282E-01  -3.17180      -45.8719       45.8719       188.127       233.998    
  30  0.407367     -0.898040      -12.9878       12.9878       192.392       205.380    
  31  0.722138     -0.325538      -4.70807       4.70807       192.598       197.306    
  32  0.290143      -1.23738      -17.8955       17.8955       193.313       211.208    
  33  0.236931E-01  -3.74257      -54.1266       54.1266       193.513       247.640    
  34  0.198981      -1.61454      -23.3502       23.3502       179.763       203.113    
  35  0.765966     -0.266617      -3.85593       3.85593       193.650       197.506    
  36  0.522733     -0.648684      -9.38154       9.38154       199.180       208.561    
  37  0.297579E-01  -3.51466      -50.8305       50.8305       192.832       243.663    
  38  0.175475      -1.74026      -25.1683       25.1683       183.292       208.460    
  39  0.311931      -1.16497      -16.8483       16.8483       192.707       209.556    
  40  0.310920      -1.16822      -16.8953       16.8953       199.184       216.079    
  41  0.122272      -2.10150      -30.3929       30.3929       190.223       220.616    
  42  0.949359     -0.519686E-01 -0.751592      0.751592       197.354       198.106    
  43  0.500750     -0.691648      -10.0029       10.0029       191.801       201.803    
  44  0.729401E-01  -2.61812      -37.8643       37.8643       191.159       229.023    
  45  0.952528     -0.486360E-01 -0.703394      0.703394       195.694       196.398    
  46  0.718842     -0.330114      -4.77425       4.77425       193.304       198.078    
  47  0.529396     -0.636019      -9.19838       9.19838       190.529       199.727    
  48  0.314661      -1.15626      -16.7223       16.7223       189.474       206.196    
  49  0.947465     -0.539649E-01 -0.780463      0.780463       192.846       193.627    
  50  0.613869     -0.487974      -7.05729       7.05729       191.913       198.971    
  51  0.303056      -1.19384      -17.2658       17.2658       195.166       212.432    
  52  0.749186     -0.288769      -4.17629       4.17629       193.218       197.394    
  53  0.671119E-01  -2.70139      -39.0687       39.0687       203.127       242.196    
  54  0.545553E-02  -5.21113      -75.3655       75.3655       191.708       267.074    
  55  0.866985     -0.142734      -2.06427       2.06427       187.767       189.832    
  56  0.622088     -0.474673      -6.86493       6.86493       189.875       196.740    
  57  0.471050     -0.752790      -10.8872       10.8872       174.483       185.371    
  58  0.433456     -0.835964      -12.0901       12.0901       186.584       198.674    
  59  0.946573     -0.549070E-01 -0.794088      0.794088       213.941       214.735    
  60  0.795665     -0.228577      -3.30578       3.30578       192.832       196.138    
  61  0.536872E-01  -2.92458      -42.2965       42.2965       192.845       235.142    
  62  0.761403     -0.272592      -3.94235       3.94235       204.512       208.455    
  63  0.615271     -0.485692      -7.02429       7.02429       191.800       198.824    
  64  0.585500     -0.535288      -7.74157       7.74157       191.444       199.186    
  65  0.649114     -0.432147      -6.24990       6.24990       185.330       191.580    
  66  0.550765     -0.596448      -8.62608       8.62608       192.832       201.458    
  67  0.495492     -0.702204      -10.1556       10.1556       188.818       198.974    
  68  0.303565      -1.19216      -17.2415       17.2415       192.177       209.419    
  69  0.645152     -0.438270      -6.33844       6.33844       204.357       210.695    
  70  0.582875     -0.539782      -7.80656       7.80656       194.868       202.674    
  71  0.720704     -0.327527      -4.73684       4.73684       190.160       194.897    
  72  0.129533      -2.04382      -29.5586       29.5586       194.243       223.802    
loop,thermsimp(1:2)       20   16.8518       14.6801    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271        192.13          0.84          1.11         25.06          0.18          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272        193.33          0.84          1.11         25.16          0.09          0.04         27.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       20
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       21
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      271     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -17.0697       17.0697       174.483       191.553    
   2  0.575213     -0.553015      -7.99793       7.99793       185.247       193.245    
   3  0.632244     -0.458480      -6.63073       6.63073       184.490       191.120    
   4  0.819203     -0.199424      -2.88415       2.88415       183.092       185.976    
   5  0.137693E-02  -6.58790      -95.2769       95.2769       187.278       282.554    
   6  0.367814      -1.00018      -14.4650       14.4650       187.470       201.935    
   7  0.452636     -0.792666      -11.4639       11.4639       187.767       199.231    
   8  0.278102      -1.27977      -18.5086       18.5086       181.080       199.588    
   9  0.417803     -0.872745      -12.6220       12.6220       187.201       199.823    
  10  0.682140     -0.382521      -5.53218       5.53218       185.330       190.862    
  11  0.204733      -1.58605      -22.9381       22.9381       189.841       212.779    
  12  0.637442     -0.450292      -6.51232       6.51232       189.576       196.089    
  13  0.114518      -2.16702      -31.3404       31.3404       175.715       207.055    
  14  0.724207     -0.322678      -4.66671       4.66671       191.517       196.184    
  15  0.461399     -0.773492      -11.1866       11.1866       192.846       204.033    
  16  0.731739     -0.312332      -4.51707       4.51707       192.832       197.349    
  17  0.773272     -0.257124      -3.71864       3.71864       190.160       193.879    
  18  0.789195     -0.236742      -3.42386       3.42386       181.185       184.609    
  19  0.762001     -0.271807      -3.93099       3.93099       189.414       193.345    
  20  0.933384     -0.689386E-01 -0.997019      0.997019       192.832       193.829    
  21  0.694037     -0.365230      -5.28211       5.28211       195.694       200.976    
  22  0.423570     -0.859038      -12.4238       12.4238       184.706       197.130    
  23  0.272919      -1.29858      -18.7806       18.7806       189.875       208.655    
  24  0.535843     -0.623914      -9.02331       9.02331       193.212       202.235    
  25  0.902288     -0.102822      -1.48705       1.48705       192.598       194.085    
  26  0.479374     -0.735275      -10.6339       10.6339       193.218       203.852    
  27  0.494900E-01  -3.00599      -43.4738       43.4738       193.650       237.124    
  28  0.921867     -0.813539E-01  -1.17657       1.17657       193.304       194.480    
  29  0.132425      -2.02174      -29.2392       29.2392       197.354       226.593    
  30  0.640539     -0.445446      -6.44222       6.44222       186.584       193.026    
  31  0.215363      -1.53543      -22.2060       22.2060       187.220       209.426    
  32  0.437204E-01  -3.12994      -45.2665       45.2665       191.800       237.066    
  33  0.166028      -1.79560      -25.9687       25.9687       191.913       217.882    
  34  0.425825     -0.853727      -12.3470       12.3470       188.818       201.165    
  35  0.810393     -0.210235      -3.04051       3.04051       191.444       194.485    
  36  0.855958     -0.155534      -2.24940       2.24940       187.149       189.399    
  37  0.830452     -0.185786      -2.68691       2.68691       190.529       193.216    
  38  0.658784     -0.417359      -6.03603       6.03603       189.440       195.476    
  39  0.910965     -0.932509E-01  -1.34863       1.34863       192.832       194.181    
  40  0.603480     -0.505043      -7.30414       7.30414       191.801       199.105    
  41  0.702610     -0.352953      -5.10456       5.10456       189.670       194.774    
  42  0.329065      -1.11150      -16.0750       16.0750       196.089       212.164    
  43  0.790497     -0.235094      -3.40003       3.40003       187.446       190.846    
  44  0.641572     -0.443834      -6.41891       6.41891       194.868       201.287    
  45  0.650683     -0.429733      -6.21499       6.21499       179.763       185.978    
  46  0.194049E-02  -6.24481      -90.3152       90.3152       183.837       274.152    
  47  0.662053     -0.412409      -5.96444       5.96444       192.392       198.356    
  48  0.294846      -1.22130      -17.6630       17.6630       189.474       207.137    
  49  0.709874     -0.342668      -4.95582       4.95582       183.165       188.121    
  50  0.700314     -0.356226      -5.15189       5.15189       204.512       209.664    
  51  0.639811E-01  -2.74917      -39.7596       39.7596       183.292       223.051    
  52  0.251451      -1.38051      -19.9655       19.9655       199.180       219.145    
  53  0.828691     -0.187907      -2.71760       2.71760       192.177       194.895    
  54  0.962710     -0.380034E-01 -0.549622      0.549622       192.707       193.257    
  55  0.429583     -0.844940      -12.2199       12.2199       204.357       216.577    
  56  0.871108     -0.137990      -1.99567       1.99567       193.313       195.308    
  57  0.328516      -1.11317      -16.0991       16.0991       184.056       200.155    
  58  0.401423     -0.912741      -13.2004       13.2004       195.166       208.366    
  59  0.671285     -0.398562      -5.76417       5.76417       191.012       196.776    
  60  0.919587     -0.838302E-01  -1.21239       1.21239       191.810       193.022    
  61  0.209634      -1.56239      -22.5960       22.5960       213.941       236.537    
  62  0.894137     -0.111896      -1.61829       1.61829       199.184       200.802    
  63  0.623590     -0.472262      -6.83006       6.83006       190.223       197.053    
  64  0.469722     -0.755615      -10.9280       10.9280       194.243       205.171    
  65  0.927315E-01  -2.37805      -34.3923       34.3923       191.159       225.551    
  66  0.663316     -0.410504      -5.93689       5.93689       185.115       191.052    
  67  0.972420     -0.279677E-01 -0.404481      0.404481       188.127       188.531    
  68  0.594470     -0.520086      -7.52170       7.52170       192.845       200.367    
  69  0.421560     -0.863793      -12.4925       12.4925       203.127       215.620    
  70  0.878821     -0.129174      -1.86817       1.86817       192.832       194.700    
  71  0.231393      -1.46364      -21.1678       21.1678       193.513       214.681    
  72  0.209055      -1.56516      -22.6360       22.6360       192.125       214.761    
loop,thermsimp(1:2)       21   17.0697       7.99793    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273        197.96          0.84          1.11         25.00          0.23          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       21
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       22
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      272     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -2.54055       2.54055       181.185       183.726    
   2  0.801853     -0.220830      -3.19374       3.19374       183.092       186.286    
   3  0.768645     -0.263126      -3.80543       3.80543       179.763       183.569    
   4  0.855557     -0.156003      -2.25618       2.25618       183.165       185.422    
   5  0.845591     -0.167720      -2.42563       2.42563       188.127       190.552    
   6  0.350050      -1.04968      -15.1809       15.1809       187.149       202.330    
   7  0.927608     -0.751463E-01  -1.08680       1.08680       187.446       188.533    
   8  0.655345E-01  -2.72518      -39.4127       39.4127       185.330       224.743    
   9  0.355481      -1.03428      -14.9583       14.9583       185.115       200.073    
  10  0.728523     -0.316737      -4.58078       4.58078       184.490       189.071    
  11  0.573220     -0.556486      -8.04813       8.04813       174.483       182.532    
  12  0.112478      -2.18499      -31.6003       31.6003       191.810       223.410    
  13  0.338739      -1.08253      -15.6560       15.6560       186.584       202.240    
  14  0.239648      -1.42858      -20.6608       20.6608       190.529       211.190    
  15  0.918959     -0.845134E-01  -1.22227       1.22227       185.247       186.469    
  16  0.283771      -1.25959      -18.2167       18.2167       192.707       210.924    
  17  0.414404     -0.880913      -12.7401       12.7401       189.414       202.154    
  18  0.716403     -0.333512      -4.82340       4.82340       192.832       197.656    
  19  0.317726      -1.14657      -16.5821       16.5821       190.160       206.742    
  20  0.339005      -1.08174      -15.6446       15.6446       192.598       208.243    
  21  0.163059      -1.81364      -26.2297       26.2297       192.832       219.062    
  22  0.477081     -0.740069      -10.7032       10.7032       193.304       204.007    
  23  0.105851      -2.24573      -32.4787       32.4787       191.444       223.923    
  24  0.840431     -0.173840      -2.51415       2.51415       192.832       195.346    
  25  0.235315      -1.44683      -20.9247       20.9247       189.670       210.594    
  26  0.865464     -0.144489      -2.08967       2.08967       192.177       194.267    
  27  0.909462     -0.949026E-01  -1.37252       1.37252       193.313       194.685    
  28  0.152105E-01  -4.18577      -60.5364       60.5364       189.440       249.976    
  29  0.962485     -0.382371E-01 -0.553002      0.553002       189.576       190.129    
  30  0.259410      -1.34934      -19.5148       19.5148       191.517       211.032    
  31  0.364880      -1.00819      -14.5808       14.5808       191.012       205.592    
  32  0.467235     -0.760923      -11.0048       11.0048       190.223       201.228    
  33  0.844908     -0.168527      -2.43732       2.43732       184.706       187.143    
  34  0.188232      -1.67008      -24.1534       24.1534       192.832       216.986    
  35  0.496585     -0.700000      -10.1237       10.1237       192.392       202.516    
  36  0.410505     -0.890367      -12.8769       12.8769       191.801       204.677    
  37  0.533875     -0.627594      -9.07653       9.07653       187.767       196.844    
  38  0.610668     -0.493202      -7.13289       7.13289       181.080       188.212    
  39  0.241933      -1.41910      -20.5236       20.5236       187.201       207.724    
  40  0.642629     -0.442188      -6.39510       6.39510       184.056       190.451    
  41  0.775072     -0.254799      -3.68501       3.68501       192.845       196.530    
  42  0.345343      -1.06322      -15.3767       15.3767       199.184       214.561    
  43  0.844097     -0.169488      -2.45121       2.45121       195.694       198.145    
  44  0.426886     -0.851239      -12.3110       12.3110       188.818       201.129    
  45  0.594109     -0.520693      -7.53049       7.53049       194.868       202.398    
  46  0.489527     -0.714316      -10.3307       10.3307       187.470       197.801    
  47  0.313882      -1.15874      -16.7582       16.7582       193.212       209.970    
  48  0.687066     -0.375325      -5.42812       5.42812       193.218       198.646    
  49  0.394505     -0.930124      -13.4518       13.4518       192.846       206.298    
  50  0.971200     -0.292233E-01 -0.422639      0.422639       194.243       194.666    
  51  0.916939     -0.867145E-01  -1.25410       1.25410       175.715       176.969    
  52  0.968457     -0.320511E-01 -0.463537      0.463537       189.474       189.937    
  53  0.437414     -0.826876      -11.9586       11.9586       195.166       207.124    
  54  0.647516     -0.434611      -6.28554       6.28554       189.875       196.160    
  55  0.181293      -1.70764      -24.6966       24.6966       187.220       211.916    
  56  0.836714     -0.178273      -2.57825       2.57825       204.512       207.091    
  57  0.940459     -0.613876E-01 -0.887813      0.887813       196.089       196.977    
  58  0.141896      -1.95266      -28.2402       28.2402       189.841       218.081    
  59  0.111323      -2.19532      -31.7496       31.7496       193.513       225.263    
  60  0.721494E-01  -2.62902      -38.0220       38.0220       192.125       230.147    
  61  0.618358     -0.480687      -6.95190       6.95190       203.127       210.079    
  62  0.825766     -0.191444      -2.76874       2.76874       204.357       207.126    
  63  0.438611     -0.824143      -11.9191       11.9191       191.913       203.833    
  64  0.158533      -1.84179      -26.6368       26.6368       199.180       225.816    
  65  0.750786     -0.286635      -4.14544       4.14544       183.292       187.437    
  66  0.936921     -0.651566E-01 -0.942323      0.942323       191.159       192.101    
  67  0.652715     -0.426615      -6.16989       6.16989       197.354       203.524    
  68  0.471604     -0.751616      -10.8702       10.8702       213.941       224.812    
  69  0.883538     -0.123821      -1.79075       1.79075       191.800       193.590    
  70  0.267870      -1.31725      -19.0507       19.0507       193.650       212.701    
  71  0.662224     -0.412151      -5.96071       5.96071       183.837       189.798    
  72  0.652465     -0.426998      -6.17543       6.17543       197.960       204.135    
loop,thermsimp(1:2)       22   2.54055       3.19374    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274        190.72          0.84          1.11         25.06          0.17          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       22
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       23
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      273     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -2.37843       2.37843       175.715       178.093    
   2  0.848474     -0.164316      -2.37641       2.37641       174.483       176.860    
   3  0.146795      -1.91872      -27.7493       27.7493       179.763       207.512    
   4  0.398624     -0.919738      -13.3016       13.3016       181.185       194.487    
   5  0.888093     -0.118679      -1.71638       1.71638       183.165       184.882    
   6  0.475009     -0.744421      -10.7661       10.7661       183.092       193.858    
   7  0.120824      -2.11342      -30.5652       30.5652       185.247       215.812    
   8  0.270052      -1.30914      -18.9334       18.9334       184.706       203.639    
   9  0.201748E-01  -3.90332      -56.4515       56.4515       183.292       239.743    
  10  0.999386     -0.614559E-03 -0.888801E-02  0.888801E-02   181.080       181.088    
  11  0.212655      -1.54808      -22.3891       22.3891       187.446       209.835    
  12  0.197911      -1.61994      -23.4283       23.4283       184.490       207.918    
  13  0.786394     -0.240297      -3.47528       3.47528       183.837       187.313    
  14  0.781263     -0.246844      -3.56996       3.56996       189.474       193.044    
  15  0.788011     -0.238244      -3.44558       3.44558       189.576       193.022    
  16  0.956387     -0.445927E-01 -0.644918      0.644918       184.056       184.701    
  17  0.717415     -0.332100      -4.80298       4.80298       188.127       192.930    
  18  0.808756     -0.212258      -3.06976       3.06976       191.159       194.229    
  19  0.756838     -0.278606      -4.02932       4.02932       191.800       195.829    
  20  0.570684     -0.560919      -8.11225       8.11225       192.177       200.290    
  21  0.946031     -0.554796E-01 -0.802370      0.802370       194.243       195.045    
  22  0.678634E-01  -2.69026      -38.9077       38.9077       193.313       232.220    
  23  0.631502     -0.459654      -6.64771       6.64771       192.832       199.480    
  24  0.114784E-01  -4.46729      -64.6078       64.6078       189.875       254.482    
  25  0.549681     -0.598417      -8.65457       8.65457       192.845       201.500    
  26  0.846433     -0.166725      -2.41124       2.41124       187.767       190.179    
  27  0.441841     -0.816805      -11.8130       11.8130       196.089       207.902    
  28  0.299100      -1.20698      -17.4558       17.4558       192.832       210.288    
  29  0.378130     -0.972517      -14.0650       14.0650       187.470       201.535    
  30  0.830469     -0.185764      -2.68660       2.68660       195.694       198.381    
  31  0.675108     -0.392883      -5.68204       5.68204       193.218       198.900    
  32  0.997619     -0.238377E-02 -0.344750E-01  0.344750E-01   185.115       185.149    
  33  0.897623     -0.108005      -1.56201       1.56201       188.818       190.380    
  34  0.591811E-01  -2.82715      -40.8875       40.8875       190.223       231.111    
  35  0.229825      -1.47044      -21.2661       21.2661       189.414       210.680    
  36  0.654017     -0.424622      -6.14107       6.14107       186.584       192.725    
  37  0.305777      -1.18490      -17.1365       17.1365       187.149       204.286    
  38  0.936135     -0.659954E-01 -0.954454      0.954454       194.868       195.822    
  39  0.698153     -0.359317      -5.19659       5.19659       192.392       197.588    
  40  0.829975     -0.186360      -2.69522       2.69522       197.354       200.049    
  41  0.951351     -0.498721E-01 -0.721271      0.721271       191.913       192.635    
  42  0.883299     -0.124092      -1.79467       1.79467       193.304       195.098    
  43  0.910087     -0.942154E-01  -1.36258       1.36258       197.960       199.322    
  44  0.590840     -0.526210      -7.61027       7.61027       191.801       199.411    
  45  0.146785      -1.91879      -27.7503       27.7503       191.012       218.762    
  46  0.830381E-01  -2.48846      -35.9891       35.9891       192.846       228.835    
  47  0.289482      -1.23966      -17.9285       17.9285       190.160       208.089    
  48  0.594462     -0.520098      -7.52188       7.52188       204.512       212.034    
  49  0.241311      -1.42167      -20.5607       20.5607       195.166       215.726    
  50  0.612368     -0.490422      -7.09269       7.09269       204.357       211.449    
  51  0.952207     -0.489727E-01 -0.708264      0.708264       187.201       187.909    
  52  0.857144     -0.154149      -2.22937       2.22937       192.598       194.827    
  53  0.221746      -1.50622      -21.7836       21.7836       193.212       214.995    
  54  0.874757     -0.133809      -1.93521       1.93521       203.127       205.063    
  55  0.474241     -0.746040      -10.7895       10.7895       189.670       200.459    
  56  0.679995E-01  -2.68826      -38.8787       38.8787       192.707       231.586    
  57  0.276977      -1.28382      -18.5672       18.5672       191.517       210.084    
  58  0.308562      -1.17583      -17.0054       17.0054       190.529       207.534    
  59  0.910099     -0.942023E-01  -1.36239       1.36239       187.220       188.582    
  60  0.189281      -1.66452      -24.0730       24.0730       193.650       217.723    
  61  0.759386     -0.275245      -3.98071       3.98071       199.184       203.165    
  62  0.464823     -0.766099      -11.0797       11.0797       192.832       203.912    
  63  0.428490     -0.847488      -12.2567       12.2567       189.841       202.097    
  64  0.377334     -0.974624      -14.0954       14.0954       192.832       206.928    
  65  0.168846      -1.77877      -25.7253       25.7253       191.810       217.535    
  66  0.816398     -0.202853      -2.93374       2.93374       191.444       194.378    
  67  0.663000     -0.410981      -5.94378       5.94378       185.330       191.274    
  68  0.805080     -0.216814      -3.13566       3.13566       213.941       217.077    
  69  0.767976E-01  -2.56658      -37.1190       37.1190       193.513       230.632    
  70  0.646958     -0.435474      -6.29801       6.29801       199.180       205.478    
  71  0.988002E-01  -2.31466      -33.4755       33.4755       192.125       225.601    
  72  0.310465      -1.16968      -16.9165       16.9165       190.715       207.632    
loop,thermsimp(1:2)       23   2.37843       2.37641    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275        188.86          0.84          1.11         25.21          0.15          0.05         27.36
Just calling func    0   0         27.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    276        180.71          0.84          1.12         25.13          0.04          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    180.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       23
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       24
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      275     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -33.0110       33.0110       174.483       207.494    
   2  0.372115     -0.988552      -14.2969       14.2969       175.715       190.012    
   3  0.732875     -0.310780      -4.49463       4.49463       181.080       185.574    
   4  0.341646      -1.07398      -15.5324       15.5324       184.056       199.588    
   5  0.406512     -0.900141      -13.0182       13.0182       183.165       196.184    
   6  0.271848      -1.30251      -18.8375       18.8375       185.115       203.952    
   7  0.738418     -0.303245      -4.38565       4.38565       183.837       188.223    
   8  0.903199     -0.101813      -1.47246       1.47246       187.201       188.673    
   9  0.511789     -0.669842      -9.68754       9.68754       187.220       196.907    
  10  0.202674      -1.59616      -23.0843       23.0843       187.767       210.852    
  11  0.325695      -1.12179      -16.2239       16.2239       188.818       205.042    
  12  0.719720     -0.328893      -4.75659       4.75659       185.330       190.087    
  13  0.715609     -0.334622      -4.83944       4.83944       191.913       196.753    
  14  0.973328     -0.270339E-01 -0.390976      0.390976       186.584       186.975    
  15  0.373998     -0.983504      -14.2239       14.2239       188.127       202.350    
  16  0.977965     -0.222815E-01 -0.322244      0.322244       189.576       189.898    
  17  0.105495      -2.24909      -32.5273       32.5273       189.474       222.001    
  18  0.729809     -0.314973      -4.55527       4.55527       183.092       187.647    
  19  0.378008     -0.972839      -14.0696       14.0696       191.159       205.228    
  20  0.678326     -0.388127      -5.61325       5.61325       191.444       197.057    
  21  0.671993     -0.397507      -5.74892       5.74892       181.185       186.934    
  22  0.515926     -0.661792      -9.57112       9.57112       192.598       202.169    
  23  0.363490      -1.01200      -14.6360       14.6360       194.243       208.879    
  24  0.206319      -1.57833      -22.8265       22.8265       193.304       216.130    
  25  0.755157E-01  -2.58341      -37.3624       37.3624       194.868       232.230    
  26  0.413763     -0.882461      -12.7625       12.7625       191.800       204.562    
  27  0.279023      -1.27646      -18.4607       18.4607       192.392       210.853    
  28  0.506422     -0.680385      -9.84002       9.84002       195.694       205.534    
  29  0.643082E-02  -5.04665      -72.9869       72.9869       193.218       266.205    
  30  0.285888E-01  -3.55474      -51.4102       51.4102       197.960       249.370    
  31  0.660419     -0.414880      -6.00017       6.00017       191.801       197.801    
  32  0.739369     -0.301959      -4.36705       4.36705       192.832       197.199    
  33  0.270269      -1.30834      -18.9217       18.9217       197.354       216.276    
  34  0.663889     -0.409640      -5.92439       5.92439       192.177       198.102    
  35  0.898739E-01  -2.40935      -34.8450       34.8450       189.670       224.515    
  36  0.832427     -0.183410      -2.65255       2.65255       192.845       195.498    
  37  0.723106     -0.324200      -4.68872       4.68872       187.470       192.159    
  38  0.986274     -0.138207E-01 -0.199881      0.199881       189.841       190.041    
  39  0.812861     -0.207195      -2.99654       2.99654       199.184       202.180    
  40  0.553236     -0.591971      -8.56133       8.56133       184.706       193.267    
  41  0.693785E-01  -2.66818      -38.5883       38.5883       192.832       231.421    
  42  0.117256      -2.14340      -30.9987       30.9987       187.149       218.148    
  43  0.807809     -0.213430      -3.08671       3.08671       203.127       206.214    
  44  0.900249     -0.105084      -1.51977       1.51977       199.180       200.699    
  45  0.753470     -0.283066      -4.09382       4.09382       192.832       196.926    
  46  0.127159      -2.06232      -29.8261       29.8261       179.763       209.589    
  47  0.535389     -0.624762      -9.03558       9.03558       190.529       199.564    
  48  0.957281     -0.436582E-01 -0.631403      0.631403       190.715       191.347    
  49  0.227700      -1.47973      -21.4004       21.4004       196.089       217.489    
  50  0.636404     -0.451921      -6.53588       6.53588       184.490       191.026    
  51  0.905015     -0.998042E-01  -1.44341       1.44341       190.160       191.604    
  52  0.555191     -0.588444      -8.51033       8.51033       187.446       195.957    
  53  0.687780     -0.374286      -5.41309       5.41309       191.517       196.930    
  54  0.759422E-01  -2.57778      -37.2810       37.2810       192.832       230.113    
  55  0.374598     -0.981902      -14.2007       14.2007       189.414       203.615    
  56  0.399521     -0.917488      -13.2691       13.2691       204.357       217.626    
  57  0.997363     -0.264016E-02 -0.381831E-01  0.381831E-01   204.512       204.551    
  58  0.164658      -1.80389      -26.0886       26.0886       193.212       219.300    
  59  0.697359     -0.360454      -5.21305       5.21305       195.166       200.379    
  60  0.822795     -0.195048      -2.82087       2.82087       185.247       188.068    
  61  0.755086     -0.280923      -4.06283       4.06283       213.941       218.004    
  62  0.912857     -0.911765E-01  -1.31863       1.31863       191.810       193.128    
  63  0.891590     -0.114749      -1.65955       1.65955       193.650       195.309    
  64  0.461859     -0.772496      -11.1722       11.1722       191.012       202.184    
  65  0.695630     -0.362938      -5.24896       5.24896       192.125       197.374    
  66  0.168128      -1.78303      -25.7870       25.7870       192.846       218.633    
  67  0.552556     -0.593201      -8.57912       8.57912       193.513       202.092    
  68  0.450301E-01  -3.10043      -44.8397       44.8397       190.223       235.063    
  69  0.675538     -0.392246      -5.67283       5.67283       192.707       198.380    
  70  0.455839     -0.785615      -11.3619       11.3619       193.313       204.674    
  71  0.700226     -0.356352      -5.15371       5.15371       183.292       188.445    
  72  0.694116     -0.365117      -5.28048       5.28048       180.706       185.987    
loop,thermsimp(1:2)       24   33.0110       14.2969    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277        185.29          0.85          1.11         25.05          0.17          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    278        184.39          0.84          1.11         25.13          0.04          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       24
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       25
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      277     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.548537      0.548537       181.080       181.628    
   2  0.355374      -1.03458      -14.9626       14.9626       180.706       195.669    
   3  0.294461      -1.22261      -17.6819       17.6819       181.185       198.867    
   4  0.644538     -0.439222      -6.35221       6.35221       186.584       192.936    
   5  0.741622     -0.298915      -4.32304       4.32304       183.092       187.415    
   6  0.805913E-01  -2.51837      -36.4217       36.4217       185.247       221.668    
   7  0.498180     -0.696794      -10.0773       10.0773       183.837       193.915    
   8  0.771004     -0.260061      -3.76111       3.76111       183.292       187.053    
   9  0.753480     -0.283053      -4.09363       4.09363       187.201       191.294    
  10  0.460525     -0.775387      -11.2140       11.2140       189.576       200.790    
  11  0.918626     -0.848759E-01  -1.22751       1.22751       175.715       176.942    
  12  0.355379      -1.03457      -14.9624       14.9624       189.841       204.803    
  13  0.664646     -0.408501      -5.90792       5.90792       185.330       191.238    
  14  0.328018      -1.11469      -16.1211       16.1211       184.490       200.611    
  15  0.529583     -0.635665      -9.19326       9.19326       190.715       199.908    
  16  0.259823      -1.34775      -19.4918       19.4918       190.160       209.652    
  17  0.463690E-01  -3.07112      -44.4159       44.4159       187.470       231.886    
  18  0.366509      -1.00373      -14.5164       14.5164       191.810       206.326    
  19  0.794534     -0.229999      -3.32635       3.32635       184.706       188.032    
  20  0.669373     -0.401413      -5.80541       5.80541       193.650       199.455    
  21  0.798901     -0.224518      -3.24708       3.24708       192.845       196.092    
  22  0.610403     -0.493636      -7.13918       7.13918       187.446       194.585    
  23  0.267818      -1.31745      -19.0535       19.0535       183.165       202.219    
  24  0.663049     -0.410906      -5.94270       5.94270       191.913       197.856    
  25  0.782871     -0.244788      -3.54022       3.54022       187.220       190.760    
  26  0.706545     -0.347368      -5.02379       5.02379       192.832       197.856    
  27  0.120119      -2.11927      -30.6498       30.6498       191.517       222.167    
  28  0.270575      -1.30721      -18.9054       18.9054       191.444       210.349    
  29  0.505391     -0.682422      -9.86948       9.86948       192.832       202.702    
  30  0.665734     -0.406865      -5.88425       5.88425       192.125       198.010    
  31  0.836788     -0.178185      -2.57699       2.57699       191.801       194.378    
  32  0.866983     -0.142736      -2.06431       2.06431       192.177       194.242    
  33  0.552904     -0.592571      -8.57001       8.57001       192.707       201.277    
  34  0.554153     -0.590314      -8.53738       8.53738       190.529       199.066    
  35  0.592407E-01  -2.82615      -40.8729       40.8729       184.056       224.929    
  36  0.902163     -0.102960      -1.48905       1.48905       195.166       196.655    
  37  0.266638E-01  -3.62445      -52.4183       52.4183       199.180       251.598    
  38  0.897053     -0.108640      -1.57120       1.57120       193.513       195.084    
  39  0.840496     -0.173763      -2.51303       2.51303       192.598       195.111    
  40  0.288358      -1.24355      -17.9848       17.9848       199.184       217.169    
  41  0.835972E-01  -2.48175      -35.8921       35.8921       191.012       226.904    
  42  0.412070     -0.886563      -12.8219       12.8219       188.127       200.948    
  43  0.725010     -0.321570      -4.65068       4.65068       189.414       194.065    
  44  0.316556      -1.15026      -16.6355       16.6355       185.115       201.750    
  45  0.486178     -0.721181      -10.4300       10.4300       204.512       214.942    
  46  0.143341      -1.94253      -28.0937       28.0937       191.800       219.893    
  47  0.956913     -0.440430E-01 -0.636969      0.636969       193.313       193.949    
  48  0.362697      -1.01419      -14.6676       14.6676       188.818       203.486    
  49  0.951746     -0.494572E-01 -0.715271      0.715271       191.159       191.874    
  50  0.511140     -0.671112      -9.70590       9.70590       195.694       205.400    
  51  0.364891E-01  -3.31074      -47.8813       47.8813       203.127       251.009    
  52  0.377076     -0.975308      -14.1053       14.1053       174.483       188.589    
  53  0.670030E-01  -2.70302      -39.0922       39.0922       194.243       233.335    
  54  0.448832     -0.801107      -11.5860       11.5860       179.763       191.349    
  55  0.252392      -1.37677      -19.9115       19.9115       187.767       207.679    
  56  0.910592     -0.936608E-01  -1.35456       1.35456       192.392       193.746    
  57  0.801917     -0.220751      -3.19259       3.19259       193.304       196.496    
  58  0.473432     -0.747746      -10.8142       10.8142       197.354       208.168    
  59  0.431618     -0.840214      -12.1515       12.1515       196.089       208.240    
  60  0.886774     -0.120166      -1.73789       1.73789       204.357       206.095    
  61  0.880132     -0.127683      -1.84661       1.84661       213.941       215.788    
  62  0.962190     -0.385439E-01 -0.557438      0.557438       187.149       187.707    
  63  0.618144     -0.481034      -6.95691       6.95691       192.846       199.803    
  64  0.169887      -1.77262      -25.6364       25.6364       193.212       218.848    
  65  0.384484E-01  -3.25844      -47.1249       47.1249       189.474       236.599    
  66  0.178067      -1.72560      -24.9563       24.9563       189.670       214.626    
  67  0.255365      -1.36506      -19.7421       19.7421       192.832       212.574    
  68  0.476812     -0.740633      -10.7113       10.7113       192.832       203.544    
  69  0.642499     -0.442391      -6.39804       6.39804       194.868       201.266    
  70  0.178007      -1.72593      -24.9611       24.9611       190.223       215.184    
  71  0.622345     -0.474260      -6.85896       6.85896       197.960       204.819    
  72  0.712002     -0.339675      -4.91252       4.91252       184.391       189.304    
loop,thermsimp(1:2)       25  0.548537       14.9626    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279        178.43          0.83          1.11         25.11          0.17          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280        180.08          0.84          1.12         25.18          0.01          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    178.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       25
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       26
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      279     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.181574      0.181574       175.715       175.897    
   2  0.516099     -0.661457      -9.56628       9.56628       181.080       190.646    
   3  0.202206      -1.59847      -23.1178       23.1178       183.292       206.409    
   4  0.240260      -1.42603      -20.6239       20.6239       183.092       203.716    
   5  0.717263E-01  -2.63490      -38.1070       38.1070       187.149       225.256    
   6  0.395382     -0.927902      -13.4197       13.4197       184.706       198.126    
   7  0.494348     -0.704516      -10.1890       10.1890       174.483       184.672    
   8  0.970815     -0.296196E-01 -0.428372      0.428372       184.391       184.819    
   9  0.992795     -0.723105E-02 -0.104579      0.104579       187.220       187.324    
  10  0.387320     -0.948503      -13.7177       13.7177       185.330       199.048    
  11  0.586568     -0.533466      -7.71521       7.71521       187.201       194.916    
  12  0.119144      -2.12742      -30.7677       30.7677       179.763       210.531    
  13  0.145144      -1.93003      -27.9129       27.9129       191.159       219.072    
  14  0.767931     -0.264056      -3.81889       3.81889       186.584       190.403    
  15  0.415014     -0.879442      -12.7189       12.7189       192.392       205.111    
  16  0.994477     -0.553801E-02 -0.800930E-01  0.800930E-01   183.837       183.917    
  17  0.757243     -0.278071      -4.02159       4.02159       193.313       197.334    
  18  0.669290     -0.401537      -5.80720       5.80720       189.414       195.222    
  19  0.112026      -2.18903      -31.6586       31.6586       192.177       223.836    
  20  0.434244     -0.834148      -12.0638       12.0638       191.801       203.864    
  21  0.491828     -0.709627      -10.2629       10.2629       187.446       197.709    
  22  0.517535     -0.658677      -9.52607       9.52607       193.513       203.039    
  23  0.411147     -0.888804      -12.8543       12.8543       192.598       205.452    
  24  0.250164      -1.38564      -20.0397       20.0397       180.706       200.746    
  25  0.109742E-01  -4.51221      -65.2575       65.2575       192.845       258.103    
  26  0.559459     -0.580786      -8.39957       8.39957       193.304       201.703    
  27  0.289677      -1.23899      -17.9188       17.9188       195.166       213.084    
  28  0.835809     -0.179356      -2.59392       2.59392       192.832       195.426    
  29  0.236182      -1.44315      -20.8715       20.8715       191.913       212.785    
  30  0.700988     -0.355264      -5.13798       5.13798       192.125       197.263    
  31  0.886914     -0.120007      -1.73560       1.73560       181.185       182.921    
  32  0.182911      -1.69875      -24.5681       24.5681       190.529       215.097    
  33  0.693089     -0.366597      -5.30188       5.30188       193.650       198.952    
  34  0.108523      -2.22079      -32.1180       32.1180       192.846       224.964    
  35  0.141600      -1.95475      -28.2704       28.2704       190.715       218.986    
  36  0.168348E-01  -4.08431      -59.0690       59.0690       184.490       243.559    
  37  0.419419E-01  -3.17147      -45.8671       45.8671       189.576       235.443    
  38  0.244896      -1.40692      -20.3475       20.3475       188.127       208.474    
  39  0.360662      -1.01981      -14.7490       14.7490       194.868       209.617    
  40  0.927013     -0.757879E-01  -1.09608       1.09608       192.707       193.803    
  41  0.869067     -0.140335      -2.02958       2.02958       185.115       187.145    
  42  0.827083     -0.189851      -2.74570       2.74570       183.165       185.911    
  43  0.928403     -0.742893E-01  -1.07440       1.07440       192.832       193.907    
  44  0.513193     -0.667103      -9.64793       9.64793       188.818       198.466    
  45  0.809080     -0.211858      -3.06398       3.06398       192.832       195.896    
  46  0.341224E-02  -5.68039      -82.1521       82.1521       189.841       271.993    
  47  0.734431     -0.308659      -4.46396       4.46396       197.960       202.424    
  48  0.688454     -0.373307      -5.39893       5.39893       195.694       201.093    
  49  0.990614     -0.943067E-02 -0.136390      0.136390       204.357       204.493    
  50  0.143408      -1.94206      -28.0869       28.0869       191.810       219.897    
  51  0.868596     -0.140878      -2.03743       2.03743       187.767       189.805    
  52  0.244103      -1.41016      -20.3944       20.3944       197.354       217.749    
  53  0.207986      -1.57029      -22.7101       22.7101       196.089       218.799    
  54  0.426578E-01  -3.15455      -45.6224       45.6224       190.160       235.783    
  55  0.111938      -2.18981      -31.6700       31.6700       191.444       223.114    
  56  0.304345      -1.18959      -17.2044       17.2044       192.832       210.037    
  57  0.911041     -0.931671E-01  -1.34742       1.34742       189.670       191.017    
  58  0.144299      -1.93587      -27.9973       27.9973       204.512       232.510    
  59  0.306010      -1.18414      -17.1255       17.1255       190.223       207.349    
  60  0.633032     -0.457234      -6.61272       6.61272       213.941       220.554    
  61  0.737469E-02  -4.90970      -71.0062       71.0062       199.184       270.190    
  62  0.794623     -0.229887      -3.32472       3.32472       193.212       196.536    
  63  0.200033      -1.60927      -23.2740       23.2740       191.800       215.074    
  64  0.543825     -0.609128      -8.80947       8.80947       185.247       194.056    
  65  0.719260     -0.329532      -4.76583       4.76583       191.517       196.283    
  66  0.200311      -1.60788      -23.2539       23.2539       184.056       207.310    
  67  0.778326     -0.250609      -3.62442       3.62442       191.012       194.636    
  68  0.932167     -0.702437E-01  -1.01589       1.01589       187.470       188.486    
  69  0.188590      -1.66818      -24.1259       24.1259       194.243       218.369    
  70  0.722923     -0.324453      -4.69237       4.69237       189.474       194.166    
  71  0.779142     -0.249562      -3.60927       3.60927       203.127       206.737    
  72  0.253373      -1.37289      -19.8553       19.8553       178.432       198.287    
loop,thermsimp(1:2)       26  0.181574       9.56628    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281        198.25          0.84          1.11         25.07          0.22          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    282        276.07          0.85          1.12         25.22          0.12          0.05         27.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    198.25       0.9243    -0.4056      1.809     -102.6     0.9316    
                      0.2752      1.789     -99.70      3.697     0.1753    
                       2.092     -1.500      1.935      0.000     -40.00    
                      -1.700      0.000      0.000      0.000     -1.221    

                      -2.500     0.2821E+05 0.2925E+05  0.000      0.000    
                     -0.5672     -6.153     -4.469     -7.784      4.015    
                      -14.55     -2.874      712.8      0.000      2952.    

                       7121.      8519.      2871.     0.2787E+05  3721.    
                       5130.     0.1315E-01 0.1582E-01  0.000     0.3719E-01
                      0.3974E-01 0.2128E-01 0.1025E-01 0.6416E-02 0.3719E-01

                     -0.1072    -0.9399      0.000    -0.3761E-01 0.3518E-01
                       0.000    -0.1085E-01-0.2051E-01 0.6892E-02 0.1765E-01
                      0.3719E-01 0.2626E-02-0.1309     -1.049      0.000    

                      0.1991E-01-0.3278    -0.5414    -0.4760    -0.1139    
                      0.2582      8.905      8.789     -5412.     -4.000    
                     -0.3536    -0.7316      8.977      8.797     -5620.    

                      -4.000     0.2043    -0.7110      8.925      8.815    
                      -3720.     -7.000    -0.3183    -0.8395      8.942    
                       8.788     -5645.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    198.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       26
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       27
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      281     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -23.3047       23.3047       175.715       199.020    
   2  0.983274     -0.168677E-01 -0.243947      0.243947       181.185       181.429    
   3  0.569108     -0.563685      -8.15225       8.15225       183.837       191.990    
   4  0.411179     -0.888728      -12.8532       12.8532       174.483       187.337    
   5  0.889241     -0.117387      -1.69769       1.69769       184.391       186.089    
   6  0.109537      -2.21149      -31.9836       31.9836       183.165       215.149    
   7  0.658027     -0.418509      -6.05266       6.05266       185.115       191.168    
   8  0.427534     -0.849722      -12.2890       12.2890       187.220       199.509    
   9  0.277803      -1.28084      -18.5241       18.5241       187.470       205.994    
  10  0.568421     -0.564892      -8.16971       8.16971       187.767       195.937    
  11  0.368489     -0.998346      -14.4385       14.4385       186.584       201.022    
  12  0.100945E-01  -4.59576      -66.4659       66.4659       181.080       247.545    
  13  0.811445     -0.208939      -3.02176       3.02176       189.670       192.691    
  14  0.135138      -2.00146      -28.9459       28.9459       192.707       221.653    
  15  0.600340     -0.510258      -7.37957       7.37957       192.832       200.212    
  16  0.537538     -0.620755      -8.97763       8.97763       185.247       194.224    
  17  0.923261     -0.798434E-01  -1.15473       1.15473       189.474       190.628    
  18  0.296505      -1.21569      -17.5819       17.5819       191.012       208.593    
  19  0.975666     -0.246348E-01 -0.356279      0.356279       187.201       187.557    
  20  0.102971      -2.27331      -32.8776       32.8776       189.414       222.292    
  21  0.110137      -2.20603      -31.9046       31.9046       192.832       224.737    
  22  0.874539     -0.134058      -1.93881       1.93881       192.832       194.771    
  23  0.887507     -0.119339      -1.72594       1.72594       191.517       193.243    
  24  0.811767     -0.208543      -3.01603       3.01603       193.212       196.228    
  25  0.304283      -1.18980      -17.2073       17.2073       192.125       209.333    
  26  0.304144      -1.19025      -17.2140       17.2140       193.313       210.526    
  27  0.854538     -0.157194      -2.27341       2.27341       187.446       189.720    
  28  0.543001     -0.610645      -8.83140       8.83140       184.706       193.537    
  29  0.808766     -0.212246      -3.06959       3.06959       178.432       181.501    
  30  0.286176      -1.25115      -18.0946       18.0946       188.818       206.913    
  31  0.328161      -1.11425      -16.1148       16.1148       193.650       209.765    
  32  0.563264     -0.574006      -8.30152       8.30152       185.330       193.632    
  33  0.180895      -1.70984      -24.7284       24.7284       180.706       205.435    
  34  0.977796     -0.224538E-01 -0.324736      0.324736       195.694       196.019    
  35  0.650784     -0.429577      -6.21273       6.21273       193.304       199.516    
  36  0.350586      -1.04815      -15.1588       15.1588       197.960       213.119    
  37  0.852996E-01  -2.46159      -35.6005       35.6005       193.513       229.114    
  38  0.363921      -1.01082      -14.6189       14.6189       183.092       197.711    
  39  0.715496E-01  -2.63737      -38.1427       38.1427       191.801       229.943    
  40  0.540542     -0.615184      -8.89705       8.89705       204.357       213.254    
  41  0.458744E-02  -5.38443      -77.8720       77.8720       192.392       270.264    
  42  0.684509     -0.379054      -5.48203       5.48203       192.598       198.080    
  43  0.827193     -0.189717      -2.74377       2.74377       183.292       186.035    
  44  0.430712     -0.842315      -12.1819       12.1819       203.127       215.309    
  45  0.925073     -0.778822E-01  -1.12637       1.12637       184.056       185.182    
  46  0.139567      -1.96921      -28.4796       28.4796       190.223       218.703    
  47  0.905138     -0.996680E-01  -1.44144       1.44144       188.127       189.568    
  48  0.230323      -1.46827      -21.2348       21.2348       194.868       216.103    
  49  0.854981     -0.156676      -2.26591       2.26591       192.832       195.098    
  50  0.526676     -0.641170      -9.27288       9.27288       179.763       189.036    
  51  0.425904     -0.853542      -12.3443       12.3443       191.913       204.258    
  52  0.770395     -0.260852      -3.77255       3.77255       195.166       198.938    
  53  0.222399      -1.50328      -21.7411       21.7411       191.800       213.541    
  54  0.849203     -0.163457      -2.36399       2.36399       190.529       192.893    
  55  0.409521     -0.892766      -12.9116       12.9116       197.354       210.266    
  56  0.526161     -0.642147      -9.28701       9.28701       194.243       203.530    
  57  0.705716     -0.348543      -5.04078       5.04078       196.089       201.130    
  58  0.548845E-03  -7.50769      -108.579       108.579       190.715       299.295    
  59  0.498314     -0.696524      -10.0734       10.0734       191.159       201.232    
  60  0.774749     -0.255216      -3.69104       3.69104       191.810       195.501    
  61  0.537402E-01  -2.92359      -42.2823       42.2823       213.941       256.224    
  62  0.708174     -0.345066      -4.99048       4.99048       191.444       196.435    
  63  0.272932      -1.29853      -18.7799       18.7799       192.177       210.957    
  64  0.701294     -0.354828      -5.13167       5.13167       192.846       197.978    
  65  0.309054      -1.17424      -16.9823       16.9823       187.149       204.132    
  66  0.911982     -0.921347E-01  -1.33249       1.33249       204.512       205.845    
  67  0.874613     -0.133974      -1.93759       1.93759       189.576       191.514    
  68  0.317616      -1.14691      -16.5871       16.5871       190.160       206.747    
  69  0.587945     -0.531123      -7.68132       7.68132       184.490       192.171    
  70  0.358507E-02  -5.63098      -81.4376       81.4376       192.845       274.283    
  71  0.802817     -0.219629      -3.17637       3.17637       199.184       202.360    
  72  0.559815     -0.580150      -8.39037       8.39037       198.253       206.643    
loop,thermsimp(1:2)       27   23.3047      0.243947    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283        188.96          0.84          1.11         25.13          0.09          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       27
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       28
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      282     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -21.1507       21.1507       181.185       202.336    
   2  0.922423     -0.807516E-01  -1.16786       1.16786       178.432       179.600    
   3  0.556007     -0.586974      -8.48907       8.48907       184.056       192.545    
   4  0.921345     -0.819211E-01  -1.18478       1.18478       183.292       184.476    
   5  0.623358     -0.472635      -6.83545       6.83545       184.391       191.226    
   6  0.967150     -0.334012E-01 -0.483062      0.483062       174.483       174.966    
   7  0.239844      -1.42777      -20.6490       20.6490       187.201       207.850    
   8  0.707370     -0.346201      -5.00691       5.00691       179.763       184.770    
   9  0.375591     -0.979256      -14.1624       14.1624       188.127       202.289    
  10  0.164915      -1.80233      -26.0660       26.0660       187.446       213.512    
  11  0.634729     -0.454558      -6.57401       6.57401       189.474       196.048    
  12  0.956585     -0.443852E-01 -0.641917      0.641917       185.115       185.757    
  13  0.281051      -1.26922      -18.3560       18.3560       189.576       207.932    
  14  0.332446      -1.10128      -15.9271       15.9271       183.837       199.764    
  15  0.417901     -0.872510      -12.6186       12.6186       184.490       197.108    
  16  0.454459     -0.788647      -11.4057       11.4057       189.670       201.075    
  17  0.163150      -1.81309      -26.2216       26.2216       190.529       216.750    
  18  0.412675     -0.885095      -12.8006       12.8006       191.517       204.318    
  19  0.510076     -0.673195      -9.73604       9.73604       184.706       194.442    
  20  0.159872E-02  -6.43855      -93.1171       93.1171       185.330       278.447    
  21  0.279094      -1.27620      -18.4570       18.4570       185.247       203.704    
  22  0.229843E-01  -3.77294      -54.5659       54.5659       192.832       247.398    
  23  0.829240E-02  -4.79242      -69.3100       69.3100       192.832       262.142    
  24  0.722732     -0.324717      -4.69620       4.69620       191.810       196.506    
  25  0.399402     -0.917787      -13.2734       13.2734       187.767       201.041    
  26  0.321457      -1.13489      -16.4133       16.4133       195.694       212.108    
  27  0.103147      -2.27160      -32.8528       32.8528       193.212       226.064    
  28  0.488570     -0.716273      -10.3591       10.3591       191.444       201.803    
  29  0.775391     -0.254388      -3.67907       3.67907       183.092       186.771    
  30  0.264831      -1.32866      -19.2157       19.2157       192.846       212.062    
  31  0.291634      -1.23225      -17.8214       17.8214       192.598       210.419    
  32  0.754799E-02  -4.88647      -70.6703       70.6703       195.166       265.836    
  33  0.403715     -0.907047      -13.1181       13.1181       175.715       188.833    
  34  0.794963     -0.229460      -3.31855       3.31855       187.220       190.538    
  35  0.482612E-01  -3.03113      -43.8374       43.8374       193.304       237.141    
  36  0.309506      -1.17278      -16.9612       16.9612       192.832       209.794    
  37  0.265676      -1.32548      -19.1696       19.1696       186.584       205.754    
  38  0.793358     -0.231480      -3.34776       3.34776       196.089       199.437    
  39  0.603192E-01  -2.80811      -40.6120       40.6120       191.159       231.771    
  40  0.516664     -0.660363      -9.55045       9.55045       199.184       208.734    
  41  0.524892E-01  -2.94715      -42.6229       42.6229       194.243       236.866    
  42  0.581500     -0.542144      -7.84072       7.84072       187.149       194.990    
  43  0.403805     -0.906823      -13.1149       13.1149       191.913       205.028    
  44  0.447829     -0.803344      -11.6183       11.6183       180.706       192.325    
  45  0.470604     -0.753737      -10.9009       10.9009       204.512       215.413    
  46  0.479088     -0.735871      -10.6425       10.6425       187.470       198.113    
  47  0.959223     -0.416322E-01 -0.602102      0.602102       198.253       198.855    
  48  0.527403     -0.639789      -9.25291       9.25291       190.160       199.413    
  49  0.731687     -0.312402      -4.51809       4.51809       188.818       193.336    
  50  0.682707     -0.381689      -5.52016       5.52016       191.012       196.532    
  51  0.386616     -0.950322      -13.7440       13.7440       192.125       205.869    
  52  0.120332      -2.11750      -30.6242       30.6242       193.650       224.274    
  53  0.285899      -1.25212      -18.1086       18.1086       197.354       215.463    
  54  0.798593     -0.224904      -3.25266       3.25266       193.313       196.565    
  55  0.305098      -1.18712      -17.1687       17.1687       192.177       209.346    
  56  0.274289      -1.29357      -18.7082       18.7082       197.960       216.668    
  57  0.805459     -0.216343      -3.12885       3.12885       204.357       207.486    
  58  0.665552     -0.407139      -5.88821       5.88821       191.800       197.688    
  59  0.721477     -0.326454      -4.72132       4.72132       183.165       187.887    
  60  0.563306     -0.573931      -8.30044       8.30044       203.127       211.428    
  61  0.253697      -1.37162      -19.8369       19.8369       194.868       214.705    
  62  0.714468     -0.336217      -4.86251       4.86251       190.223       195.086    
  63  0.106618      -2.23850      -32.3742       32.3742       192.707       225.081    
  64  0.116686      -2.14827      -31.0692       31.0692       189.414       220.483    
  65  0.856486     -0.154918      -2.24049       2.24049       192.832       195.073    
  66  0.895996     -0.109820      -1.58826       1.58826       193.513       195.102    
  67  0.112164      -2.18779      -31.6407       31.6407       191.801       223.441    
  68  0.573757     -0.555550      -8.03460       8.03460       181.080       189.114    
  69  0.376044     -0.978049      -14.1450       14.1450       213.941       228.086    
  70  0.779305     -0.249353      -3.60625       3.60625       192.392       195.998    
  71  0.815848E-01  -2.50611      -36.2445       36.2445       192.845       229.090    
  72  0.580028     -0.544678      -7.87737       7.87737       188.964       196.842    
loop,thermsimp(1:2)       28   21.1507       1.16786    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284        184.88          0.84          1.11         25.14          0.17          0.05         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       28
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       29
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      283     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -15.9444       15.9444       174.483       190.428    
   2  0.991191     -0.884791E-02 -0.127962      0.127962       178.432       178.560    
   3  0.752830     -0.283916      -4.10612       4.10612       183.292       187.398    
   4  0.718872     -0.330071      -4.77363       4.77363       179.763       184.537    
   5  0.362244      -1.01544      -14.6857       14.6857       185.115       199.801    
   6  0.993342E-01  -2.30927      -33.3976       33.3976       183.092       216.489    
   7  0.734379     -0.308729      -4.46498       4.46498       183.165       187.630    
   8  0.190509      -1.65806      -23.9795       23.9795       175.715       199.694    
   9  0.113713      -2.17408      -31.4424       31.4424       181.080       212.522    
  10  0.582158     -0.541014      -7.82437       7.82437       187.220       195.044    
  11  0.100405E-01  -4.60113      -66.5435       66.5435       184.391       250.934    
  12  0.614877     -0.486333      -7.03355       7.03355       180.706       187.740    
  13  0.996806     -0.319890E-02 -0.462639E-01  0.462639E-01   184.056       184.102    
  14  0.439871E-01  -3.12386      -45.1786       45.1786       188.818       233.997    
  15  0.610456     -0.493549      -7.13791       7.13791       184.706       191.844    
  16  0.676471     -0.390866      -5.65286       5.65286       187.149       192.802    
  17  0.263829      -1.33246      -19.2705       19.2705       192.832       212.103    
  18  0.761962     -0.271858      -3.93173       3.93173       190.223       194.155    
  19  0.405295     -0.903140      -13.0616       13.0616       193.513       206.575    
  20  0.184680      -1.68913      -24.4289       24.4289       192.392       216.821    
  21  0.695434     -0.363219      -5.25303       5.25303       189.474       194.727    
  22  0.597154     -0.515580      -7.45654       7.45654       191.810       199.266    
  23  0.254276      -1.36933      -19.8039       19.8039       191.012       210.815    
  24  0.777974     -0.251062      -3.63097       3.63097       193.313       196.943    
  25  0.597236     -0.515443      -7.45455       7.45455       188.964       196.419    
  26  0.658168     -0.418295      -6.04956       6.04956       184.490       190.539    
  27  0.917953     -0.856086E-01  -1.23811       1.23811       191.800       193.038    
  28  0.167567      -1.78637      -25.8353       25.8353       187.470       213.306    
  29  0.867739E-02  -4.74703      -68.6536       68.6536       198.253       266.906    
  30  0.157469      -1.84853      -26.7342       26.7342       190.160       216.894    
  31  0.947458     -0.539724E-01 -0.780572      0.780572       196.089       196.869    
  32  0.883772     -0.123556      -1.78692       1.78692       183.837       185.624    
  33  0.873100     -0.135705      -1.96262       1.96262       187.767       189.730    
  34  0.138043      -1.98019      -28.6383       28.6383       189.670       218.308    
  35  0.833185     -0.182500      -2.63939       2.63939       191.444       194.083    
  36  0.907894     -0.966275E-01  -1.39747       1.39747       188.127       189.524    
  37  0.858432     -0.152648      -2.20766       2.20766       181.185       183.393    
  38  0.192050      -1.65000      -23.8630       23.8630       185.247       209.110    
  39  0.890666     -0.115786      -1.67454       1.67454       191.517       193.192    
  40  0.389935     -0.941775      -13.6203       13.6203       191.913       205.534    
  41  0.842362     -0.171545      -2.48096       2.48096       186.584       189.065    
  42  0.143912      -1.93855      -28.0361       28.0361       192.125       220.162    
  43  0.678545     -0.387804      -5.60859       5.60859       204.357       209.965    
  44  0.621021     -0.476390      -6.88976       6.88976       187.201       194.090    
  45  0.533199     -0.628861      -9.09486       9.09486       189.576       198.671    
  46  0.891703     -0.114623      -1.65772       1.65772       199.184       200.842    
  47  0.675469     -0.392349      -5.67431       5.67431       192.177       197.852    
  48  0.757471     -0.277770      -4.01723       4.01723       192.832       196.850    
  49  0.855441     -0.156139      -2.25814       2.25814       192.598       194.856    
  50  0.737982     -0.303836      -4.39421       4.39421       203.127       207.522    
  51  0.630328     -0.461515      -6.67462       6.67462       192.846       199.521    
  52  0.701612     -0.354375      -5.12513       5.12513       195.694       200.819    
  53  0.161537E-01  -4.12561      -59.6663       59.6663       187.446       247.112    
  54  0.716145     -0.333873      -4.82861       4.82861       194.868       199.697    
  55  0.644842     -0.438751      -6.34540       6.34540       204.512       210.858    
  56  0.465420E-01  -3.06740      -44.3621       44.3621       197.354       241.716    
  57  0.644178     -0.439780      -6.36029       6.36029       197.960       204.320    
  58  0.297766      -1.21145      -17.5205       17.5205       190.529       208.049    
  59  0.877956     -0.130159      -1.88241       1.88241       189.414       191.297    
  60  0.373410     -0.985078      -14.2466       14.2466       191.801       206.047    
  61  0.162588      -1.81653      -26.2715       26.2715       193.650       219.921    
  62  0.634599     -0.454761      -6.57695       6.57695       192.707       199.284    
  63  0.762468     -0.271195      -3.92213       3.92213       193.212       197.134    
  64  0.237905      -1.43588      -20.7664       20.7664       213.941       234.708    
  65  0.473101     -0.748446      -10.8244       10.8244       192.845       203.670    
  66  0.156066      -1.85747      -26.8636       26.8636       191.159       218.022    
  67  0.992592     -0.743581E-02 -0.107540      0.107540       194.243       194.351    
  68  0.568078     -0.565496      -8.17845       8.17845       193.304       201.482    
  69  0.918090     -0.854598E-01  -1.23596       1.23596       192.832       194.068    
  70  0.561720     -0.576753      -8.34124       8.34124       192.832       201.174    
  71  0.649692E-01  -2.73384      -39.5380       39.5380       195.166       234.704    
  72  0.757920     -0.277177      -4.00866       4.00866       184.883       188.891    
loop,thermsimp(1:2)       29   15.9444      0.127962    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285        190.02          0.84          1.11         25.48          0.08          0.05         27.56
Just calling func    0   0         27.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    286        187.30          0.84          1.11         25.13          0.10          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       29
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       30
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      285
neval,tstepnext:      285     285

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -26.7261       26.7261       178.432       205.158    
   2  0.553200     -0.592035      -8.56226       8.56226       181.185       189.748    
   3  0.825049     -0.192313      -2.78131       2.78131       184.056       186.837    
   4  0.767336     -0.264830      -3.83009       3.83009       179.763       183.593    
   5  0.966534     -0.340385E-01 -0.492279      0.492279       183.837       184.330    
   6  0.954430     -0.466410E-01 -0.674542      0.674542       183.292       183.966    
   7  0.780674     -0.247598      -3.58086       3.58086       183.165       186.746    
   8  0.312863      -1.16199      -16.8052       16.8052       180.706       197.512    
   9  0.990226     -0.982218E-02 -0.142053      0.142053       184.883       185.025    
  10  0.893872     -0.112193      -1.62258       1.62258       186.584       188.207    
  11  0.322320      -1.13221      -16.3745       16.3745       188.127       204.501    
  12  0.927465     -0.752997E-01  -1.08902       1.08902       187.767       188.856    
  13  0.539466     -0.617176      -8.92586       8.92586       174.483       183.409    
  14  0.461474     -0.773330      -11.1842       11.1842       184.490       195.674    
  15  0.745701     -0.293430      -4.24371       4.24371       189.414       193.658    
  16  0.703580     -0.351573      -5.08460       5.08460       184.706       189.791    
  17  0.917420E-01  -2.38878      -34.5475       34.5475       187.149       221.697    
  18  0.671661     -0.398001      -5.75606       5.75606       191.800       197.556    
  19  0.845179     -0.168207      -2.43268       2.43268       191.517       193.950    
  20  0.283605E-01  -3.56276      -51.5261       51.5261       192.832       244.358    
  21  0.108883E-01  -4.52006      -65.3711       65.3711       191.444       256.815    
  22  0.506006     -0.681208      -9.85191       9.85191       187.201       197.052    
  23  0.353918      -1.03869      -15.0220       15.0220       190.223       205.245    
  24  0.656862     -0.420282      -6.07829       6.07829       194.243       200.321    
  25  0.691560     -0.368806      -5.33382       5.33382       189.474       194.807    
  26  0.445402     -0.808779      -11.6969       11.6969       192.598       204.295    
  27  0.832700     -0.183081      -2.64780       2.64780       187.220       189.867    
  28  0.963063     -0.376360E-01 -0.544308      0.544308       188.964       189.509    
  29  0.422212     -0.862247      -12.4702       12.4702       192.832       205.303    
  30  0.917895     -0.856720E-01  -1.23902       1.23902       196.089       197.328    
  31  0.767210     -0.264994      -3.83246       3.83246       193.313       197.145    
  32  0.360836      -1.01933      -14.7420       14.7420       193.212       207.954    
  33  0.635930     -0.452667      -6.54666       6.54666       192.177       198.724    
  34  0.687292     -0.374995      -5.42334       5.42334       189.576       195.000    
  35  0.833832     -0.181724      -2.62817       2.62817       191.810       194.438    
  36  0.362075      -1.01590      -14.6924       14.6924       192.707       207.400    
  37  0.385764     -0.952530      -13.7759       13.7759       192.846       206.622    
  38  0.752556     -0.284279      -4.11137       4.11137       175.715       179.826    
  39  0.547433     -0.602515      -8.71382       8.71382       194.868       203.582    
  40  0.171004      -1.76607      -25.5417       25.5417       185.115       210.657    
  41  0.159022      -1.83871      -26.5922       26.5922       195.694       222.286    
  42  0.850806     -0.161571      -2.33670       2.33670       199.184       201.521    
  43  0.926075     -0.768001E-01  -1.11072       1.11072       192.832       193.943    
  44  0.584885     -0.536340      -7.75677       7.75677       193.304       201.060    
  45  0.547650     -0.602120      -8.70811       8.70811       192.845       201.553    
  46  0.864296     -0.145840      -2.10920       2.10920       197.960       200.069    
  47  0.384639     -0.955450      -13.8181       13.8181       191.913       205.732    
  48  0.359776      -1.02227      -14.7846       14.7846       191.801       206.585    
  49  0.147032      -1.91711      -27.7260       27.7260       193.513       221.239    
  50  0.649806     -0.431082      -6.23449       6.23449       203.127       209.362    
  51  0.909946     -0.943695E-01  -1.36481       1.36481       190.529       191.894    
  52  0.740699     -0.300161      -4.34106       4.34106       185.247       189.588    
  53  0.959446     -0.413992E-01 -0.598733      0.598733       204.357       204.956    
  54  0.993892     -0.612654E-02 -0.886046E-01  0.886046E-01   191.012       191.100    
  55  0.499875     -0.693397      -10.0282       10.0282       204.512       214.541    
  56  0.716813     -0.332941      -4.81513       4.81513       192.832       197.647    
  57  0.586555     -0.533488      -7.71553       7.71553       181.080       188.795    
  58  0.687999     -0.373968      -5.40848       5.40848       187.470       192.879    
  59  0.238056      -1.43525      -20.7572       20.7572       183.092       203.849    
  60  0.842319     -0.171596      -2.48170       2.48170       192.392       194.874    
  61  0.559244     -0.581169      -8.40512       8.40512       190.160       198.565    
  62  0.596920     -0.515973      -7.46221       7.46221       191.159       198.621    
  63  0.266753      -1.32143      -19.1111       19.1111       189.670       208.781    
  64  0.681727     -0.383126      -5.54093       5.54093       193.650       199.191    
  65  0.401206E-01  -3.21587      -46.5092       46.5092       192.125       238.635    
  66  0.275178      -1.29034      -18.6614       18.6614       188.818       207.480    
  67  0.830963     -0.185171      -2.67801       2.67801       195.166       197.844    
  68  0.802444     -0.220093      -3.18308       3.18308       213.941       217.124    
  69  0.661893E-01  -2.71524      -39.2689       39.2689       197.354       236.623    
  70  0.865761E-01  -2.44673      -35.3857       35.3857       187.446       222.832    
  71  0.778264     -0.250689      -3.62557       3.62557       184.391       188.017    
  72  0.386768     -0.949931      -13.7383       13.7383       187.302       201.041    
loop,thermsimp(1:2)       30   26.7261       8.56226    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287        186.82          0.83          1.11         25.06          0.16          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    186.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.4624               285
loop is:       30
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    14.4624               285
loop is:       31
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    7.23121               356

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      286     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -9.26962       9.26962       175.715       184.985    
   2  0.202445      -1.59728      -11.5503       11.5503       174.483       186.034    
   3  0.927152     -0.756373E-01 -0.546950      0.546950       179.763       180.310    
   4  0.403144     -0.908460      -6.56927       6.56927       183.292       189.861    
   5  0.791838     -0.233398      -1.68775       1.68775       183.837       185.525    
   6  0.292576      -1.22903      -8.88737       8.88737       184.883       193.770    
   7  0.135578      -1.99821      -14.4495       14.4495       183.165       197.615    
   8  0.516570     -0.660545      -4.77654       4.77654       184.056       188.832    
   9  0.730579     -0.313918      -2.27001       2.27001       184.391       186.661    
  10  0.508248     -0.676786      -4.89398       4.89398       186.584       191.478    
  11  0.928455     -0.742338E-01 -0.536800      0.536800       181.080       181.616    
  12  0.696477     -0.361721      -2.61568       2.61568       187.767       190.383    
  13  0.465556     -0.764522      -5.52842       5.52842       188.964       194.493    
  14  0.194653      -1.63654      -11.8341       11.8341       185.247       197.081    
  15  0.650312     -0.430303      -3.11161       3.11161       181.185       184.297    
  16  0.555802     -0.587343      -4.24720       4.24720       184.706       188.953    
  17  0.985517     -0.145893E-01 -0.105498      0.105498       187.220       187.325    
  18  0.923066     -0.800544E-01 -0.578890      0.578890       191.012       191.590    
  19  0.658765     -0.417388      -3.01822       3.01822       190.529       193.547    
  20  0.197878      -1.62010      -11.7153       11.7153       187.470       199.186    
  21  0.449673     -0.799236      -5.77944       5.77944       189.414       195.194    
  22  0.208093      -1.56977      -11.3514       11.3514       192.832       204.184    
  23  0.102791      -2.27506      -16.4514       16.4514       191.517       207.969    
  24  0.650538     -0.429955      -3.10910       3.10910       191.810       194.919    
  25  0.223365      -1.49895      -10.8392       10.8392       189.474       200.313    
  26  0.520729     -0.652525      -4.71854       4.71854       192.392       197.110    
  27  0.919707E-01  -2.38629      -17.2557       17.2557       189.576       206.832    
  28  0.788427     -0.237716      -1.71897       1.71897       184.490       186.209    
  29  0.395754     -0.926961      -6.70305       6.70305       187.201       193.904    
  30  0.903388     -0.101603     -0.734716      0.734716       193.313       194.047    
  31  0.569415     -0.563145      -4.07222       4.07222       196.089       200.161    
  32  0.974677     -0.256496E-01 -0.185478      0.185478       180.706       180.892    
  33  0.376411     -0.977073      -7.06542       7.06542       191.800       198.865    
  34  0.309090      -1.17412      -8.49034       8.49034       192.832       201.323    
  35  0.248039      -1.39417      -10.0815       10.0815       195.166       205.247    
  36  0.941329     -0.604621E-01 -0.437214      0.437214       190.160       190.597    
  37  0.131879      -2.02587      -14.6495       14.6495       191.159       205.808    
  38  0.188022      -1.67120      -12.0848       12.0848       192.177       204.262    
  39  0.898649E-01  -2.40945      -17.4232       17.4232       193.650       211.073    
  40  0.853893     -0.157949      -1.14216       1.14216       197.960       199.102    
  41  0.643577     -0.440714      -3.18690       3.18690       194.243       197.430    
  42  0.664391     -0.408885      -2.95673       2.95673       187.302       190.259    
  43  0.825262     -0.192054      -1.38879       1.38879       193.304       194.692    
  44  0.611498     -0.491843      -3.55662       3.55662       199.184       202.741    
  45  0.284000      -1.25878      -9.10250       9.10250       192.845       201.948    
  46  0.108174      -2.22402      -16.0823       16.0823       194.868       210.950    
  47  0.293070      -1.22734      -8.87518       8.87518       183.092       191.967    
  48  0.412045     -0.886623      -6.41136       6.41136       192.598       199.009    
  49  0.464041     -0.767783      -5.55200       5.55200       188.127       193.679    
  50  0.711768     -0.340003      -2.45863       2.45863       204.357       206.815    
  51  0.919970     -0.834138E-01 -0.603183      0.603183       178.432       179.035    
  52  0.551321     -0.595437      -4.30573       4.30573       190.223       194.529    
  53  0.720690E-01  -2.63013      -19.0190       19.0190       192.832       211.851    
  54  0.788823     -0.237213      -1.71534       1.71534       191.913       193.629    
  55  0.339304      -1.08086      -7.81593       7.81593       191.801       199.617    
  56  0.824115     -0.193445      -1.39884       1.39884       192.846       194.245    
  57  0.564535     -0.571754      -4.13447       4.13447       192.707       196.842    
  58  0.608050     -0.497498      -3.59751       3.59751       188.818       192.416    
  59  0.696797     -0.361262      -2.61236       2.61236       193.212       195.824    
  60  0.287274      -1.24732      -9.01963       9.01963       189.670       198.689    
  61  0.302150E-01  -3.49942      -25.3050       25.3050       203.127       228.432    
  62  0.896370     -0.109402     -0.791109      0.791109       185.115       185.906    
  63  0.289059      -1.24112      -8.97483       8.97483       204.512       213.487    
  64  0.476596     -0.741086      -5.35895       5.35895       213.941       219.300    
  65  0.895851E-01  -2.41257      -17.4458       17.4458       193.513       210.959    
  66  0.864694     -0.145380      -1.05127       1.05127       187.149       188.201    
  67  0.222506      -1.50280      -10.8671       10.8671       195.694       206.561    
  68  0.800191     -0.222904      -1.61187       1.61187       187.446       189.058    
  69  0.332930      -1.09982      -7.95305       7.95305       197.354       205.307    
  70  0.616166     -0.484239      -3.50164       3.50164       192.125       195.627    
  71  0.560690E-01  -2.88117      -20.8344       20.8344       192.832       213.667    
  72  0.629756     -0.462422      -3.34387       3.34387       186.821       190.165    
loop,thermsimp(1:2)       31   9.26962       11.5503    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288        180.39          0.84          1.11         25.16          0.04          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    289        266.05          0.84          1.11         25.07          0.05          0.05         27.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    180.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       31
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       32
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      288     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -2.56534       2.56534       178.432       180.997    
   2  0.779682     -0.248869      -1.79963       1.79963       179.763       181.563    
   3  0.611645     -0.491604      -3.55489       3.55489       180.706       184.261    
   4  0.380626     -0.965937      -6.98490       6.98490       181.080       188.064    
   5  0.986599     -0.134915E-01 -0.975597E-01  0.975597E-01   181.185       181.283    
   6  0.699021     -0.358075      -2.58931       2.58931       175.715       178.304    
   7  0.981217E-01  -2.32155      -16.7876       16.7876       183.837       200.625    
   8  0.221199      -1.50869      -10.9097       10.9097       185.115       196.025    
   9  0.802460     -0.220073      -1.59140       1.59140       174.483       176.075    
  10  0.623430     -0.472519      -3.41688       3.41688       184.490       187.907    
  11  0.669862     -0.400684      -2.89743       2.89743       184.391       187.288    
  12  0.957999     -0.429090E-01 -0.310284      0.310284       187.220       187.530    
  13  0.569879E-01  -2.86492      -20.7168       20.7168       187.149       207.866    
  14  0.245244      -1.40550      -10.1635       10.1635       184.056       194.219    
  15  0.870123     -0.139121      -1.00601       1.00601       184.706       185.712    
  16  0.429679     -0.844716      -6.10832       6.10832       187.446       193.555    
  17  0.369880     -0.994577      -7.19200       7.19200       183.292       190.484    
  18  0.964882     -0.357490E-01 -0.258509      0.258509       186.821       187.079    
  19  0.625983     -0.468432      -3.38733       3.38733       187.302       190.690    
  20  0.508652     -0.675991      -4.88823       4.88823       187.767       192.656    
  21  0.694697     -0.364279      -2.63418       2.63418       190.160       192.794    
  22  0.817819     -0.201114      -1.45430       1.45430       186.584       188.038    
  23  0.655732     -0.422003      -3.05159       3.05159       191.012       194.063    
  24  0.658757     -0.417401      -3.01831       3.01831       183.092       186.110    
  25  0.325934      -1.12106      -8.10663       8.10663       188.818       196.925    
  26  0.849137     -0.163535      -1.18255       1.18255       190.529       191.711    
  27  0.953435     -0.476843E-01 -0.344815      0.344815       191.913       192.258    
  28  0.435049     -0.832297      -6.01851       6.01851       188.127       194.145    
  29  0.155341E-01  -4.16472      -30.1160       30.1160       184.883       214.999    
  30  0.390095     -0.941364      -6.80720       6.80720       187.201       194.008    
  31  0.400867E-02  -5.51929      -39.9112       39.9112       193.313       233.224    
  32  0.989750     -0.103025E-01 -0.744997E-01  0.744997E-01   192.846       192.921    
  33  0.194149      -1.63913      -11.8529       11.8529       188.964       200.817    
  34  0.573547     -0.555915      -4.01994       4.01994       190.223       194.243    
  35  0.570216     -0.561740      -4.06206       4.06206       193.304       197.366    
  36  0.802122     -0.220494      -1.59444       1.59444       191.810       193.404    
  37  0.831214E-01  -2.48745      -17.9873       17.9873       189.414       207.402    
  38  0.280368      -1.27165      -9.19558       9.19558       192.125       201.321    
  39  0.568263     -0.565171      -4.08687       4.08687       193.212       197.299    
  40  0.570544     -0.561165      -4.05790       4.05790       192.707       196.765    
  41  0.524202     -0.645877      -4.67048       4.67048       185.247       189.917    
  42  0.625335E-01  -2.77205      -20.0453       20.0453       192.392       212.437    
  43  0.717146     -0.332476      -2.40421       2.40421       194.243       196.647    
  44  0.234175      -1.45169      -10.4975       10.4975       183.165       193.663    
  45  0.366320      -1.00425      -7.26194       7.26194       189.670       196.932    
  46  0.458915     -0.778891      -5.63233       5.63233       191.800       197.432    
  47  0.379536     -0.968806      -7.00564       7.00564       192.598       199.604    
  48  0.854466     -0.157278      -1.13731       1.13731       197.960       199.097    
  49  0.452738E-01  -3.09503      -22.3808       22.3808       187.470       209.851    
  50  0.966525     -0.340477E-01 -0.246206      0.246206       191.801       192.047    
  51  0.400949     -0.913920      -6.60875       6.60875       196.089       202.698    
  52  0.563096     -0.574305      -4.15292       4.15292       189.474       193.627    
  53  0.612298     -0.490536      -3.54717       3.54717       192.832       196.379    
  54  0.395518     -0.927559      -6.70737       6.70737       192.845       199.553    
  55  0.693522     -0.365972      -2.64642       2.64642       199.184       201.830    
  56  0.270894      -1.30603      -9.44417       9.44417       192.832       202.276    
  57  0.885600     -0.121490     -0.878519      0.878519       192.177       193.056    
  58  0.862297     -0.148155      -1.07134       1.07134       195.166       196.237    
  59  0.483017     -0.727702      -5.26217       5.26217       197.354       202.616    
  60  0.594400     -0.520203      -3.76170       3.76170       191.159       194.920    
  61  0.351664      -1.04508      -7.55719       7.55719       195.694       203.251    
  62  0.402505     -0.910048      -6.58075       6.58075       204.357       210.938    
  63  0.272240      -1.30107      -9.40833       9.40833       189.576       198.985    
  64  0.234792      -1.44906      -10.4784       10.4784       191.517       201.996    
  65  0.825709E-01  -2.49410      -18.0353       18.0353       194.868       212.903    
  66  0.636436     -0.451871      -3.26757       3.26757       193.513       196.781    
  67  0.942309     -0.594220E-01 -0.429693      0.429693       193.650       194.080    
  68  0.185829      -1.68293      -12.1696       12.1696       192.832       205.002    
  69  0.518004     -0.657773      -4.75649       4.75649       204.512       209.269    
  70  0.831797     -0.184167      -1.33175       1.33175       192.832       194.164    
  71  0.377117     -0.975199      -7.05187       7.05187       213.941       220.993    
  72  0.484710     -0.724205      -5.23688       5.23688       180.389       185.626    
loop,thermsimp(1:2)       32   2.56534       1.79963    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290        190.78          0.84          1.11         25.12          0.19          0.05         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       32
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       33
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      289     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -6.55446       6.55446       174.483       181.038    
   2  0.598662     -0.513057      -3.71003       3.71003       175.715       179.425    
   3  0.165178      -1.80073      -13.0215       13.0215       178.432       191.453    
   4  0.785331     -0.241651      -1.74743       1.74743       181.185       182.933    
   5  0.422061     -0.862604      -6.23768       6.23768       179.763       186.001    
   6  0.343624      -1.06821      -7.72443       7.72443       180.706       188.431    
   7  0.988862     -0.112001E-01 -0.809902E-01  0.809902E-01   180.389       180.470    
   8  0.586093E-01  -2.83686      -20.5139       20.5139       184.706       205.220    
   9  0.324880      -1.12430      -8.13005       8.13005       183.092       191.222    
  10  0.869373     -0.139983      -1.01225       1.01225       186.821       187.833    
  11  0.314362      -1.15721      -8.36802       8.36802       184.391       192.759    
  12  0.635265     -0.453712      -3.28089       3.28089       187.220       190.501    
  13  0.800738     -0.222221      -1.60693       1.60693       184.490       186.097    
  14  0.234515      -1.45024      -10.4870       10.4870       186.584       197.071    
  15  0.818766     -0.199957      -1.44593       1.44593       181.080       182.525    
  16  0.480807     -0.732289      -5.29533       5.29533       185.247       190.542    
  17  0.173083      -1.75398      -12.6834       12.6834       183.292       195.975    
  18  0.544835     -0.607272      -4.39132       4.39132       187.302       191.694    
  19  0.955728     -0.452816E-01 -0.327441      0.327441       190.529       190.856    
  20  0.909631     -0.947157E-01 -0.684910      0.684910       191.801       192.486    
  21  0.538276     -0.619384      -4.47889       4.47889       191.913       196.392    
  22  0.640373     -0.445705      -3.22299       3.22299       187.767       190.990    
  23  0.588429     -0.530300      -3.83471       3.83471       190.160       193.995    
  24  0.954392     -0.466804E-01 -0.337556      0.337556       192.846       193.184    
  25  0.976738     -0.235363E-01 -0.170196      0.170196       192.177       192.348    
  26  0.801897     -0.220775      -1.59647       1.59647       191.810       193.406    
  27  0.679499     -0.386400      -2.79414       2.79414       187.446       190.240    
  28  0.303686      -1.19176      -8.61788       8.61788       189.474       198.091    
  29  0.907562     -0.969936E-01 -0.701381      0.701381       183.165       183.867    
  30  0.117971E-01  -4.43990      -32.1059       32.1059       187.201       219.306    
  31  0.324683      -1.12491      -8.13444       8.13444       191.012       199.146    
  32  0.662106     -0.412329      -2.98164       2.98164       193.650       196.632    
  33  0.334080      -1.09637      -7.92812       7.92812       188.127       196.055    
  34  0.307577      -1.17903      -8.52582       8.52582       192.832       201.358    
  35  0.539029     -0.617986      -4.46879       4.46879       184.056       188.525    
  36  0.822737     -0.195119      -1.41095       1.41095       190.223       191.634    
  37  0.973480     -0.268776E-01 -0.194358      0.194358       191.159       191.353    
  38  0.918970     -0.845018E-01 -0.611050      0.611050       185.115       185.726    
  39  0.203072      -1.59419      -11.5280       11.5280       195.166       206.694    
  40  0.467655     -0.760024      -5.49590       5.49590       192.832       198.328    
  41  0.323145      -1.12965      -8.16876       8.16876       194.243       202.412    
  42  0.505961     -0.681295      -4.92659       4.92659       192.707       197.634    
  43  0.699853E-01  -2.65947      -19.2312       19.2312       193.513       212.744    
  44  0.188263      -1.66991      -12.0755       12.0755       188.818       200.894    
  45  0.663178     -0.410711      -2.96994       2.96994       189.670       192.640    
  46  0.680233     -0.385320      -2.78633       2.78633       193.212       195.998    
  47  0.717812     -0.331548      -2.39749       2.39749       193.304       195.701    
  48  0.319374      -1.14139      -8.25365       8.25365       191.800       200.053    
  49  0.667076     -0.404851      -2.92756       2.92756       189.576       192.504    
  50  0.755360     -0.280560      -2.02879       2.02879       197.960       199.989    
  51  0.105804      -2.24617      -16.2425       16.2425       192.845       209.088    
  52  0.432752     -0.837590      -6.05679       6.05679       192.598       198.655    
  53  0.258710      -1.35205      -9.77693       9.77693       183.837       193.614    
  54  0.826410     -0.190665      -1.37874       1.37874       188.964       190.343    
  55  0.958430     -0.424590E-01 -0.307030      0.307030       192.125       192.433    
  56  0.898442     -0.107093     -0.774411      0.774411       199.184       199.958    
  57  0.794924     -0.229509      -1.65963       1.65963       191.517       193.177    
  58  0.191148      -1.65471      -11.9655       11.9655       192.832       204.798    
  59  0.920959     -0.823397E-01 -0.595416      0.595416       197.354       197.950    
  60  0.239714      -1.42831      -10.3284       10.3284       196.089       206.417    
  61  0.337561      -1.08601      -7.85315       7.85315       195.694       203.547    
  62  0.229537      -1.47169      -10.6421       10.6421       192.832       203.474    
  63  0.518941     -0.655965      -4.74342       4.74342       189.414       194.158    
  64  0.565096     -0.570759      -4.12728       4.12728       187.149       191.277    
  65  0.934648     -0.675849E-01 -0.488721      0.488721       204.512       205.001    
  66  0.699822     -0.356929      -2.58103       2.58103       187.470       190.051    
  67  0.614954     -0.486208      -3.51587       3.51587       204.357       207.873    
  68  0.137942      -1.98092      -14.3245       14.3245       192.392       206.716    
  69  0.565370     -0.570275      -4.12378       4.12378       194.868       198.992    
  70  0.290261E-01  -3.53956      -25.5953       25.5953       184.883       210.478    
  71  0.538956     -0.618121      -4.46976       4.46976       213.941       218.411    
  72  0.354440      -1.03722      -7.50033       7.50033       190.784       198.285    
loop,thermsimp(1:2)       33   6.55446       3.71003    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291        189.92          0.84          1.11         25.11          0.23          0.05         27.34
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    189.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       33
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       34
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      290     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -10.6615       10.6615       175.715       186.376    
   2  0.299376      -1.20605      -8.72124       8.72124       180.389       189.110    
   3  0.220114      -1.51361      -10.9452       10.9452       174.483       185.429    
   4  0.229209      -1.47312      -10.6525       10.6525       181.080       191.732    
   5  0.902477     -0.102612     -0.742013      0.742013       181.185       181.927    
   6  0.659052     -0.416953      -3.01507       3.01507       183.165       186.180    
   7  0.100321E-01  -4.60197      -33.2778       33.2778       185.115       218.393    
   8  0.588837     -0.529606      -3.82969       3.82969       179.763       183.593    
   9  0.270943      -1.30585      -9.44287       9.44287       184.490       193.933    
  10  0.505518     -0.682171      -4.93293       4.93293       186.821       191.754    
  11  0.264565      -1.32967      -9.61513       9.61513       180.706       190.321    
  12  0.806386     -0.215193      -1.55611       1.55611       184.056       185.612    
  13  0.340560      -1.07716      -7.78920       7.78920       187.470       195.260    
  14  0.906186     -0.985106E-01 -0.712351      0.712351       187.446       188.159    
  15  0.786070     -0.240709      -1.74062       1.74062       188.964       190.705    
  16  0.540508     -0.615247      -4.44898       4.44898       187.220       191.669    
  17  0.935065     -0.671392E-01 -0.485498      0.485498       185.247       185.732    
  18  0.915359     -0.884391E-01 -0.639522      0.639522       190.529       191.168    
  19  0.958261     -0.426353E-01 -0.308305      0.308305       187.767       188.076    
  20  0.935110     -0.670907E-01 -0.485147      0.485147       183.092       183.577    
  21  0.637755     -0.449800      -3.25260       3.25260       187.149       190.402    
  22  0.975714     -0.245861E-01 -0.177788      0.177788       191.159       191.337    
  23  0.797424     -0.226369      -1.63692       1.63692       178.432       180.069    
  24  0.214179      -1.54094      -11.1429       11.1429       190.223       201.366    
  25  0.372145     -0.988472      -7.14785       7.14785       187.302       194.450    
  26  0.925208     -0.777367E-01 -0.562130      0.562130       192.177       192.740    
  27  0.175897      -1.73786      -12.5668       12.5668       192.125       204.692    
  28  0.952033     -0.491554E-01 -0.355453      0.355453       191.801       192.156    
  29  0.158274E-01  -4.14601      -29.9807       29.9807       189.576       219.557    
  30  0.799308     -0.224008      -1.61985       1.61985       189.670       191.290    
  31  0.248227      -1.39341      -10.0760       10.0760       184.391       194.467    
  32  0.244914      -1.40685      -10.1732       10.1732       191.517       201.691    
  33  0.390842     -0.939452      -6.79338       6.79338       192.846       199.640    
  34  0.146784      -1.91879      -13.8752       13.8752       191.810       205.685    
  35  0.500975     -0.691199      -4.99821       4.99821       183.837       188.836    
  36  0.480131E-01  -3.03628      -21.9560       21.9560       190.160       212.116    
  37  0.124503      -2.08343      -15.0657       15.0657       189.414       204.480    
  38  0.670304     -0.400024      -2.89266       2.89266       193.304       196.196    
  39  0.997449     -0.255468E-02 -0.184734E-01  0.184734E-01   183.292       183.310    
  40  0.681761     -0.383076      -2.77010       2.77010       193.212       195.982    
  41  0.440529     -0.819778      -5.92799       5.92799       188.127       194.055    
  42  0.342489      -1.07152      -7.74837       7.74837       191.913       199.662    
  43  0.735753     -0.306861      -2.21898       2.21898       193.650       195.869    
  44  0.614752     -0.486537      -3.51825       3.51825       186.584       190.102    
  45  0.351660      -1.04509      -7.55727       7.55727       192.707       200.265    
  46  0.777165     -0.252103      -1.82301       1.82301       197.354       199.177    
  47  0.392618     -0.934919      -6.76060       6.76060       189.474       196.234    
  48  0.385647     -0.952832      -6.89013       6.89013       190.784       197.675    
  49  0.834392     -0.181052      -1.30923       1.30923       192.832       194.142    
  50  0.469158     -0.756815      -5.47269       5.47269       192.598       198.071    
  51  0.697320     -0.360511      -2.60693       2.60693       194.868       197.475    
  52  0.987150     -0.129333E-01 -0.935232E-01  0.935232E-01   191.012       191.105    
  53  0.512413     -0.668624      -4.83497       4.83497       199.184       204.019    
  54  0.781282     -0.246819      -1.78480       1.78480       197.960       199.745    
  55  0.290579      -1.23588      -8.93692       8.93692       191.800       200.736    
  56  0.921499     -0.817534E-01 -0.591176      0.591176       188.818       189.409    
  57  0.198558      -1.61668      -11.6905       11.6905       192.832       204.523    
  58  0.488340     -0.716743      -5.18292       5.18292       194.243       199.426    
  59  0.874587     -0.134003     -0.969007      0.969007       192.832       193.801    
  60  0.165334      -1.79979      -13.0147       13.0147       195.694       208.709    
  61  0.712283     -0.339280      -2.45340       2.45340       192.832       195.286    
  62  0.578012E-01  -2.85075      -20.6144       20.6144       204.512       225.127    
  63  0.700556     -0.355880      -2.57345       2.57345       184.706       187.279    
  64  0.502101     -0.688954      -4.98197       4.98197       196.089       201.071    
  65  0.730977E-02  -4.91854      -35.5670       35.5670       195.166       230.733    
  66  0.986830     -0.132576E-01 -0.958682E-01  0.958682E-01   192.392       192.488    
  67  0.264041      -1.33165      -9.62944       9.62944       204.357       213.986    
  68  0.184096      -1.69230      -12.2374       12.2374       192.845       205.083    
  69  0.683389     -0.380691      -2.75286       2.75286       184.883       187.636    
  70  0.934635     -0.675991E-01 -0.488823      0.488823       193.513       194.002    
  71  0.974376     -0.259579E-01 -0.187707      0.187707       213.941       214.129    
  72  0.210957      -1.55610      -11.2525       11.2525       189.919       201.172    
loop,thermsimp(1:2)       34   10.6615       8.72124    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292        177.48          0.84          1.11         25.19          0.08          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    293        175.07          0.84          1.12         25.33          0.00          0.05         27.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    175.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       34
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       35
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      292     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -7.64880       7.64880       178.432       186.081    
   2  0.621479     -0.475653      -3.43955       3.43955       181.185       184.625    
   3  0.221273      -1.50836      -10.9073       10.9073       183.292       194.199    
   4  0.180626E-01  -4.01391      -29.0255       29.0255       183.092       212.117    
   5  0.216093      -1.53205      -11.0786       11.0786       179.763       190.842    
   6  0.351343      -1.04599      -7.56379       7.56379       174.483       182.047    
   7  0.360847      -1.01930      -7.37079       7.37079       184.056       191.427    
   8  0.439525     -0.822061      -5.94449       5.94449       185.247       191.191    
   9  0.910616E-01  -2.39622      -17.3276       17.3276       183.165       200.493    
  10  0.549745     -0.598300      -4.32644       4.32644       175.715       180.041    
  11  0.619825     -0.478318      -3.45882       3.45882       184.706       188.165    
  12  0.548169E-01  -2.90376      -20.9977       20.9977       184.883       205.880    
  13  0.947163     -0.542842E-01 -0.392541      0.392541       187.767       188.160    
  14  0.725459     -0.320951      -2.32086       2.32086       187.446       189.767    
  15  0.481613     -0.730615      -5.28323       5.28323       183.837       189.121    
  16  0.866286     -0.143540      -1.03797       1.03797       180.389       181.427    
  17  0.221988E-01  -3.80772      -27.5344       27.5344       188.818       216.353    
  18  0.980823     -0.193630E-01 -0.140018      0.140018       186.584       186.724    
  19  0.332549      -1.10097      -7.96133       7.96133       180.706       188.668    
  20  0.989035     -0.110256E-01 -0.797285E-01  0.797285E-01   187.149       187.229    
  21  0.364016      -1.01056      -7.30755       7.30755       188.964       196.272    
  22  0.861799     -0.148733      -1.07552       1.07552       191.012       192.087    
  23  0.622306     -0.474324      -3.42994       3.42994       190.529       193.959    
  24  0.575476     -0.552558      -3.99566       3.99566       189.670       193.665    
  25  0.205536      -1.58213      -11.4407       11.4407       191.159       202.600    
  26  0.124037      -2.08718      -15.0928       15.0928       187.220       202.312    
  27  0.467008     -0.761408      -5.50591       5.50591       181.080       186.585    
  28  0.273870      -1.29510      -9.36516       9.36516       186.821       196.186    
  29  0.842780     -0.171050      -1.23690       1.23690       191.801       193.037    
  30  0.709315     -0.343455      -2.48360       2.48360       192.392       194.875    
  31  0.677144     -0.389871      -2.81924       2.81924       192.177       194.997    
  32  0.656062     -0.421500      -3.04796       3.04796       192.832       195.880    
  33  0.721592     -0.326295      -2.35951       2.35951       184.490       186.849    
  34  0.120172      -2.11883      -15.3217       15.3217       193.513       208.835    
  35  0.832403     -0.183439      -1.32649       1.32649       188.127       189.453    
  36  0.607577     -0.498276      -3.60314       3.60314       192.832       196.435    
  37  0.169814      -1.77305      -12.8213       12.8213       187.302       200.124    
  38  0.578085     -0.548034      -3.96295       3.96295       184.391       188.354    
  39  0.201144      -1.60373      -11.5969       11.5969       187.470       199.067    
  40  0.922823     -0.803178E-01 -0.580795      0.580795       192.832       193.413    
  41  0.136644      -1.99038      -14.3928       14.3928       193.650       208.043    
  42  0.836366     -0.178689      -1.29213       1.29213       193.212       194.504    
  43  0.590669     -0.526499      -3.80722       3.80722       193.304       197.111    
  44  0.745946     -0.293102      -2.11948       2.11948       189.474       191.593    
  45  0.874736     -0.133833     -0.967775      0.967775       194.868       195.836    
  46  0.370232     -0.993625      -7.18512       7.18512       190.784       197.970    
  47  0.832293     -0.183570      -1.32744       1.32744       192.598       193.925    
  48  0.351566      -1.04536      -7.55921       7.55921       197.354       204.913    
  49  0.705870     -0.348324      -2.51881       2.51881       194.243       196.762    
  50  0.323816      -1.12758      -8.15378       8.15378       192.846       201.000    
  51  0.197269      -1.62319      -11.7376       11.7376       191.913       203.651    
  52  0.140686      -1.96123      -14.1821       14.1821       197.960       212.142    
  53  0.913651     -0.903067E-01 -0.653027      0.653027       192.707       193.360    
  54  0.515699     -0.662233      -4.78874       4.78874       191.800       196.588    
  55  0.217669      -1.52478      -11.0260       11.0260       196.089       207.115    
  56  0.234146      -1.45181      -10.4983       10.4983       189.919       200.418    
  57  0.948303     -0.530813E-01 -0.383842      0.383842       190.223       190.607    
  58  0.165683      -1.79768      -12.9994       12.9994       191.517       204.517    
  59  0.506186     -0.680851      -4.92338       4.92338       199.184       204.107    
  60  0.644381     -0.439466      -3.17787       3.17787       189.414       192.592    
  61  0.790610     -0.234950      -1.69897       1.69897       192.832       194.531    
  62  0.945427     -0.561185E-01 -0.405805      0.405805       192.125       192.531    
  63  0.195494      -1.63222      -11.8030       11.8030       192.845       204.648    
  64  0.478914     -0.736235      -5.32387       5.32387       191.810       197.134    
  65  0.926031     -0.768470E-01 -0.555697      0.555697       195.694       196.250    
  66  0.945712     -0.558175E-01 -0.403628      0.403628       190.160       190.564    
  67  0.892862     -0.113323     -0.819464      0.819464       204.357       205.176    
  68  0.766967     -0.265312      -1.91853       1.91853       213.941       215.860    
  69  0.720632     -0.327626      -2.36914       2.36914       185.115       187.484    
  70  0.404614     -0.904821      -6.54295       6.54295       189.576       196.119    
  71  0.799730     -0.223481      -1.61604       1.61604       204.512       206.128    
  72  0.442243     -0.815895      -5.89991       5.89991       175.068       180.968    
loop,thermsimp(1:2)       35   7.64880       3.43955    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294        183.90          0.82          1.11         25.20          0.32          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    295        202.74          0.84          1.11         25.15          0.04          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       35
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       36
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      294     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -10.5118       10.5118       175.715       186.227    
   2  0.607568     -0.498291      -3.60325       3.60325       175.068       178.671    
   3  0.905785     -0.989529E-01 -0.715550      0.715550       180.389       181.104    
   4  0.995938E-01  -2.30666      -16.6799       16.6799       174.483       191.163    
   5  0.851360     -0.160920      -1.16365       1.16365       181.185       182.349    
   6  0.730583     -0.313913      -2.26997       2.26997       178.432       180.702    
   7  0.426216     -0.852810      -6.16685       6.16685       181.080       187.246    
   8  0.285108      -1.25489      -9.07437       9.07437       186.584       195.658    
   9  0.839246     -0.175251      -1.26728       1.26728       184.490       185.757    
  10  0.217639      -1.52492      -11.0270       11.0270       187.149       198.176    
  11  0.183996E-02  -6.29801      -45.5423       45.5423       185.115       230.657    
  12  0.682631     -0.381801      -2.76088       2.76088       187.767       190.528    
  13  0.203596      -1.59162      -11.5093       11.5093       184.706       196.215    
  14  0.881164     -0.126512     -0.914835      0.914835       184.391       185.306    
  15  0.711431     -0.340477      -2.46206       2.46206       180.706       183.168    
  16  0.874326     -0.134302     -0.971165      0.971165       183.837       184.808    
  17  0.814222     -0.205523      -1.48618       1.48618       188.127       189.613    
  18  0.995668     -0.434126E-02 -0.313926E-01  0.313926E-01   187.446       187.478    
  19  0.693805     -0.365564      -2.64347       2.64347       190.160       192.804    
  20  0.958584     -0.422984E-01 -0.305869      0.305869       190.223       190.529    
  21  0.748022     -0.290323      -2.09939       2.09939       179.763       181.862    
  22  0.696703     -0.361396      -2.61333       2.61333       185.247       187.860    
  23  0.732990     -0.310623      -2.24618       2.24618       184.056       186.302    
  24  0.534749     -0.625958      -4.52643       4.52643       189.474       194.000    
  25  0.691641     -0.368688      -2.66606       2.66606       191.012       193.678    
  26  0.300458      -1.20245      -8.69515       8.69515       192.125       200.821    
  27  0.977116     -0.231502E-01 -0.167404      0.167404       189.414       189.582    
  28  0.542581     -0.611418      -4.42130       4.42130       191.801       196.222    
  29  0.266111      -1.32384      -9.57298       9.57298       192.707       202.280    
  30  0.692298     -0.367738      -2.65919       2.65919       192.832       195.492    
  31  0.664047     -0.409403      -2.96048       2.96048       189.670       192.630    
  32  0.542186     -0.612146      -4.42656       4.42656       192.598       197.025    
  33  0.362243      -1.01544      -7.34285       7.34285       190.529       197.872    
  34  0.578658     -0.547044      -3.95579       3.95579       183.292       187.247    
  35  0.489298     -0.714783      -5.16875       5.16875       193.212       198.380    
  36  0.617485     -0.482100      -3.48617       3.48617       192.832       196.318    
  37  0.368651     -0.997905      -7.21606       7.21606       192.392       199.608    
  38  0.198936      -1.61477      -11.6768       11.6768       192.177       203.854    
  39  0.505263     -0.682676      -4.93658       4.93658       194.868       199.804    
  40  0.983997     -0.161325E-01 -0.116657      0.116657       192.832       192.949    
  41  0.630553     -0.461159      -3.33474       3.33474       189.576       192.911    
  42  0.423821E-01  -3.16103      -22.8581       22.8581       186.821       209.679    
  43  0.488935     -0.715526      -5.17412       5.17412       195.694       200.868    
  44  0.402078     -0.911110      -6.58843       6.58843       188.964       195.553    
  45  0.380878     -0.965277      -6.98012       6.98012       192.832       199.812    
  46  0.260585E-01  -3.64741      -26.3752       26.3752       191.800       218.175    
  47  0.681660     -0.383224      -2.77117       2.77117       194.243       197.014    
  48  0.489074     -0.715241      -5.17206       5.17206       193.304       198.476    
  49  0.752363     -0.284536      -2.05754       2.05754       191.810       193.867    
  50  0.978934     -0.212911E-01 -0.153961      0.153961       190.784       190.938    
  51  0.297789      -1.21137      -8.75969       8.75969       187.470       196.230    
  52  0.551604     -0.594926      -4.30203       4.30203       187.302       191.604    
  53  0.546413     -0.604381      -4.37041       4.37041       189.919       194.290    
  54  0.831880     -0.184067      -1.33102       1.33102       183.165       184.496    
  55  0.873708     -0.135010     -0.976282      0.976282       192.846       193.822    
  56  0.169447      -1.77521      -12.8370       12.8370       187.220       200.057    
  57  0.434000     -0.834712      -6.03598       6.03598       191.159       197.195    
  58  0.506119     -0.680984      -4.92434       4.92434       191.913       196.838    
  59  0.168470      -1.78100      -12.8788       12.8788       199.184       212.063    
  60  0.820014     -0.198433      -1.43491       1.43491       191.517       192.952    
  61  0.973689     -0.266631E-01 -0.192806      0.192806       192.845       193.038    
  62  0.438579     -0.824215      -5.96008       5.96008       197.354       203.314    
  63  0.725095     -0.321452      -2.32449       2.32449       204.357       206.681    
  64  0.857338     -0.153923      -1.11305       1.11305       184.883       185.996    
  65  0.363865      -1.01097      -7.31055       7.31055       204.512       211.823    
  66  0.391136     -0.938701      -6.78794       6.78794       196.089       202.877    
  67  0.949080     -0.522625E-01 -0.377921      0.377921       193.650       194.028    
  68  0.791138     -0.234283      -1.69415       1.69415       193.513       195.207    
  69  0.675448     -0.392379      -2.83738       2.83738       183.092       185.929    
  70  0.955283     -0.457479E-01 -0.330813      0.330813       197.960       198.291    
  71  0.307295E-01  -3.48253      -25.1829       25.1829       213.941       239.124    
  72  0.581651E-01  -2.84447      -20.5690       20.5690       183.898       204.467    
loop,thermsimp(1:2)       36   10.5118       3.60325    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296        180.22          0.84          1.11         25.17          0.08          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    297        252.10          0.84          1.11         25.06          0.15          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    180.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       36
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       37
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      296     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -6.42444       6.42444       175.068       181.492    
   2  0.697205     -0.360676      -2.60813       2.60813       178.432       181.040    
   3  0.314648E-01  -3.45889      -25.0119       25.0119       180.389       205.401    
   4  0.857269     -0.154003      -1.11363       1.11363       179.763       180.877    
   5  0.652165     -0.427457      -3.09104       3.09104       181.185       184.276    
   6  0.510145     -0.673060      -4.86704       4.86704       180.706       185.573    
   7  0.175175      -1.74197      -12.5965       12.5965       183.165       195.762    
   8  0.373803     -0.984025      -7.11570       7.11570       183.837       190.953    
   9  0.514972     -0.663642      -4.79894       4.79894       184.391       189.190    
  10  0.548235     -0.601051      -4.34633       4.34633       184.490       188.836    
  11  0.541310     -0.613763      -4.43825       4.43825       183.092       187.530    
  12  0.734083     -0.309133      -2.23540       2.23540       184.883       187.118    
  13  0.422599     -0.861332      -6.22848       6.22848       175.715       181.943    
  14  0.287055      -1.24808      -9.02514       9.02514       184.056       193.081    
  15  0.885133     -0.122017     -0.882332      0.882332       181.080       181.962    
  16  0.391075     -0.938857      -6.78907       6.78907       183.292       190.081    
  17  0.473784     -0.747003      -5.40174       5.40174       187.446       192.848    
  18  0.691812     -0.368440      -2.66427       2.66427       185.247       187.911    
  19  0.644447     -0.439363      -3.17713       3.17713       189.414       192.591    
  20  0.805933     -0.215754      -1.56016       1.56016       188.127       189.687    
  21  0.393766     -0.931998      -6.73948       6.73948       187.767       194.507    
  22  0.907098E-01  -2.40009      -17.3556       17.3556       190.223       207.579    
  23  0.376515     -0.976796      -7.06342       7.06342       190.784       197.848    
  24  0.819190     -0.199439      -1.44219       1.44219       174.483       175.926    
  25  0.692438     -0.367536      -2.65773       2.65773       187.302       189.960    
  26  0.188370      -1.66935      -12.0714       12.0714       189.670       201.741    
  27  0.500532     -0.692083      -5.00460       5.00460       190.160       195.165    
  28  0.282311      -1.26475      -9.14565       9.14565       189.576       198.722    
  29  0.338061      -1.08453      -7.84245       7.84245       192.832       200.675    
  30  0.466208     -0.763123      -5.51831       5.51831       191.517       197.036    
  31  0.893084     -0.113075     -0.817668      0.817668       192.845       193.663    
  32  0.818806     -0.199908      -1.44558       1.44558       191.012       192.457    
  33  0.585066     -0.536031      -3.87616       3.87616       192.846       196.722    
  34  0.527412     -0.639774      -4.62634       4.62634       191.810       196.436    
  35  0.994295     -0.572143E-02 -0.413729E-01  0.413729E-01   189.474       189.515    
  36  0.739278     -0.302082      -2.18442       2.18442       193.650       195.834    
  37  0.230995      -1.46536      -10.5963       10.5963       189.919       200.516    
  38  0.414929     -0.879648      -6.36092       6.36092       193.513       199.874    
  39  0.378446     -0.971682      -7.02644       7.02644       192.832       199.859    
  40  0.368620     -0.997990      -7.21667       7.21667       188.964       196.181    
  41  0.301312      -1.19961      -8.67462       8.67462       186.584       195.259    
  42  0.105882E-01  -4.54801      -32.8877       32.8877       184.706       217.594    
  43  0.481885     -0.730049      -5.27914       5.27914       191.801       197.080    
  44  0.446716     -0.805833      -5.82715       5.82715       187.470       193.297    
  45  0.482098     -0.729608      -5.27595       5.27595       192.832       198.108    
  46  0.278892      -1.27693      -9.23376       9.23376       191.913       201.147    
  47  0.756484     -0.279074      -2.01805       2.01805       194.243       196.261    
  48  0.662766     -0.411334      -2.97444       2.97444       192.598       195.572    
  49  0.433861E-01  -3.13762      -22.6888       22.6888       191.159       213.848    
  50  0.825649E-02  -4.79676      -34.6864       34.6864       190.529       225.215    
  51  0.476679     -0.740911      -5.35769       5.35769       187.149       192.507    
  52  0.128614      -2.05094      -14.8308       14.8308       197.960       212.791    
  53  0.609086     -0.495797      -3.58521       3.58521       193.212       196.797    
  54  0.484878E-01  -3.02644      -21.8849       21.8849       193.304       215.188    
  55  0.287383E-02  -5.85211      -42.3179       42.3179       192.392       234.710    
  56  0.699724     -0.357070      -2.58205       2.58205       194.868       197.450    
  57  0.407524     -0.897655      -6.49113       6.49113       192.832       199.323    
  58  0.530107     -0.634677      -4.58949       4.58949       187.220       191.809    
  59  0.589469E-01  -2.83112      -20.4724       20.4724       192.125       212.598    
  60  0.357066E-01  -3.33242      -24.0974       24.0974       195.694       219.792    
  61  0.726760     -0.319159      -2.30791       2.30791       192.707       195.015    
  62  0.486103     -0.721334      -5.21612       5.21612       196.089       201.305    
  63  0.212811      -1.54735      -11.1892       11.1892       197.354       208.543    
  64  0.264725      -1.32906      -9.61074       9.61074       192.177       201.788    
  65  0.162129      -1.81936      -13.1562       13.1562       183.898       197.055    
  66  0.148935      -1.90425      -13.7700       13.7700       204.357       218.127    
  67  0.271622      -1.30334      -9.42476       9.42476       186.821       196.246    
  68  0.965736     -0.348643E-01 -0.252111      0.252111       204.512       204.764    
  69  0.659377     -0.416460      -3.01151       3.01151       199.184       202.195    
  70  0.569807     -0.562457      -4.06725       4.06725       191.800       195.867    
  71  0.294586      -1.22218      -8.83788       8.83788       185.115       193.953    
  72  0.404373     -0.905416      -6.54726       6.54726       180.221       186.769    
loop,thermsimp(1:2)       37   6.42444       2.60813    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298        180.95          0.84          1.11         25.04          0.17          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    180.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       37
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       38
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      297     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -6.46761       6.46761       174.483       180.951    
   2  0.259700      -1.34823      -9.74932       9.74932       179.763       189.512    
   3  0.681144E-01  -2.68657      -19.4271       19.4271       178.432       197.859    
   4  0.158140      -1.84427      -13.3363       13.3363       175.068       188.404    
   5  0.497681     -0.697796      -5.04591       5.04591       175.715       180.761    
   6  0.800218     -0.222871      -1.61162       1.61162       181.080       182.691    
   7  0.831967     -0.183962      -1.33027       1.33027       181.185       182.516    
   8  0.707345     -0.346237      -2.50371       2.50371       180.706       183.210    
   9  0.265927      -1.32454      -9.57800       9.57800       180.221       189.799    
  10  0.659046     -0.416962      -3.01514       3.01514       184.883       187.898    
  11  0.654587E-01  -2.72634      -19.7147       19.7147       183.092       202.807    
  12  0.223329      -1.49911      -10.8404       10.8404       185.247       196.087    
  13  0.996019     -0.398855E-02 -0.288420E-01  0.288420E-01   184.490       184.519    
  14  0.553910     -0.590753      -4.27186       4.27186       184.391       188.663    
  15  0.218863      -1.51931      -10.9865       10.9865       189.474       200.460    
  16  0.414020     -0.881841      -6.37678       6.37678       188.127       194.503    
  17  0.229117      -1.47352      -10.6554       10.6554       187.302       197.958    
  18  0.341764      -1.07363      -7.76368       7.76368       183.292       191.055    
  19  0.357052      -1.02987      -7.44723       7.44723       183.837       191.285    
  20  0.780779     -0.247463      -1.78946       1.78946       187.220       189.009    
  21  0.382234     -0.961721      -6.95441       6.95441       191.012       197.966    
  22  0.123899      -2.08829      -15.1009       15.1009       187.149       202.250    
  23  0.393312     -0.933152      -6.74782       6.74782       189.414       196.162    
  24  0.481741     -0.730349      -5.28131       5.28131       187.446       192.728    
  25  0.120001      -2.12026      -15.3320       15.3320       184.056       199.388    
  26  0.506023     -0.681173      -4.92571       4.92571       187.470       192.396    
  27  0.891157     -0.115235     -0.833290      0.833290       192.845       193.679    
  28  0.584674     -0.536701      -3.88100       3.88100       185.115       188.996    
  29  0.313196      -1.16093      -8.39490       8.39490       187.767       196.162    
  30  0.507340     -0.678574      -4.90692       4.90692       192.707       197.614    
  31  0.985030     -0.150835E-01 -0.109072      0.109072       190.160       190.269    
  32  0.186570      -1.67895      -12.1408       12.1408       186.584       198.725    
  33  0.992622     -0.740493E-02 -0.535466E-01  0.535466E-01   192.598       192.652    
  34  0.344152      -1.06667      -7.71332       7.71332       183.165       190.879    
  35  0.327214      -1.11714      -8.07829       8.07829       193.650       201.728    
  36  0.722008     -0.325719      -2.35535       2.35535       191.800       194.155    
  37  0.471441     -0.751960      -5.43759       5.43759       188.964       194.402    
  38  0.483594     -0.726510      -5.25355       5.25355       186.821       192.074    
  39  0.799410     -0.223881      -1.61893       1.61893       194.243       195.862    
  40  0.864070     -0.146101      -1.05649       1.05649       191.810       192.866    
  41  0.326419      -1.11957      -8.09588       8.09588       192.846       200.942    
  42  0.970166E-01  -2.33287      -16.8695       16.8695       193.212       210.081    
  43  0.822479     -0.195432      -1.41321       1.41321       191.517       192.931    
  44  0.719858     -0.328701      -2.37691       2.37691       183.898       186.275    
  45  0.359763      -1.02231      -7.39254       7.39254       191.801       199.193    
  46  0.879180     -0.128765     -0.931130      0.931130       194.868       195.799    
  47  0.152514      -1.88050      -13.5983       13.5983       190.784       204.383    
  48  0.379430     -0.969085      -7.00766       7.00766       192.832       199.840    
  49  0.444703     -0.810349      -5.85981       5.85981       189.576       195.436    
  50  0.240485      -1.42510      -10.3052       10.3052       192.832       203.138    
  51  0.682479     -0.382024      -2.76250       2.76250       192.832       195.595    
  52  0.989508     -0.105479E-01 -0.762741E-01  0.762741E-01   193.513       193.590    
  53  0.626329E-01  -2.77046      -20.0338       20.0338       189.919       209.953    
  54  0.217806      -1.52415      -11.0215       11.0215       192.832       203.854    
  55  0.297102      -1.21368      -8.77638       8.77638       191.913       200.690    
  56  0.447982     -0.803002      -5.80668       5.80668       196.089       201.895    
  57  0.343456      -1.06870      -7.72796       7.72796       189.670       197.398    
  58  0.737340     -0.304706      -2.20339       2.20339       192.177       194.381    
  59  0.863080     -0.147248      -1.06478       1.06478       199.184       200.249    
  60  0.463462     -0.769030      -5.56102       5.56102       204.512       210.073    
  61  0.120067      -2.11970      -15.3280       15.3280       180.389       195.717    
  62  0.758415     -0.276525      -1.99961       1.99961       190.223       192.223    
  63  0.356867      -1.03039      -7.45098       7.45098       197.354       204.805    
  64  0.811695     -0.208631      -1.50866       1.50866       192.125       193.634    
  65  0.712430     -0.339074      -2.45191       2.45191       197.960       200.412    
  66  0.343671      -1.06807      -7.72344       7.72344       191.159       198.882    
  67  0.455065     -0.787315      -5.69324       5.69324       193.304       198.997    
  68  0.462404     -0.771317      -5.57756       5.57756       184.706       190.283    
  69  0.197402      -1.62251      -11.7327       11.7327       204.357       216.090    
  70  0.870222     -0.139007      -1.00519       1.00519       195.694       196.699    
  71  0.938983     -0.629581E-01 -0.455263      0.455263       190.529       190.984    
  72  0.362909      -1.01360      -7.32958       7.32958       180.949       188.278    
loop,thermsimp(1:2)       38   6.46761       9.74932    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299        178.75          0.84          1.11         25.04          0.24          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    300        166.87          0.84          1.12         25.02          0.16          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    166.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       38
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       39
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      299     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -15.0329       15.0329       175.715       190.748    
   2  0.274837      -1.29158      -9.33966       9.33966       174.483       183.823    
   3  0.305931E-01  -3.48698      -25.2151       25.2151       181.185       206.400    
   4  0.929157     -0.734779E-01 -0.531335      0.531335       181.080       181.611    
   5  0.995956     -0.405208E-02 -0.293014E-01  0.293014E-01   180.706       180.736    
   6  0.904971     -0.998521E-01 -0.722052      0.722052       184.490       185.212    
   7  0.189758      -1.66200      -12.0183       12.0183       183.898       195.917    
   8  0.134931      -2.00299      -14.4841       14.4841       184.883       199.367    
   9  0.302412      -1.19596      -8.64828       8.64828       180.949       189.597    
  10  0.389155     -0.943777      -6.82465       6.82465       175.068       181.893    
  11  0.947428     -0.540040E-01 -0.390514      0.390514       184.391       184.782    
  12  0.338357      -1.08365      -7.83613       7.83613       185.115       192.951    
  13  0.937476     -0.645645E-01 -0.466880      0.466880       187.220       187.687    
  14  0.399493     -0.917560      -6.63507       6.63507       179.763       186.398    
  15  0.527586     -0.639444      -4.62396       4.62396       180.221       184.845    
  16  0.297740      -1.21153      -8.76086       8.76086       190.160       198.921    
  17  0.557978     -0.583436      -4.21895       4.21895       184.706       188.925    
  18  0.267521      -1.31856      -9.53476       9.53476       183.165       192.700    
  19  0.637637     -0.449986      -3.25394       3.25394       190.529       193.783    
  20  0.838569     -0.176059      -1.27312       1.27312       183.292       184.565    
  21  0.132199E-01  -4.32603      -31.2825       31.2825       183.837       215.120    
  22  0.745606     -0.293557      -2.12278       2.12278       186.821       188.944    
  23  0.334504      -1.09511      -7.91894       7.91894       190.223       198.142    
  24  0.118852      -2.12987      -15.4016       15.4016       187.470       202.872    
  25  0.319911      -1.13971      -8.24151       8.24151       192.598       200.839    
  26  0.638302E-01  -2.75153      -19.8969       19.8969       187.446       207.343    
  27  0.173204      -1.75329      -12.6784       12.6784       191.810       204.488    
  28  0.885640     -0.121444     -0.878190      0.878190       191.517       192.395    
  29  0.710758     -0.341423      -2.46890       2.46890       193.513       195.982    
  30  0.938919     -0.630265E-01 -0.455758      0.455758       192.125       192.581    
  31  0.217740      -1.52445      -11.0236       11.0236       192.845       203.869    
  32  0.130036      -2.03994      -14.7512       14.7512       191.800       206.551    
  33  0.331090      -1.10537      -7.99314       7.99314       192.177       200.171    
  34  0.453525E-01  -3.09329      -22.3682       22.3682       188.964       211.333    
  35  0.494600     -0.704006      -5.09081       5.09081       188.127       193.217    
  36  0.488771E-01  -3.01845      -21.8270       21.8270       189.576       211.403    
  37  0.262916E-01  -3.63850      -26.3108       26.3108       192.832       219.143    
  38  0.975293     -0.250177E-01 -0.180909      0.180909       180.389       180.570    
  39  0.521026     -0.651955      -4.71442       4.71442       194.868       199.582    
  40  0.210960      -1.55609      -11.2524       11.2524       194.243       205.495    
  41  0.475166E-02  -5.34926      -38.6816       38.6816       185.247       223.928    
  42  0.675859     -0.391771      -2.83298       2.83298       189.414       192.247    
  43  0.691418     -0.369011      -2.66840       2.66840       187.767       190.436    
  44  0.425152     -0.855309      -6.18492       6.18492       195.694       201.879    
  45  0.141313      -1.95678      -14.1499       14.1499       189.670       203.820    
  46  0.902170     -0.102952     -0.744469      0.744469       192.707       193.452    
  47  0.794321     -0.230268      -1.66512       1.66512       178.432       180.097    
  48  0.685387     -0.377772      -2.73175       2.73175       187.302       190.034    
  49  0.273223      -1.29747      -9.38225       9.38225       191.012       200.394    
  50  0.784111     -0.243205      -1.75867       1.75867       186.584       188.343    
  51  0.824524     -0.192949      -1.39526       1.39526       191.159       192.554    
  52  0.855082     -0.156558      -1.13211       1.13211       193.304       194.436    
  53  0.744692E-01  -2.59737      -18.7821       18.7821       191.801       210.583    
  54  0.294857E-01  -3.52385      -25.4817       25.4817       184.056       209.538    
  55  0.225962      -1.48739      -10.7556       10.7556       192.832       203.588    
  56  0.211073      -1.55555      -11.2485       11.2485       199.184       210.432    
  57  0.525673E-01  -2.94566      -21.3007       21.3007       197.960       219.260    
  58  0.855455     -0.156122      -1.12895       1.12895       189.474       190.603    
  59  0.169262E-01  -4.07890      -29.4954       29.4954       191.913       221.409    
  60  0.578360     -0.547559      -3.95951       3.95951       192.846       196.806    
  61  0.753083     -0.283580      -2.05063       2.05063       193.650       195.700    
  62  0.942983     -0.587068E-01 -0.424521      0.424521       196.089       196.513    
  63  0.164299      -1.80607      -13.0601       13.0601       187.149       200.209    
  64  0.964876     -0.357557E-01 -0.258557      0.258557       183.092       183.350    
  65  0.905245E-01  -2.40213      -17.3703       17.3703       192.832       210.203    
  66  0.812887     -0.207163      -1.49804       1.49804       192.832       194.330    
  67  0.702547     -0.353043      -2.55293       2.55293       190.784       193.337    
  68  0.229959      -1.46986      -10.6288       10.6288       197.354       207.983    
  69  0.880507     -0.127257     -0.920222      0.920222       189.919       190.839    
  70  0.528445     -0.637816      -4.61218       4.61218       204.512       209.125    
  71  0.461632     -0.772988      -5.58964       5.58964       193.212       198.801    
  72  0.877049     -0.131193     -0.948683      0.948683       166.873       167.821    
loop,thermsimp(1:2)       39   15.0329       9.33966    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301        180.10          0.84          1.11         25.41          0.18          0.05         27.59
Just calling func    0   0         27.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    302        178.39          0.84          1.11         25.16          0.06          0.04         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    180.10       0.9379     -1.482      1.786     -102.6      1.000    
                      0.2997      1.794     -99.70      3.618     0.1132    
                       2.067     -1.481      1.915      0.000     -40.00    
                      -1.827      0.000      0.000      0.000     -1.221    

                      -2.500     0.2957E+05 0.2941E+05  0.000      0.000    
                     -0.5672     -6.203     -4.375     -7.475      3.724    
                      -14.43     -2.899      404.2      0.000     -7847.    

                       4434.      8519.      1648.     0.4196E+05  3546.    
                       4788.     0.2665E-01 0.1277E-02  0.000     0.2970E-01
                      0.3630E-01 0.5000E-02-0.5909E-02 0.8719E-02 0.2970E-01

                     -0.1311    -0.9518      0.000    -0.3025E-01 0.2837E-01
                       0.000    -0.1415E-01-0.5237E-02-0.7884E-02 0.2282E-01
                      0.2970E-01 0.7655E-02-0.1669     -1.037      0.000    

                     -0.2995E-01-0.3060    -0.5840    -0.5010    -0.1388    
                      0.1598      8.930      8.801     -5056.     -4.000    
                     -0.3786    -0.7000      8.937      8.785     -5495.    

                      -4.000     0.1794    -0.6462      8.917      8.822    
                      -4083.     -7.000    -0.3432    -0.7757      8.976    
                       8.821     -5507.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    178.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       39
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       40
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      301     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -5.52743       5.52743       166.873       172.400    
   2  0.310178      -1.17061      -8.46492       8.46492       178.432       186.897    
   3  0.883713     -0.123623     -0.893945      0.893945       180.389       181.283    
   4  0.641465     -0.444001      -3.21067       3.21067       180.706       183.917    
   5  0.458576E-01  -3.08222      -22.2882       22.2882       181.080       203.368    
   6  0.611421     -0.491970      -3.55754       3.55754       175.068       178.626    
   7  0.292603      -1.22894      -8.88672       8.88672       183.092       191.979    
   8  0.180818      -1.71026      -12.3673       12.3673       174.483       186.851    
   9  0.490648     -0.712028      -5.14883       5.14883       183.292       188.440    
  10  0.538601     -0.618781      -4.47454       4.47454       184.391       188.866    
  11  0.451209     -0.795824      -5.75477       5.75477       180.221       185.976    
  12  0.610260     -0.493870      -3.57128       3.57128       184.490       188.061    
  13  0.425113     -0.855401      -6.18558       6.18558       179.763       185.949    
  14  0.647858     -0.434084      -3.13895       3.13895       187.220       190.359    
  15  0.394937     -0.929029      -6.71801       6.71801       186.584       193.302    
  16  0.452279E-01  -3.09604      -22.3881       22.3881       184.706       207.094    
  17  0.954905     -0.461437E-01 -0.333675      0.333675       186.821       187.155    
  18  0.362548      -1.01460      -7.33677       7.33677       180.949       188.285    
  19  0.808078     -0.213097      -1.54095       1.54095       187.302       188.843    
  20  0.219348      -1.51709      -10.9704       10.9704       187.767       198.738    
  21  0.206981      -1.57513      -11.3901       11.3901       189.474       200.864    
  22  0.719933     -0.328597      -2.37616       2.37616       175.715       178.091    
  23  0.950238     -0.510432E-01 -0.369104      0.369104       189.919       190.288    
  24  0.845993     -0.167244      -1.20938       1.20938       189.414       190.624    
  25  0.157926      -1.84563      -13.3461       13.3461       191.517       204.863    
  26  0.430020     -0.843924      -6.10260       6.10260       191.159       197.261    
  27  0.624159     -0.471350      -3.40843       3.40843       192.125       195.534    
  28  0.355386      -1.03455      -7.48106       7.48106       183.165       190.646    
  29  0.297353      -1.21284      -8.77028       8.77028       185.115       193.885    
  30  0.185476      -1.68483      -12.1834       12.1834       188.127       200.310    
  31  0.406569     -0.900002      -6.50811       6.50811       190.784       197.293    
  32  0.147052      -1.91697      -13.8620       13.8620       192.707       206.569    
  33  0.205955      -1.58010      -11.4260       11.4260       190.529       201.955    
  34  0.383503     -0.958409      -6.93046       6.93046       192.832       199.763    
  35  0.514677E-01  -2.96680      -21.4536       21.4536       193.304       214.757    
  36  0.499194     -0.694760      -5.02395       5.02395       193.650       198.674    
  37  0.103172E-01  -4.57394      -33.0751       33.0751       183.898       216.974    
  38  0.470163     -0.754676      -5.45722       5.45722       193.513       198.971    
  39  0.983694     -0.164404E-01 -0.118884      0.118884       196.089       196.208    
  40  0.880425     -0.127351     -0.920899      0.920899       192.846       193.767    
  41  0.969759     -0.307072E-01 -0.222050      0.222050       190.223       190.445    
  42  0.761826E-01  -2.57462      -18.6176       18.6176       193.212       211.829    
  43  0.124427      -2.08404      -15.0701       15.0701       190.160       205.230    
  44  0.997702     -0.230032E-02 -0.166341E-01  0.166341E-01   184.883       184.899    
  45  0.213939      -1.54206      -11.1510       11.1510       194.868       206.019    
  46  0.471369     -0.752113      -5.43869       5.43869       192.177       197.616    
  47  0.421561E-01  -3.16638      -22.8967       22.8967       187.149       210.046    
  48  0.693092     -0.366592      -2.65090       2.65090       191.012       193.662    
  49  0.375157     -0.980409      -7.08955       7.08955       192.598       199.688    
  50  0.285659      -1.25296      -9.06039       9.06039       195.694       204.755    
  51  0.338951      -1.08190      -7.82346       7.82346       187.470       195.294    
  52  0.930127E-01  -2.37502      -17.1743       17.1743       192.832       210.007    
  53  0.840878     -0.173309      -1.25323       1.25323       189.670       190.923    
  54  0.384591     -0.955575      -6.90997       6.90997       192.845       199.755    
  55  0.212856      -1.54714      -11.1877       11.1877       191.810       202.997    
  56  0.878356     -0.129704     -0.937916      0.937916       194.243       195.181    
  57  0.623236E-01  -2.77542      -20.0696       20.0696       181.185       201.255    
  58  0.374221E-02  -5.58808      -40.4086       40.4086       191.800       232.208    
  59  0.851985     -0.160186      -1.15834       1.15834       187.446       188.605    
  60  0.779613     -0.248958      -1.80026       1.80026       197.354       199.155    
  61  0.991658     -0.837700E-02 -0.605758E-01  0.605758E-01   204.512       204.573    
  62  0.425290     -0.854985      -6.18258       6.18258       184.056       190.238    
  63  0.613403     -0.488733      -3.53413       3.53413       192.832       196.366    
  64  0.487347E-01  -3.02136      -21.8481       21.8481       199.184       221.032    
  65  0.267732      -1.31777      -9.52907       9.52907       191.801       201.330    
  66  0.159530      -1.83552      -13.2731       13.2731       188.964       202.237    
  67  0.312803E-01  -3.46477      -25.0545       25.0545       189.576       214.631    
  68  0.956405     -0.445737E-01 -0.322322      0.322322       183.837       184.160    
  69  0.683324     -0.380786      -2.75354       2.75354       192.832       195.586    
  70  0.482307     -0.729174      -5.27281       5.27281       197.960       203.233    
  71  0.928745     -0.739216E-01 -0.534543      0.534543       191.913       192.448    
  72  0.483353     -0.727009      -5.25715       5.25715       178.392       183.649    
loop,thermsimp(1:2)       40   5.52743       8.46492    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303        212.98          0.84          1.11         25.19          0.09          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    212.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       40
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       41
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      302     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -10.5938       10.5938       166.873       177.467    
   2  0.984723     -0.153953E-01 -0.111327      0.111327       175.715       175.826    
   3  0.689569     -0.371688      -2.68775       2.68775       175.068       177.756    
   4  0.539532     -0.617054      -4.46205       4.46205       180.389       184.851    
   5  0.103859      -2.26472      -16.3767       16.3767       178.392       194.768    
   6  0.403261     -0.908171      -6.56718       6.56718       180.706       187.274    
   7  0.545138     -0.606716      -4.38729       4.38729       183.837       188.225    
   8  0.211198      -1.55496      -11.2443       11.2443       184.883       196.127    
   9  0.533123     -0.629004      -4.54846       4.54846       179.763       184.312    
  10  0.891214     -0.115171     -0.832823      0.832823       180.221       181.054    
  11  0.604806     -0.502847      -3.63619       3.63619       174.483       178.120    
  12  0.176166      -1.73633      -12.5558       12.5558       178.432       190.988    
  13  0.733693     -0.309664      -2.23925       2.23925       186.821       189.060    
  14  0.248504      -1.39230      -10.0680       10.0680       184.490       194.558    
  15  0.183808      -1.69387      -12.2487       12.2487       180.949       193.197    
  16  0.308674E-02  -5.78064      -41.8010       41.8010       183.292       225.093    
  17  0.651025     -0.429207      -3.10369       3.10369       187.446       190.550    
  18  0.864353     -0.145775      -1.05413       1.05413       187.302       188.357    
  19  0.547352     -0.602664      -4.35799       4.35799       184.391       188.749    
  20  0.631248     -0.460057      -3.32677       3.32677       184.056       187.383    
  21  0.344368E-01  -3.36863      -24.3593       24.3593       189.919       214.279    
  22  0.876828     -0.131444     -0.950502      0.950502       187.220       188.170    
  23  0.884538     -0.122690     -0.887200      0.887200       190.223       191.110    
  24  0.926808     -0.760084E-01 -0.549633      0.549633       189.414       189.964    
  25  0.823462     -0.194237      -1.40457       1.40457       183.165       184.570    
  26  0.852580     -0.159489      -1.15330       1.15330       189.670       190.823    
  27  0.577707     -0.548689      -3.96768       3.96768       183.092       187.060    
  28  0.510093     -0.673163      -4.86778       4.86778       191.913       196.781    
  29  0.890288     -0.116210     -0.840339      0.840339       186.584       187.424    
  30  0.304875      -1.18785      -8.58961       8.58961       191.012       199.601    
  31  0.152164      -1.88279      -13.6149       13.6149       192.846       206.461    
  32  0.718687     -0.330329      -2.38868       2.38868       185.115       187.504    
  33  0.488128     -0.717177      -5.18606       5.18606       194.243       199.429    
  34  0.373052     -0.986038      -7.13025       7.13025       187.470       194.601    
  35  0.247351      -1.39695      -10.1016       10.1016       192.125       202.227    
  36  0.532108     -0.630909      -4.56224       4.56224       192.832       197.395    
  37  0.828879E-02  -4.79285      -34.6581       34.6581       196.089       230.747    
  38  0.168277      -1.78214      -12.8871       12.8871       192.832       205.719    
  39  0.253216      -1.37351      -9.93217       9.93217       191.159       201.091    
  40  0.458588     -0.779602      -5.63747       5.63747       190.784       196.422    
  41  0.725692     -0.320630      -2.31854       2.31854       192.177       194.496    
  42  0.283543      -1.26039      -9.11417       9.11417       193.650       202.764    
  43  0.798055     -0.225578      -1.63120       1.63120       187.767       189.399    
  44  0.805371     -0.216453      -1.56521       1.56521       193.513       195.079    
  45  0.580747     -0.543441      -3.92974       3.92974       197.354       201.284    
  46  0.581119     -0.542799      -3.92510       3.92510       192.598       196.523    
  47  0.305196      -1.18680      -8.58201       8.58201       192.845       201.427    
  48  0.905702     -0.990454E-01 -0.716218      0.716218       192.832       193.549    
  49  0.265633E-01  -3.62822      -26.2365       26.2365       188.127       214.363    
  50  0.114529E-01  -4.46951      -32.3200       32.3200       189.474       221.794    
  51  0.990634     -0.941033E-02 -0.680481E-01  0.680481E-01   181.185       181.253    
  52  0.609564     -0.495011      -3.57953       3.57953       191.801       195.380    
  53  0.380905     -0.965204      -6.97960       6.97960       190.529       197.508    
  54  0.902244     -0.102870     -0.743877      0.743877       188.964       189.708    
  55  0.841859     -0.172142      -1.24480       1.24480       191.810       193.055    
  56  0.954561     -0.465036E-01 -0.336277      0.336277       197.960       198.296    
  57  0.637314     -0.450492      -3.25761       3.25761       181.080       184.337    
  58  0.224695      -1.49301      -10.7963       10.7963       204.512       215.309    
  59  0.537548     -0.620738      -4.48869       4.48869       195.694       200.183    
  60  0.271295      -1.30455      -9.43348       9.43348       191.517       200.951    
  61  0.524725E-02  -5.25005      -37.9642       37.9642       190.160       228.124    
  62  0.194770      -1.63594      -11.8298       11.8298       194.868       206.698    
  63  0.833225E-01  -2.48504      -17.9698       17.9698       192.707       210.677    
  64  0.195984      -1.62972      -11.7849       11.7849       184.706       196.491    
  65  0.232752      -1.45778      -10.5415       10.5415       192.832       203.374    
  66  0.101893      -2.28383      -16.5149       16.5149       187.149       203.664    
  67  0.955311     -0.457184E-01 -0.330600      0.330600       193.212       193.542    
  68  0.791211     -0.234190      -1.69348       1.69348       189.576       191.270    
  69  0.617608     -0.481901      -3.48473       3.48473       193.304       196.788    
  70  0.792156     -0.232997      -1.68485       1.68485       183.898       185.583    
  71  0.195697      -1.63119      -11.7955       11.7955       199.184       210.979    
  72  0.174438      -1.74618      -12.6270       12.6270       212.978       225.605    
loop,thermsimp(1:2)       41   10.5938      0.111327    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304        182.87          0.84          1.11         25.08          0.17          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    182.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       41
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       42
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      303     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -22.5387       22.5387       175.715       198.254    
   2  0.196215      -1.62854      -11.7763       11.7763       166.873       178.649    
   3  0.501152     -0.690846      -4.99566       4.99566       175.068       180.064    
   4  0.288339      -1.24362      -8.99287       8.99287       174.483       183.476    
   5  0.773132     -0.257306      -1.86063       1.86063       180.221       182.082    
   6  0.417683     -0.873033      -6.31309       6.31309       181.185       187.498    
   7  0.229479      -1.47195      -10.6439       10.6439       179.763       190.407    
   8  0.964123     -0.365367E-01 -0.264204      0.264204       181.080       181.344    
   9  0.263782      -1.33263      -9.63655       9.63655       183.165       192.802    
  10  0.102960      -2.27342      -16.4395       16.4395       180.389       196.828    
  11  0.828790     -0.187788      -1.35794       1.35794       183.898       185.256    
  12  0.738697     -0.302868      -2.19010       2.19010       183.092       185.282    
  13  0.458595     -0.779589      -5.63737       5.63737       180.706       186.344    
  14  0.905176     -0.996260E-01 -0.720416      0.720416       184.056       184.776    
  15  0.147067      -1.91687      -13.8613       13.8613       186.584       200.445    
  16  0.142365      -1.94936      -14.0962       14.0962       185.115       199.211    
  17  0.483147     -0.727435      -5.26024       5.26024       187.220       192.480    
  18  0.640417     -0.445636      -3.22249       3.22249       183.837       187.060    
  19  0.719349     -0.329408      -2.38202       2.38202       187.302       189.684    
  20  0.714234     -0.336545      -2.43363       2.43363       184.391       186.825    
  21  0.825507     -0.191757      -1.38664       1.38664       186.821       188.208    
  22  0.155188      -1.86312      -13.4726       13.4726       187.767       201.240    
  23  0.248874      -1.39081      -10.0572       10.0572       188.964       199.022    
  24  0.107953      -2.22606      -16.0971       16.0971       189.414       205.511    
  25  0.349169      -1.05220      -7.60867       7.60867       187.446       195.055    
  26  0.967311     -0.332356E-01 -0.240334      0.240334       189.670       189.910    
  27  0.519506     -0.654877      -4.73556       4.73556       178.432       183.167    
  28  0.462662     -0.770758      -5.57352       5.57352       190.223       195.797    
  29  0.811438     -0.208948      -1.51094       1.51094       189.576       191.087    
  30  0.394710E-01  -3.23219      -23.3726       23.3726       191.810       215.182    
  31  0.482930     -0.727884      -5.26348       5.26348       180.949       186.212    
  32  0.520883     -0.652231      -4.71642       4.71642       193.212       197.928    
  33  0.980978E-01  -2.32179      -16.7894       16.7894       192.832       209.622    
  34  0.626549     -0.467529      -3.38080       3.38080       192.177       195.558    
  35  0.618402     -0.480616      -3.47544       3.47544       184.490       187.965    
  36  0.681438     -0.383550      -2.77353       2.77353       187.470       190.244    
  37  0.816820     -0.202336      -1.46313       1.46313       178.392       179.855    
  38  0.578487     -0.547340      -3.95793       3.95793       193.513       197.471    
  39  0.349734      -1.05058      -7.59698       7.59698       191.801       199.398    
  40  0.945672     -0.558596E-01 -0.403932      0.403932       184.883       185.287    
  41  0.767680     -0.264382      -1.91180       1.91180       190.784       192.696    
  42  0.122064      -2.10321      -15.2087       15.2087       184.706       199.915    
  43  0.211623      -1.55295      -11.2297       11.2297       192.598       203.828    
  44  0.969992E-01  -2.33305      -16.8708       16.8708       191.913       208.784    
  45  0.877482     -0.130699     -0.945114      0.945114       193.304       194.249    
  46  0.448991     -0.800752      -5.79041       5.79041       192.832       198.623    
  47  0.833113     -0.182586      -1.32032       1.32032       190.529       191.849    
  48  0.691765     -0.368508      -2.66476       2.66476       197.960       200.625    
  49  0.310664      -1.16904      -8.45361       8.45361       194.243       202.697    
  50  0.422283     -0.862080      -6.23388       6.23388       191.012       197.245    
  51  0.382184E-01  -3.26444      -23.6058       23.6058       195.694       219.300    
  52  0.679614E-01  -2.68882      -19.4434       19.4434       191.517       210.961    
  53  0.580404     -0.544031      -3.93400       3.93400       191.159       195.093    
  54  0.887981     -0.118805     -0.859102      0.859102       197.354       198.213    
  55  0.540749     -0.614799      -4.44574       4.44574       192.845       197.291    
  56  0.749712     -0.288066      -2.08306       2.08306       192.125       194.209    
  57  0.428385     -0.847733      -6.13014       6.13014       193.650       199.780    
  58  0.271790      -1.30272      -9.42027       9.42027       192.832       202.253    
  59  0.317865      -1.14613      -8.28790       8.28790       187.149       195.437    
  60  0.855566     -0.155992      -1.12801       1.12801       192.832       193.960    
  61  0.153120      -1.87653      -13.5696       13.5696       192.846       206.416    
  62  0.507684     -0.677896      -4.90201       4.90201       194.868       199.770    
  63  0.270723      -1.30666      -9.44872       9.44872       192.707       202.156    
  64  0.721736     -0.326096      -2.35807       2.35807       199.184       201.542    
  65  0.707323     -0.346268      -2.50394       2.50394       189.919       192.423    
  66  0.420146     -0.867152      -6.27056       6.27056       188.127       194.397    
  67  0.782833     -0.244836      -1.77046       1.77046       204.512       206.283    
  68  0.835529     -0.179691      -1.29938       1.29938       189.474       190.773    
  69  0.267477      -1.31872      -9.53596       9.53596       183.292       192.828    
  70  0.512596     -0.668267      -4.83238       4.83238       212.978       217.810    
  71  0.967143     -0.334090E-01 -0.241588      0.241588       190.160       190.402    
  72  0.528135     -0.638402      -4.61642       4.61642       182.875       187.491    
loop,thermsimp(1:2)       42   22.5387       11.7763    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305        181.75          0.84          1.11         25.19          0.08          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    181.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       42
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       43
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      304     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -8.74015       8.74015       166.873       175.613    
   2  0.383173     -0.959268      -6.93667       6.93667       178.392       185.328    
   3  0.386205     -0.951387      -6.87968       6.87968       175.068       181.948    
   4  0.362178      -1.01562      -7.34415       7.34415       181.080       188.424    
   5  0.394462     -0.930233      -6.72671       6.72671       180.221       186.948    
   6  0.883072     -0.124349     -0.899192      0.899192       178.432       179.331    
   7  0.571477     -0.559531      -4.04609       4.04609       174.483       178.529    
   8  0.944036     -0.575912E-01 -0.416454      0.416454       184.056       184.472    
   9  0.326573      -1.11910      -8.09246       8.09246       183.898       191.991    
  10  0.467297     -0.760791      -5.50144       5.50144       183.092       188.593    
  11  0.828365     -0.188301      -1.36164       1.36164       184.883       186.244    
  12  0.826991     -0.189962      -1.37365       1.37365       180.949       182.322    
  13  0.675447E-01  -2.69497      -19.4879       19.4879       180.706       200.194    
  14  0.924113     -0.789214E-01 -0.570697      0.570697       184.391       184.962    
  15  0.810131     -0.210560      -1.52260       1.52260       183.837       185.360    
  16  0.410286     -0.890900      -6.44229       6.44229       182.875       189.317    
  17  0.334977      -1.09369      -7.90874       7.90874       181.185       189.094    
  18  0.119017      -2.12849      -15.3915       15.3915       184.490       199.881    
  19  0.447328     -0.804463      -5.81725       5.81725       186.821       192.638    
  20  0.324388E-02  -5.73098      -41.4420       41.4420       187.302       228.744    
  21  0.158272      -1.84344      -13.3303       13.3303       189.670       203.000    
  22  0.241219      -1.42205      -10.2832       10.2832       187.470       197.753    
  23  0.259790      -1.34788      -9.74682       9.74682       190.160       199.907    
  24  0.521973     -0.650139      -4.70129       4.70129       179.763       184.464    
  25  0.336335      -1.08965      -7.87947       7.87947       189.474       197.353    
  26  0.642248     -0.442780      -3.20184       3.20184       189.576       192.778    
  27  0.984615     -0.155047E-01 -0.112118      0.112118       190.529       190.641    
  28  0.373782     -0.984082      -7.11611       7.11611       189.919       197.035    
  29  0.932479     -0.699087E-01 -0.505524      0.505524       187.220       187.725    
  30  0.711360     -0.340577      -2.46279       2.46279       190.784       193.247    
  31  0.315363      -1.15403      -8.34505       8.34505       183.165       191.510    
  32  0.528583     -0.637556      -4.61030       4.61030       183.292       187.902    
  33  0.622355E-01  -2.77683      -20.0798       20.0798       192.832       212.912    
  34  0.144849      -1.93206      -13.9711       13.9711       192.125       206.097    
  35  0.868928     -0.140495      -1.01595       1.01595       193.304       194.320    
  36  0.243398      -1.41306      -10.2181       10.2181       188.127       198.345    
  37  0.936928     -0.651491E-01 -0.471107      0.471107       187.446       187.917    
  38  0.979804E-01  -2.32299      -16.7980       16.7980       191.159       207.957    
  39  0.805773     -0.215953      -1.56160       1.56160       187.149       188.711    
  40  0.210751      -1.55708      -11.2596       11.2596       192.177       203.437    
  41  0.497104     -0.698956      -5.05430       5.05430       190.223       195.278    
  42  0.532106     -0.630913      -4.56227       4.56227       180.389       184.951    
  43  0.898420     -0.107117     -0.774587      0.774587       191.012       191.786    
  44  0.579370     -0.545814      -3.94689       3.94689       192.845       196.792    
  45  0.191213      -1.65437      -11.9631       11.9631       193.513       205.476    
  46  0.491633     -0.710023      -5.13433       5.13433       193.212       198.346    
  47  0.989123     -0.109370E-01 -0.790877E-01  0.790877E-01   197.354       197.433    
  48  0.576855     -0.550164      -3.97835       3.97835       175.715       179.693    
  49  0.133368      -2.01464      -14.5683       14.5683       192.832       207.401    
  50  0.708426     -0.344710      -2.49267       2.49267       188.964       191.457    
  51  0.183469      -1.69571      -12.2620       12.2620       185.115       197.377    
  52  0.951201     -0.500300E-01 -0.361777      0.361777       191.801       192.162    
  53  0.380646E-01  -3.26847      -23.6350       23.6350       194.868       218.503    
  54  0.575108     -0.553198      -4.00029       4.00029       193.650       197.650    
  55  0.136357E-01  -4.29506      -31.0585       31.0585       184.706       215.764    
  56  0.665821E-01  -2.70932      -19.5917       19.5917       186.584       206.176    
  57  0.885471     -0.121635     -0.879569      0.879569       197.960       198.839    
  58  0.213600E-01  -3.84624      -27.8130       27.8130       187.767       215.580    
  59  0.740349     -0.300634      -2.17395       2.17395       199.184       201.358    
  60  0.290679      -1.23553      -8.93441       8.93441       192.707       201.642    
  61  0.895680     -0.110173     -0.796681      0.796681       192.832       193.629    
  62  0.956670     -0.442971E-01 -0.320322      0.320322       194.243       194.563    
  63  0.196231      -1.62846      -11.7758       11.7758       192.598       204.374    
  64  0.279139      -1.27605      -9.22736       9.22736       189.414       198.642    
  65  0.686055     -0.376797      -2.72470       2.72470       204.512       207.237    
  66  0.798228     -0.225361      -1.62963       1.62963       192.846       194.476    
  67  0.898321     -0.107228     -0.775387      0.775387       191.913       192.689    
  68  0.764857     -0.268067      -1.93845       1.93845       192.832       194.771    
  69  0.330164      -1.10817      -8.01339       8.01339       191.517       199.531    
  70  0.598170     -0.513879      -3.71597       3.71597       191.810       195.526    
  71  0.810123     -0.210569      -1.52267       1.52267       212.978       214.501    
  72  0.351685      -1.04502      -7.55676       7.55676       181.754       189.311    
loop,thermsimp(1:2)       43   8.74015       6.93667    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306        253.79          0.83          1.11         25.07          0.16          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    307        193.69          0.84          1.11         25.28          0.10          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    193.69
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       43
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       44
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      306     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -9.02542       9.02542       166.873       175.898    
   2  0.260243      -1.34614      -9.73421       9.73421       174.483       184.218    
   3  0.646915     -0.435540      -3.14948       3.14948       178.432       181.581    
   4  0.572447     -0.557835      -4.03382       4.03382       175.715       179.749    
   5  0.105907      -2.24520      -16.2355       16.2355       175.068       191.304    
   6  0.693038     -0.366671      -2.65147       2.65147       180.949       183.600    
   7  0.329408      -1.11046      -8.02996       8.02996       179.763       187.793    
   8  0.187221      -1.67546      -12.1156       12.1156       184.056       196.172    
   9  0.545731     -0.605630      -4.37944       4.37944       180.389       184.768    
  10  0.752820     -0.283930      -2.05316       2.05316       184.391       186.444    
  11  0.153542      -1.87378      -13.5497       13.5497       178.392       191.941    
  12  0.400659     -0.914645      -6.61399       6.61399       183.837       190.451    
  13  0.306182      -1.18357      -8.55868       8.55868       184.883       193.441    
  14  0.270957E-01  -3.60838      -26.0930       26.0930       180.221       206.314    
  15  0.776765     -0.252618      -1.82673       1.82673       187.220       189.046    
  16  0.711945     -0.339755      -2.45684       2.45684       183.292       185.748    
  17  0.217190      -1.52698      -11.0419       11.0419       187.446       198.488    
  18  0.285226      -1.25447      -9.07137       9.07137       181.080       190.151    
  19  0.348904      -1.05296      -7.61417       7.61417       183.092       190.706    
  20  0.686414     -0.376275      -2.72092       2.72092       187.149       189.870    
  21  0.212825      -1.54729      -11.1888       11.1888       181.185       192.374    
  22  0.501697     -0.689760      -4.98780       4.98780       181.754       186.742    
  23  0.363771      -1.01123      -7.31242       7.31242       182.875       190.187    
  24  0.789273     -0.236642      -1.71121       1.71121       190.529       192.240    
  25  0.232884      -1.45721      -10.5374       10.5374       188.964       199.502    
  26  0.754896     -0.281175      -2.03323       2.03323       183.165       185.199    
  27  0.639358     -0.447290      -3.23445       3.23445       191.012       194.246    
  28  0.532505     -0.630163      -4.55684       4.55684       183.898       188.455    
  29  0.759813     -0.274683      -1.98629       1.98629       191.801       193.787    
  30  0.768360     -0.263497      -1.90540       1.90540       186.821       188.726    
  31  0.245116      -1.40602      -10.1672       10.1672       191.913       202.081    
  32  0.672517     -0.396727      -2.86882       2.86882       189.576       192.445    
  33  0.910675     -0.935691E-01 -0.676618      0.676618       190.784       191.461    
  34  0.441618     -0.817310      -5.91014       5.91014       192.832       198.742    
  35  0.212980      -1.54656      -11.1835       11.1835       193.304       204.487    
  36  0.471690     -0.751434      -5.43378       5.43378       192.846       198.280    
  37  0.968545     -0.319606E-01 -0.231114      0.231114       194.243       194.474    
  38  0.711169     -0.340845      -2.46472       2.46472       192.832       195.297    
  39  0.222170      -1.50431      -10.8780       10.8780       190.223       201.101    
  40  0.896100     -0.109703     -0.793288      0.793288       191.810       192.603    
  41  0.898054     -0.107525     -0.777535      0.777535       192.845       193.623    
  42  0.981364     -0.188122E-01 -0.136035      0.136035       189.919       190.055    
  43  0.238126      -1.43496      -10.3765       10.3765       189.474       199.850    
  44  0.884882     -0.122301     -0.884387      0.884387       185.115       185.999    
  45  0.206421      -1.57784      -11.4097       11.4097       197.354       208.764    
  46  0.421939     -0.862894      -6.23977       6.23977       193.650       199.890    
  47  0.334170E-01  -3.39869      -24.5766       24.5766       187.470       212.047    
  48  0.940374     -0.614772E-01 -0.444554      0.444554       188.127       188.571    
  49  0.119361      -2.12561      -15.3707       15.3707       193.212       208.582    
  50  0.493355     -0.706527      -5.10905       5.10905       189.414       194.523    
  51  0.239498      -1.42921      -10.3349       10.3349       197.960       208.295    
  52  0.779094     -0.249623      -1.80508       1.80508       191.517       193.322    
  53  0.993851     -0.616759E-02 -0.445992E-01  0.445992E-01   184.490       184.534    
  54  0.680666     -0.384683      -2.78173       2.78173       190.160       192.942    
  55  0.861145     -0.149492      -1.08101       1.08101       180.706       181.787    
  56  0.679030     -0.387090      -2.79913       2.79913       199.184       201.983    
  57  0.568731E-01  -2.86693      -20.7314       20.7314       192.707       213.439    
  58  0.342751      -1.07075      -7.74284       7.74284       189.670       197.413    
  59  0.929483     -0.731270E-01 -0.528797      0.528797       192.177       192.706    
  60  0.287616      -1.24613      -9.01103       9.01103       192.598       201.609    
  61  0.622582     -0.473881      -3.42673       3.42673       193.513       196.940    
  62  0.449193     -0.800303      -5.78716       5.78716       192.125       197.913    
  63  0.746100     -0.292896      -2.11799       2.11799       186.584       188.702    
  64  0.783595     -0.243863      -1.76342       1.76342       204.512       206.276    
  65  0.447963     -0.803044      -5.80698       5.80698       192.832       198.639    
  66  0.788663     -0.237416      -1.71681       1.71681       191.159       192.876    
  67  0.445514     -0.808528      -5.84663       5.84663       192.832       198.679    
  68  0.174611      -1.74519      -12.6199       12.6199       212.978       225.598    
  69  0.891268E-01  -2.41769      -17.4829       17.4829       187.767       205.250    
  70  0.279672      -1.27414      -9.21356       9.21356       184.706       193.919    
  71  0.700166     -0.356438      -2.57748       2.57748       194.868       197.445    
  72  0.269233      -1.31218      -9.48864       9.48864       193.694       203.182    
loop,thermsimp(1:2)       44   9.02542       9.73421    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308        192.26          0.83          1.11         25.11          0.11          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       44
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       45
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      307     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -11.4843       11.4843       166.873       178.357    
   2  0.455846E-01  -3.08818      -22.3313       22.3313       175.715       198.046    
   3  0.655807     -0.421889      -3.05077       3.05077       178.432       181.483    
   4  0.902989     -0.102045     -0.737910      0.737910       180.706       181.444    
   5  0.826012     -0.191146      -1.38221       1.38221       180.949       182.331    
   6  0.160871      -1.82715      -13.2125       13.2125       174.483       187.696    
   7  0.516410     -0.660854      -4.77878       4.77878       184.490       189.269    
   8  0.506939     -0.679364      -4.91262       4.91262       180.389       185.302    
   9  0.728359     -0.316962      -2.29202       2.29202       183.165       185.457    
  10  0.453162     -0.791506      -5.72355       5.72355       183.292       189.015    
  11  0.837994     -0.176745      -1.27808       1.27808       185.115       186.393    
  12  0.118024      -2.13686      -15.4521       15.4521       184.391       199.843    
  13  0.274030      -1.29452      -9.36094       9.36094       181.754       191.115    
  14  0.402227     -0.910738      -6.58574       6.58574       179.763       186.349    
  15  0.444245     -0.811380      -5.86726       5.86726       183.898       189.766    
  16  0.594880     -0.519396      -3.75586       3.75586       188.127       191.882    
  17  0.548806     -0.600010      -4.33880       4.33880       186.584       190.923    
  18  0.222827      -1.50136      -10.8566       10.8566       186.821       197.678    
  19  0.152541      -1.88032      -13.5970       13.5970       187.220       200.817    
  20  0.816533     -0.202688      -1.46568       1.46568       187.149       188.615    
  21  0.525417     -0.643564      -4.65375       4.65375       189.919       194.573    
  22  0.661450     -0.413320      -2.98881       2.98881       181.080       184.068    
  23  0.437535     -0.826598      -5.97730       5.97730       182.875       188.852    
  24  0.464442     -0.766918      -5.54575       5.54575       183.837       189.383    
  25  0.683975     -0.379834      -2.74666       2.74666       183.092       185.839    
  26  0.407919     -0.896688      -6.48414       6.48414       175.068       181.552    
  27  0.934669     -0.675632E-01 -0.488564      0.488564       190.784       191.273    
  28  0.866891     -0.142842      -1.03292       1.03292       178.392       179.425    
  29  0.145435E-01  -4.23061      -30.5925       30.5925       190.529       221.121    
  30  0.514599     -0.664368      -4.80418       4.80418       181.185       185.989    
  31  0.370591     -0.992656      -7.17811       7.17811       189.576       196.754    
  32  0.251726      -1.37941      -9.97483       9.97483       191.810       201.785    
  33  0.959470     -0.413742E-01 -0.299185      0.299185       192.177       192.477    
  34  0.344885E-01  -3.36713      -24.3484       24.3484       191.159       215.507    
  35  0.348690      -1.05357      -7.61861       7.61861       190.160       197.779    
  36  0.610898     -0.492826      -3.56373       3.56373       191.517       195.081    
  37  0.440567     -0.819693      -5.92737       5.92737       184.883       190.810    
  38  0.340409      -1.07761      -7.79241       7.79241       192.845       200.638    
  39  0.345015E-01  -3.36675      -24.3457       24.3457       191.801       216.146    
  40  0.667224     -0.404630      -2.92597       2.92597       184.706       187.632    
  41  0.138336      -1.97807      -14.3039       14.3039       191.012       205.315    
  42  0.412023     -0.886676      -6.41174       6.41174       194.243       200.655    
  43  0.578410     -0.547473      -3.95889       3.95889       189.414       193.373    
  44  0.972817     -0.275594E-01 -0.199288      0.199288       192.832       193.032    
  45  0.152341      -1.88163      -13.6065       13.6065       184.056       197.662    
  46  0.764264     -0.268842      -1.94405       1.94405       193.513       195.457    
  47  0.898082E-01  -2.41008      -17.4278       17.4278       189.670       207.097    
  48  0.205097      -1.58427      -11.4562       11.4562       194.868       206.324    
  49  0.249611E-01  -3.69044      -26.6863       26.6863       192.125       218.812    
  50  0.999211     -0.789000E-03 -0.570542E-02  0.570542E-02   192.846       192.852    
  51  0.622898E-01  -2.77596      -20.0735       20.0735       187.446       207.520    
  52  0.588779     -0.529705      -3.83041       3.83041       192.832       196.663    
  53  0.395562     -0.927447      -6.70657       6.70657       192.832       199.539    
  54  0.213371      -1.54472      -11.1702       11.1702       192.832       204.003    
  55  0.801544     -0.221215      -1.59966       1.59966       188.964       190.564    
  56  0.392036     -0.936401      -6.77132       6.77132       189.474       196.245    
  57  0.504835     -0.683524      -4.94271       4.94271       193.650       198.593    
  58  0.389514     -0.942856      -6.81799       6.81799       190.223       197.041    
  59  0.694006     -0.365275      -2.64138       2.64138       192.598       195.239    
  60  0.220113      -1.51361      -10.9453       10.9453       199.184       210.129    
  61  0.548334     -0.600870      -4.34502       4.34502       191.913       196.258    
  62  0.490082     -0.713183      -5.15718       5.15718       193.694       198.851    
  63  0.315187      -1.15459      -8.34909       8.34909       193.304       201.653    
  64  0.454028     -0.789596      -5.70974       5.70974       187.767       193.477    
  65  0.617612     -0.481894      -3.48468       3.48468       204.512       207.997    
  66  0.446806     -0.805630      -5.82568       5.82568       180.221       186.047    
  67  0.907640     -0.969076E-01 -0.700760      0.700760       197.960       198.661    
  68  0.508446     -0.676396      -4.89116       4.89116       193.212       198.103    
  69  0.552574     -0.593168      -4.28932       4.28932       197.354       201.644    
  70  0.716954     -0.332744      -2.40614       2.40614       187.470       189.876    
  71  0.414283     -0.881205      -6.37218       6.37218       192.707       199.079    
  72  0.320057      -1.13926      -8.23820       8.23820       192.261       200.499    
loop,thermsimp(1:2)       45   11.4843       22.3313    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309        174.87          0.84          1.11         25.07          0.14          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    310        179.50          0.85          1.12         25.10          0.11          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    174.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       45
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       46
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      309     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -1.66330       1.66330       166.873       168.536    
   2  0.338444      -1.08340      -7.83426       7.83426       178.392       186.226    
   3  0.563800     -0.573055      -4.14388       4.14388       180.706       184.850    
   4  0.295284      -1.21982      -8.82075       8.82075       178.432       187.253    
   5  0.506481     -0.680269      -4.91917       4.91917       175.068       179.987    
   6  0.345803      -1.06189      -7.67873       7.67873       180.949       188.627    
   7  0.741641     -0.298890      -2.16133       2.16133       181.080       183.241    
   8  0.182310      -1.70204      -12.3078       12.3078       180.389       192.697    
   9  0.315187      -1.15459      -8.34907       8.34907       183.165       191.514    
  10  0.598844     -0.512755      -3.70784       3.70784       183.092       186.800    
  11  0.659119     -0.416852      -3.01434       3.01434       181.185       184.200    
  12  0.247481      -1.39642      -10.0978       10.0978       180.221       190.319    
  13  0.255298      -1.36532      -9.87293       9.87293       179.763       189.636    
  14  0.876488     -0.131833     -0.953309      0.953309       185.115       186.068    
  15  0.358010      -1.02719      -7.42786       7.42786       184.706       192.134    
  16  0.317480      -1.14734      -8.29667       8.29667       174.483       182.780    
  17  0.153422      -1.87456      -13.5554       13.5554       187.149       200.705    
  18  0.296162      -1.21685      -8.79930       8.79930       182.875       191.674    
  19  0.629760     -0.462417      -3.34383       3.34383       183.292       186.635    
  20  0.458345E-01  -3.08272      -22.2918       22.2918       184.490       206.782    
  21  0.209534      -1.56287      -11.3014       11.3014       183.837       195.139    
  22  0.490210E-01  -3.01551      -21.8058       21.8058       183.898       205.704    
  23  0.144817      -1.93229      -13.9728       13.9728       187.470       201.443    
  24  0.764061     -0.269107      -1.94597       1.94597       188.964       190.910    
  25  0.158664      -1.84097      -13.3124       13.3124       184.883       198.195    
  26  0.242818      -1.41544      -10.2354       10.2354       186.584       196.819    
  27  0.779950     -0.248525      -1.79714       1.79714       181.754       183.552    
  28  0.763580     -0.269737      -1.95053       1.95053       190.784       192.735    
  29  0.817639     -0.201335      -1.45589       1.45589       188.127       189.582    
  30  0.656802     -0.420373      -3.03981       3.03981       192.177       195.217    
  31  0.202192      -1.59854      -11.5594       11.5594       192.846       204.406    
  32  0.469647     -0.755773      -5.46516       5.46516       192.832       198.297    
  33  0.107456      -2.23067      -16.1304       16.1304       189.414       205.545    
  34  0.709118     -0.343734      -2.48561       2.48561       187.767       190.253    
  35  0.988480     -0.115868E-01 -0.837869E-01  0.837869E-01   189.919       190.003    
  36  0.645173     -0.438236      -3.16898       3.16898       191.517       194.686    
  37  0.583143     -0.539322      -3.89995       3.89995       192.598       196.498    
  38  0.276552E-01  -3.58794      -25.9452       25.9452       193.513       219.458    
  39  0.560517     -0.578896      -4.18612       4.18612       189.474       193.660    
  40  0.292779      -1.22834      -8.88236       8.88236       191.913       200.796    
  41  0.486207     -0.721121      -5.21458       5.21458       192.832       198.047    
  42  0.379142E-01  -3.27243      -23.6636       23.6636       189.576       213.240    
  43  0.459895     -0.776757      -5.61689       5.61689       190.223       195.840    
  44  0.810771     -0.209769      -1.51689       1.51689       184.056       185.573    
  45  0.189138      -1.66528      -12.0420       12.0420       186.821       198.863    
  46  0.509870     -0.673599      -4.87094       4.87094       190.160       195.031    
  47  0.468020E-01  -3.06183      -22.1407       22.1407       175.715       197.856    
  48  0.568404     -0.564922      -4.08507       4.08507       193.212       197.297    
  49  0.891250     -0.115130     -0.832532      0.832532       193.650       194.482    
  50  0.415261     -0.878849      -6.35514       6.35514       197.960       204.315    
  51  0.714019     -0.336846      -2.43580       2.43580       193.694       196.129    
  52  0.606207     -0.500534      -3.61946       3.61946       192.707       196.327    
  53  0.106011      -2.24421      -16.2284       16.2284       192.832       209.061    
  54  0.330348      -1.10761      -8.00936       8.00936       184.391       192.400    
  55  0.773475     -0.256862      -1.85743       1.85743       192.261       194.119    
  56  0.721841     -0.325951      -2.35702       2.35702       192.845       195.202    
  57  0.714980     -0.335501      -2.42608       2.42608       194.243       196.669    
  58  0.616486     -0.483719      -3.49788       3.49788       187.220       190.718    
  59  0.885098     -0.122057     -0.882617      0.882617       197.354       198.237    
  60  0.463686     -0.768549      -5.55754       5.55754       193.304       198.861    
  61  0.912951     -0.910727E-01 -0.658566      0.658566       191.810       192.468    
  62  0.819534     -0.199020      -1.43915       1.43915       192.832       194.271    
  63  0.771708     -0.259149      -1.87396       1.87396       191.012       192.885    
  64  0.812091E-03  -7.11590      -51.4566       51.4566       194.868       246.324    
  65  0.880919     -0.126790     -0.916842      0.916842       189.670       190.587    
  66  0.552031     -0.594151      -4.29643       4.29643       187.446       191.743    
  67  0.134353      -2.00729      -14.5151       14.5151       204.512       219.027    
  68  0.410649     -0.890016      -6.43589       6.43589       199.184       205.620    
  69  0.258019      -1.35472      -9.79628       9.79628       191.159       200.955    
  70  0.808143     -0.213016      -1.54037       1.54037       191.801       193.341    
  71  0.635973     -0.452599      -3.27284       3.27284       192.125       195.398    
  72  0.517431     -0.658879      -4.76449       4.76449       174.869       179.633    
loop,thermsimp(1:2)       46   1.66330       7.83426    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311        179.73          0.84          1.11         25.05          0.21          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    179.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       46
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       47
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      310     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -3.08719       3.08719       166.873       169.960    
   2  0.474910     -0.744630      -5.38458       5.38458       174.869       180.253    
   3  0.125725      -2.07366      -14.9951       14.9951       175.068       190.063    
   4  0.950967     -0.502756E-01 -0.363553      0.363553       174.483       174.847    
   5  0.562475     -0.575409      -4.16090       4.16090       181.080       185.240    
   6  0.728528     -0.316729      -2.29033       2.29033       181.754       184.045    
   7  0.326058      -1.12068      -8.10388       8.10388       181.185       189.289    
   8  0.460979     -0.774402      -5.59987       5.59987       180.706       186.306    
   9  0.186861      -1.67739      -12.1296       12.1296       184.056       196.185    
  10  0.737773     -0.304119      -2.19915       2.19915       185.115       187.314    
  11  0.254524      -1.36836      -9.89491       9.89491       178.392       188.287    
  12  0.475390     -0.743621      -5.37728       5.37728       183.292       188.669    
  13  0.783107     -0.244486      -1.76793       1.76793       183.092       184.860    
  14  0.615536     -0.485261      -3.50903       3.50903       178.432       181.941    
  15  0.600710E-01  -2.81223      -20.3358       20.3358       180.949       201.284    
  16  0.834417     -0.181022      -1.30901       1.30901       188.127       189.436    
  17  0.270355      -1.30802      -9.45857       9.45857       179.763       189.222    
  18  0.408387     -0.895540      -6.47584       6.47584       189.919       196.395    
  19  0.248286      -1.39318      -10.0743       10.0743       187.767       197.842    
  20  0.586808E-01  -2.83564      -20.5051       20.5051       180.221       200.727    
  21  0.747050     -0.291623      -2.10879       2.10879       189.670       191.778    
  22  0.261869E-01  -3.64250      -26.3397       26.3397       187.220       213.559    
  23  0.495813     -0.701557      -5.07311       5.07311       188.964       194.037    
  24  0.600032     -0.510772      -3.69350       3.69350       183.165       186.859    
  25  0.936456     -0.656531E-01 -0.474752      0.474752       182.875       183.349    
  26  0.583260     -0.539121      -3.89850       3.89850       187.446       191.345    
  27  0.994266     -0.575021E-02 -0.415810E-01  0.415810E-01   184.706       184.747    
  28  0.149755      -1.89876      -13.7303       13.7303       184.391       198.121    
  29  0.751239     -0.286032      -2.06835       2.06835       191.810       193.878    
  30  0.703931     -0.351075      -2.53870       2.53870       180.389       182.928    
  31  0.998476     -0.152564E-02 -0.110322E-01  0.110322E-01   190.784       190.796    
  32  0.501495     -0.690161      -4.99070       4.99070       191.012       196.002    
  33  0.446468     -0.806387      -5.83115       5.83115       191.801       197.632    
  34  0.321376      -1.13514      -8.20847       8.20847       189.474       197.682    
  35  0.850901     -0.161459      -1.16755       1.16755       192.261       193.429    
  36  0.975881     -0.244142E-01 -0.176544      0.176544       192.832       193.009    
  37  0.386316     -0.951100      -6.87760       6.87760       193.650       200.527    
  38  0.782734     -0.244962      -1.77137       1.77137       191.517       193.289    
  39  0.142678      -1.94716      -14.0804       14.0804       190.160       204.240    
  40  0.509914     -0.673514      -4.87032       4.87032       183.837       188.708    
  41  0.211111      -1.55537      -11.2472       11.2472       192.845       204.092    
  42  0.212538      -1.54864      -11.1985       11.1985       192.177       203.376    
  43  0.889982     -0.116555     -0.842831      0.842831       192.125       192.968    
  44  0.769070     -0.262573      -1.89872       1.89872       190.223       192.122    
  45  0.792434     -0.232646      -1.68231       1.68231       193.694       195.376    
  46  0.250220E-01  -3.68800      -26.6687       26.6687       192.707       219.376    
  47  0.190304      -1.65913      -11.9975       11.9975       192.598       204.596    
  48  0.579595     -0.545425      -3.94408       3.94408       194.243       198.187    
  49  0.373376     -0.985170      -7.12397       7.12397       186.584       193.708    
  50  0.933620E-01  -2.37127      -17.1472       17.1472       193.212       210.359    
  51  0.628243     -0.464828      -3.36127       3.36127       175.715       179.076    
  52  0.737857     -0.304005      -2.19833       2.19833       192.832       195.031    
  53  0.430189     -0.843530      -6.09974       6.09974       184.883       190.982    
  54  0.957397     -0.435375E-01 -0.314829      0.314829       197.354       197.669    
  55  0.388126     -0.946424      -6.84379       6.84379       192.832       199.676    
  56  0.989586     -0.104686E-01 -0.757010E-01  0.757010E-01   193.304       193.379    
  57  0.754642     -0.281511      -2.03567       2.03567       186.821       188.857    
  58  0.404023E-01  -3.20887      -23.2040       23.2040       187.149       210.353    
  59  0.298112      -1.21029      -8.75185       8.75185       191.913       200.665    
  60  0.915557     -0.882223E-01 -0.637954      0.637954       191.159       191.797    
  61  0.205580E-01  -3.88450      -28.0897       28.0897       187.470       215.560    
  62  0.883530     -0.123830     -0.895445      0.895445       197.960       198.855    
  63  0.776014     -0.253585      -1.83373       1.83373       192.846       194.680    
  64  0.755316     -0.280619      -2.02921       2.02921       189.414       191.444    
  65  0.912949     -0.910754E-01 -0.658585      0.658585       199.184       199.843    
  66  0.262008      -1.33938      -9.68533       9.68533       183.898       193.584    
  67  0.636818     -0.451272      -3.26324       3.26324       184.490       187.753    
  68  0.545112     -0.606763      -4.38763       4.38763       192.832       197.220    
  69  0.261545      -1.34115      -9.69814       9.69814       189.576       199.274    
  70  0.375676     -0.979027      -7.07955       7.07955       204.512       211.592    
  71  0.160262      -1.83095      -13.2400       13.2400       193.513       206.753    
  72  0.113292      -2.17779      -15.7480       15.7480       179.727       195.475    
loop,thermsimp(1:2)       47   3.08719       5.38458    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312        174.84          0.84          1.11         25.12          0.21          0.05         27.33
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    313        176.04          0.84          1.12         25.04          0.16          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    174.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       47
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       48
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      312     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -8.33015       8.33015       166.873       175.203    
   2  0.452730     -0.792459      -5.73044       5.73044       174.483       180.214    
   3  0.463916     -0.768051      -5.55394       5.55394       175.715       181.269    
   4  0.531172E-01  -2.93526      -21.2255       21.2255       174.869       196.094    
   5  0.933113     -0.692290E-01 -0.500609      0.500609       178.432       178.932    
   6  0.107612      -2.22922      -16.1200       16.1200       180.389       196.509    
   7  0.228017      -1.47833      -10.6901       10.6901       182.875       193.565    
   8  0.766526     -0.265887      -1.92269       1.92269       181.754       183.677    
   9  0.676418     -0.390944      -2.82700       2.82700       184.706       187.533    
  10  0.220696      -1.51097      -10.9261       10.9261       183.092       194.018    
  11  0.959946E-01  -2.34346      -16.9461       16.9461       181.080       198.026    
  12  0.570655     -0.560971      -4.05650       4.05650       180.706       184.763    
  13  0.736426     -0.305947      -2.21237       2.21237       183.165       185.378    
  14  0.966377     -0.342013E-01 -0.247317      0.247317       185.115       185.362    
  15  0.797662     -0.226070      -1.63476       1.63476       184.490       186.125    
  16  0.413688     -0.882643      -6.38258       6.38258       178.392       184.774    
  17  0.200670      -1.60609      -11.6140       11.6140       183.292       194.906    
  18  0.843958E-01  -2.47224      -17.8773       17.8773       183.837       201.715    
  19  0.375580     -0.979284      -7.08141       7.08141       186.821       193.902    
  20  0.968669     -0.318322E-01 -0.230185      0.230185       179.763       179.993    
  21  0.379263     -0.969525      -7.01084       7.01084       181.185       188.196    
  22  0.421746     -0.863352      -6.24308       6.24308       188.127       194.370    
  23  0.639909     -0.446429      -3.22823       3.22823       175.068       178.296    
  24  0.549878     -0.598059      -4.32469       4.32469       190.784       195.109    
  25  0.226469      -1.48515      -10.7394       10.7394       184.883       195.622    
  26  0.547044E-02  -5.20840      -37.6630       37.6630       187.446       225.109    
  27  0.372808     -0.986692      -7.13498       7.13498       189.414       196.549    
  28  0.406819E-01  -3.20197      -23.1541       23.1541       189.670       212.824    
  29  0.664564     -0.408624      -2.95484       2.95484       191.159       194.114    
  30  0.708700     -0.344323      -2.48987       2.48987       190.223       192.713    
  31  0.863329     -0.146959      -1.06269       1.06269       192.125       193.188    
  32  0.406109     -0.901134      -6.51629       6.51629       192.832       199.349    
  33  0.101947      -2.28330      -16.5110       16.5110       191.517       208.028    
  34  0.660574     -0.414646      -2.99839       2.99839       193.304       196.302    
  35  0.839002     -0.175542      -1.26938       1.26938       192.261       193.531    
  36  0.735312E-01  -2.61005      -18.8738       18.8738       183.898       202.772    
  37  0.559917     -0.579967      -4.19386       4.19386       186.584       190.778    
  38  0.922004     -0.812055E-01 -0.587214      0.587214       191.810       192.397    
  39  0.891471     -0.114882     -0.830738      0.830738       188.964       189.795    
  40  0.489346     -0.714686      -5.16805       5.16805       192.846       198.014    
  41  0.583196     -0.539231      -3.89930       3.89930       192.832       196.732    
  42  0.989235     -0.108230E-01 -0.782637E-01  0.782637E-01   193.694       193.772    
  43  0.844741     -0.168725      -1.22009       1.22009       179.727       180.947    
  44  0.734982     -0.307909      -2.22655       2.22655       191.012       193.238    
  45  0.913246     -0.907495E-01 -0.656229      0.656229       184.056       184.712    
  46  0.605096     -0.502369      -3.63274       3.63274       189.919       193.552    
  47  0.623739     -0.472024      -3.41330       3.41330       192.832       196.246    
  48  0.780990     -0.247193      -1.78751       1.78751       191.801       193.588    
  49  0.615662E-01  -2.78764      -20.1580       20.1580       197.354       217.512    
  50  0.646443E-02  -5.04144      -36.4557       36.4557       189.474       225.929    
  51  0.848055     -0.164809      -1.19177       1.19177       187.767       188.959    
  52  0.740886     -0.299909      -2.16870       2.16870       184.391       186.560    
  53  0.350650      -1.04797      -7.57808       7.57808       194.243       201.821    
  54  0.873328     -0.135444     -0.979425      0.979425       197.960       198.939    
  55  0.353091      -1.04103      -7.52791       7.52791       189.576       197.104    
  56  0.867938     -0.141635      -1.02420       1.02420       192.832       193.857    
  57  0.746706     -0.292084      -2.11212       2.11212       199.184       201.296    
  58  0.701641     -0.354333      -2.56226       2.56226       193.650       196.212    
  59  0.454866     -0.787753      -5.69641       5.69641       191.913       197.610    
  60  0.172086      -1.75976      -12.7252       12.7252       180.221       192.947    
  61  0.633774     -0.456062      -3.29788       3.29788       180.949       184.247    
  62  0.321574      -1.13453      -8.20400       8.20400       192.177       200.381    
  63  0.171612      -1.76252      -12.7451       12.7451       192.845       205.590    
  64  0.417516     -0.873431      -6.31597       6.31597       190.160       196.476    
  65  0.735059     -0.307804      -2.22580       2.22580       192.598       194.824    
  66  0.259350      -1.34958      -9.75908       9.75908       193.513       203.272    
  67  0.498266     -0.696622      -5.03742       5.03742       187.149       192.187    
  68  0.309265      -1.17356      -8.48624       8.48624       193.212       201.698    
  69  0.612008     -0.491010      -3.55060       3.55060       204.512       208.063    
  70  0.624712E-01  -2.77305      -20.0525       20.0525       187.220       207.272    
  71  0.209490      -1.56308      -11.3030       11.3030       187.470       198.773    
  72  0.357768E-01  -3.33046      -24.0832       24.0832       174.838       198.921    
loop,thermsimp(1:2)       48   8.33015       5.73044    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314        177.59          0.84          1.11         25.07          0.17          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    315        180.78          0.84          1.11         25.26          0.14          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    177.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       48
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       49
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      314     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.614736E-01  0.614736E-01   166.873       166.934    
   2  0.120199      -2.11861      -15.3201       15.3201       175.068       190.388    
   3  0.825835     -0.191360      -1.38376       1.38376       178.432       179.816    
   4  0.769690     -0.261767      -1.89289       1.89289       179.763       181.656    
   5  0.206534      -1.57729      -11.4057       11.4057       174.483       185.889    
   6  0.435455     -0.831363      -6.01176       6.01176       179.727       185.739    
   7  0.408718     -0.894731      -6.46999       6.46999       175.715       182.185    
   8  0.504170E-01  -2.98743      -21.6027       21.6027       181.754       203.357    
   9  0.943874     -0.577631E-01 -0.417697      0.417697       180.949       181.366    
  10  0.161493      -1.82330      -13.1846       13.1846       184.056       197.241    
  11  0.248560      -1.39207      -10.0664       10.0664       180.706       190.773    
  12  0.952734     -0.484195E-01 -0.350132      0.350132       178.392       178.742    
  13  0.349224      -1.05204      -7.60755       7.60755       185.115       192.723    
  14  0.245013      -1.40644      -10.1703       10.1703       183.165       193.336    
  15  0.713805     -0.337146      -2.43797       2.43797       184.490       186.928    
  16  0.206995      -1.57506      -11.3896       11.3896       184.391       195.781    
  17  0.573984     -0.555154      -4.01444       4.01444       184.706       188.720    
  18  0.791297     -0.234082      -1.69270       1.69270       181.185       182.878    
  19  0.599323     -0.511955      -3.70206       3.70206       187.767       191.469    
  20  0.632893     -0.457454      -3.30795       3.30795       188.964       192.272    
  21  0.920472     -0.828688E-01 -0.599242      0.599242       186.584       187.183    
  22  0.650695     -0.429713      -3.10735       3.10735       187.149       190.257    
  23  0.759327     -0.275322      -1.99091       1.99091       191.810       193.801    
  24  0.547563     -0.602278      -4.35520       4.35520       190.223       194.578    
  25  0.375945     -0.978312      -7.07438       7.07438       180.221       187.296    
  26  0.436593     -0.828753      -5.99289       5.99289       192.125       198.118    
  27  0.226348      -1.48568      -10.7433       10.7433       191.012       201.755    
  28  0.889061     -0.117589     -0.850312      0.850312       192.261       193.112    
  29  0.294563      -1.22226      -8.83843       8.83843       189.919       198.758    
  30  0.760606     -0.273640      -1.97875       1.97875       182.875       184.853    
  31  0.131934      -2.02545      -14.6465       14.6465       191.801       206.447    
  32  0.150887      -1.89123      -13.6759       13.6759       193.694       207.369    
  33  0.108814      -2.21811      -16.0396       16.0396       192.832       208.872    
  34  0.392982     -0.933991      -6.75389       6.75389       186.821       193.575    
  35  0.524209     -0.645865      -4.67038       4.67038       183.092       187.762    
  36  0.779329     -0.249322      -1.80290       1.80290       191.159       192.962    
  37  0.684136     -0.379599      -2.74496       2.74496       188.127       190.872    
  38  0.898629     -0.106885     -0.772910      0.772910       192.598       193.371    
  39  0.885947E-01  -2.42368      -17.5262       17.5262       183.292       200.818    
  40  0.865042     -0.144977      -1.04836       1.04836       190.784       191.833    
  41  0.953799     -0.473027E-01 -0.342056      0.342056       184.883       185.225    
  42  0.264945      -1.32823      -9.60474       9.60474       174.869       184.473    
  43  0.931660     -0.707875E-01 -0.511879      0.511879       193.650       194.162    
  44  0.273150      -1.29773      -9.38418       9.38418       192.832       202.217    
  45  0.773196     -0.257223      -1.86003       1.86003       193.304       195.164    
  46  0.936342     -0.657743E-01 -0.475628      0.475628       190.160       190.636    
  47  0.367272      -1.00165      -7.24317       7.24317       180.389       187.632    
  48  0.970907     -0.295243E-01 -0.213496      0.213496       189.414       189.628    
  49  0.722669     -0.324804      -2.34873       2.34873       192.832       195.181    
  50  0.247966      -1.39446      -10.0837       10.0837       189.576       199.660    
  51  0.730821     -0.313587      -2.26761       2.26761       191.913       194.181    
  52  0.379134     -0.969864      -7.01330       7.01330       192.846       199.859    
  53  0.326173      -1.12033      -8.10133       8.10133       181.080       189.181    
  54  0.555872     -0.587218      -4.24630       4.24630       187.470       191.717    
  55  0.600838     -0.509431      -3.68380       3.68380       174.838       178.522    
  56  0.714504     -0.336167      -2.43089       2.43089       197.960       200.391    
  57  0.190775      -1.65666      -11.9797       11.9797       192.832       204.812    
  58  0.206210      -1.57886      -11.4171       11.4171       192.177       203.594    
  59  0.855348     -0.156247      -1.12986       1.12986       199.184       200.314    
  60  0.886753     -0.120189     -0.869110      0.869110       193.212       194.081    
  61  0.391830     -0.936926      -6.77511       6.77511       183.837       190.612    
  62  0.986898     -0.131885E-01 -0.953690E-01  0.953690E-01   194.243       194.338    
  63  0.153388      -1.87479      -13.5570       13.5570       183.898       197.455    
  64  0.416027     -0.877006      -6.34181       6.34181       193.513       199.855    
  65  0.815763     -0.203631      -1.47250       1.47250       192.845       194.318    
  66  0.196403      -1.62759      -11.7694       11.7694       187.220       198.989    
  67  0.751119E-01  -2.58878      -18.7200       18.7200       191.517       210.237    
  68  0.297288      -1.21305      -8.77184       8.77184       204.512       213.284    
  69  0.984987     -0.151265E-01 -0.109383      0.109383       189.670       189.779    
  70  0.142264      -1.95007      -14.1014       14.1014       197.354       211.456    
  71  0.506200     -0.680824      -4.92319       4.92319       187.446       192.369    
  72  0.681243     -0.383837      -2.77561       2.77561       177.589       180.365    
loop,thermsimp(1:2)       49  0.614736E-01   15.3201    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316        225.46          0.84          1.11         25.34          0.19          0.05         27.54
Just calling func    0   0         27.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    317        173.51          0.84          1.11         25.01          0.17          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    173.51
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       49
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       50
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      316     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -33.9107       33.9107       166.873       200.783    
   2  0.902150     -0.102974     -0.744628      0.744628       174.838       175.582    
   3  0.375868     -0.978517      -7.07587       7.07587       178.392       185.468    
   4  0.136549E-01  -4.29366      -31.0484       31.0484       178.432       209.480    
   5  0.948329     -0.530533E-01 -0.383640      0.383640       177.589       177.973    
   6  0.489379E-01  -3.01720      -21.8180       21.8180       180.949       202.767    
   7  0.319400      -1.14131      -8.25306       8.25306       179.763       188.016    
   8  0.748008     -0.290342      -2.09952       2.09952       175.715       177.814    
   9  0.468015     -0.759255      -5.49033       5.49033       181.185       186.676    
  10  0.467420     -0.760527      -5.49953       5.49953       174.869       180.368    
  11  0.345085      -1.06396      -7.69375       7.69375       182.875       190.568    
  12  0.598981     -0.512526      -3.70618       3.70618       184.883       188.589    
  13  0.231496      -1.46319      -10.5806       10.5806       179.727       190.307    
  14  0.685496     -0.377613      -2.73060       2.73060       174.483       177.214    
  15  0.225803      -1.48809      -10.7607       10.7607       184.490       195.250    
  16  0.744991E-01  -2.59697      -18.7792       18.7792       186.584       205.363    
  17  0.436777     -0.828332      -5.98984       5.98984       180.221       186.211    
  18  0.241074      -1.42265      -10.2875       10.2875       180.389       190.676    
  19  0.728071     -0.317357      -2.29488       2.29488       183.092       185.387    
  20  0.228500      -1.47622      -10.6749       10.6749       184.706       195.381    
  21  0.423678     -0.858781      -6.21003       6.21003       181.080       187.290    
  22  0.812855     -0.207202      -1.49832       1.49832       189.414       190.913    
  23  0.810546     -0.210047      -1.51890       1.51890       189.670       191.189    
  24  0.113500      -2.17595      -15.7348       15.7348       187.149       202.884    
  25  0.197385      -1.62260      -11.7334       11.7334       175.068       186.801    
  26  0.101018      -2.29246      -16.5773       16.5773       183.837       200.415    
  27  0.857009E-01  -2.45689      -17.7663       17.7663       190.160       207.926    
  28  0.693668     -0.365762      -2.64490       2.64490       180.706       183.351    
  29  0.705918     -0.348256      -2.51831       2.51831       188.127       190.645    
  30  0.309793      -1.17185      -8.47390       8.47390       187.767       196.241    
  31  0.144843      -1.93210      -13.9714       13.9714       187.470       201.442    
  32  0.412916     -0.884511      -6.39609       6.39609       190.784       197.181    
  33  0.916661     -0.870180E-01 -0.629246      0.629246       188.964       189.594    
  34  0.933384E-01  -2.37152      -17.1490       17.1490       187.446       204.595    
  35  0.937330     -0.647200E-01 -0.468004      0.468004       185.115       185.583    
  36  0.958012     -0.428952E-01 -0.310184      0.310184       191.159       191.469    
  37  0.692877E-01  -2.66949      -19.3036       19.3036       192.261       211.565    
  38  0.228520E-01  -3.77872      -27.3247       27.3247       183.165       210.490    
  39  0.188135      -1.67060      -12.0804       12.0804       192.598       204.678    
  40  0.122595E-01  -4.40146      -31.8279       31.8279       186.821       218.649    
  41  0.776693     -0.252710      -1.82740       1.82740       191.810       193.637    
  42  0.571957     -0.558691      -4.04002       4.04002       193.212       197.252    
  43  0.313016      -1.16150      -8.39906       8.39906       193.650       202.049    
  44  0.512360     -0.668728      -4.83571       4.83571       191.913       196.749    
  45  0.874954     -0.133584     -0.965974      0.965974       192.845       193.811    
  46  0.617920     -0.481397      -3.48108       3.48108       194.243       197.724    
  47  0.529196     -0.636396      -4.60192       4.60192       190.223       194.825    
  48  0.389261E-02  -5.54867      -40.1236       40.1236       193.304       233.427    
  49  0.323386E-01  -3.43149      -24.8139       24.8139       192.832       217.646    
  50  0.900641     -0.104648     -0.756734      0.756734       184.391       185.148    
  51  0.872638     -0.136235     -0.985144      0.985144       184.056       185.041    
  52  0.965349     -0.352660E-01 -0.255016      0.255016       183.898       184.153    
  53  0.679490     -0.386413      -2.79423       2.79423       192.125       194.920    
  54  0.101129      -2.29136      -16.5693       16.5693       189.919       206.489    
  55  0.885746     -0.121326     -0.877330      0.877330       187.220       188.097    
  56  0.307763      -1.17843      -8.52145       8.52145       189.576       198.098    
  57  0.978164     -0.220781E-01 -0.159652      0.159652       193.513       193.673    
  58  0.678582     -0.387750      -2.80390       2.80390       192.846       195.650    
  59  0.573317     -0.556317      -4.02285       4.02285       199.184       203.207    
  60  0.541891     -0.612690      -4.43049       4.43049       197.960       202.390    
  61  0.110478      -2.20294      -15.9299       15.9299       183.292       199.222    
  62  0.125637      -2.07436      -15.0001       15.0001       191.012       206.012    
  63  0.580733     -0.543464      -3.92990       3.92990       192.832       196.762    
  64  0.261777      -1.34026      -9.69171       9.69171       181.754       191.446    
  65  0.500314     -0.692519      -5.00775       5.00775       192.177       197.185    
  66  0.810055     -0.210653      -1.52327       1.52327       192.832       194.356    
  67  0.548357     -0.600828      -4.34472       4.34472       191.801       196.145    
  68  0.260831      -1.34388      -9.71789       9.71789       193.694       203.412    
  69  0.276330      -1.28616      -9.30049       9.30049       192.832       202.133    
  70  0.637232     -0.450622      -3.25854       3.25854       191.517       194.776    
  71  0.324688      -1.12489      -8.13432       8.13432       197.354       205.489    
  72  0.157175      -1.85039      -13.3806       13.3806       173.514       186.895    
loop,thermsimp(1:2)       50   33.9107      0.744628    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318        176.14          0.84          1.11         25.11          0.14          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    319        185.37          0.84          1.11         25.15          0.04          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    176.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       50
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       51
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      318     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577     -0.734522      0.734522       174.838       175.572    
   2  0.808902     -0.212077      -1.53358       1.53358       174.483       176.017    
   3  0.762147     -0.271616      -1.96411       1.96411       175.715       177.679    
   4  0.287851      -1.24531      -9.00511       9.00511       177.589       186.594    
   5  0.212418      -1.54920      -11.2026       11.2026       174.869       186.071    
   6  0.380717     -0.965699      -6.98317       6.98317       180.706       187.690    
   7  0.877795     -0.130342     -0.942530      0.942530       183.898       184.841    
   8  0.836834     -0.178130      -1.28809       1.28809       184.056       185.344    
   9  0.435183     -0.831988      -6.01628       6.01628       184.391       190.407    
  10  0.900166     -0.105177     -0.760554      0.760554       183.092       183.852    
  11  0.175095      -1.74242      -12.5998       12.5998       178.392       190.992    
  12  0.322232      -1.13248      -8.18923       8.18923       185.115       193.304    
  13  0.706662     -0.347203      -2.51070       2.51070       180.221       182.732    
  14  0.494297     -0.704618      -5.09524       5.09524       181.185       186.281    
  15  0.324383      -1.12583      -8.14112       8.14112       175.068       183.209    
  16  0.777122     -0.252157      -1.82340       1.82340       173.514       175.338    
  17  0.499054E-01  -2.99763      -21.6765       21.6765       181.080       202.756    
  18  0.489193E-01  -3.01758      -21.8208       21.8208       179.763       201.584    
  19  0.480140     -0.733678      -5.30538       5.30538       187.220       192.525    
  20  0.914126     -0.897865E-01 -0.649265      0.649265       184.883       185.532    
  21  0.613008     -0.489378      -3.53879       3.53879       188.964       192.503    
  22  0.470573     -0.753804      -5.45092       5.45092       179.727       185.178    
  23  0.614279     -0.487307      -3.52382       3.52382       182.875       186.398    
  24  0.410529     -0.890308      -6.43800       6.43800       188.127       194.565    
  25  0.582759     -0.539981      -3.90472       3.90472       180.389       184.294    
  26  0.422753E-01  -3.16355      -22.8763       22.8763       189.414       212.291    
  27  0.717044     -0.332618      -2.40523       2.40523       189.670       192.075    
  28  0.420765     -0.865682      -6.25993       6.25993       181.754       188.014    
  29  0.801392     -0.221405      -1.60102       1.60102       191.159       192.760    
  30  0.426188     -0.852875      -6.16732       6.16732       191.810       197.977    
  31  0.338881      -1.08211      -7.82495       7.82495       193.513       201.338    
  32  0.398160     -0.920902      -6.65924       6.65924       192.845       199.505    
  33  0.938837     -0.631132E-01 -0.456385      0.456385       192.832       193.289    
  34  0.411860E-01  -3.18966      -23.0651       23.0651       191.517       214.582    
  35  0.180703      -1.71090      -12.3719       12.3719       190.223       202.595    
  36  0.617012     -0.482867      -3.49171       3.49171       192.125       195.617    
  37  0.788612     -0.237480      -1.71727       1.71727       184.490       186.207    
  38  0.381719     -0.963071      -6.96417       6.96417       184.706       191.670    
  39  0.376038     -0.978064      -7.07259       7.07259       192.846       199.919    
  40  0.105996      -2.24435      -16.2294       16.2294       191.801       208.030    
  41  0.769932E-01  -2.56404      -18.5411       18.5411       187.767       206.308    
  42  0.365987      -1.00516      -7.26851       7.26851       191.913       199.182    
  43  0.731763     -0.312298      -2.25829       2.25829       192.832       195.091    
  44  0.447137     -0.804891      -5.82034       5.82034       190.784       196.605    
  45  0.273519      -1.29638      -9.37443       9.37443       192.177       201.552    
  46  0.870614     -0.138556      -1.00193       1.00193       193.212       194.214    
  47  0.822463     -0.195452      -1.41335       1.41335       194.243       195.656    
  48  0.456061     -0.785129      -5.67743       5.67743       189.576       195.254    
  49  0.603947     -0.504269      -3.64648       3.64648       183.292       186.938    
  50  0.342037      -1.07284      -7.75790       7.75790       183.837       191.595    
  51  0.693527     -0.365965      -2.64637       2.64637       166.873       169.519    
  52  0.958323     -0.425703E-01 -0.307835      0.307835       187.470       187.778    
  53  0.587360     -0.532117      -3.84785       3.84785       193.650       197.498    
  54  0.364787      -1.00844      -7.29226       7.29226       192.832       200.125    
  55  0.878785     -0.129215     -0.934382      0.934382       197.960       198.894    
  56  0.273053      -1.29809      -9.38676       9.38676       180.949       190.335    
  57  0.896174     -0.109620     -0.792688      0.792688       187.149       187.942    
  58  0.239994      -1.42714      -10.3199       10.3199       199.184       209.504    
  59  0.595505E-01  -2.82093      -20.3988       20.3988       193.694       214.092    
  60  0.353403      -1.04015      -7.52152       7.52152       187.446       194.968    
  61  0.729282     -0.315695      -2.28286       2.28286       192.598       194.881    
  62  0.231928      -1.46133      -10.5672       10.5672       186.584       197.151    
  63  0.107599      -2.22934      -16.1209       16.1209       197.354       213.475    
  64  0.641905     -0.443315      -3.20570       3.20570       191.012       194.217    
  65  0.701312     -0.354803      -2.56565       2.56565       189.919       192.485    
  66  0.245029      -1.40638      -10.1698       10.1698       190.160       200.330    
  67  0.223204      -1.49967      -10.8444       10.8444       178.432       189.276    
  68  0.335163      -1.09314      -7.90472       7.90472       183.165       191.070    
  69  0.921199     -0.820796E-01 -0.593535      0.593535       192.261       192.855    
  70  0.395288     -0.928141      -6.71158       6.71158       192.832       199.544    
  71  0.956072     -0.449224E-01 -0.324844      0.324844       186.821       187.146    
  72  0.734146     -0.309048      -2.23479       2.23479       176.135       178.370    
loop,thermsimp(1:2)       51  0.734522       1.53358    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320        172.97          0.83          1.10         25.13          0.08          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       51
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       52
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      319     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -6.25432       6.25432       166.873       173.127    
   2  0.315135      -1.15476      -8.35028       8.35028       173.514       181.865    
   3  0.696708     -0.361389      -2.61328       2.61328       174.838       177.451    
   4  0.922116     -0.810842E-01 -0.586337      0.586337       174.483       175.070    
   5  0.908133     -0.963648E-01 -0.696834      0.696834       175.715       176.412    
   6  0.174132      -1.74794      -12.6397       12.6397       176.135       188.775    
   7  0.490629     -0.712068      -5.14911       5.14911       180.221       185.371    
   8  0.382604     -0.960755      -6.94742       6.94742       175.068       182.015    
   9  0.985159     -0.149527E-01 -0.108126      0.108126       183.092       183.200    
  10  0.182634      -1.70027      -12.2950       12.2950       180.389       192.684    
  11  0.554568     -0.589565      -4.26327       4.26327       183.898       188.162    
  12  0.999791     -0.209153E-03 -0.151243E-02  0.151243E-02   179.727       179.728    
  13  0.284621      -1.25660      -9.08673       9.08673       184.056       193.143    
  14  0.920706E-01  -2.38520      -17.2479       17.2479       184.883       202.131    
  15  0.243911      -1.41095      -10.2029       10.2029       174.869       185.071    
  16  0.866829     -0.142914      -1.03344       1.03344       184.490       185.523    
  17  0.640039     -0.446225      -3.22675       3.22675       181.185       184.412    
  18  0.737488E-01  -2.60709      -18.8524       18.8524       182.875       201.727    
  19  0.511916     -0.669594      -4.84198       4.84198       177.589       182.431    
  20  0.870220     -0.139009      -1.00521       1.00521       183.292       184.297    
  21  0.594690     -0.519714      -3.75816       3.75816       186.821       190.579    
  22  0.659508     -0.416262      -3.01008       3.01008       180.706       183.716    
  23  0.702023     -0.353789      -2.55833       2.55833       187.470       190.029    
  24  0.178121      -1.72529      -12.4760       12.4760       187.149       199.625    
  25  0.622271     -0.474379      -3.43033       3.43033       181.754       185.185    
  26  0.877027     -0.131217     -0.948859      0.948859       178.432       179.381    
  27  0.206753      -1.57623      -11.3981       11.3981       180.949       192.347    
  28  0.927381     -0.753912E-01 -0.545170      0.545170       184.391       184.936    
  29  0.610274     -0.493848      -3.57112       3.57112       178.392       181.963    
  30  0.453676     -0.790373      -5.71535       5.71535       183.165       188.881    
  31  0.203335      -1.59290      -11.5186       11.5186       183.837       195.356    
  32  0.558786     -0.581989      -4.20848       4.20848       184.706       188.914    
  33  0.685013     -0.378317      -2.73569       2.73569       189.670       192.405    
  34  0.753574     -0.282929      -2.04592       2.04592       189.919       191.965    
  35  0.736990E-01  -2.60777      -18.8573       18.8573       188.964       207.822    
  36  0.719848     -0.328716      -2.37701       2.37701       187.220       189.597    
  37  0.177345E-01  -4.03224      -29.1580       29.1580       191.159       220.317    
  38  0.277334E-01  -3.58512      -25.9248       25.9248       192.261       218.186    
  39  0.228604      -1.47576      -10.6716       10.6716       192.832       203.504    
  40  0.874609     -0.133979     -0.968828      0.968828       185.115       186.084    
  41  0.875699     -0.132733     -0.959821      0.959821       193.212       194.171    
  42  0.540874     -0.614569      -4.44408       4.44408       191.012       195.456    
  43  0.343108E-01  -3.37230      -24.3858       24.3858       188.127       212.512    
  44  0.982551     -0.176027E-01 -0.127289      0.127289       192.598       192.725    
  45  0.201823      -1.60037      -11.5726       11.5726       187.446       199.019    
  46  0.116838      -2.14697      -15.5252       15.5252       192.832       208.358    
  47  0.520586     -0.652800      -4.72053       4.72053       189.576       194.297    
  48  0.515528     -0.662563      -4.79114       4.79114       192.125       196.917    
  49  0.814407     -0.205295      -1.48453       1.48453       194.243       195.728    
  50  0.436930     -0.827981      -5.98731       5.98731       190.784       196.772    
  51  0.802441     -0.220097      -1.59156       1.59156       186.584       188.176    
  52  0.366662      -1.00331      -7.25517       7.25517       193.650       200.905    
  53  0.915349     -0.884494E-01 -0.639596      0.639596       191.810       192.449    
  54  0.619345     -0.479093      -3.46443       3.46443       197.960       201.424    
  55  0.984856     -0.152594E-01 -0.110344      0.110344       191.913       192.024    
  56  0.594834     -0.519472      -3.75642       3.75642       192.845       196.602    
  57  0.295281      -1.21983      -8.82084       8.82084       192.832       201.653    
  58  0.363721      -1.01137      -7.31341       7.31341       192.846       200.160    
  59  0.113237      -2.17827      -15.7515       15.7515       192.832       208.584    
  60  0.684322     -0.379327      -2.74299       2.74299       190.160       192.903    
  61  0.172853E-01  -4.05790      -29.3435       29.3435       193.513       222.857    
  62  0.910904     -0.933174E-01 -0.674798      0.674798       192.177       192.852    
  63  0.792218     -0.232919      -1.68428       1.68428       179.763       181.447    
  64  0.644894E-02  -5.04384      -36.4731       36.4731       190.223       226.696    
  65  0.674921     -0.393160      -2.84303       2.84303       181.080       183.923    
  66  0.713821     -0.337122      -2.43780       2.43780       187.767       190.205    
  67  0.122871      -2.09662      -15.1611       15.1611       191.801       206.962    
  68  0.809527     -0.211305      -1.52799       1.52799       199.184       200.712    
  69  0.266630      -1.32189      -9.55890       9.55890       189.414       198.973    
  70  0.457713     -0.781513      -5.65129       5.65129       197.354       203.006    
  71  0.510631     -0.672109      -4.86016       4.86016       193.694       198.554    
  72  0.512413     -0.668624      -4.83496       4.83496       172.968       177.803    
loop,thermsimp(1:2)       52   6.25432       8.35028    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321        174.09          0.85          1.11         25.07          0.16          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    322        173.03          0.84          1.12         25.06          0.11          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    174.09       0.9683     -1.399      1.869     -102.6     0.9274    
                      0.2970      1.794     -99.70      3.635     0.2218    
                       2.117     -1.551      1.977      0.000     -40.00    
                      -1.588      0.000      0.000      0.000     -1.221    

                      -2.500     0.3021E+05 0.3130E+05  0.000      0.000    
                     -0.5672     -6.103     -4.445     -7.704      4.319    
                      -14.57     -3.877      24.42      0.000      1463.    

                       2766.      8519.      803.2     0.4945E+05  3900.    
                       5472.     0.1814E-01 0.4284E-02  0.000     0.4466E-01
                      0.5633E-01 0.2587E-01 0.6124E-02 0.1849E-01 0.4466E-01

                     -0.1255    -0.9273      0.000    -0.3255E-01 0.2556E-01
                       0.000    -0.2767E-01-0.3168E-01-0.7457E-02 0.3273E-02
                      0.4466E-01 0.1424E-01-0.1579     -1.084      0.000    

                     -0.2659E-01-0.3849    -0.5697    -0.4964    -0.8897E-01
                      0.1506      8.946      8.789     -5006.     -4.000    
                     -0.3287    -0.7301      8.999      8.782     -5744.    

                      -4.000     0.2293    -0.7489      8.927      8.834    
                      -3331.     -7.000    -0.2934    -0.9089      8.970    
                       8.807     -5750.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    173.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       52
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       53
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      321     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -24.4332       24.4332       166.873       191.306    
   2  0.714674     -0.335928      -2.42917       2.42917       174.483       176.913    
   3  0.977792     -0.224587E-01 -0.162404      0.162404       175.715       175.877    
   4  0.771231     -0.259767      -1.87843       1.87843       174.838       176.716    
   5  0.265148      -1.32747      -9.59921       9.59921       172.968       182.567    
   6  0.559491     -0.580728      -4.19937       4.19937       178.432       182.631    
   7  0.934824E-01  -2.36998      -17.1378       17.1378       179.727       196.865    
   8  0.928182     -0.745278E-01 -0.538926      0.538926       179.763       180.302    
   9  0.464905     -0.765922      -5.53854       5.53854       173.514       179.053    
  10  0.871919     -0.137059     -0.991099      0.991099       178.392       179.383    
  11  0.982233     -0.179265E-01 -0.129630      0.129630       175.068       175.198    
  12  0.426376     -0.852433      -6.16412       6.16412       177.589       183.753    
  13  0.471128E-01  -3.05521      -22.0929       22.0929       183.092       205.185    
  14  0.686439     -0.376238      -2.72066       2.72066       180.706       183.427    
  15  0.117826      -2.13855      -15.4643       15.4643       181.080       196.544    
  16  0.756878E-01  -2.58114      -18.6648       18.6648       183.292       201.956    
  17  0.196211      -1.62856      -11.7765       11.7765       181.185       192.962    
  18  0.431930     -0.839491      -6.07054       6.07054       184.391       190.462    
  19  0.707794     -0.345602      -2.49912       2.49912       174.869       177.368    
  20  0.174358E-01  -4.04923      -29.2809       29.2809       181.754       211.035    
  21  0.267976      -1.31686      -9.52247       9.52247       180.221       189.744    
  22  0.793866     -0.230841      -1.66926       1.66926       184.490       186.159    
  23  0.135848      -1.99622      -14.4351       14.4351       185.115       199.550    
  24  0.663958     -0.409536      -2.96144       2.96144       183.898       186.860    
  25  0.281101      -1.26904      -9.17671       9.17671       186.584       195.761    
  26  0.606466     -0.500106      -3.61637       3.61637       176.135       179.752    
  27  0.940056     -0.618158E-01 -0.447004      0.447004       183.165       183.612    
  28  0.124106      -2.08662      -15.0888       15.0888       184.706       199.795    
  29  0.205090      -1.58431      -11.4565       11.4565       187.220       198.676    
  30  0.852960     -0.159043      -1.15007       1.15007       187.470       188.620    
  31  0.241701      -1.42005      -10.2687       10.2687       187.767       198.036    
  32  0.744368     -0.295220      -2.13480       2.13480       186.821       188.956    
  33  0.279909      -1.27329      -9.20744       9.20744       189.919       199.127    
  34  0.142971      -1.94511      -14.0655       14.0655       191.913       205.979    
  35  0.367233      -1.00176      -7.24393       7.24393       180.949       188.193    
  36  0.839044     -0.175493      -1.26902       1.26902       189.670       190.939    
  37  0.762369     -0.271325      -1.96201       1.96201       191.810       193.772    
  38  0.414704     -0.880189      -6.36484       6.36484       180.389       186.754    
  39  0.294445      -1.22266      -8.84134       8.84134       192.598       201.439    
  40  0.296874      -1.21445      -8.78192       8.78192       192.177       200.959    
  41  0.834777     -0.180590      -1.30589       1.30589       190.160       191.466    
  42  0.399354     -0.917907      -6.63758       6.63758       184.056       190.693    
  43  0.948666     -0.526981E-01 -0.381071      0.381071       193.212       193.593    
  44  0.306553E-01  -3.48495      -25.2004       25.2004       189.576       214.777    
  45  0.768324E-01  -2.56613      -18.5562       18.5562       183.837       202.394    
  46  0.723813     -0.323222      -2.33729       2.33729       191.012       193.349    
  47  0.912222     -0.918720E-01 -0.664346      0.664346       194.243       194.907    
  48  0.846322     -0.166855      -1.20656       1.20656       192.845       194.052    
  49  0.704090     -0.350850      -2.53707       2.53707       190.784       193.322    
  50  0.443839     -0.812294      -5.87387       5.87387       192.125       197.999    
  51  0.790462     -0.235137      -1.70033       1.70033       193.694       195.394    
  52  0.134239      -2.00813      -14.5212       14.5212       189.414       203.936    
  53  0.720618     -0.327646      -2.36928       2.36928       187.446       189.815    
  54  0.489652     -0.714061      -5.16353       5.16353       187.149       192.313    
  55  0.493891E-01  -3.00802      -21.7517       21.7517       192.846       214.598    
  56  0.524875     -0.644595      -4.66121       4.66121       199.184       203.845    
  57  0.919627     -0.837868E-01 -0.605880      0.605880       193.650       194.256    
  58  0.372709     -0.986956      -7.13689       7.13689       197.960       205.097    
  59  0.121203      -2.11029      -15.2599       15.2599       192.832       208.092    
  60  0.195183      -1.63382      -11.8145       11.8145       182.875       194.689    
  61  0.325168      -1.12341      -8.12364       8.12364       184.883       193.006    
  62  0.248863      -1.39085      -10.0576       10.0576       197.354       207.412    
  63  0.910643     -0.936046E-01 -0.676875      0.676875       192.832       193.509    
  64  0.131372E-01  -4.33230      -31.3278       31.3278       191.801       223.128    
  65  0.308708      -1.17536      -8.49927       8.49927       188.964       197.464    
  66  0.863163     -0.147151      -1.06408       1.06408       192.832       193.896    
  67  0.437001     -0.827819      -5.98614       5.98614       192.832       198.818    
  68  0.933437     -0.688822E-01 -0.498102      0.498102       188.127       188.625    
  69  0.595007     -0.519181      -3.75431       3.75431       192.261       196.016    
  70  0.184309      -1.69114      -12.2290       12.2290       191.159       203.388    
  71  0.340956      -1.07600      -7.78080       7.78080       193.513       201.294    
  72  0.582092     -0.541127      -3.91300       3.91300       173.028       176.941    
loop,thermsimp(1:2)       53   24.4332       2.42917    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323        173.64          0.84          1.11         25.34          0.06          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    324        178.45          0.84          1.11         25.10          0.11          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    173.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       53
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       54
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      323     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -3.51533       3.51533       175.068       178.583    
   2  0.438442     -0.824528      -5.96234       5.96234       175.715       181.677    
   3  0.666371     -0.405908      -2.93521       2.93521       174.838       177.773    
   4  0.419797     -0.867984      -6.27657       6.27657       174.483       180.760    
   5  0.662493     -0.411746      -2.97742       2.97742       173.028       176.005    
   6  0.261021      -1.34315      -9.71263       9.71263       174.869       184.581    
   7  0.451731     -0.794667      -5.74641       5.74641       173.514       179.261    
   8  0.858047     -0.153096      -1.10707       1.10707       178.392       179.499    
   9  0.678039     -0.388550      -2.80969       2.80969       176.135       178.945    
  10  0.257304      -1.35750      -9.81634       9.81634       179.763       189.579    
  11  0.379774     -0.968178      -7.00110       7.00110       172.968       179.969    
  12  0.200314      -1.60787      -11.6269       11.6269       178.432       190.059    
  13  0.702955E-01  -2.65505      -19.1992       19.1992       180.706       199.906    
  14  0.846007     -0.167228      -1.20926       1.20926       183.165       184.375    
  15  0.692217     -0.367856      -2.66005       2.66005       177.589       180.249    
  16  0.830541     -0.185678      -1.34268       1.34268       184.490       185.832    
  17  0.162133E-02  -6.42451      -46.4570       46.4570       180.389       226.846    
  18  0.829216     -0.187275      -1.35422       1.35422       183.898       185.253    
  19  0.464918     -0.765894      -5.53835       5.53835       180.949       186.487    
  20  0.204157      -1.58887      -11.4894       11.4894       187.470       198.960    
  21  0.203429      -1.59244      -11.5153       11.5153       188.127       199.642    
  22  0.403935     -0.906500      -6.55510       6.55510       186.821       193.376    
  23  0.508037     -0.677201      -4.89698       4.89698       180.221       185.118    
  24  0.337702      -1.08559      -7.85013       7.85013       187.446       195.296    
  25  0.375672     -0.979039      -7.07964       7.07964       184.391       191.471    
  26  0.218755      -1.51980      -10.9900       10.9900       184.056       195.046    
  27  0.803422     -0.218876      -1.58274       1.58274       189.670       191.252    
  28  0.324101      -1.12670      -8.14742       8.14742       166.873       175.020    
  29  0.804001     -0.218155      -1.57752       1.57752       190.160       191.738    
  30  0.727676     -0.317899      -2.29880       2.29880       187.149       189.448    
  31  0.769479     -0.262042      -1.89488       1.89488       181.185       183.080    
  32  0.632293     -0.458402      -3.31480       3.31480       184.883       188.197    
  33  0.300459      -1.20244      -8.69512       8.69512       190.784       199.480    
  34  0.567362     -0.566759      -4.09835       4.09835       191.012       195.110    
  35  0.803345     -0.218971      -1.58343       1.58343       192.832       194.416    
  36  0.764706     -0.268264      -1.93988       1.93988       193.212       195.152    
  37  0.159444      -1.83606      -13.2770       13.2770       191.810       205.087    
  38  0.951670     -0.495367E-01 -0.358210      0.358210       192.832       193.191    
  39  0.769198     -0.262407      -1.89752       1.89752       192.845       194.743    
  40  0.916532     -0.871588E-01 -0.630264      0.630264       193.650       194.280    
  41  0.146117E-01  -4.22593      -30.5586       30.5586       182.875       213.433    
  42  0.196164      -1.62880      -11.7782       11.7782       194.243       206.021    
  43  0.399482     -0.917586      -6.63526       6.63526       193.694       200.329    
  44  0.646732     -0.435823      -3.15153       3.15153       186.584       189.736    
  45  0.207790      -1.57122      -11.3619       11.3619       192.261       203.623    
  46  0.276388      -1.28595      -9.29897       9.29897       181.080       190.379    
  47  0.410494     -0.890394      -6.43863       6.43863       179.727       186.165    
  48  0.437747     -0.826115      -5.97381       5.97381       188.964       194.938    
  49  0.414886     -0.879752      -6.36167       6.36167       192.125       198.487    
  50  0.453890     -0.789901      -5.71194       5.71194       187.767       193.479    
  51  0.141383      -1.95628      -14.1463       14.1463       187.220       201.366    
  52  0.264375      -1.33039      -9.62032       9.62032       192.832       202.453    
  53  0.598599     -0.513163      -3.71079       3.71079       189.919       193.630    
  54  0.716868     -0.332864      -2.40701       2.40701       185.115       187.522    
  55  0.547773     -0.601894      -4.35242       4.35242       184.706       189.058    
  56  0.920744     -0.825729E-01 -0.597102      0.597102       192.177       192.774    
  57  0.394656     -0.929742      -6.72316       6.72316       193.513       200.236    
  58  0.439395     -0.822357      -5.94664       5.94664       192.598       198.545    
  59  0.890216     -0.116291     -0.840925      0.840925       183.292       184.133    
  60  0.693208     -0.366425      -2.64970       2.64970       183.837       186.487    
  61  0.747783     -0.290642      -2.10170       2.10170       191.159       193.260    
  62  0.408813     -0.894498      -6.46831       6.46831       199.184       205.652    
  63  0.175963E-03  -8.64523      -62.5155       62.5155       189.414       251.930    
  64  0.715035     -0.335424      -2.42552       2.42552       197.960       200.385    
  65  0.895535     -0.110334     -0.797851      0.797851       183.092       183.890    
  66  0.332554      -1.10095      -7.96123       7.96123       191.913       199.875    
  67  0.594595     -0.519874      -3.75932       3.75932       197.354       201.114    
  68  0.883454     -0.123916     -0.896066      0.896066       192.832       193.728    
  69  0.727087     -0.318709      -2.30465       2.30465       181.754       184.059    
  70  0.760468     -0.273821      -1.98006       1.98006       192.846       194.826    
  71  0.915560     -0.882188E-01 -0.637929      0.637929       189.576       190.214    
  72  0.479318     -0.735391      -5.31777       5.31777       173.636       178.954    
loop,thermsimp(1:2)       54   3.51533       5.96234    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325        172.60          0.84          1.11         25.11          0.12          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    326        168.27          0.84          1.11         25.13          0.04          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    168.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       54
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       55
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      325     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -3.38595       3.38595       166.873       170.259    
   2  0.909442     -0.949244E-01 -0.686418      0.686418       173.028       173.714    
   3  0.449837     -0.798870      -5.77680       5.77680       174.838       180.615    
   4  0.761598     -0.272336      -1.96932       1.96932       175.068       177.037    
   5  0.706800     -0.347007      -2.50928       2.50928       176.135       178.645    
   6  0.214343      -1.54018      -11.1373       11.1373       173.636       184.774    
   7  0.855661     -0.155881      -1.12721       1.12721       173.514       174.642    
   8  0.432924E-01  -3.13978      -22.7044       22.7044       178.392       201.096    
   9  0.902784     -0.102271     -0.739547      0.739547       172.968       173.707    
  10  0.706965     -0.346774      -2.50760       2.50760       177.589       180.097    
  11  0.826667     -0.190354      -1.37649       1.37649       174.483       175.860    
  12  0.824436     -0.193055      -1.39602       1.39602       175.715       177.111    
  13  0.442772     -0.814700      -5.89127       5.89127       181.185       187.077    
  14  0.416355     -0.876217      -6.33611       6.33611       183.092       189.428    
  15  0.268464      -1.31504      -9.50932       9.50932       181.754       191.264    
  16  0.779742     -0.248792      -1.79907       1.79907       183.292       185.091    
  17  0.406799E-01  -3.20202      -23.1545       23.1545       183.165       206.320    
  18  0.975397     -0.249106E-01 -0.180134      0.180134       174.869       175.049    
  19  0.425150E-01  -3.15790      -22.8354       22.8354       180.221       203.057    
  20  0.302481      -1.19574      -8.64662       8.64662       183.898       192.545    
  21  0.732033     -0.311930      -2.25563       2.25563       184.490       186.745    
  22  0.774561     -0.255459      -1.84728       1.84728       179.727       181.574    
  23  0.899897     -0.105475     -0.762711      0.762711       180.949       181.711    
  24  0.549624     -0.598520      -4.32803       4.32803       183.837       188.165    
  25  0.143543      -1.94112      -14.0367       14.0367       185.115       199.152    
  26  0.229055      -1.47379      -10.6573       10.6573       184.883       195.540    
  27  0.334206      -1.09600      -7.92539       7.92539       184.706       192.631    
  28  0.301620      -1.19859      -8.66724       8.66724       187.149       195.817    
  29  0.856030     -0.155449      -1.12409       1.12409       179.763       180.887    
  30  0.978878     -0.213482E-01 -0.154373      0.154373       186.584       186.738    
  31  0.890790E-01  -2.41823      -17.4867       17.4867       178.432       195.919    
  32  0.275076      -1.29071      -9.33337       9.33337       189.576       198.910    
  33  0.506865     -0.679511      -4.91369       4.91369       181.080       185.993    
  34  0.628553     -0.464334      -3.35770       3.35770       189.670       193.027    
  35  0.787972     -0.238293      -1.72315       1.72315       184.391       186.114    
  36  0.746168     -0.292804      -2.11733       2.11733       190.160       192.277    
  37  0.116954      -2.14598      -15.5180       15.5180       192.177       207.695    
  38  0.245368      -1.40500      -10.1598       10.1598       192.832       202.992    
  39  0.873952     -0.134729     -0.974256      0.974256       191.159       192.133    
  40  0.850596     -0.161818      -1.17014       1.17014       186.821       187.991    
  41  0.455763     -0.785783      -5.68216       5.68216       187.767       193.449    
  42  0.984333     -0.157910E-01 -0.114188      0.114188       189.919       190.033    
  43  0.956700     -0.442655E-01 -0.320093      0.320093       192.832       193.152    
  44  0.186161      -1.68114      -12.1567       12.1567       193.650       205.807    
  45  0.791379     -0.233979      -1.69195       1.69195       192.832       194.524    
  46  0.262937      -1.33584      -9.65975       9.65975       192.845       202.505    
  47  0.115228E-01  -4.46342      -32.2760       32.2760       192.846       225.122    
  48  0.324912      -1.12420      -8.12933       8.12933       188.964       197.094    
  49  0.164288      -1.80613      -13.0605       13.0605       184.056       197.116    
  50  0.334193E-02  -5.70121      -41.2266       41.2266       191.012       232.238    
  51  0.189130      -1.66532      -12.0423       12.0423       193.212       205.254    
  52  0.157956      -1.84544      -13.3448       13.3448       187.446       200.791    
  53  0.414399     -0.880925      -6.37016       6.37016       192.125       198.496    
  54  0.445375     -0.808838      -5.84888       5.84888       192.598       198.447    
  55  0.674924     -0.393155      -2.84299       2.84299       187.470       190.313    
  56  0.204431      -1.58752      -11.4797       11.4797       190.784       202.264    
  57  0.741769     -0.298718      -2.16009       2.16009       188.127       190.287    
  58  0.662845     -0.411215      -2.97358       2.97358       191.913       194.887    
  59  0.716249     -0.333728      -2.41326       2.41326       180.706       183.120    
  60  0.503649     -0.685876      -4.95972       4.95972       193.513       198.473    
  61  0.525560     -0.643292      -4.65178       4.65178       193.694       198.345    
  62  0.981258     -0.189199E-01 -0.136814      0.136814       197.960       198.097    
  63  0.892133     -0.114140     -0.825373      0.825373       197.354       198.180    
  64  0.239527E-01  -3.73167      -26.9845       26.9845       187.220       214.204    
  65  0.819895E-01  -2.50116      -18.0864       18.0864       192.832       210.919    
  66  0.567274     -0.566913      -4.09947       4.09947       192.261       196.361    
  67  0.543991     -0.608823      -4.40253       4.40253       191.810       196.212    
  68  0.962374     -0.383523E-01 -0.277334      0.277334       199.184       199.461    
  69  0.514511     -0.664538      -4.80542       4.80542       194.243       199.049    
  70  0.845541     -0.167779      -1.21325       1.21325       182.875       184.088    
  71  0.674893     -0.393201      -2.84332       2.84332       180.389       183.232    
  72  0.210589      -1.55785      -11.2651       11.2651       168.270       179.535    
loop,thermsimp(1:2)       55   3.38595      0.686418    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327        179.67          0.84          1.11         25.10          0.16          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    328        179.87          0.84          1.11         25.05          0.16          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    179.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       55
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       56
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      327     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -10.1459       10.1459       166.873       177.019    
   2  0.963480     -0.372033E-01 -0.269025      0.269025       172.968       173.237    
   3  0.633143     -0.457059      -3.30509       3.30509       173.028       176.333    
   4  0.939850E-02  -4.66721      -33.7496       33.7496       173.514       207.264    
   5  0.796978     -0.226928      -1.64097       1.64097       174.869       176.510    
   6  0.229125      -1.47349      -10.6551       10.6551       174.483       185.139    
   7  0.926958     -0.758467E-01 -0.548464      0.548464       175.068       175.617    
   8  0.687512     -0.374676      -2.70936       2.70936       175.715       178.424    
   9  0.695030     -0.363800      -2.63071       2.63071       176.135       178.766    
  10  0.900736     -0.104543     -0.755970      0.755970       168.270       169.026    
  11  0.867179     -0.142510      -1.03052       1.03052       177.589       178.620    
  12  0.879271     -0.128662     -0.930381      0.930381       174.838       175.768    
  13  0.197557      -1.62173      -11.7271       11.7271       179.763       191.490    
  14  0.790701     -0.234835      -1.69814       1.69814       179.727       181.425    
  15  0.807456     -0.213867      -1.54652       1.54652       180.949       182.495    
  16  0.688117     -0.373796      -2.70300       2.70300       180.706       183.409    
  17  0.227000      -1.48280      -10.7225       10.7225       180.389       191.111    
  18  0.374715     -0.981589      -7.09808       7.09808       182.875       189.973    
  19  0.176077      -1.73683      -12.5594       12.5594       173.636       186.196    
  20  0.446126E-01  -3.10974      -22.4872       22.4872       183.292       205.779    
  21  0.997763E-01  -2.30482      -16.6667       16.6667       181.080       197.746    
  22  0.142978E-01  -4.24765      -30.7157       30.7157       184.391       215.107    
  23  0.652216     -0.427379      -3.09047       3.09047       186.584       189.674    
  24  0.909797     -0.945339E-01 -0.683595      0.683595       184.490       185.173    
  25  0.145015      -1.93092      -13.9629       13.9629       181.185       195.148    
  26  0.189723      -1.66219      -12.0197       12.0197       186.821       198.841    
  27  0.260997      -1.34324      -9.71329       9.71329       183.837       193.551    
  28  0.167755      -1.78525      -12.9095       12.9095       183.092       196.001    
  29  0.148939      -1.90422      -13.7698       13.7698       189.919       203.689    
  30  0.209474      -1.56315      -11.3035       11.3035       188.127       199.430    
  31  0.594522     -0.519998      -3.76021       3.76021       187.470       191.231    
  32  0.401703     -0.912043      -6.59517       6.59517       181.754       188.350    
  33  0.306469      -1.18264      -8.55192       8.55192       191.159       199.711    
  34  0.879335     -0.128589     -0.929855      0.929855       190.160       191.090    
  35  0.920707     -0.826134E-01 -0.597395      0.597395       183.898       184.496    
  36  0.215616      -1.53425      -11.0945       11.0945       184.706       195.800    
  37  0.821708     -0.196370      -1.42000       1.42000       189.670       191.090    
  38  0.935240     -0.669517E-01 -0.484142      0.484142       192.832       193.316    
  39  0.691932     -0.368268      -2.66302       2.66302       187.767       190.430    
  40  0.493152     -0.706938      -5.11202       5.11202       192.832       197.944    
  41  0.362160      -1.01567      -7.34451       7.34451       191.913       199.258    
  42  0.636318     -0.452056      -3.26891       3.26891       184.883       188.152    
  43  0.178369      -1.72390      -12.4659       12.4659       187.149       199.615    
  44  0.987372     -0.127089E-01 -0.919006E-01  0.919006E-01   178.432       178.524    
  45  0.557690     -0.583953      -4.22269       4.22269       191.810       196.032    
  46  0.434391     -0.833811      -6.02947       6.02947       192.261       198.291    
  47  0.759572     -0.275001      -1.98859       1.98859       188.964       190.953    
  48  0.578559     -0.547214      -3.95702       3.95702       184.056       188.013    
  49  0.262392      -1.33792      -9.67475       9.67475       197.960       207.635    
  50  0.615619     -0.485127      -3.50805       3.50805       197.354       200.862    
  51  0.580502     -0.543861      -3.93278       3.93278       193.694       197.626    
  52  0.434749     -0.832986      -6.02350       6.02350       192.598       198.621    
  53  0.741569     -0.298987      -2.16204       2.16204       193.513       195.675    
  54  0.207475      -1.57274      -11.3728       11.3728       192.125       203.498    
  55  0.610742     -0.493081      -3.56557       3.56557       189.576       193.142    
  56  0.746759     -0.292013      -2.11161       2.11161       194.243       196.355    
  57  0.846394     -0.166771      -1.20595       1.20595       185.115       186.321    
  58  0.114011      -2.17146      -15.7023       15.7023       199.184       214.886    
  59  0.148375      -1.90801      -13.7972       13.7972       187.446       201.243    
  60  0.610037     -0.494236      -3.57392       3.57392       178.392       181.966    
  61  0.104069      -2.26270      -16.3621       16.3621       190.784       207.147    
  62  0.570721     -0.560855      -4.05566       4.05566       192.845       196.901    
  63  0.154528      -1.86738      -13.5034       13.5034       192.832       206.336    
  64  0.365341      -1.00692      -7.28127       7.28127       180.221       187.503    
  65  0.856377     -0.155044      -1.12116       1.12116       193.212       194.333    
  66  0.758370     -0.276584      -2.00004       2.00004       193.650       195.650    
  67  0.641541     -0.443881      -3.20980       3.20980       183.165       186.375    
  68  0.744629E-01  -2.59745      -18.7827       18.7827       192.177       210.960    
  69  0.186851      -1.67744      -12.1299       12.1299       192.832       204.962    
  70  0.431508     -0.840469      -6.07761       6.07761       187.220       193.297    
  71  0.622787     -0.473551      -3.42434       3.42434       192.846       196.270    
  72  0.308057      -1.17747      -8.51455       8.51455       179.665       188.180    
loop,thermsimp(1:2)       56   10.1459      0.269025    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329        188.55          0.84          1.11         25.17          0.06          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       56
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       57
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      328     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -8.61276       8.61276       168.270       176.883    
   2  0.729962     -0.314762      -2.27611       2.27611       172.968       175.244    
   3  0.788140     -0.238080      -1.72161       1.72161       175.068       176.790    
   4  0.718031     -0.331242      -2.39528       2.39528       174.838       177.233    
   5  0.603575     -0.504885      -3.65093       3.65093       173.028       176.679    
   6  0.287757      -1.24564      -9.00748       9.00748       174.869       183.876    
   7  0.690986     -0.369635      -2.67291       2.67291       166.873       169.546    
   8  0.976315     -0.239695E-01 -0.173329      0.173329       175.715       175.888    
   9  0.983892     -0.162393E-01 -0.117430      0.117430       178.432       178.549    
  10  0.858769     -0.152255      -1.10099       1.10099       177.589       178.690    
  11  0.968889     -0.316048E-01 -0.228541      0.228541       176.135       176.364    
  12  0.364921      -1.00807      -7.28960       7.28960       179.727       187.016    
  13  0.540930     -0.614466      -4.44333       4.44333       178.392       182.835    
  14  0.812278E-01  -2.51050      -18.1539       18.1539       180.949       199.103    
  15  0.919841     -0.835539E-01 -0.604196      0.604196       180.706       181.311    
  16  0.275462      -1.28930      -9.32323       9.32323       183.898       193.222    
  17  0.704362     -0.350463      -2.53428       2.53428       174.483       177.018    
  18  0.896809     -0.108913     -0.787572      0.787572       184.490       185.277    
  19  0.166873      -1.79052      -12.9477       12.9477       173.636       186.584    
  20  0.927791E-02  -4.68012      -33.8429       33.8429       185.115       218.958    
  21  0.906733     -0.979074E-01 -0.707989      0.707989       183.165       183.873    
  22  0.575421     -0.552654      -3.99636       3.99636       180.221       184.218    
  23  0.975069     -0.252469E-01 -0.182566      0.182566       184.056       184.238    
  24  0.610094     -0.494143      -3.57325       3.57325       184.883       188.456    
  25  0.823028     -0.194765      -1.40838       1.40838       179.665       181.073    
  26  0.709022     -0.343869      -2.48659       2.48659       181.754       184.241    
  27  0.956893     -0.440633E-01 -0.318631      0.318631       186.584       186.903    
  28  0.897850E-01  -2.41034      -17.4297       17.4297       182.875       200.304    
  29  0.836996     -0.177936      -1.28670       1.28670       187.767       189.054    
  30  0.688664     -0.373001      -2.69725       2.69725       188.964       191.662    
  31  0.587454     -0.531957      -3.84670       3.84670       189.670       193.516    
  32  0.880970     -0.126731     -0.916420      0.916420       190.160       191.077    
  33  0.506724     -0.679789      -4.91570       4.91570       180.389       185.305    
  34  0.802262     -0.220320      -1.59318       1.59318       187.470       189.064    
  35  0.764787E-01  -2.57074      -18.5896       18.5896       179.763       198.353    
  36  0.907101     -0.975014E-01 -0.705053      0.705053       189.576       190.281    
  37  0.797350     -0.226461      -1.63759       1.63759       187.220       188.857    
  38  0.257375      -1.35722      -9.81435       9.81435       192.832       202.647    
  39  0.643190     -0.441315      -3.19124       3.19124       183.837       187.029    
  40  0.513768     -0.665984      -4.81587       4.81587       193.212       198.028    
  41  0.850264     -0.162208      -1.17296       1.17296       181.185       182.358    
  42  0.200819      -1.60535      -11.6086       11.6086       193.650       205.259    
  43  0.331940      -1.10280      -7.97459       7.97459       193.513       201.488    
  44  0.900490     -0.104816     -0.757947      0.757947       184.706       185.464    
  45  0.618957     -0.479719      -3.46895       3.46895       183.092       186.561    
  46  0.395756     -0.926956      -6.70302       6.70302       191.810       198.513    
  47  0.528166     -0.638345      -4.61601       4.61601       192.846       197.462    
  48  0.586635     -0.533352      -3.85678       3.85678       194.243       198.100    
  49  0.705559     -0.348765      -2.52199       2.52199       192.845       195.367    
  50  0.191018      -1.65539      -11.9705       11.9705       193.694       205.664    
  51  0.581133     -0.542775      -3.92492       3.92492       181.080       185.004    
  52  0.297529      -1.21224      -8.76599       8.76599       192.832       201.598    
  53  0.532486     -0.630198      -4.55710       4.55710       192.261       196.818    
  54  0.396084     -0.926129      -6.69703       6.69703       192.598       199.295    
  55  0.209334      -1.56382      -11.3083       11.3083       186.821       198.129    
  56  0.632068     -0.458758      -3.31738       3.31738       191.913       195.231    
  57  0.941424     -0.603613E-01 -0.436485      0.436485       188.127       188.563    
  58  0.875379     -0.133099     -0.962465      0.962465       187.149       188.112    
  59  0.497903     -0.697350      -5.04268       5.04268       191.159       196.201    
  60  0.840483     -0.173779      -1.25663       1.25663       197.354       198.611    
  61  0.230101      -1.46924      -10.6244       10.6244       187.446       198.071    
  62  0.213210      -1.54548      -11.1757       11.1757       192.125       203.301    
  63  0.412073     -0.886554      -6.41086       6.41086       189.919       196.330    
  64  0.264912      -1.32836      -9.60564       9.60564       192.832       202.438    
  65  0.234943      -1.44841      -10.4738       10.4738       183.292       193.765    
  66  0.957879     -0.430340E-01 -0.311188      0.311188       192.832       193.144    
  67  0.458250     -0.780340      -5.64280       5.64280       190.784       196.427    
  68  0.218142E-01  -3.82520      -27.6608       27.6608       173.514       201.175    
  69  0.340067E-01  -3.38120      -24.4502       24.4502       197.960       222.410    
  70  0.897872     -0.107728     -0.779004      0.779004       192.177       192.956    
  71  0.530797     -0.633375      -4.58007       4.58007       199.184       203.764    
  72  0.993119     -0.690470E-02 -0.499294E-01  0.499294E-01   188.551       188.601    
loop,thermsimp(1:2)       57   8.61276       2.27611    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330        175.33          0.84          1.11         25.04          0.17          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    331        188.96          0.84          1.11         25.14          0.10          0.05         27.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    175.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       57
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       58
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      330     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -4.58811       4.58811       166.873       171.461    
   2  0.175946E-01  -4.04016      -29.2153       29.2153       172.968       202.183    
   3  0.419998     -0.867504      -6.27311       6.27311       175.715       181.988    
   4  0.448197E-01  -3.10511      -22.4537       22.4537       176.135       198.589    
   5  0.501784     -0.689586      -4.98654       4.98654       173.028       178.014    
   6  0.858173     -0.152949      -1.10601       1.10601       175.068       176.174    
   7  0.101932      -2.28345      -16.5121       16.5121       168.270       184.782    
   8  0.453268     -0.791273      -5.72186       5.72186       174.483       180.205    
   9  0.128092      -2.05501      -14.8602       14.8602       174.838       189.698    
  10  0.779644     -0.248918      -1.79998       1.79998       178.432       180.232    
  11  0.769943E-01  -2.56402      -18.5410       18.5410       177.589       196.130    
  12  0.140214      -1.96458      -14.2063       14.2063       179.665       193.871    
  13  0.571588     -0.559337      -4.04468       4.04468       180.706       184.751    
  14  0.455096     -0.787247      -5.69275       5.69275       181.185       186.878    
  15  0.594240     -0.520471      -3.76364       3.76364       178.392       182.155    
  16  0.833288     -0.182376      -1.31880       1.31880       183.165       184.484    
  17  0.807090E-01  -2.51691      -18.2003       18.2003       174.869       193.069    
  18  0.430313     -0.843242      -6.09766       6.09766       180.221       186.319    
  19  0.990463     -0.958277E-02 -0.692950E-01  0.692950E-01   184.056       184.125    
  20  0.907906     -0.966144E-01 -0.698639      0.698639       181.754       182.453    
  21  0.607469     -0.498455      -3.60443       3.60443       181.080       184.684    
  22  0.927102     -0.756916E-01 -0.547342      0.547342       184.490       185.037    
  23  0.379122     -0.969896      -7.01353       7.01353       180.389       187.402    
  24  0.183121E-01  -4.00019      -28.9262       28.9262       184.706       213.632    
  25  0.561966     -0.576313      -4.16744       4.16744       183.092       187.259    
  26  0.638772     -0.448208      -3.24108       3.24108       173.636       176.877    
  27  0.234202      -1.45157      -10.4966       10.4966       186.584       197.081    
  28  0.257221      -1.35782      -9.81867       9.81867       179.727       189.545    
  29  0.688379     -0.373416      -2.70025       2.70025       183.837       186.538    
  30  0.360237E-01  -3.32358      -24.0335       24.0335       187.149       211.183    
  31  0.849177     -0.163487      -1.18221       1.18221       184.883       186.065    
  32  0.324868E-01  -3.42692      -24.7808       24.7808       188.127       212.907    
  33  0.216483E-01  -3.83283      -27.7160       27.7160       188.551       216.267    
  34  0.794095     -0.230552      -1.66717       1.66717       187.220       188.887    
  35  0.453180     -0.791465      -5.72325       5.72325       187.767       193.491    
  36  0.286278      -1.25079      -9.04474       9.04474       187.470       196.515    
  37  0.931500     -0.709590E-01 -0.513120      0.513120       189.576       190.089    
  38  0.483424     -0.726861      -5.25609       5.25609       190.160       195.416    
  39  0.782276     -0.245547      -1.77561       1.77561       188.964       190.740    
  40  0.976661     -0.236156E-01 -0.170769      0.170769       192.177       192.348    
  41  0.707981     -0.345338      -2.49721       2.49721       192.832       195.330    
  42  0.101993      -2.28285      -16.5078       16.5078       183.898       200.406    
  43  0.690974E-01  -2.67224      -19.3235       19.3235       189.670       208.993    
  44  0.767576E-01  -2.56710      -18.5633       18.5633       183.292       201.855    
  45  0.584825     -0.536443      -3.87913       3.87913       191.913       195.793    
  46  0.588828     -0.529621      -3.82980       3.82980       192.845       196.675    
  47  0.894562     -0.111421     -0.805708      0.805708       191.159       191.964    
  48  0.260723      -1.34430      -9.72090       9.72090       189.919       199.640    
  49  0.773456E-01  -2.55947      -18.5081       18.5081       190.784       209.293    
  50  0.848651E-01  -2.46669      -17.8372       17.8372       192.261       210.098    
  51  0.992803     -0.722305E-02 -0.522314E-01  0.522314E-01   192.846       192.898    
  52  0.529202     -0.636386      -4.60184       4.60184       193.212       197.814    
  53  0.540374     -0.615494      -4.45077       4.45077       187.446       191.897    
  54  0.185914      -1.68247      -12.1663       12.1663       194.243       206.409    
  55  0.764153     -0.268988      -1.94511       1.94511       186.821       188.766    
  56  0.931974E-01  -2.37304      -17.1599       17.1599       179.763       196.923    
  57  0.753946     -0.282434      -2.04234       2.04234       191.810       193.852    
  58  0.279731      -1.27393      -9.21203       9.21203       197.354       206.566    
  59  0.790083     -0.235617      -1.70380       1.70380       180.949       182.652    
  60  0.179541      -1.71735      -12.4185       12.4185       192.598       205.017    
  61  0.424504     -0.856835      -6.19595       6.19595       182.875       189.070    
  62  0.359861      -1.02204      -7.39057       7.39057       173.514       180.905    
  63  0.234475      -1.45041      -10.4882       10.4882       193.513       204.001    
  64  0.320303      -1.13849      -8.23265       8.23265       192.832       201.065    
  65  0.558182     -0.583071      -4.21631       4.21631       192.832       197.049    
  66  0.460702     -0.775003      -5.60421       5.60421       192.832       198.437    
  67  0.627136E-01  -2.76918      -20.0245       20.0245       192.125       212.150    
  68  0.673665     -0.395022      -2.85649       2.85649       199.184       202.040    
  69  0.540500     -0.615261      -4.44909       4.44909       193.650       198.099    
  70  0.277195      -1.28303      -9.27789       9.27789       193.694       202.972    
  71  0.248535      -1.39217      -10.0671       10.0671       185.115       195.182    
  72  0.493876     -0.705472      -5.10141       5.10141       175.329       180.430    
loop,thermsimp(1:2)       58   4.58811       29.2153    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332        185.43          0.85          1.11         25.43          0.07          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    185.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       58
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       59
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      331     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.394399      0.394399       166.873       167.267    
   2  0.224221      -1.49512      -10.8115       10.8115       175.068       185.880    
   3  0.699642     -0.357186      -2.58289       2.58289       173.636       176.219    
   4  0.490916     -0.711482      -5.14488       5.14488       173.028       178.173    
   5  0.204251      -1.58840      -11.4861       11.4861       174.483       185.969    
   6  0.356522      -1.03136      -7.45798       7.45798       178.432       185.890    
   7  0.745938     -0.293113      -2.11956       2.11956       175.329       177.448    
   8  0.451533     -0.795107      -5.74959       5.74959       173.514       179.264    
   9  0.101038      -2.29226      -16.5758       16.5758       175.715       192.291    
  10  0.826978     -0.189977      -1.37377       1.37377       178.392       179.766    
  11  0.212337      -1.54958      -11.2053       11.2053       181.754       192.960    
  12  0.490540     -0.712248      -5.15042       5.15042       180.949       186.099    
  13  0.672078     -0.397381      -2.87355       2.87355       184.056       186.929    
  14  0.690580     -0.370223      -2.67716       2.67716       183.165       185.843    
  15  0.513190     -0.667108      -4.82400       4.82400       181.080       185.904    
  16  0.268393      -1.31530      -9.51124       9.51124       180.706       190.218    
  17  0.896898     -0.108813     -0.786850      0.786850       168.270       169.057    
  18  0.911953     -0.921674E-01 -0.666482      0.666482       184.490       185.156    
  19  0.355703      -1.03366      -7.47460       7.47460       184.883       192.357    
  20  0.293818      -1.22479      -8.85674       8.85674       180.221       189.078    
  21  0.713392     -0.337724      -2.44215       2.44215       183.837       186.279    
  22  0.660627     -0.414565      -2.99781       2.99781       181.185       184.183    
  23  0.795097     -0.229291      -1.65805       1.65805       183.092       184.750    
  24  0.919484     -0.839428E-01 -0.607008      0.607008       180.389       180.996    
  25  0.976382     -0.239014E-01 -0.172836      0.172836       186.821       186.994    
  26  0.922195     -0.809991E-01 -0.585722      0.585722       187.220       187.805    
  27  0.436062     -0.829970      -6.00169       6.00169       182.875       188.876    
  28  0.271848      -1.30251      -9.41874       9.41874       179.727       189.146    
  29  0.389360     -0.943252      -6.82086       6.82086       174.838       181.659    
  30  0.314178E-01  -3.46038      -25.0228       25.0228       189.576       214.599    
  31  0.545460     -0.606126      -4.38302       4.38302       188.964       193.347    
  32  0.925479E-01  -2.38003      -17.2105       17.2105       187.446       204.657    
  33  0.971973     -0.284273E-01 -0.205564      0.205564       191.159       191.364    
  34  0.403500     -0.907578      -6.56289       6.56289       192.177       198.740    
  35  0.392926     -0.934133      -6.75492       6.75492       192.846       199.601    
  36  0.718758     -0.330230      -2.38796       2.38796       174.869       177.257    
  37  0.746082     -0.292920      -2.11817       2.11817       187.767       189.885    
  38  0.353478      -1.03993      -7.51998       7.51998       191.810       199.330    
  39  0.843229     -0.170517      -1.23304       1.23304       179.665       180.898    
  40  0.388011     -0.946720      -6.84594       6.84594       185.115       191.961    
  41  0.969569     -0.309034E-01 -0.223469      0.223469       192.832       193.056    
  42  0.441380E-01  -3.12043      -22.5645       22.5645       190.160       212.725    
  43  0.533000     -0.629233      -4.55012       4.55012       191.913       196.464    
  44  0.288396      -1.24342      -8.99144       8.99144       177.589       186.581    
  45  0.683115     -0.381092      -2.75576       2.75576       187.470       190.226    
  46  0.339511      -1.08025      -7.81152       7.81152       192.845       200.657    
  47  0.150420E-01  -4.19691      -30.3487       30.3487       179.763       210.112    
  48  0.141026      -1.95881      -14.1646       14.1646       192.832       206.997    
  49  0.421666     -0.863541      -6.24445       6.24445       186.584       192.828    
  50  0.953496     -0.476201E-01 -0.344351      0.344351       193.212       193.556    
  51  0.966647     -0.339215E-01 -0.245293      0.245293       193.650       193.895    
  52  0.365434      -1.00667      -7.27945       7.27945       192.832       200.112    
  53  0.314209      -1.15770      -8.37155       8.37155       176.135       184.507    
  54  0.612536     -0.490148      -3.54436       3.54436       189.919       193.464    
  55  0.962603     -0.381139E-01 -0.275610      0.275610       183.898       184.174    
  56  0.518973     -0.655904      -4.74298       4.74298       192.832       197.575    
  57  0.963657     -0.370202E-01 -0.267701      0.267701       183.292       183.559    
  58  0.423866     -0.858338      -6.20683       6.20683       199.184       205.391    
  59  0.195959      -1.62985      -11.7858       11.7858       172.968       184.753    
  60  0.108838      -2.21789      -16.0381       16.0381       193.694       209.732    
  61  0.196446      -1.62737      -11.7678       11.7678       193.513       205.281    
  62  0.950303     -0.509747E-01 -0.368609      0.368609       192.598       192.967    
  63  0.363538      -1.01187      -7.31706       7.31706       194.243       201.560    
  64  0.834223     -0.181254      -1.31069       1.31069       197.354       198.665    
  65  0.529644     -0.635549      -4.59579       4.59579       189.670       194.265    
  66  0.944564     -0.570321E-01 -0.412412      0.412412       190.784       191.197    
  67  0.534482     -0.626456      -4.53004       4.53004       192.261       196.791    
  68  0.238252      -1.43443      -10.3726       10.3726       187.149       197.522    
  69  0.335731      -1.09145      -7.89247       7.89247       192.125       200.018    
  70  0.396637     -0.924734      -6.68695       6.68695       188.127       194.814    
  71  0.766416     -0.266030      -1.92372       1.92372       184.706       186.630    
  72  0.667108     -0.404804      -2.92722       2.92722       185.430       188.357    
loop,thermsimp(1:2)       59  0.394399       10.8115    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333        172.87          0.84          1.11         25.06          0.15          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    334        178.18          0.84          1.12         25.17          0.13          0.05         27.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    172.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       59
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       60
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      333     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -7.65119       7.65119       166.873       174.524    
   2  0.605757     -0.501276      -3.62483       3.62483       168.270       171.895    
   3  0.690633     -0.370146      -2.67660       2.67660       173.636       176.313    
   4  0.400665     -0.914628      -6.61387       6.61387       174.869       181.482    
   5  0.862165     -0.148309      -1.07245       1.07245       175.329       176.401    
   6  0.874011     -0.134662     -0.973771      0.973771       173.028       174.002    
   7  0.389525     -0.942826      -6.81778       6.81778       173.514       180.332    
   8  0.102225E-01  -4.58317      -33.1419       33.1419       178.392       211.534    
   9  0.102697      -2.27597      -16.4580       16.4580       179.665       196.123    
  10  0.818271     -0.200561      -1.45030       1.45030       180.389       181.839    
  11  0.888768     -0.117920     -0.852701      0.852701       174.838       175.691    
  12  0.539210     -0.617651      -4.46637       4.46637       183.292       187.758    
  13  0.317914      -1.14597      -8.28679       8.28679       183.898       192.185    
  14  0.437422     -0.826857      -5.97918       5.97918       181.185       187.164    
  15  0.925263     -0.776773E-01 -0.561701      0.561701       176.135       176.697    
  16  0.422436     -0.861717      -6.23126       6.23126       183.092       189.323    
  17  0.965248     -0.353697E-01 -0.255766      0.255766       172.968       173.223    
  18  0.771278     -0.259706      -1.87799       1.87799       184.490       186.368    
  19  0.902488     -0.102600     -0.741923      0.741923       183.165       183.907    
  20  0.512816     -0.667839      -4.82928       4.82928       175.068       179.897    
  21  0.915966     -0.877758E-01 -0.634725      0.634725       178.432       179.067    
  22  0.612605     -0.490035      -3.54355       3.54355       181.080       184.623    
  23  0.323528      -1.12847      -8.16020       8.16020       174.483       182.644    
  24  0.206646      -1.57675      -11.4018       11.4018       180.949       192.350    
  25  0.481057     -0.731769      -5.29157       5.29157       183.837       189.129    
  26  0.287887E-01  -3.54777      -25.6547       25.6547       177.589       203.244    
  27  0.996968     -0.303648E-02 -0.219574E-01  0.219574E-01   184.706       184.728    
  28  0.132770      -2.01914      -14.6008       14.6008       184.056       198.657    
  29  0.716038     -0.334023      -2.41539       2.41539       186.821       189.236    
  30  0.229552      -1.47162      -10.6416       10.6416       187.220       197.861    
  31  0.236358      -1.44241      -10.4303       10.4303       185.430       195.860    
  32  0.542780     -0.611051      -4.41864       4.41864       182.875       187.293    
  33  0.875156     -0.133353     -0.964302      0.964302       180.221       181.186    
  34  0.988730     -0.113343E-01 -0.819609E-01  0.819609E-01   179.727       179.809    
  35  0.244332      -1.40923      -10.1904       10.1904       187.767       197.958    
  36  0.659246     -0.416659      -3.01295       3.01295       180.706       183.719    
  37  0.457872     -0.781166      -5.64878       5.64878       187.470       193.119    
  38  0.380652E-01  -3.26846      -23.6349       23.6349       190.784       214.419    
  39  0.358843      -1.02487      -7.41105       7.41105       191.159       198.570    
  40  0.846233     -0.166960      -1.20732       1.20732       185.115       186.322    
  41  0.359308      -1.02358      -7.40170       7.40170       175.715       183.117    
  42  0.533329     -0.628617      -4.54567       4.54567       184.883       189.428    
  43  0.645289     -0.438058      -3.16769       3.16769       186.584       189.752    
  44  0.311850      -1.16523      -8.42604       8.42604       181.754       190.180    
  45  0.270084      -1.30902      -9.46581       9.46581       192.598       202.064    
  46  0.530313     -0.634287      -4.58666       4.58666       192.832       197.419    
  47  0.975874     -0.244213E-01 -0.176596      0.176596       188.964       189.141    
  48  0.313811      -1.15896      -8.38072       8.38072       189.919       198.300    
  49  0.932688     -0.696844E-01 -0.503903      0.503903       193.212       193.716    
  50  0.357359      -1.02901      -7.44102       7.44102       193.650       201.091    
  51  0.545837     -0.605435      -4.37803       4.37803       189.670       194.048    
  52  0.954982     -0.460626E-01 -0.333089      0.333089       188.127       188.460    
  53  0.470912     -0.753083      -5.44571       5.44571       191.913       197.359    
  54  0.719568     -0.329104      -2.37982       2.37982       192.261       194.641    
  55  0.859620     -0.151265      -1.09383       1.09383       187.149       188.243    
  56  0.544817     -0.607304      -4.39155       4.39155       192.832       197.224    
  57  0.505571E-02  -5.28724      -38.2331       38.2331       197.354       235.587    
  58  0.412350     -0.885884      -6.40601       6.40601       192.177       198.583    
  59  0.335424      -1.09236      -7.89909       7.89909       191.810       199.709    
  60  0.908603     -0.958472E-01 -0.693092      0.693092       192.846       193.539    
  61  0.434554     -0.833434      -6.02674       6.02674       192.125       198.152    
  62  0.801863     -0.220817      -1.59678       1.59678       192.832       194.429    
  63  0.567796     -0.565993      -4.09282       4.09282       192.845       196.938    
  64  0.818165     -0.200691      -1.45124       1.45124       194.243       195.694    
  65  0.490355     -0.712626      -5.15315       5.15315       187.446       192.599    
  66  0.971730     -0.286771E-01 -0.207370      0.207370       193.513       193.721    
  67  0.373659     -0.984411      -7.11848       7.11848       199.184       206.302    
  68  0.179333      -1.71851      -12.4269       12.4269       192.832       205.259    
  69  0.352089      -1.04387      -7.54846       7.54846       193.694       201.242    
  70  0.247178      -1.39765      -10.1067       10.1067       179.763       189.870    
  71  0.304805      -1.18808      -8.59128       8.59128       190.160       198.751    
  72  0.561911     -0.576412      -4.16816       4.16816       172.867       177.035    
loop,thermsimp(1:2)       60   7.65119       3.62483    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335        172.25          0.84          1.11         25.07          0.17          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    336        208.23          0.84          1.11         25.16          0.07          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    172.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       60
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       61
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      335     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -2.96189       2.96189       168.270       171.232    
   2  0.718953     -0.329960      -2.38601       2.38601       172.968       175.354    
   3  0.454275     -0.789053      -5.70581       5.70581       173.028       178.734    
   4  0.253407E-01  -3.67534      -26.5772       26.5772       166.873       193.450    
   5  0.611947     -0.491110      -3.55132       3.55132       174.838       178.389    
   6  0.234016      -1.45237      -10.5024       10.5024       173.636       184.139    
   7  0.359481E-01  -3.32568      -24.0487       24.0487       175.329       199.377    
   8  0.222118E-01  -3.80713      -27.5302       27.5302       176.135       203.665    
   9  0.905838E-01  -2.40148      -17.3656       17.3656       172.867       190.233    
  10  0.791683     -0.233594      -1.68917       1.68917       178.432       180.121    
  11  0.557734     -0.583873      -4.22211       4.22211       179.727       183.949    
  12  0.936048E-01  -2.36867      -17.1284       17.1284       175.068       192.196    
  13  0.431059     -0.841510      -6.08514       6.08514       173.514       179.600    
  14  0.225758      -1.48829      -10.7622       10.7622       180.221       190.984    
  15  0.275181E-01  -3.59291      -25.9811       25.9811       174.869       200.850    
  16  0.802517     -0.220002      -1.59088       1.59088       180.389       181.980    
  17  0.423872     -0.858323      -6.20671       6.20671       174.483       180.690    
  18  0.300971      -1.20074      -8.68282       8.68282       175.715       184.398    
  19  0.479556     -0.734895      -5.31418       5.31418       180.706       186.021    
  20  0.621838     -0.475076      -3.43538       3.43538       183.165       186.601    
  21  0.397654     -0.922172      -6.66842       6.66842       181.080       187.748    
  22  0.664976     -0.408004      -2.95036       2.95036       184.706       187.656    
  23  0.288358      -1.24355      -8.99238       8.99238       185.115       194.107    
  24  0.442017     -0.816406      -5.90361       5.90361       184.490       190.393    
  25  0.150763E-01  -4.19463      -30.3323       30.3323       181.185       211.518    
  26  0.600886     -0.509350      -3.68322       3.68322       182.875       186.558    
  27  0.162927      -1.81446      -13.1207       13.1207       183.292       196.412    
  28  0.932743     -0.696251E-01 -0.503474      0.503474       187.149       187.653    
  29  0.997186     -0.281799E-02 -0.203775E-01  0.203775E-01   188.127       188.147    
  30  0.418339     -0.871463      -6.30173       6.30173       183.837       190.139    
  31  0.694800     -0.364132      -2.63311       2.63311       188.964       191.597    
  32  0.852711     -0.159334      -1.15218       1.15218       186.821       187.973    
  33  0.624847     -0.470249      -3.40047       3.40047       183.092       186.492    
  34  0.427649     -0.849453      -6.14258       6.14258       184.883       191.025    
  35  0.149871      -1.89798      -13.7247       13.7247       186.584       200.309    
  36  0.563430     -0.573713      -4.14864       4.14864       179.763       183.912    
  37  0.860100     -0.150706      -1.08979       1.08979       181.754       182.844    
  38  0.867090E-01  -2.44520      -17.6817       17.6817       183.898       201.580    
  39  0.847848     -0.165054      -1.19354       1.19354       180.949       182.142    
  40  0.782599E-01  -2.54772      -18.4231       18.4231       187.446       205.869    
  41  0.697889E-01  -2.66228      -19.2515       19.2515       187.470       206.722    
  42  0.422765     -0.860939      -6.22563       6.22563       192.846       199.072    
  43  0.158365      -1.84286      -13.3261       13.3261       193.212       206.538    
  44  0.518935     -0.655976      -4.74350       4.74350       193.513       198.257    
  45  0.430406     -0.843027      -6.09611       6.09611       189.670       195.766    
  46  0.639805     -0.446592      -3.22940       3.22940       192.832       196.062    
  47  0.830453E-01  -2.48837      -17.9939       17.9939       192.261       210.255    
  48  0.639384     -0.447250      -3.23416       3.23416       194.243       197.477    
  49  0.833791     -0.181773      -1.31444       1.31444       185.430       186.744    
  50  0.453972     -0.789720      -5.71063       5.71063       179.665       185.376    
  51  0.542088     -0.612327      -4.42786       4.42786       192.845       197.273    
  52  0.271321      -1.30445      -9.43277       9.43277       192.832       202.265    
  53  0.176790      -1.73279      -12.5302       12.5302       191.913       204.444    
  54  0.511778     -0.669865      -4.84394       4.84394       192.832       197.676    
  55  0.632948     -0.457366      -3.30731       3.30731       187.220       190.527    
  56  0.252444      -1.37657      -9.95424       9.95424       187.767       197.722    
  57  0.726388     -0.319671      -2.31161       2.31161       192.125       194.437    
  58  0.483977     -0.725718      -5.24782       5.24782       189.919       195.167    
  59  0.497846     -0.697465      -5.04352       5.04352       191.159       196.202    
  60  0.369093     -0.996706      -7.20739       7.20739       192.177       199.385    
  61  0.225129      -1.49108      -10.7823       10.7823       184.056       194.838    
  62  0.908331E-01  -2.39873      -17.3457       17.3457       190.160       207.506    
  63  0.196370      -1.62776      -11.7707       11.7707       191.810       203.580    
  64  0.448748     -0.801293      -5.79432       5.79432       193.650       199.444    
  65  0.175426      -1.74054      -12.5862       12.5862       193.694       206.280    
  66  0.399277     -0.918099      -6.63897       6.63897       192.598       199.237    
  67  0.417464     -0.873557      -6.31687       6.31687       177.589       183.906    
  68  0.593993     -0.520889      -3.76666       3.76666       192.832       196.599    
  69  0.718485     -0.330610      -2.39071       2.39071       199.184       201.575    
  70  0.294519      -1.22241      -8.83952       8.83952       178.392       187.231    
  71  0.235197      -1.44733      -10.4660       10.4660       190.784       201.250    
  72  0.190064E-01  -3.96298      -28.6572       28.6572       172.255       200.912    
loop,thermsimp(1:2)       61   2.96189       2.38601    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337        184.07          0.85          1.11         25.09          0.19          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       61
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       62
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      336     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.102448      0.102448       168.270       168.373    
   2  0.420912     -0.865330      -6.25739       6.25739       172.968       179.225    
   3  0.617210     -0.482545      -3.48939       3.48939       174.838       178.327    
   4  0.787846     -0.238453      -1.72431       1.72431       173.028       174.752    
   5  0.608770     -0.496315      -3.58896       3.58896       173.514       177.103    
   6  0.925975     -0.769083E-01 -0.556140      0.556140       178.432       178.988    
   7  0.545822     -0.605462      -4.37822       4.37822       174.483       178.862    
   8  0.240142      -1.42653      -10.3155       10.3155       180.389       190.704    
   9  0.800257     -0.222822      -1.61127       1.61127       180.949       182.560    
  10  0.250149      -1.38570      -10.0203       10.0203       181.754       191.775    
  11  0.814044     -0.205741      -1.48776       1.48776       177.589       179.077    
  12  0.897552     -0.108084     -0.781578      0.781578       179.763       180.545    
  13  0.807530     -0.213775      -1.54586       1.54586       179.727       181.273    
  14  0.369031     -0.996874      -7.20861       7.20861       173.636       180.845    
  15  0.892620     -0.113594     -0.821424      0.821424       175.715       176.536    
  16  0.992736     -0.729054E-02 -0.527195E-01  0.527195E-01   179.665       179.718    
  17  0.264259      -1.33083      -9.62349       9.62349       180.706       190.330    
  18  0.164586      -1.80432      -13.0475       13.0475       183.092       196.139    
  19  0.594739     -0.519633      -3.75758       3.75758       182.875       186.632    
  20  0.766319     -0.266156      -1.92463       1.92463       183.165       185.090    
  21  0.392663     -0.934804      -6.75976       6.75976       185.430       192.190    
  22  0.900399     -0.104917     -0.758680      0.758680       178.392       179.150    
  23  0.853164E-01  -2.46139      -17.7988       17.7988       187.149       204.948    
  24  0.753181     -0.283450      -2.04969       2.04969       184.706       186.756    
  25  0.801958     -0.220699      -1.59592       1.59592       181.080       182.675    
  26  0.840206     -0.174108      -1.25901       1.25901       186.821       188.080    
  27  0.899787     -0.105597     -0.763597      0.763597       188.127       188.890    
  28  0.555629     -0.587654      -4.24945       4.24945       183.837       188.087    
  29  0.117481E-01  -4.44406      -32.1360       32.1360       172.867       205.003    
  30  0.228476      -1.47632      -10.6756       10.6756       184.490       195.165    
  31  0.121877      -2.10474      -15.2198       15.2198       187.220       202.440    
  32  0.475375     -0.743652      -5.37750       5.37750       180.221       185.599    
  33  0.208734      -1.56669      -11.3291       11.3291       184.883       196.212    
  34  0.680231     -0.385322      -2.78635       2.78635       188.964       191.751    
  35  0.211647      -1.55284      -11.2289       11.2289       175.068       186.297    
  36  0.982763     -0.173870E-01 -0.125729      0.125729       166.873       166.998    
  37  0.819904     -0.198568      -1.43589       1.43589       185.115       186.551    
  38  0.282339      -1.26465      -9.14494       9.14494       192.125       201.270    
  39  0.391986     -0.936529      -6.77224       6.77224       184.056       190.828    
  40  0.218050      -1.52303      -11.0134       11.0134       189.919       200.933    
  41  0.236244      -1.44289      -10.4339       10.4339       189.670       200.104    
  42  0.544673     -0.607570      -4.39347       4.39347       192.832       197.226    
  43  0.721937     -0.325818      -2.35606       2.35606       191.159       193.515    
  44  0.649728     -0.431202      -3.11811       3.11811       183.292       186.410    
  45  0.641823     -0.443443      -3.20663       3.20663       192.832       196.039    
  46  0.597293     -0.515347      -3.72658       3.72658       192.845       196.572    
  47  0.467405     -0.760558      -5.49976       5.49976       194.243       199.743    
  48  0.676900     -0.390232      -2.82185       2.82185       192.832       195.654    
  49  0.925913     -0.769750E-01 -0.556623      0.556623       187.767       188.324    
  50  0.692551     -0.367374      -2.65656       2.65656       193.513       196.170    
  51  0.161390      -1.82393      -13.1892       13.1892       192.846       206.035    
  52  0.513279     -0.666936      -4.82276       4.82276       192.598       197.421    
  53  0.379540     -0.968796      -7.00557       7.00557       175.329       182.334    
  54  0.557165     -0.584894      -4.22949       4.22949       192.177       196.407    
  55  0.459054     -0.778587      -5.63013       5.63013       193.650       199.280    
  56  0.466253     -0.763026      -5.51760       5.51760       186.584       192.102    
  57  0.635692E-01  -2.75563      -19.9265       19.9265       174.869       194.795    
  58  0.591279     -0.525467      -3.79976       3.79976       172.255       176.055    
  59  0.344168      -1.06663      -7.71300       7.71300       190.784       198.497    
  60  0.119291      -2.12619      -15.3749       15.3749       199.184       214.559    
  61  0.399057E-01  -3.22124      -23.2934       23.2934       183.898       207.192    
  62  0.737545     -0.304428      -2.20139       2.20139       192.832       195.034    
  63  0.855773     -0.155750      -1.12626       1.12626       191.810       192.936    
  64  0.604062E-01  -2.80666      -20.2956       20.2956       176.135       196.431    
  65  0.659236     -0.416674      -3.01306       3.01306       191.913       194.927    
  66  0.738818     -0.302704      -2.18891       2.18891       187.446       189.635    
  67  0.577372     -0.549268      -3.97187       3.97187       193.694       197.666    
  68  0.219220      -1.51768      -10.9747       10.9747       193.212       204.186    
  69  0.318915      -1.14283      -8.26406       8.26406       187.470       195.734    
  70  0.599810     -0.511142      -3.69618       3.69618       190.160       193.856    
  71  0.863673     -0.146561      -1.05982       1.05982       192.261       193.321    
  72  0.103344      -2.26969      -16.4126       16.4126       184.071       200.484    
loop,thermsimp(1:2)       62  0.102448       6.25739    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338        208.00          0.84          1.11         25.12          0.19          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    208.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       62
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       63
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      337     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.109419      0.109419       166.873       166.982    
   2  0.760415     -0.273890      -1.98056       1.98056       168.270       170.251    
   3  0.328612      -1.11288      -8.04745       8.04745       173.028       181.075    
   4  0.164880      -1.80254      -13.0345       13.0345       172.255       185.289    
   5  0.706606     -0.347282      -2.51127       2.51127       175.715       178.226    
   6  0.832070     -0.183839      -1.32938       1.32938       173.514       174.844    
   7  0.231505      -1.46315      -10.5804       10.5804       174.838       185.418    
   8  0.802671E-01  -2.52240      -18.2400       18.2400       174.483       192.723    
   9  0.116349      -2.15116      -15.5555       15.5555       178.432       193.987    
  10  0.874222     -0.134421     -0.972029      0.972029       177.589       178.561    
  11  0.729333     -0.315625      -2.28235       2.28235       178.392       180.674    
  12  0.301675      -1.19841      -8.66593       8.66593       172.968       181.634    
  13  0.496896     -0.699375      -5.05733       5.05733       179.665       184.722    
  14  0.692174     -0.367918      -2.66049       2.66049       179.763       182.424    
  15  0.717718     -0.331678      -2.39844       2.39844       173.636       176.035    
  16  0.867334E-01  -2.44492      -17.6797       17.6797       179.727       197.406    
  17  0.762934     -0.270584      -1.95665       1.95665       175.329       177.285    
  18  0.966741     -0.338246E-01 -0.244593      0.244593       180.949       181.193    
  19  0.375386     -0.979801      -7.08515       7.08515       181.080       188.165    
  20  0.878716     -0.129293     -0.934946      0.934946       183.165       184.100    
  21  0.238969      -1.43142      -10.3509       10.3509       180.221       190.572    
  22  0.939578     -0.623249E-01 -0.450685      0.450685       175.068       175.519    
  23  0.694828     -0.364091      -2.63282       2.63282       183.292       185.924    
  24  0.869149     -0.140241      -1.01411       1.01411       185.115       186.129    
  25  0.310010      -1.17115      -8.46885       8.46885       182.875       191.343    
  26  0.831753     -0.184219      -1.33213       1.33213       184.706       186.038    
  27  0.621050     -0.476344      -3.44454       3.44454       186.821       190.265    
  28  0.902274     -0.102837     -0.743638      0.743638       183.837       184.581    
  29  0.341345      -1.07486      -7.77256       7.77256       187.767       195.540    
  30  0.718647     -0.330385      -2.38908       2.38908       188.127       190.516    
  31  0.489532     -0.714305      -5.16529       5.16529       187.446       192.611    
  32  0.387793     -0.947282      -6.85000       6.85000       180.706       187.556    
  33  0.576785     -0.550285      -3.97923       3.97923       180.389       184.368    
  34  0.454048     -0.789552      -5.70942       5.70942       184.056       189.765    
  35  0.532728     -0.629744      -4.55382       4.55382       188.964       193.518    
  36  0.459832     -0.776895      -5.61789       5.61789       181.754       187.372    
  37  0.784910     -0.242187      -1.75130       1.75130       186.584       188.335    
  38  0.842297     -0.171622      -1.24104       1.24104       185.430       186.671    
  39  0.967556     -0.329823E-01 -0.238502      0.238502       191.810       192.048    
  40  0.126414      -2.06819      -14.9555       14.9555       192.261       207.217    
  41  0.407002     -0.898938      -6.50041       6.50041       191.159       197.659    
  42  0.903435     -0.101551     -0.734340      0.734340       190.160       190.894    
  43  0.430116     -0.843701      -6.10098       6.10098       174.869       180.970    
  44  0.675859     -0.391771      -2.83298       2.83298       191.913       194.746    
  45  0.444470     -0.810872      -5.86359       5.86359       192.832       198.696    
  46  0.728661     -0.316547      -2.28902       2.28902       184.490       186.779    
  47  0.143617      -1.94060      -14.0329       14.0329       192.832       206.865    
  48  0.729467E-01  -2.61803      -18.9315       18.9315       187.470       206.402    
  49  0.720547     -0.327745      -2.36999       2.36999       192.832       195.202    
  50  0.742905     -0.297187      -2.14902       2.14902       183.092       185.241    
  51  0.807330     -0.214023      -1.54765       1.54765       193.513       195.061    
  52  0.387442     -0.948190      -6.85657       6.85657       184.883       191.739    
  53  0.207045      -1.57482      -11.3879       11.3879       192.177       203.565    
  54  0.823983     -0.193606      -1.40001       1.40001       176.135       177.535    
  55  0.950173E-01  -2.35370      -17.0201       17.0201       192.845       209.865    
  56  0.662008     -0.412478      -2.98272       2.98272       192.832       195.815    
  57  0.640494E-01  -2.74810      -19.8721       19.8721       192.598       212.470    
  58  0.772515     -0.258104      -1.86641       1.86641       193.694       195.560    
  59  0.204175      -1.58878      -11.4888       11.4888       190.784       202.273    
  60  0.193223      -1.64391      -11.8875       11.8875       193.650       205.537    
  61  0.846602     -0.166525      -1.20418       1.20418       194.243       195.447    
  62  0.699262E-01  -2.66031      -19.2373       19.2373       189.670       208.907    
  63  0.581483     -0.542173      -3.92057       3.92057       184.071       187.992    
  64  0.497263     -0.698636      -5.05199       5.05199       189.919       194.971    
  65  0.912190     -0.919065E-01 -0.664595      0.664595       192.125       192.790    
  66  0.486665     -0.720179      -5.20777       5.20777       187.220       192.427    
  67  0.635633     -0.453135      -3.27671       3.27671       193.212       196.488    
  68  0.217422      -1.52591      -11.0342       11.0342       187.149       198.184    
  69  0.214720E-01  -3.84101      -27.7751       27.7751       172.867       200.642    
  70  0.256495      -1.36065      -9.83912       9.83912       192.846       202.685    
  71  0.838851     -0.175722      -1.27068       1.27068       183.898       185.169    
  72  0.319226      -1.14186      -8.25701       8.25701       208.000       216.257    
loop,thermsimp(1:2)       63  0.109419       1.98056    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339        199.18          0.83          1.11         25.08          0.12          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    199.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       63
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       64
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      338     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.262794      0.262794       166.873       167.136    
   2  0.186231      -1.68077      -12.1540       12.1540       168.270       180.424    
   3  0.127308      -2.06115      -14.9046       14.9046       173.514       188.419    
   4  0.305661      -1.18528      -8.57101       8.57101       175.068       183.639    
   5  0.685804     -0.377164      -2.72735       2.72735       173.636       176.364    
   6  0.713250     -0.337923      -2.44360       2.44360       175.329       177.772    
   7  0.562604     -0.575180      -4.15925       4.15925       176.135       180.295    
   8  0.410540     -0.890283      -6.43783       6.43783       175.715       182.153    
   9  0.667633     -0.404017      -2.92153       2.92153       177.589       180.511    
  10  0.111237      -2.19609      -15.8804       15.8804       178.392       194.272    
  11  0.987129     -0.129550E-01 -0.936802E-01  0.936802E-01   174.869       174.962    
  12  0.525481     -0.643442      -4.65287       4.65287       173.028       177.681    
  13  0.740553     -0.300358      -2.17195       2.17195       180.949       183.121    
  14  0.456748E-01  -3.08621      -22.3170       22.3170       172.968       195.285    
  15  0.831796     -0.184168      -1.33176       1.33176       179.763       181.095    
  16  0.798422     -0.225118      -1.62788       1.62788       183.165       184.793    
  17  0.985535     -0.145708E-01 -0.105364      0.105364       180.389       180.494    
  18  0.323340      -1.12905      -8.16440       8.16440       183.837       192.002    
  19  0.745026     -0.294336      -2.12841       2.12841       179.665       181.793    
  20  0.711871     -0.339858      -2.45759       2.45759       183.898       186.356    
  21  0.232875      -1.45725      -10.5377       10.5377       183.092       193.630    
  22  0.118192      -2.13545      -15.4419       15.4419       172.255       187.697    
  23  0.310641      -1.16912      -8.45413       8.45413       174.838       183.292    
  24  0.220899      -1.51005      -10.9195       10.9195       183.292       194.211    
  25  0.487797     -0.717856      -5.19097       5.19097       184.706       189.897    
  26  0.278848      -1.27709      -9.23489       9.23489       185.115       194.350    
  27  0.159355      -1.83662      -13.2810       13.2810       185.430       198.711    
  28  0.473156     -0.748329      -5.41133       5.41133       184.490       189.901    
  29  0.358980      -1.02449      -7.40829       7.40829       181.754       189.163    
  30  0.873266     -0.135515     -0.979936      0.979936       180.706       181.686    
  31  0.168201      -1.78260      -12.8903       12.8903       184.071       196.962    
  32  0.492581     -0.708096      -5.12039       5.12039       181.080       186.200    
  33  0.878329     -0.129734     -0.938137      0.938137       186.584       187.522    
  34  0.266147      -1.32371      -9.57202       9.57202       184.056       193.628    
  35  0.510485     -0.672394      -4.86222       4.86222       186.821       191.683    
  36  0.810074     -0.210630      -1.52311       1.52311       188.127       189.650    
  37  0.950614     -0.506467E-01 -0.366237      0.366237       180.221       180.588    
  38  0.329006      -1.11168      -8.03880       8.03880       190.160       198.199    
  39  0.934893E-01  -2.36991      -17.1373       17.1373       182.875       200.012    
  40  0.686671     -0.375900      -2.71821       2.71821       184.883       187.601    
  41  0.888060     -0.118716     -0.858463      0.858463       191.810       192.668    
  42  0.749618     -0.288192      -2.08398       2.08398       187.220       189.304    
  43  0.433754     -0.835279      -6.04008       6.04008       187.446       193.486    
  44  0.630341     -0.461494      -3.33716       3.33716       174.483       177.821    
  45  0.569388     -0.563194      -4.07257       4.07257       192.125       196.198    
  46  0.965872     -0.347242E-01 -0.251098      0.251098       188.964       189.215    
  47  0.797995     -0.225653      -1.63175       1.63175       178.432       180.064    
  48  0.716091     -0.333948      -2.41485       2.41485       191.913       194.328    
  49  0.339849      -1.07925      -7.80432       7.80432       189.919       197.724    
  50  0.202757      -1.59575      -11.5392       11.5392       193.513       205.052    
  51  0.266068      -1.32400      -9.57415       9.57415       192.832       202.406    
  52  0.985546E-01  -2.31715      -16.7558       16.7558       194.243       210.999    
  53  0.751309     -0.285938      -2.06768       2.06768       187.767       189.835    
  54  0.846042     -0.167187      -1.20896       1.20896       193.694       194.903    
  55  0.714380     -0.336340      -2.43215       2.43215       192.832       195.264    
  56  0.873273     -0.135507     -0.979880      0.979880       193.212       194.192    
  57  0.373211     -0.985610      -7.12716       7.12716       179.727       186.854    
  58  0.618869     -0.479862      -3.46998       3.46998       191.159       194.629    
  59  0.529025     -0.636720      -4.60425       4.60425       187.149       191.754    
  60  0.659913E-01  -2.71823      -19.6561       19.6561       192.832       212.488    
  61  0.541361E-01  -2.91625      -21.0881       21.0881       172.867       193.955    
  62  0.785735E-01  -2.54372      -18.3942       18.3942       190.784       209.179    
  63  0.569382     -0.563203      -4.07264       4.07264       192.846       196.919    
  64  0.564569     -0.571693      -4.13403       4.13403       192.177       196.311    
  65  0.689424     -0.371899      -2.68928       2.68928       193.650       196.339    
  66  0.992491     -0.753783E-02 -0.545077E-01  0.545077E-01   187.470       187.525    
  67  0.922665     -0.804887E-01 -0.582031      0.582031       192.832       193.414    
  68  0.497573     -0.698012      -5.04747       5.04747       192.261       197.309    
  69  0.594717     -0.519669      -3.75784       3.75784       189.670       193.428    
  70  0.132266      -2.02294      -14.6283       14.6283       192.845       207.474    
  71  0.165174      -1.80075      -13.0216       13.0216       192.598       205.620    
  72  0.787265     -0.239190      -1.72963       1.72963       199.184       200.914    
loop,thermsimp(1:2)       64  0.262794       12.1540    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340        171.71          0.84          1.12         25.21          0.06          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    171.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       64
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       65
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      339     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -6.19517       6.19517       166.873       173.068    
   2  0.350039      -1.04971      -7.59067       7.59067       174.869       182.459    
   3  0.872911     -0.135921     -0.982875      0.982875       173.636       174.619    
   4  0.829005     -0.187529      -1.35606       1.35606       173.028       174.384    
   5  0.201827      -1.60035      -11.5724       11.5724       175.329       186.901    
   6  0.735791     -0.306809      -2.21860       2.21860       174.483       176.702    
   7  0.985788     -0.143135E-01 -0.103504      0.103504       178.432       178.535    
   8  0.962727     -0.379858E-01 -0.274683      0.274683       176.135       176.410    
   9  0.796954     -0.226958      -1.64118       1.64118       168.270       169.911    
  10  0.563149     -0.574211      -4.15224       4.15224       180.389       184.541    
  11  0.776846     -0.252513      -1.82598       1.82598       177.589       179.415    
  12  0.921010     -0.822839E-01 -0.595012      0.595012       180.221       180.816    
  13  0.884938     -0.122238     -0.883931      0.883931       179.763       180.647    
  14  0.850974     -0.161373      -1.16692       1.16692       180.706       181.873    
  15  0.391065     -0.938882      -6.78925       6.78925       179.665       186.454    
  16  0.150921      -1.89100      -13.6742       13.6742       175.715       189.389    
  17  0.295162      -1.22023      -8.82375       8.82375       180.949       189.772    
  18  0.662567     -0.411634      -2.97661       2.97661       174.838       177.814    
  19  0.893994     -0.112056     -0.810300      0.810300       175.068       175.878    
  20  0.103282      -2.27029      -16.4170       16.4170       183.165       199.582    
  21  0.416341     -0.876251      -6.33636       6.33636       181.080       187.416    
  22  0.986101E-01  -2.31658      -16.7517       16.7517       183.898       200.650    
  23  0.617817E-01  -2.78415      -20.1328       20.1328       179.727       199.860    
  24  0.371945     -0.989010      -7.15174       7.15174       186.584       193.736    
  25  0.884755     -0.122444     -0.885421      0.885421       187.470       188.356    
  26  0.584237     -0.537449      -3.88641       3.88641       184.883       188.769    
  27  0.239981      -1.42719      -10.3203       10.3203       172.255       182.575    
  28  0.106477      -2.23982      -16.1966       16.1966       173.514       189.711    
  29  0.142954      -1.94523      -14.0664       14.0664       181.754       195.821    
  30  0.802284     -0.220292      -1.59298       1.59298       188.964       190.557    
  31  0.373571     -0.984648      -7.12020       7.12020       187.220       194.340    
  32  0.617091     -0.482739      -3.49079       3.49079       188.127       191.617    
  33  0.813617     -0.206266      -1.49155       1.49155       187.767       189.259    
  34  0.219787E-01  -3.81768      -27.6065       27.6065       184.706       212.312    
  35  0.398995     -0.918807      -6.64409       6.64409       184.490       191.134    
  36  0.906985     -0.976296E-01 -0.705980      0.705980       186.821       187.527    
  37  0.259146E-01  -3.65295      -26.4152       26.4152       187.149       213.565    
  38  0.347543      -1.05687      -7.64243       7.64243       183.837       191.480    
  39  0.879549     -0.128346     -0.928095      0.928095       191.810       192.738    
  40  0.618015     -0.481242      -3.47996       3.47996       192.832       196.312    
  41  0.173348      -1.75246      -12.6724       12.6724       189.670       202.342    
  42  0.324418      -1.12572      -8.14033       8.14033       187.446       195.587    
  43  0.426503     -0.852135      -6.16197       6.16197       184.056       190.218    
  44  0.672650     -0.396530      -2.86739       2.86739       183.092       185.959    
  45  0.500711     -0.691727      -5.00202       5.00202       172.867       177.869    
  46  0.457446     -0.782097      -5.65551       5.65551       193.212       198.867    
  47  0.408507     -0.895245      -6.47371       6.47371       183.292       189.765    
  48  0.649058     -0.432234      -3.12558       3.12558       178.392       181.517    
  49  0.275220      -1.29018      -9.32959       9.32959       191.913       201.243    
  50  0.706820     -0.346979      -2.50908       2.50908       185.115       187.624    
  51  0.596044     -0.517441      -3.74172       3.74172       191.159       194.900    
  52  0.362601      -1.01445      -7.33572       7.33572       193.694       201.029    
  53  0.934637     -0.675969E-01 -0.488807      0.488807       192.832       193.321    
  54  0.724055     -0.322888      -2.33487       2.33487       172.968       175.303    
  55  0.871040     -0.138067     -0.998391      0.998391       192.125       193.124    
  56  0.722457     -0.325097      -2.35084       2.35084       192.177       194.528    
  57  0.840721     -0.173495      -1.25458       1.25458       193.650       194.904    
  58  0.702714     -0.352805      -2.55121       2.55121       192.846       195.397    
  59  0.436737     -0.828424      -5.99051       5.99051       184.071       190.062    
  60  0.419753E-01  -3.17067      -22.9278       22.9278       192.261       215.189    
  61  0.588078     -0.530895      -3.83902       3.83902       189.919       193.758    
  62  0.762320     -0.271389      -1.96247       1.96247       190.160       192.123    
  63  0.646142     -0.436736      -3.15813       3.15813       185.430       188.588    
  64  0.940150     -0.617158E-01 -0.446280      0.446280       182.875       183.321    
  65  0.254129      -1.36991      -9.90614       9.90614       199.184       209.090    
  66  0.598588     -0.513182      -3.71093       3.71093       192.832       196.543    
  67  0.254926      -1.36678      -9.88349       9.88349       193.513       203.397    
  68  0.423512     -0.859172      -6.21286       6.21286       192.598       198.811    
  69  0.562567     -0.575245      -4.15972       4.15972       192.845       197.005    
  70  0.451860     -0.794383      -5.74435       5.74435       190.784       196.529    
  71  0.683714E-01  -2.68280      -19.3999       19.3999       194.243       213.643    
  72  0.301554E-01  -3.50139      -25.3193       25.3193       171.708       197.028    
loop,thermsimp(1:2)       65   6.19517       7.59067    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341        208.93          0.84          1.11         25.14          0.15          0.04         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    208.93       0.9588     -1.483      1.893     -102.6     0.8856    
                      0.2594      1.764     -99.70      3.590     0.2983    
                       2.097     -1.611      1.964      0.000     -40.00    
                      -1.495      0.000      0.000      0.000     -1.221    

                      -2.500     0.3186E+05 0.3006E+05  0.000      0.000    
                     -0.5672     -6.145     -4.421     -7.809      4.571    
                      -14.70     -3.017      458.2      0.000      532.5    

                      -497.3      8519.     -937.8     0.6348E+05  2214.    
                       5187.    -0.1140E-01-0.1171E-01  0.000     0.3843E-01
                      0.1726E-03 0.3758E-01 0.3728E-01 0.9567E-02 0.1980E-01

                     -0.1517    -0.9378      0.000    -0.2931E-01 0.1284E-01
                       0.000    -0.4896E-01-0.5247E-01-0.2522E-01 0.3507E-02
                      0.1701E-01 0.3379E-02-0.1825     -1.118      0.000    

                     -0.8569E-01 0.5829    -0.6164    -0.5334    -0.1097    
                      0.8332E-01  8.945      8.773     -4729.     -4.000    
                     -0.4066    -0.7208      9.029      8.764     -5641.    

                      -4.000     0.2085    -0.7610      8.919      8.826    
                      -3172.     -7.000    -0.3141    -0.9708      8.970    
                       8.798     -5643.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    208.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       65
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       66
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      340     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -5.39608       5.39608       168.270       173.666    
   2  0.162949E-01  -4.11691      -29.7702       29.7702       166.873       196.643    
   3  0.560104     -0.579632      -4.19144       4.19144       173.028       177.219    
   4  0.583629     -0.538490      -3.89393       3.89393       173.636       177.530    
   5  0.794243     -0.230366      -1.66582       1.66582       172.968       174.633    
   6  0.183626E-01  -3.99744      -28.9063       28.9063       175.068       203.974    
   7  0.642495     -0.442397      -3.19907       3.19907       176.135       179.334    
   8  0.611061E-02  -5.09773      -36.8628       36.8628       174.483       211.346    
   9  0.974115E-01  -2.32881      -16.8401       16.8401       174.838       191.678    
  10  0.817249E-01  -2.50440      -18.1098       18.1098       172.867       190.977    
  11  0.644422     -0.439401      -3.17740       3.17740       178.432       181.609    
  12  0.378181     -0.972383      -7.03151       7.03151       177.589       184.621    
  13  0.105422      -2.24978      -16.2686       16.2686       179.763       196.032    
  14  0.713647     -0.337367      -2.43957       2.43957       180.221       182.661    
  15  0.602100     -0.507333      -3.66863       3.66863       178.392       182.060    
  16  0.746624     -0.292194      -2.11292       2.11292       180.706       182.819    
  17  0.687673     -0.374442      -2.70767       2.70767       174.869       177.576    
  18  0.356323      -1.03192      -7.46203       7.46203       172.255       179.717    
  19  0.631203     -0.460128      -3.32729       3.32729       182.875       186.202    
  20  0.348432      -1.05431      -7.62396       7.62396       180.389       188.013    
  21  0.200848      -1.60521      -11.6076       11.6076       183.092       194.699    
  22  0.863860     -0.146345      -1.05825       1.05825       179.665       180.723    
  23  0.278415      -1.27864      -9.24613       9.24613       175.329       184.575    
  24  0.871038     -0.138069     -0.998409      0.998409       181.080       182.078    
  25  0.581010     -0.542987      -3.92645       3.92645       186.821       190.747    
  26  0.960519     -0.402815E-01 -0.291284      0.291284       185.115       185.406    
  27  0.104828      -2.25543      -16.3095       16.3095       187.470       203.780    
  28  0.907238     -0.973501E-01 -0.703960      0.703960       185.430       186.134    
  29  0.685005     -0.378330      -2.73578       2.73578       184.883       187.618    
  30  0.239566E-01  -3.73151      -26.9834       26.9834       187.767       214.751    
  31  0.643900     -0.440211      -3.18326       3.18326       175.715       178.898    
  32  0.526819     -0.640898      -4.63447       4.63447       173.514       178.149    
  33  0.463387     -0.769192      -5.56219       5.56219       183.292       188.854    
  34  0.847158E-01  -2.46845      -17.8499       17.8499       180.949       198.799    
  35  0.134368E-01  -4.30976      -31.1648       31.1648       184.071       215.236    
  36  0.141068      -1.95851      -14.1624       14.1624       184.056       198.218    
  37  0.239867      -1.42767      -10.3238       10.3238       188.964       199.288    
  38  0.317049      -1.14870      -8.30648       8.30648       184.490       192.796    
  39  0.925847     -0.770459E-01 -0.557135      0.557135       183.837       184.394    
  40  0.939258     -0.626649E-01 -0.453143      0.453143       188.127       188.580    
  41  0.111598      -2.19286      -15.8570       15.8570       190.160       206.017    
  42  0.357545      -1.02849      -7.43725       7.43725       191.810       199.247    
  43  0.902640     -0.102432     -0.740706      0.740706       192.125       192.866    
  44  0.914421     -0.894640E-01 -0.646933      0.646933       192.832       193.479    
  45  0.320420      -1.13812      -8.23000       8.23000       186.584       194.814    
  46  0.341333      -1.07490      -7.77281       7.77281       189.919       197.692    
  47  0.509727     -0.673879      -4.87296       4.87296       187.220       192.093    
  48  0.130581E-02  -6.64093      -48.0220       48.0220       192.177       240.199    
  49  0.105413      -2.24987      -16.2693       16.2693       191.159       207.428    
  50  0.743306     -0.296647      -2.14512       2.14512       193.650       195.795    
  51  0.114013      -2.17144      -15.7022       15.7022       192.846       208.548    
  52  0.225326      -1.49021      -10.7760       10.7760       187.446       198.222    
  53  0.131158      -2.03135      -14.6891       14.6891       181.754       196.444    
  54  0.886877     -0.120049     -0.868098      0.868098       192.832       193.700    
  55  0.202581      -1.59661      -11.5455       11.5455       190.784       202.330    
  56  0.890722     -0.115722     -0.836814      0.836814       192.832       193.669    
  57  0.154728      -1.86608      -13.4940       13.4940       192.845       206.339    
  58  0.246051      -1.40222      -10.1397       10.1397       171.708       181.848    
  59  0.936822     -0.652622E-01 -0.471925      0.471925       192.598       193.070    
  60  0.803405     -0.218896      -1.58288       1.58288       193.212       194.795    
  61  0.621921E-01  -2.77753      -20.0849       20.0849       183.165       203.250    
  62  0.114098      -2.17070      -15.6968       15.6968       179.727       195.424    
  63  0.750290     -0.287295      -2.07749       2.07749       183.898       185.976    
  64  0.946840     -0.546256E-01 -0.395009      0.395009       193.694       194.089    
  65  0.149613      -1.89970      -13.7371       13.7371       191.913       205.651    
  66  0.470076     -0.754861      -5.45856       5.45856       189.670       195.128    
  67  0.936184     -0.659437E-01 -0.476853      0.476853       193.513       193.990    
  68  0.136491      -1.99150      -14.4009       14.4009       199.184       213.585    
  69  0.660647     -0.414536      -2.99760       2.99760       184.706       187.704    
  70  0.438707     -0.823923      -5.95796       5.95796       187.149       193.107    
  71  0.641830     -0.443432      -3.20655       3.20655       194.243       197.450    
  72  0.841754E-01  -2.47485      -17.8962       17.8962       208.928       226.824    
loop,thermsimp(1:2)       66   5.39608       29.7702    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342        175.02          0.84          1.10         25.39          0.11          0.06         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    343        173.59          0.85          1.09         25.17          0.17          0.05         27.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    173.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       66
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       67
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      342     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -2.46425       2.46425       168.270       170.734    
   2  0.492413     -0.708438      -5.12286       5.12286       172.968       178.091    
   3  0.156563      -1.85430      -13.4088       13.4088       173.028       186.437    
   4  0.185270      -1.68594      -12.1914       12.1914       173.636       185.828    
   5  0.685983     -0.376903      -2.72546       2.72546       174.869       177.594    
   6  0.518581     -0.656659      -4.74844       4.74844       173.514       178.263    
   7  0.430667     -0.842421      -6.09172       6.09172       175.715       181.807    
   8  0.748228     -0.290047      -2.09739       2.09739       176.135       178.233    
   9  0.348167      -1.05507      -7.62946       7.62946       172.255       179.884    
  10  0.281980E-01  -3.56850      -25.8046       25.8046       179.665       205.470    
  11  0.670749     -0.399360      -2.88786       2.88786       178.432       181.320    
  12  0.225031      -1.49152      -10.7855       10.7855       171.708       182.494    
  13  0.258016      -1.35474      -9.79638       9.79638       178.392       188.188    
  14  0.122388      -2.10056      -15.1896       15.1896       181.080       196.269    
  15  0.556210     -0.586609      -4.24190       4.24190       180.221       184.463    
  16  0.938933     -0.630108E-01 -0.455645      0.455645       180.706       181.162    
  17  0.440352     -0.820180      -5.93090       5.93090       183.837       189.768    
  18  0.779048     -0.249683      -1.80551       1.80551       175.329       177.134    
  19  0.929725     -0.728667E-01 -0.526914      0.526914       177.589       178.116    
  20  0.330740      -1.10642      -8.00079       8.00079       185.115       193.116    
  21  0.214890      -1.53763      -11.1189       11.1189       183.898       195.017    
  22  0.363221      -1.01274      -7.32337       7.32337       185.430       192.753    
  23  0.681309     -0.383740      -2.77490       2.77490       182.875       185.649    
  24  0.107313      -2.23200      -16.1401       16.1401       184.883       201.023    
  25  0.622524     -0.473973      -3.42740       3.42740       184.706       188.133    
  26  0.532378     -0.630402      -4.55857       4.55857       180.389       184.947    
  27  0.298562      -1.20878      -8.74093       8.74093       188.127       196.868    
  28  0.432099     -0.839100      -6.06771       6.06771       183.292       189.359    
  29  0.243978      -1.41068      -10.2009       10.2009       186.821       197.022    
  30  0.581243     -0.542587      -3.92356       3.92356       172.867       176.791    
  31  0.897127E-01  -2.41114      -17.4355       17.4355       174.838       192.273    
  32  0.738124     -0.303644      -2.19571       2.19571       187.220       189.415    
  33  0.462727     -0.770619      -5.57251       5.57251       184.490       190.062    
  34  0.984641E-01  -2.31806      -16.7624       16.7624       192.125       208.888    
  35  0.641923     -0.443287      -3.20550       3.20550       192.598       195.803    
  36  0.334628      -1.09474      -7.91627       7.91627       187.149       195.066    
  37  0.482851     -0.728048      -5.26467       5.26467       192.832       198.097    
  38  0.826279     -0.190822      -1.37988       1.37988       192.832       194.212    
  39  0.966417     -0.341596E-01 -0.247016      0.247016       192.832       193.079    
  40  0.236833      -1.44040      -10.4158       10.4158       193.513       203.929    
  41  0.274744      -1.29192      -9.34212       9.34212       193.694       203.036    
  42  0.310307      -1.17019      -8.46191       8.46191       183.092       191.554    
  43  0.697298     -0.360543      -2.60716       2.60716       193.212       195.819    
  44  0.239072      -1.43099      -10.3478       10.3478       186.584       196.932    
  45  0.809729     -0.211055      -1.52619       1.52619       189.670       191.196    
  46  0.651880     -0.427895      -3.09420       3.09420       179.727       182.821    
  47  0.515020     -0.663550      -4.79827       4.79827       193.650       198.448    
  48  0.359059      -1.02427      -7.40670       7.40670       179.763       187.170    
  49  0.516010E-02  -5.26680      -38.0853       38.0853       181.754       219.840    
  50  0.321807      -1.13380      -8.19876       8.19876       166.873       175.072    
  51  0.787972     -0.238293      -1.72315       1.72315       194.243       195.966    
  52  0.842264     -0.171662      -1.24132       1.24132       189.919       191.161    
  53  0.201829      -1.60034      -11.5724       11.5724       184.056       195.628    
  54  0.650136     -0.430573      -3.11357       3.11357       187.446       190.560    
  55  0.498155     -0.696844      -5.03903       5.03903       180.949       185.988    
  56  0.780214E-01  -2.55077      -18.4452       18.4452       191.810       210.255    
  57  0.840777     -0.173429      -1.25410       1.25410       188.964       190.218    
  58  0.514128     -0.665282      -4.81080       4.81080       190.784       195.595    
  59  0.683522E-01  -2.68308      -19.4019       19.4019       183.165       202.567    
  60  0.376137E-01  -3.28039      -23.7212       23.7212       187.470       211.192    
  61  0.284022      -1.25870      -9.10195       9.10195       175.068       184.170    
  62  0.136027      -1.99490      -14.4255       14.4255       191.913       206.339    
  63  0.698137     -0.359341      -2.59847       2.59847       190.160       192.759    
  64  0.436751     -0.828392      -5.99028       5.99028       192.845       198.836    
  65  0.983110     -0.170340E-01 -0.123177      0.123177       191.159       191.282    
  66  0.807889E-01  -2.51592      -18.1931       18.1931       192.846       211.039    
  67  0.618306     -0.480773      -3.47657       3.47657       174.483       177.960    
  68  0.640808     -0.445025      -3.21807       3.21807       199.184       202.402    
  69  0.353445      -1.04003      -7.52066       7.52066       187.767       195.288    
  70  0.705613     -0.348688      -2.52144       2.52144       184.071       186.593    
  71  0.559094     -0.581438      -4.20450       4.20450       208.928       213.133    
  72  0.496930     -0.699307      -5.05683       5.05683       173.592       178.648    
loop,thermsimp(1:2)       67   2.46425       5.12286    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344        186.91          0.84          1.11         25.08          0.18          0.04         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    186.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       67
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       68
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      343     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -3.75364       3.75364       168.270       172.024    
   2  0.204294      -1.58819      -11.4846       11.4846       166.873       178.357    
   3  0.902141     -0.102985     -0.744703      0.744703       172.867       173.612    
   4  0.317306      -1.14789      -8.30064       8.30064       175.329       183.629    
   5  0.914914E-01  -2.39151      -17.2935       17.2935       174.869       192.162    
   6  0.362439      -1.01490      -7.33894       7.33894       174.483       181.822    
   7  0.284546      -1.25686      -9.08861       9.08861       172.968       182.056    
   8  0.752727     -0.284053      -2.05405       2.05405       177.589       179.643    
   9  0.972148     -0.282475E-01 -0.204263      0.204263       176.135       176.340    
  10  0.312417      -1.16342      -8.41290       8.41290       173.514       181.927    
  11  0.772549E-01  -2.56064      -18.5166       18.5166       173.592       192.108    
  12  0.190763      -1.65672      -11.9801       11.9801       172.255       184.235    
  13  0.829036     -0.187492      -1.35580       1.35580       180.706       182.062    
  14  0.309766      -1.17194      -8.47454       8.47454       178.432       186.906    
  15  0.691616     -0.368724      -2.66632       2.66632       175.715       178.381    
  16  0.177510      -1.72873      -12.5008       12.5008       171.708       184.209    
  17  0.848561     -0.164214      -1.18746       1.18746       179.727       180.914    
  18  0.464945     -0.765836      -5.53792       5.53792       175.068       180.606    
  19  0.626682     -0.467316      -3.37926       3.37926       180.221       183.601    
  20  0.451266     -0.795699      -5.75387       5.75387       180.389       186.143    
  21  0.161179E-01  -4.12783      -29.8492       29.8492       182.875       212.724    
  22  0.848853     -0.163869      -1.18497       1.18497       173.636       174.821    
  23  0.565946     -0.569256      -4.11641       4.11641       180.949       185.065    
  24  0.798567     -0.224937      -1.62657       1.62657       173.028       174.654    
  25  0.282371      -1.26453      -9.14411       9.14411       184.071       193.215    
  26  0.887219     -0.119663     -0.865312      0.865312       179.763       180.628    
  27  0.311981      -1.16481      -8.42300       8.42300       184.706       193.129    
  28  0.454937     -0.787596      -5.69527       5.69527       178.392       184.087    
  29  0.200774E-01  -3.90816      -28.2607       28.2607       183.292       211.552    
  30  0.549692     -0.598397      -4.32713       4.32713       187.220       191.547    
  31  0.928164     -0.745470E-01 -0.539065      0.539065       183.837       184.376    
  32  0.876026     -0.132360     -0.957121      0.957121       184.490       185.447    
  33  0.360538      -1.02016      -7.37698       7.37698       188.964       196.341    
  34  0.810484     -0.210124      -1.51945       1.51945       187.446       188.966    
  35  0.350387      -1.04872      -7.58350       7.58350       189.919       197.503    
  36  0.609257     -0.495514      -3.58317       3.58317       189.670       193.253    
  37  0.847473     -0.165497      -1.19674       1.19674       191.159       192.356    
  38  0.459433     -0.777763      -5.62417       5.62417       183.092       188.716    
  39  0.213778      -1.54282      -11.1565       11.1565       174.838       185.994    
  40  0.983077     -0.170677E-01 -0.123420      0.123420       185.430       185.553    
  41  0.719533     -0.329153      -2.38017       2.38017       190.160       192.540    
  42  0.317292      -1.14793      -8.30096       8.30096       192.832       201.133    
  43  0.300670      -1.20174      -8.69005       8.69005       185.115       193.805    
  44  0.486388     -0.720748      -5.21188       5.21188       192.832       198.044    
  45  0.309580      -1.17254      -8.47887       8.47887       183.898       192.377    
  46  0.111802      -2.19103      -15.8438       15.8438       187.149       202.993    
  47  0.913484     -0.904897E-01 -0.654350      0.654350       187.767       188.422    
  48  0.438377     -0.824676      -5.96341       5.96341       190.784       196.748    
  49  0.773114     -0.257329      -1.86080       1.86080       184.056       185.917    
  50  0.248259      -1.39328      -10.0751       10.0751       192.598       202.673    
  51  0.502855     -0.687454      -4.97113       4.97113       193.212       198.183    
  52  0.827610E-01  -2.49180      -18.0187       18.0187       194.243       212.262    
  53  0.528759     -0.637222      -4.60789       4.60789       181.080       185.687    
  54  0.711957     -0.339738      -2.45672       2.45672       188.127       190.583    
  55  0.703963     -0.351029      -2.53837       2.53837       186.584       189.122    
  56  0.419247     -0.869295      -6.28606       6.28606       186.821       193.107    
  57  0.939830     -0.620566E-01 -0.448744      0.448744       192.832       193.281    
  58  0.401337     -0.912955      -6.60177       6.60177       193.650       200.252    
  59  0.547477     -0.602435      -4.35634       4.35634       192.845       197.202    
  60  0.237364      -1.43816      -10.3997       10.3997       184.883       195.282    
  61  0.619970E-01  -2.78067      -20.1076       20.1076       199.184       219.292    
  62  0.662658     -0.411496      -2.97562       2.97562       183.165       186.141    
  63  0.891998     -0.114291     -0.826463      0.826463       193.694       194.520    
  64  0.830370     -0.185883      -1.34416       1.34416       193.513       194.857    
  65  0.900614     -0.104678     -0.756952      0.756952       179.665       180.422    
  66  0.258356      -1.35342      -9.78684       9.78684       191.913       201.700    
  67  0.946683E-01  -2.35738      -17.0467       17.0467       192.125       209.172    
  68  0.763751     -0.269514      -1.94891       1.94891       191.810       193.759    
  69  0.161805      -1.82136      -13.1707       13.1707       192.846       206.017    
  70  0.571882     -0.558823      -4.04097       4.04097       187.470       191.511    
  71  0.421732     -0.863386      -6.24333       6.24333       208.928       215.172    
  72  0.877271     -0.130939     -0.946851      0.946851       186.910       187.857    
loop,thermsimp(1:2)       68   3.75364       11.4846    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345        207.31          0.84          1.11         25.08          0.22          0.04         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    207.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       68
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       69
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      344     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -5.92641       5.92641       168.270       174.197    
   2  0.752309     -0.284608      -2.05806       2.05806       172.867       174.925    
   3  0.209108      -1.56490      -11.3162       11.3162       173.028       184.344    
   4  0.842922     -0.170881      -1.23568       1.23568       173.636       174.872    
   5  0.161148      -1.82543      -13.2001       13.2001       176.135       189.335    
   6  0.601748     -0.507917      -3.67286       3.67286       166.873       170.546    
   7  0.890912     -0.115510     -0.835277      0.835277       175.715       176.550    
   8  0.631939     -0.458963      -3.31886       3.31886       177.589       180.908    
   9  0.144759E-01  -4.23527      -30.6261       30.6261       179.665       210.291    
  10  0.653698     -0.425110      -3.07406       3.07406       175.068       178.142    
  11  0.401463     -0.912639      -6.59949       6.59949       179.763       186.363    
  12  0.906126     -0.985765E-01 -0.712828      0.712828       179.727       180.440    
  13  0.480601E-01  -3.03530      -21.9489       21.9489       174.483       196.432    
  14  0.264260      -1.33082      -9.62345       9.62345       173.514       183.138    
  15  0.586033     -0.534379      -3.86421       3.86421       172.968       176.832    
  16  0.323072      -1.12988      -8.17039       8.17039       180.706       188.877    
  17  0.785147     -0.241884      -1.74911       1.74911       180.221       181.971    
  18  0.139165      -1.97210      -14.2607       14.2607       175.329       189.589    
  19  0.105818E-01  -4.54862      -32.8920       32.8920       178.392       211.284    
  20  0.896943     -0.108763     -0.786491      0.786491       171.708       172.495    
  21  0.854239     -0.157544      -1.13923       1.13923       172.255       173.394    
  22  0.566003     -0.569157      -4.11569       4.11569       183.837       187.953    
  23  0.566387     -0.568477      -4.11078       4.11078       180.949       185.059    
  24  0.414905     -0.879707      -6.36135       6.36135       184.490       190.851    
  25  0.173772      -1.75001      -12.6547       12.6547       185.430       198.085    
  26  0.884308E-01  -2.42554      -17.5396       17.5396       181.080       198.619    
  27  0.417457     -0.873573      -6.31699       6.31699       184.056       190.373    
  28  0.334615      -1.09477      -7.91654       7.91654       174.838       182.754    
  29  0.706024E-01  -2.65069      -19.1677       19.1677       183.165       202.333    
  30  0.996422     -0.358418E-02 -0.259179E-01  0.259179E-01   180.389       180.415    
  31  0.894500     -0.111491     -0.806213      0.806213       178.432       179.238    
  32  0.827855     -0.188917      -1.36610       1.36610       186.910       188.276    
  33  0.434964     -0.832492      -6.01993       6.01993       187.767       193.787    
  34  0.121450      -2.10825      -15.2452       15.2452       183.092       198.337    
  35  0.498977     -0.695195      -5.02710       5.02710       187.446       192.473    
  36  0.117961      -2.13740      -15.4560       15.4560       186.584       202.040    
  37  0.309211      -1.17373      -8.48749       8.48749       188.127       196.614    
  38  0.786265     -0.240461      -1.73883       1.73883       187.470       189.209    
  39  0.614330     -0.487222      -3.52321       3.52321       187.220       190.743    
  40  0.820857     -0.197407      -1.42749       1.42749       173.592       175.019    
  41  0.670448     -0.399809      -2.89110       2.89110       174.869       177.760    
  42  0.742403     -0.297863      -2.15391       2.15391       191.159       193.313    
  43  0.760912E-01  -2.57582      -18.6263       18.6263       183.898       202.525    
  44  0.709677     -0.342945      -2.47991       2.47991       190.160       192.640    
  45  0.943449     -0.582133E-01 -0.420953      0.420953       186.821       187.242    
  46  0.176370      -1.73517      -12.5474       12.5474       184.706       197.253    
  47  0.866890     -0.142843      -1.03293       1.03293       184.071       185.104    
  48  0.711056     -0.341004      -2.46588       2.46588       189.670       192.136    
  49  0.929667E-01  -2.37551      -17.1778       17.1778       192.832       210.010    
  50  0.960091     -0.407270E-01 -0.294505      0.294505       191.810       192.104    
  51  0.948380     -0.530000E-01 -0.383254      0.383254       185.115       185.498    
  52  0.257449      -1.35693      -9.81227       9.81227       193.694       203.506    
  53  0.117236      -2.14357      -15.5006       15.5006       193.513       209.014    
  54  0.218340E-01  -3.82429      -27.6542       27.6542       184.883       212.537    
  55  0.523421     -0.647370      -4.68127       4.68127       188.964       193.646    
  56  0.577211     -0.549547      -3.97389       3.97389       190.784       194.758    
  57  0.288682      -1.24243      -8.98428       8.98428       192.845       201.830    
  58  0.672927E-01  -2.69870      -19.5149       19.5149       189.919       209.434    
  59  0.530586     -0.633774      -4.58295       4.58295       192.832       197.415    
  60  0.511831     -0.669760      -4.84318       4.84318       193.212       198.055    
  61  0.658851     -0.417258      -3.01728       3.01728       193.650       196.667    
  62  0.108719E-01  -4.52157      -32.6964       32.6964       192.832       225.529    
  63  0.252985      -1.37443      -9.93877       9.93877       191.913       201.852    
  64  0.741974     -0.298440      -2.15809       2.15809       192.598       194.756    
  65  0.978889     -0.213374E-01 -0.154295      0.154295       187.149       187.304    
  66  0.482845     -0.728059      -5.26475       5.26475       192.846       198.111    
  67  0.701589     -0.354408      -2.56280       2.56280       192.125       194.688    
  68  0.323083      -1.12985      -8.17016       8.17016       183.292       191.462    
  69  0.960426     -0.403786E-01 -0.291986      0.291986       194.243       194.535    
  70  0.803478     -0.218806      -1.58223       1.58223       182.875       184.457    
  71  0.927800     -0.749395E-01 -0.541903      0.541903       208.928       209.470    
  72  0.414115     -0.881611      -6.37511       6.37511       207.310       213.685    
loop,thermsimp(1:2)       69   5.92641       2.05806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346        175.13          0.84          1.11         25.16          0.19          0.05         27.35
Just calling func    0   0         27.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       69
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       70
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      345     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.844470E-01  0.844470E-01   166.873       166.957    
   2  0.482301     -0.729186      -5.27290       5.27290       171.708       176.981    
   3  0.546964     -0.603372      -4.36311       4.36311       172.255       176.618    
   4  0.543918     -0.608957      -4.40350       4.40350       168.270       172.674    
   5  0.427641     -0.849472      -6.14271       6.14271       173.636       179.779    
   6  0.498345     -0.696462      -5.03626       5.03626       172.867       177.904    
   7  0.989308     -0.107494E-01 -0.777309E-01  0.777309E-01   173.592       173.669    
   8  0.658822     -0.417302      -3.01760       3.01760       175.715       178.733    
   9  0.917808     -0.857673E-01 -0.620202      0.620202       172.968       173.588    
  10  0.914490E-04  -9.29973      -67.2483       67.2483       174.869       242.117    
  11  0.989901     -0.101499E-01 -0.733961E-01  0.733961E-01   175.068       175.141    
  12  0.558183     -0.583069      -4.21630       4.21630       178.432       182.648    
  13  0.706994     -0.346733      -2.50730       2.50730       180.389       182.896    
  14  0.599152     -0.512240      -3.70412       3.70412       179.727       183.431    
  15  0.845909     -0.167343      -1.21009       1.21009       177.589       178.799    
  16  0.655384     -0.422534      -3.05543       3.05543       180.221       183.277    
  17  0.412232E-01  -3.18875      -23.0586       23.0586       174.838       197.896    
  18  0.495401     -0.702387      -5.07911       5.07911       173.514       178.594    
  19  0.378829     -0.970671      -7.01913       7.01913       173.028       180.047    
  20  0.653665E-02  -5.03033      -36.3754       36.3754       182.875       219.250    
  21  0.782670     -0.245045      -1.77197       1.77197       180.949       182.721    
  22  0.945547     -0.559921E-01 -0.404891      0.404891       184.071       184.476    
  23  0.969857     -0.306063E-01 -0.221321      0.221321       185.115       185.336    
  24  0.822249     -0.195712      -1.41523       1.41523       179.763       181.178    
  25  0.265012E-01  -3.63056      -26.2534       26.2534       186.821       213.074    
  26  0.360432E-01  -3.32304      -24.0296       24.0296       187.149       211.179    
  27  0.796418     -0.227631      -1.64605       1.64605       183.837       185.483    
  28  0.292313E-01  -3.53252      -25.5444       25.5444       186.910       212.454    
  29  0.227321      -1.48139      -10.7123       10.7123       180.706       191.419    
  30  0.812637     -0.207471      -1.50026       1.50026       187.470       188.971    
  31  0.930544     -0.719857E-01 -0.520544      0.520544       176.135       176.656    
  32  0.674873     -0.393231      -2.84354       2.84354       175.329       178.172    
  33  0.264030      -1.33169      -9.62974       9.62974       184.056       193.686    
  34  0.807464     -0.213856      -1.54644       1.54644       187.220       188.766    
  35  0.653731     -0.425060      -3.07370       3.07370       184.490       187.563    
  36  0.858536     -0.152527      -1.10295       1.10295       183.292       184.395    
  37  0.538887     -0.618250      -4.47070       4.47070       191.810       196.281    
  38  0.468049     -0.759182      -5.48981       5.48981       189.670       195.159    
  39  0.401324     -0.912987      -6.60200       6.60200       187.446       194.048    
  40  0.363356      -1.01237      -7.32068       7.32068       190.160       197.481    
  41  0.924933     -0.780342E-01 -0.564282      0.564282       191.159       191.723    
  42  0.797289     -0.226538      -1.63814       1.63814       188.964       190.603    
  43  0.200097      -1.60895      -11.6347       11.6347       187.767       199.402    
  44  0.686219     -0.376559      -2.72297       2.72297       194.243       196.966    
  45  0.895629     -0.110230     -0.797093      0.797093       192.125       192.923    
  46  0.331830      -1.10313      -7.97698       7.97698       192.598       200.575    
  47  0.967018     -0.335379E-01 -0.242519      0.242519       190.784       191.027    
  48  0.268282      -1.31572      -9.51423       9.51423       174.483       183.998    
  49  0.472399     -0.749931      -5.42291       5.42291       188.127       193.550    
  50  0.399276E-01  -3.22069      -23.2895       23.2895       193.650       216.939    
  51  0.956493     -0.444820E-01 -0.321659      0.321659       184.706       185.028    
  52  0.444161     -0.811569      -5.86863       5.86863       192.832       198.701    
  53  0.308942      -1.17460      -8.49380       8.49380       193.212       201.705    
  54  0.602319     -0.506968      -3.66599       3.66599       185.430       189.096    
  55  0.533797     -0.627740      -4.53932       4.53932       192.846       197.385    
  56  0.990519     -0.952607E-02 -0.688851E-01  0.688851E-01   183.092       183.161    
  57  0.931261     -0.712158E-01 -0.514977      0.514977       181.080       181.595    
  58  0.185125      -1.68672      -12.1970       12.1970       192.845       205.042    
  59  0.251659E-02  -5.98485      -43.2777       43.2777       191.913       235.191    
  60  0.706458     -0.347491      -2.51278       2.51278       186.584       189.097    
  61  0.555619     -0.587673      -4.24959       4.24959       183.165       187.415    
  62  0.798153     -0.225455      -1.63032       1.63032       183.898       185.529    
  63  0.951290     -0.499358E-01 -0.361097      0.361097       193.694       194.055    
  64  0.247755      -1.39532      -10.0898       10.0898       193.513       203.603    
  65  0.867838     -0.141750      -1.02503       1.02503       189.919       190.944    
  66  0.164123E-01  -4.10972      -29.7183       29.7183       208.928       238.647    
  67  0.443305     -0.813497      -5.88257       5.88257       192.832       198.715    
  68  0.390544     -0.940215      -6.79889       6.79889       179.665       186.464    
  69  0.854116     -0.157688      -1.14028       1.14028       178.392       179.532    
  70  0.873727     -0.134987     -0.976123      0.976123       184.883       185.859    
  71  0.656755E-01  -2.72303      -19.6908       19.6908       207.310       227.001    
  72  0.742002     -0.298403      -2.15781       2.15781       175.132       177.290    
loop,thermsimp(1:2)       70  0.844470E-01   5.27290    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347        184.31          0.84          1.11         25.12          0.16          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       70
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       71
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      346     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -1.08884       1.08884       166.873       167.962    
   2  0.573661     -0.555717      -4.01851       4.01851       168.270       172.289    
   3  0.499290     -0.694569      -5.02257       5.02257       172.968       177.990    
   4  0.677563     -0.389253      -2.81477       2.81477       173.592       176.406    
   5  0.476566     -0.741149      -5.35941       5.35941       175.068       180.427    
   6  0.153036      -1.87708      -13.5736       13.5736       172.255       185.828    
   7  0.626270     -0.467973      -3.38402       3.38402       176.135       179.519    
   8  0.794744     -0.229735      -1.66126       1.66126       171.708       173.370    
   9  0.111868E-01  -4.49302      -32.4900       32.4900       175.132       207.622    
  10  0.643880     -0.440243      -3.18349       3.18349       172.867       176.051    
  11  0.634705     -0.454595      -3.28727       3.28727       175.329       178.616    
  12  0.653568     -0.425308      -3.07550       3.07550       173.514       176.590    
  13  0.888231     -0.118524     -0.857071      0.857071       175.715       176.572    
  14  0.681775E-01  -2.68564      -19.4204       19.4204       177.589       197.010    
  15  0.241248      -1.42193      -10.2823       10.2823       178.392       188.674    
  16  0.208857      -1.56610      -11.3248       11.3248       173.636       184.961    
  17  0.652439     -0.427038      -3.08800       3.08800       173.028       176.116    
  18  0.489833     -0.713691      -5.16085       5.16085       179.763       184.924    
  19  0.719225     -0.329581      -2.38327       2.38327       181.080       183.463    
  20  0.924762     -0.782189E-01 -0.565618      0.565618       178.432       178.997    
  21  0.845502     -0.167825      -1.21358       1.21358       180.949       182.162    
  22  0.665989     -0.406482      -2.93936       2.93936       180.389       183.328    
  23  0.378562     -0.971376      -7.02423       7.02423       183.092       190.116    
  24  0.396889     -0.924098      -6.68235       6.68235       180.221       186.904    
  25  0.158089      -1.84460      -13.3387       13.3387       179.727       193.065    
  26  0.590577     -0.526655      -3.80836       3.80836       174.483       178.292    
  27  0.949513     -0.518061E-01 -0.374621      0.374621       183.292       183.666    
  28  0.518198     -0.657398      -4.75378       4.75378       184.071       188.825    
  29  0.551080     -0.595875      -4.30890       4.30890       184.706       189.015    
  30  0.986285     -0.138097E-01 -0.998612E-01  0.998612E-01   185.115       185.215    
  31  0.920142     -0.832276E-01 -0.601837      0.601837       183.837       184.439    
  32  0.133201      -2.01590      -14.5774       14.5774       183.898       198.476    
  33  0.584507     -0.536987      -3.88306       3.88306       184.883       188.766    
  34  0.790583     -0.234984      -1.69922       1.69922       179.665       181.364    
  35  0.702664     -0.352876      -2.55172       2.55172       183.165       185.717    
  36  0.148885      -1.90458      -13.7724       13.7724       184.490       198.262    
  37  0.290436      -1.23637      -8.94047       8.94047       187.220       196.160    
  38  0.638249     -0.449027      -3.24701       3.24701       187.470       190.717    
  39  0.381605     -0.963369      -6.96633       6.96633       185.430       192.396    
  40  0.823069     -0.194716      -1.40803       1.40803       186.584       187.992    
  41  0.492318     -0.708630      -5.12425       5.12425       188.964       194.089    
  42  0.773199     -0.257218      -1.86000       1.86000       189.919       191.779    
  43  0.289475E-01  -3.54227      -25.6149       25.6149       190.784       216.399    
  44  0.355683      -1.03371      -7.47501       7.47501       180.706       188.181    
  45  0.160396      -1.83011      -13.2339       13.2339       191.159       204.393    
  46  0.972861     -0.275140E-01 -0.198960      0.198960       192.125       192.324    
  47  0.781938E-02  -4.85115      -35.0797       35.0797       188.127       223.206    
  48  0.225299      -1.49033      -10.7769       10.7769       184.056       194.833    
  49  0.631686     -0.459363      -3.32175       3.32175       187.446       190.768    
  50  0.212316      -1.54968      -11.2060       11.2060       193.694       204.900    
  51  0.673664     -0.395024      -2.85650       2.85650       189.670       192.526    
  52  0.728322     -0.317012      -2.29238       2.29238       191.810       194.102    
  53  0.368576     -0.998108      -7.21753       7.21753       194.243       201.461    
  54  0.381088     -0.964725      -6.97613       6.97613       192.846       199.822    
  55  0.481283     -0.731301      -5.28819       5.28819       190.160       195.448    
  56  0.801664     -0.221066      -1.59857       1.59857       174.838       176.436    
  57  0.285936      -1.25199      -9.05339       9.05339       192.832       201.886    
  58  0.412374     -0.885823      -6.40558       6.40558       192.832       199.238    
  59  0.815685     -0.203727      -1.47319       1.47319       187.767       189.241    
  60  0.251414      -1.38065      -9.98380       9.98380       192.598       202.582    
  61  0.598278     -0.513699      -3.71467       3.71467       193.212       196.926    
  62  0.750137     -0.287499      -2.07897       2.07897       193.513       195.592    
  63  0.412907     -0.884533      -6.39625       6.39625       192.845       199.242    
  64  0.318297      -1.14477      -8.27809       8.27809       187.149       195.427    
  65  0.520766     -0.652454      -4.71804       4.71804       186.910       191.628    
  66  0.983801     -0.163320E-01 -0.118100      0.118100       186.821       186.939    
  67  0.897709     -0.107909     -0.780314      0.780314       193.650       194.430    
  68  0.645455     -0.437800      -3.16582       3.16582       182.875       186.040    
  69  0.995902     -0.410634E-02 -0.296938E-01  0.296938E-01   207.310       207.340    
  70  0.333624      -1.09774      -7.93799       7.93799       191.913       199.851    
  71  0.651980     -0.427742      -3.09309       3.09309       208.928       212.021    
  72  0.355582      -1.03400      -7.47707       7.47707       184.313       191.790    
loop,thermsimp(1:2)       71   1.08884       4.01851    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348        187.65          0.84          1.11         25.05          0.19          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       71
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       72
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      347     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -5.92404       5.92404       166.873       172.797    
   2  0.202294      -1.59803      -11.5557       11.5557       168.270       179.826    
   3  0.873786     -0.134920     -0.975637      0.975637       171.708       172.684    
   4  0.262141      -1.33887      -9.68168       9.68168       172.867       182.549    
   5  0.342005      -1.07293      -7.75858       7.75858       173.028       180.786    
   6  0.421217     -0.864607      -6.25216       6.25216       173.592       179.844    
   7  0.618489     -0.480477      -3.47443       3.47443       174.838       178.312    
   8  0.412552     -0.885393      -6.40246       6.40246       175.715       182.117    
   9  0.951192     -0.500396E-01 -0.361847      0.361847       173.514       173.876    
  10  0.298546      -1.20883      -8.74133       8.74133       172.968       181.709    
  11  0.805120     -0.216763      -1.56746       1.56746       174.483       176.051    
  12  0.208146      -1.56951      -11.3495       11.3495       175.329       186.678    
  13  0.924021     -0.790209E-01 -0.571417      0.571417       178.432       179.003    
  14  0.447624     -0.803802      -5.81246       5.81246       176.135       181.948    
  15  0.667709     -0.403903      -2.92071       2.92071       175.068       177.989    
  16  0.767295E-01  -2.56747      -18.5659       18.5659       179.665       198.231    
  17  0.301582      -1.19871      -8.66814       8.66814       180.949       189.617    
  18  0.788580     -0.237522      -1.71757       1.71757       180.389       182.106    
  19  0.887020     -0.119888     -0.866933      0.866933       181.080       181.946    
  20  0.233035E-01  -3.75915      -27.1832       27.1832       183.292       210.475    
  21  0.899320     -0.106116     -0.767351      0.767351       183.837       184.605    
  22  0.144480      -1.93461      -13.9896       13.9896       179.763       193.753    
  23  0.274629      -1.29233      -9.34514       9.34514       173.636       182.982    
  24  0.831597     -0.184407      -1.33349       1.33349       185.115       186.448    
  25  0.388827     -0.944620      -6.83074       6.83074       183.165       189.996    
  26  0.257578      -1.35643      -9.80866       9.80866       172.255       182.064    
  27  0.427791     -0.849120      -6.14017       6.14017       182.875       189.015    
  28  0.837664E-01  -2.47972      -17.9314       17.9314       180.221       198.153    
  29  0.782727     -0.244972      -1.77144       1.77144       186.821       188.592    
  30  0.259676E-01  -3.65091      -26.4005       26.4005       186.584       212.984    
  31  0.166181      -1.79468      -12.9777       12.9777       180.706       193.684    
  32  0.360749      -1.01957      -7.37274       7.37274       178.392       185.764    
  33  0.369697     -0.995071      -7.19557       7.19557       184.883       192.078    
  34  0.959392     -0.414553E-01 -0.299772      0.299772       184.071       184.371    
  35  0.449170     -0.800353      -5.78752       5.78752       184.706       190.493    
  36  0.655790E-02  -5.02708      -36.3519       36.3519       187.767       224.119    
  37  0.133569      -2.01313      -14.5574       14.5574       183.092       197.649    
  38  0.282061      -1.26563      -9.15206       9.15206       187.470       196.622    
  39  0.431813     -0.839762      -6.07250       6.07250       187.446       193.519    
  40  0.713174     -0.338031      -2.44437       2.44437       186.910       189.354    
  41  0.511305     -0.670790      -4.85062       4.85062       189.919       194.770    
  42  0.264485      -1.32997      -9.61731       9.61731       184.313       193.930    
  43  0.779298     -0.249362      -1.80319       1.80319       192.125       193.929    
  44  0.709352E-02  -4.94857      -35.7842       35.7842       185.430       221.214    
  45  0.770402     -0.260843      -1.88621       1.88621       189.670       191.556    
  46  0.694393     -0.364718      -2.63735       2.63735       179.727       182.364    
  47  0.589268E-01  -2.83146      -20.4749       20.4749       188.964       209.439    
  48  0.817644     -0.201328      -1.45585       1.45585       191.810       193.266    
  49  0.990168     -0.988073E-02 -0.714496E-01  0.714496E-01   193.650       193.721    
  50  0.733536E-01  -2.61246      -18.8913       18.8913       184.056       202.947    
  51  0.781472     -0.246575      -1.78304       1.78304       187.149       188.932    
  52  0.582548     -0.540344      -3.90734       3.90734       190.160       194.067    
  53  0.644915     -0.438636      -3.17187       3.17187       193.513       196.685    
  54  0.726975     -0.318863      -2.30577       2.30577       187.220       189.525    
  55  0.562265     -0.575782      -4.16360       4.16360       193.212       197.375    
  56  0.166410      -1.79330      -12.9677       12.9677       177.589       190.557    
  57  0.847052     -0.165994      -1.20033       1.20033       184.490       185.690    
  58  0.437688     -0.826250      -5.97479       5.97479       183.898       189.873    
  59  0.408722     -0.894719      -6.46991       6.46991       192.832       199.302    
  60  0.794023     -0.230643      -1.66783       1.66783       192.845       194.513    
  61  0.259946      -1.34728      -9.74246       9.74246       192.846       202.589    
  62  0.700123     -0.356499      -2.57792       2.57792       191.913       194.491    
  63  0.564078E-01  -2.87515      -20.7908       20.7908       194.243       215.034    
  64  0.999061     -0.939094E-03 -0.679079E-02  0.679079E-02   192.832       192.839    
  65  0.555696     -0.587534      -4.24859       4.24859       192.598       196.847    
  66  0.103792      -2.26537      -16.3814       16.3814       191.159       207.540    
  67  0.318583      -1.14387      -8.27158       8.27158       193.694       201.965    
  68  0.321355      -1.13521      -8.20893       8.20893       207.310       215.519    
  69  0.350004      -1.04981      -7.59141       7.59141       175.132       182.723    
  70  0.786507     -0.240153      -1.73660       1.73660       208.928       210.665    
  71  0.267605E-01  -3.62083      -26.1830       26.1830       190.784       216.967    
  72  0.104251      -2.26095      -16.3494       16.3494       187.646       203.996    
loop,thermsimp(1:2)       72   5.92404       11.5557    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349        177.34          0.84          1.11         25.06          0.22          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    350        179.53          0.85          1.11         25.06          0.22          0.05         27.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    177.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       72
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       73
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      349     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -1.54261       1.54261       171.708       173.251    
   2  0.554495     -0.589697      -4.26422       4.26422       166.873       171.137    
   3  0.997056     -0.294851E-02 -0.213213E-01  0.213213E-01   173.514       173.536    
   4  0.901183E-01  -2.40663      -17.4029       17.4029       174.483       191.886    
   5  0.296736      -1.21491      -8.78530       8.78530       175.068       183.853    
   6  0.907820     -0.967094E-01 -0.699326      0.699326       174.838       175.537    
   7  0.325542      -1.12226      -8.11532       8.11532       178.432       186.547    
   8  0.947537     -0.538896E-01 -0.389687      0.389687       168.270       168.660    
   9  0.378276     -0.972130      -7.02968       7.02968       173.592       180.621    
  10  0.985613     -0.144920E-01 -0.104794      0.104794       173.028       173.133    
  11  0.167434      -1.78717      -12.9234       12.9234       172.968       185.891    
  12  0.693849E-01  -2.66809      -19.2935       19.2935       181.080       200.373    
  13  0.434983     -0.832447      -6.01960       6.01960       176.135       182.155    
  14  0.998656     -0.134491E-02 -0.972533E-02  0.972533E-02   172.255       172.265    
  15  0.650302     -0.430318      -3.11172       3.11172       180.389       183.501    
  16  0.152610      -1.87987      -13.5937       13.5937       175.715       189.309    
  17  0.273947      -1.29482      -9.36312       9.36312       179.727       189.090    
  18  0.990471     -0.957469E-02 -0.692366E-01  0.692366E-01   172.867       172.937    
  19  0.684493     -0.379077      -2.74118       2.74118       175.132       177.873    
  20  0.864467E-01  -2.44823      -17.7037       17.7037       173.636       191.340    
  21  0.546085     -0.604980      -4.37474       4.37474       184.071       188.446    
  22  0.246642      -1.39982      -10.1224       10.1224       183.837       193.960    
  23  0.484505     -0.724627      -5.23993       5.23993       184.490       189.730    
  24  0.567359     -0.566763      -4.09838       4.09838       178.392       182.490    
  25  0.564371     -0.572043      -4.13657       4.13657       185.115       189.252    
  26  0.825604     -0.191640      -1.38579       1.38579       175.329       176.714    
  27  0.302493      -1.19570      -8.64635       8.64635       186.821       195.467    
  28  0.630396     -0.461407      -3.33653       3.33653       187.149       190.486    
  29  0.886734     -0.120210     -0.869267      0.869267       182.875       183.744    
  30  0.389345     -0.943288      -6.82112       6.82112       186.910       193.731    
  31  0.181391      -1.70710      -12.3444       12.3444       187.220       199.564    
  32  0.933221     -0.691132E-01 -0.499772      0.499772       180.949       181.448    
  33  0.169237E-01  -4.07904      -29.4964       29.4964       183.898       213.395    
  34  0.757788     -0.277351      -2.00559       2.00559       183.165       185.171    
  35  0.300993E-01  -3.50325      -25.3328       25.3328       184.706       210.039    
  36  0.395621     -0.927300      -6.70550       6.70550       177.589       184.295    
  37  0.459505     -0.777605      -5.62303       5.62303       189.670       195.293    
  38  0.733176     -0.310370      -2.24435       2.24435       184.883       187.127    
  39  0.575459     -0.552587      -3.99588       3.99588       192.832       196.828    
  40  0.560889     -0.578233      -4.18132       4.18132       191.810       195.991    
  41  0.428351     -0.847812      -6.13071       6.13071       187.446       193.577    
  42  0.553832     -0.590895      -4.27289       4.27289       180.706       184.979    
  43  0.581118     -0.542801      -3.92511       3.92511       193.650       197.575    
  44  0.319195E-01  -3.44454      -24.9082       24.9082       179.763       204.671    
  45  0.224512E-01  -3.79641      -27.4527       27.4527       192.125       219.578    
  46  0.113637E-01  -4.47733      -32.3765       32.3765       184.313       216.690    
  47  0.889134     -0.117508     -0.849724      0.849724       190.160       191.010    
  48  0.422937     -0.860531      -6.22268       6.22268       191.913       198.136    
  49  0.479928     -0.734119      -5.30857       5.30857       192.845       198.154    
  50  0.813133     -0.206861      -1.49585       1.49585       189.919       191.415    
  51  0.544683     -0.607551      -4.39333       4.39333       187.470       191.864    
  52  0.694184E-01  -2.66760      -19.2900       19.2900       193.513       212.803    
  53  0.656508     -0.420820      -3.04304       3.04304       192.598       195.641    
  54  0.532118     -0.630889      -4.56209       4.56209       193.212       197.774    
  55  0.485731E-01  -3.02468      -21.8721       21.8721       183.092       204.964    
  56  0.525424     -0.643549      -4.65364       4.65364       180.221       184.875    
  57  0.773368E-01  -2.55959      -18.5089       18.5089       179.665       198.174    
  58  0.741245     -0.299424      -2.16520       2.16520       192.832       194.998    
  59  0.286066      -1.25153      -9.05011       9.05011       193.694       202.744    
  60  0.327223      -1.11711      -8.07808       8.07808       192.846       200.924    
  61  0.124235      -2.08558      -15.0813       15.0813       184.056       199.137    
  62  0.599337     -0.511931      -3.70188       3.70188       187.646       191.348    
  63  0.666632     -0.405518      -2.93239       2.93239       191.159       194.091    
  64  0.810607     -0.209973      -1.51836       1.51836       188.964       190.483    
  65  0.104486      -2.25870      -16.3331       16.3331       183.292       199.625    
  66  0.516216     -0.661229      -4.78149       4.78149       208.928       213.710    
  67  0.671995     -0.397504      -2.87444       2.87444       186.584       189.458    
  68  0.343614      -1.06824      -7.72465       7.72465       194.243       201.968    
  69  0.423208     -0.859892      -6.21806       6.21806       207.310       213.528    
  70  0.301080E-01  -3.50297      -25.3307       25.3307       190.784       216.115    
  71  0.364244      -1.00993      -7.30303       7.30303       185.430       192.733    
  72  0.333024      -1.09954      -7.95100       7.95100       177.340       185.291    
loop,thermsimp(1:2)       73   1.54261       4.26422    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351        177.54          0.84          1.11         25.11          0.16          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       73
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       74
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      350     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889     -0.845250      0.845250       168.270       169.115    
   2  0.480213     -0.733525      -5.30428       5.30428       166.873       172.177    
   3  0.226156      -1.48653      -10.7494       10.7494       172.255       183.004    
   4  0.633402     -0.456651      -3.30214       3.30214       172.867       176.169    
   5  0.925311     -0.776258E-01 -0.561328      0.561328       173.028       173.589    
   6  0.498405     -0.696343      -5.03540       5.03540       171.708       176.744    
   7  0.133283      -2.01528      -14.5729       14.5729       173.514       188.087    
   8  0.657074E-01  -2.72254      -19.6873       19.6873       174.838       194.525    
   9  0.726758     -0.319162      -2.30793       2.30793       175.329       177.637    
  10  0.398365     -0.920388      -6.65552       6.65552       175.132       181.787    
  11  0.321047E-01  -3.43875      -24.8663       24.8663       173.592       198.458    
  12  0.276307      -1.28624      -9.30110       9.30110       180.949       190.250    
  13  0.483740     -0.726208      -5.25137       5.25137       176.135       181.387    
  14  0.224589      -1.49348      -10.7997       10.7997       178.392       189.191    
  15  0.832041     -0.183874      -1.32963       1.32963       180.389       181.719    
  16  0.939301     -0.626192E-01 -0.452813      0.452813       182.875       183.327    
  17  0.624052     -0.471522      -3.40967       3.40967       175.068       178.478    
  18  0.172753      -1.75589      -12.6972       12.6972       177.589       190.287    
  19  0.468323     -0.758597      -5.48557       5.48557       180.221       185.707    
  20  0.963461     -0.372229E-01 -0.269167      0.269167       180.706       180.976    
  21  0.812092     -0.208142      -1.50512       1.50512       183.165       184.671    
  22  0.376764     -0.976137      -7.05866       7.05866       177.340       184.399    
  23  0.791872E-01  -2.53594      -18.3379       18.3379       172.968       191.306    
  24  0.237003      -1.43968      -10.4107       10.4107       178.432       188.842    
  25  0.320094      -1.13914      -8.23737       8.23737       184.883       193.120    
  26  0.821410E-01  -2.49932      -18.0731       18.0731       184.071       202.144    
  27  0.789147     -0.236802      -1.71237       1.71237       179.727       181.439    
  28  0.734353E-01  -2.61135      -18.8832       18.8832       185.115       203.998    
  29  0.226401      -1.48545      -10.7416       10.7416       175.715       186.457    
  30  0.380831     -0.965399      -6.98100       6.98100       186.584       193.565    
  31  0.264857      -1.32857      -9.60714       9.60714       184.490       194.097    
  32  0.246167      -1.40174      -10.1363       10.1363       188.964       199.101    
  33  0.142133      -1.95099      -14.1081       14.1081       187.149       201.257    
  34  0.123438E-01  -4.39460      -31.7783       31.7783       190.160       221.938    
  35  0.853289     -0.158657      -1.14728       1.14728       173.636       174.784    
  36  0.418603     -0.870831      -6.29717       6.29717       187.646       193.943    
  37  0.235242      -1.44714      -10.4646       10.4646       189.919       200.384    
  38  0.841712     -0.172317      -1.24606       1.24606       187.470       188.716    
  39  0.113373      -2.17707      -15.7429       15.7429       174.483       190.226    
  40  0.617966     -0.481322      -3.48054       3.48054       185.430       188.910    
  41  0.149268      -1.90202      -13.7539       13.7539       187.446       201.200    
  42  0.811010     -0.209475      -1.51476       1.51476       186.910       188.425    
  43  0.571477     -0.559531      -4.04609       4.04609       183.837       187.883    
  44  0.105494      -2.24911      -16.2638       16.2638       191.159       207.423    
  45  0.709548     -0.343127      -2.48122       2.48122       192.832       195.314    
  46  0.535895     -0.623816      -4.51095       4.51095       189.670       194.181    
  47  0.137736      -1.98242      -14.3353       14.3353       186.821       201.156    
  48  0.666779     -0.405297      -2.93079       2.93079       192.598       195.529    
  49  0.326487      -1.11936      -8.09436       8.09436       191.810       199.904    
  50  0.461090     -0.774162      -5.59813       5.59813       192.832       198.430    
  51  0.246088      -1.40207      -10.1386       10.1386       193.650       203.789    
  52  0.308348      -1.17653      -8.50771       8.50771       193.212       201.719    
  53  0.921161     -0.821209E-01 -0.593834      0.593834       191.913       192.507    
  54  0.361112      -1.01857      -7.36547       7.36547       192.845       200.211    
  55  0.853246     -0.158708      -1.14765       1.14765       179.665       180.813    
  56  0.535783     -0.624027      -4.51247       4.51247       184.056       188.568    
  57  0.347437      -1.05717      -7.64463       7.64463       187.220       194.864    
  58  0.722381     -0.325203      -2.35161       2.35161       183.292       185.643    
  59  0.134598      -2.00546      -14.5019       14.5019       181.080       195.581    
  60  0.521537     -0.650975      -4.70734       4.70734       192.846       197.553    
  61  0.713987     -0.336890      -2.43612       2.43612       194.243       196.679    
  62  0.202889      -1.59510      -11.5345       11.5345       193.694       205.228    
  63  0.973267     -0.270971E-01 -0.195945      0.195945       179.763       179.959    
  64  0.396441     -0.925228      -6.69052       6.69052       183.092       189.782    
  65  0.482421     -0.728937      -5.27110       5.27110       184.706       189.977    
  66  0.622991     -0.473223      -3.42198       3.42198       193.513       196.935    
  67  0.474966     -0.744512      -5.38372       5.38372       183.898       189.282    
  68  0.741916     -0.298520      -2.15866       2.15866       207.310       209.468    
  69  0.717884     -0.331448      -2.39677       2.39677       208.928       211.325    
  70  0.537648     -0.620551      -4.48733       4.48733       190.784       195.272    
  71  0.144246      -1.93623      -14.0013       14.0013       184.313       198.314    
  72  0.643241     -0.441236      -3.19067       3.19067       177.542       180.733    
loop,thermsimp(1:2)       74  0.845250       5.30428    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352        176.67          0.84          1.11         25.01          0.23          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       74
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       75
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      351     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -3.16195       3.16195       168.270       171.432    
   2  0.108032      -2.22533      -16.0918       16.0918       166.873       182.965    
   3  0.908790     -0.956413E-01 -0.691602      0.691602       173.028       173.719    
   4  0.987883     -0.121914E-01 -0.881583E-01  0.881583E-01   173.636       173.725    
   5  0.318380      -1.14451      -8.27619       8.27619       172.867       181.143    
   6  0.924426     -0.785824E-01 -0.568246      0.568246       171.708       172.277    
   7  0.965220     -0.353996E-01 -0.255982      0.255982       175.329       175.585    
   8  0.852248     -0.159878      -1.15611       1.15611       175.068       176.224    
   9  0.329186      -1.11113      -8.03484       8.03484       179.763       187.798    
  10  0.282479      -1.26415      -9.14135       9.14135       177.542       186.683    
  11  0.818943     -0.199740      -1.44437       1.44437       179.665       181.109    
  12  0.842569     -0.171300      -1.23870       1.23870       180.706       181.945    
  13  0.370966     -0.991644      -7.17079       7.17079       176.135       183.306    
  14  0.362233      -1.01547      -7.34305       7.34305       179.727       187.070    
  15  0.356944E-01  -3.33276      -24.0999       24.0999       180.389       204.489    
  16  0.149119      -1.90301      -13.7611       13.7611       175.132       188.893    
  17  0.127170      -2.06223      -14.9125       14.9125       172.255       187.167    
  18  0.589256     -0.528895      -3.82455       3.82455       182.875       186.699    
  19  0.702139     -0.353624      -2.55713       2.55713       177.340       179.897    
  20  0.713819     -0.337127      -2.43783       2.43783       183.165       185.603    
  21  0.121783      -2.10552      -15.2254       15.2254       183.292       198.517    
  22  0.992321     -0.770837E-02 -0.557408E-01  0.557408E-01   180.221       180.277    
  23  0.622746     -0.473616      -3.42482       3.42482       175.715       179.140    
  24  0.388486     -0.945499      -6.83710       6.83710       183.837       190.674    
  25  0.365204      -1.00730      -7.28400       7.28400       173.514       180.798    
  26  0.416566     -0.875710      -6.33244       6.33244       186.910       193.242    
  27  0.250735      -1.38336      -10.0034       10.0034       184.056       194.059    
  28  0.243824      -1.41131      -10.2055       10.2055       187.470       197.676    
  29  0.177195      -1.73050      -12.5136       12.5136       178.432       190.945    
  30  0.723685     -0.323399      -2.33857       2.33857       185.430       187.768    
  31  0.157256      -1.84988      -13.3769       13.3769       178.392       191.769    
  32  0.941988     -0.597623E-01 -0.432154      0.432154       183.898       184.331    
  33  0.110785      -2.20016      -15.9099       15.9099       183.092       199.002    
  34  0.200758      -1.60566      -11.6108       11.6108       184.706       196.317    
  35  0.873323     -0.135450     -0.979468      0.979468       174.483       175.463    
  36  0.842283     -0.171639      -1.24116       1.24116       180.949       182.190    
  37  0.326633      -1.11892      -8.09113       8.09113       177.589       185.680    
  38  0.648559     -0.433003      -3.13114       3.13114       172.968       176.099    
  39  0.460689E-01  -3.07762      -22.2549       22.2549       191.913       214.168    
  40  0.676614     -0.390654      -2.82490       2.82490       184.883       187.708    
  41  0.863029     -0.147307      -1.06521       1.06521       186.584       187.649    
  42  0.646727     -0.435831      -3.15159       3.15159       187.646       190.798    
  43  0.310616      -1.16920      -8.45472       8.45472       184.490       192.944    
  44  0.521840     -0.650394      -4.70314       4.70314       189.670       194.373    
  45  0.381245     -0.964312      -6.97315       6.97315       174.838       181.811    
  46  0.815908     -0.203453      -1.47122       1.47122       187.220       188.691    
  47  0.209395E-01  -3.86612      -27.9567       27.9567       190.784       218.741    
  48  0.800991E-01  -2.52449      -18.2551       18.2551       192.832       211.087    
  49  0.824204     -0.193337      -1.39806       1.39806       192.598       193.996    
  50  0.828636     -0.187975      -1.35929       1.35929       181.080       182.439    
  51  0.609810     -0.494608      -3.57661       3.57661       194.243       197.820    
  52  0.793631     -0.231137      -1.67140       1.67140       193.513       195.185    
  53  0.450040E-01  -3.10100      -22.4240       22.4240       192.846       215.270    
  54  0.758261     -0.276727      -2.00107       2.00107       184.313       186.314    
  55  0.450025     -0.798453      -5.77378       5.77378       192.832       198.606    
  56  0.687694     -0.374411      -2.70745       2.70745       173.592       176.299    
  57  0.851665     -0.160562      -1.16106       1.16106       188.964       190.125    
  58  0.964091     -0.365694E-01 -0.264441      0.264441       191.810       192.074    
  59  0.717554     -0.331907      -2.40009       2.40009       192.845       195.245    
  60  0.726427     -0.319617      -2.31122       2.31122       189.919       192.230    
  61  0.646354     -0.436408      -3.15576       3.15576       186.821       189.977    
  62  0.841481     -0.172592      -1.24805       1.24805       187.446       188.694    
  63  0.635881     -0.452744      -3.27389       3.27389       187.149       190.423    
  64  0.753792     -0.282639      -2.04382       2.04382       193.212       195.255    
  65  0.568235     -0.565221      -4.08723       4.08723       184.071       188.158    
  66  0.607832     -0.497856      -3.60011       3.60011       193.650       197.250    
  67  0.918682     -0.848156E-01 -0.613320      0.613320       185.115       185.728    
  68  0.783545     -0.243927      -1.76389       1.76389       193.694       195.458    
  69  0.741290     -0.299363      -2.16476       2.16476       191.159       193.324    
  70  0.965965     -0.346273E-01 -0.250397      0.250397       207.310       207.560    
  71  0.962055     -0.386840E-01 -0.279732      0.279732       208.928       209.208    
  72  0.820105     -0.198323      -1.43411       1.43411       176.672       178.106    
loop,thermsimp(1:2)       75   3.16195       16.0918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353        181.55          0.84          1.11         25.02          0.28          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    181.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       75
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       76
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      352     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -11.5506       11.5506       168.270       179.821    
   2  0.337724      -1.08553      -7.84968       7.84968       171.708       179.558    
   3  0.870295     -0.138923      -1.00458       1.00458       173.028       174.032    
   4  0.837087     -0.177827      -1.28590       1.28590       173.636       174.922    
   5  0.512110     -0.669215      -4.83924       4.83924       174.483       179.323    
   6  0.998742     -0.125879E-02 -0.910259E-02  0.910259E-02   175.329       175.338    
   7  0.203490      -1.59214      -11.5131       11.5131       172.968       184.481    
   8  0.525951E-01  -2.94513      -21.2969       21.2969       175.068       196.365    
   9  0.474810     -0.744841      -5.38611       5.38611       173.592       178.978    
  10  0.440755     -0.819266      -5.92429       5.92429       176.672       182.596    
  11  0.225689      -1.48860      -10.7644       10.7644       175.715       186.479    
  12  0.902704     -0.102360     -0.740188      0.740188       177.340       178.080    
  13  0.663331     -0.410481      -2.96827       2.96827       180.221       183.190    
  14  0.511480     -0.670447      -4.84814       4.84814       173.514       178.363    
  15  0.625297     -0.469528      -3.39526       3.39526       179.665       183.060    
  16  0.812907     -0.207139      -1.49787       1.49787       172.867       174.365    
  17  0.979453     -0.207607E-01 -0.150125      0.150125       174.838       174.988    
  18  0.255329      -1.36520      -9.87208       9.87208       180.706       190.578    
  19  0.856654     -0.154722      -1.11882       1.11882       180.949       182.067    
  20  0.610394     -0.493650      -3.56969       3.56969       181.080       184.649    
  21  0.703614     -0.351525      -2.54195       2.54195       166.873       169.415    
  22  0.623403     -0.472562      -3.41719       3.41719       176.135       179.552    
  23  0.375727     -0.978893      -7.07858       7.07858       183.898       190.977    
  24  0.870528     -0.138656      -1.00265       1.00265       183.165       184.168    
  25  0.175838E-01  -4.04078      -29.2197       29.2197       177.589       206.809    
  26  0.237914      -1.43585      -10.3829       10.3829       185.115       195.498    
  27  0.464352     -0.767112      -5.54715       5.54715       184.313       189.860    
  28  0.776873     -0.252478      -1.82572       1.82572       177.542       179.368    
  29  0.380679     -0.965800      -6.98390       6.98390       182.875       189.858    
  30  0.391295     -0.938295      -6.78501       6.78501       179.727       186.512    
  31  0.369488     -0.995636      -7.19966       7.19966       172.255       179.455    
  32  0.302398      -1.19601      -8.64860       8.64860       186.584       195.233    
  33  0.809138     -0.211786      -1.53147       1.53147       184.883       186.414    
  34  0.675473     -0.392342      -2.83711       2.83711       185.430       188.267    
  35  0.486217     -0.721100      -5.21443       5.21443       179.763       184.978    
  36  0.937468     -0.645730E-01 -0.466941      0.466941       184.071       184.538    
  37  0.741025     -0.299721      -2.16734       2.16734       187.220       189.387    
  38  0.155236      -1.86281      -13.4704       13.4704       187.446       200.917    
  39  0.407249     -0.898331      -6.49602       6.49602       175.132       181.628    
  40  0.348550E-01  -3.35656      -24.2720       24.2720       186.821       211.093    
  41  0.178548      -1.72290      -12.4586       12.4586       188.964       201.423    
  42  0.127429      -2.06020      -14.8977       14.8977       187.149       202.047    
  43  0.919888     -0.835037E-01 -0.603833      0.603833       183.837       184.441    
  44  0.520080     -0.653772      -4.72756       4.72756       187.646       192.374    
  45  0.574092     -0.554965      -4.01307       4.01307       178.432       182.445    
  46  0.893427     -0.112690     -0.814888      0.814888       178.392       179.207    
  47  0.658991     -0.417045      -3.01574       3.01574       191.810       194.826    
  48  0.803744     -0.218475      -1.57984       1.57984       189.919       191.499    
  49  0.499877     -0.693392      -5.01407       5.01407       184.490       189.504    
  50  0.723109     -0.324195      -2.34432       2.34432       186.910       189.254    
  51  0.477842     -0.738475      -5.34007       5.34007       191.159       196.499    
  52  0.946108     -0.553980E-01 -0.400595      0.400595       192.598       192.999    
  53  0.296943      -1.21422      -8.78025       8.78025       184.056       192.836    
  54  0.702733     -0.352778      -2.55101       2.55101       189.670       192.221    
  55  0.644709     -0.438956      -3.17418       3.17418       193.513       196.687    
  56  0.687506     -0.374685      -2.70942       2.70942       192.845       195.555    
  57  0.682968     -0.381308      -2.75732       2.75732       193.212       195.969    
  58  0.695030     -0.363801      -2.63072       2.63072       193.694       196.324    
  59  0.134664      -2.00497      -14.4984       14.4984       184.706       199.204    
  60  0.789098     -0.236865      -1.71282       1.71282       193.650       195.363    
  61  0.495959     -0.701262      -5.07097       5.07097       187.470       192.541    
  62  0.932440     -0.699500E-01 -0.505823      0.505823       194.243       194.749    
  63  0.390950     -0.939176      -6.79138       6.79138       183.292       190.083    
  64  0.209807      -1.56156      -11.2920       11.2920       192.832       204.124    
  65  0.727082     -0.318716      -2.30470       2.30470       183.092       185.397    
  66  0.622701     -0.473688      -3.42534       3.42534       180.389       183.814    
  67  0.468739     -0.757708      -5.47915       5.47915       207.310       212.789    
  68  0.253730      -1.37148      -9.91750       9.91750       208.928       218.846    
  69  0.200081      -1.60903      -11.6353       11.6353       192.832       204.468    
  70  0.737960     -0.303866      -2.19732       2.19732       191.913       194.111    
  71  0.466976     -0.761477      -5.50640       5.50640       192.846       198.353    
  72  0.396485     -0.925118      -6.68972       6.68972       181.547       188.237    
loop,thermsimp(1:2)       76   11.5506       7.84968    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354        194.65          0.84          1.11         25.06          0.15          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       76
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       77
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      353     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -3.58799       3.58799       166.873       170.461    
   2  0.437836     -0.825911      -5.97234       5.97234       173.028       179.000    
   3  0.123560      -2.09103      -15.1207       15.1207       172.867       187.988    
   4  0.943438     -0.582242E-01 -0.421032      0.421032       173.636       174.057    
   5  0.215054      -1.53686      -11.1134       11.1134       174.838       185.951    
   6  0.984763     -0.153546E-01 -0.111032      0.111032       175.329       175.440    
   7  0.154160E-01  -4.17235      -30.1711       30.1711       177.340       207.511    
   8  0.231957      -1.46120      -10.5663       10.5663       173.514       184.081    
   9  0.476349     -0.741605      -5.36270       5.36270       173.592       178.954    
  10  0.620436     -0.477333      -3.45170       3.45170       178.392       181.843    
  11  0.456145     -0.784945      -5.67611       5.67611       174.483       180.160    
  12  0.507296     -0.678660      -4.90753       4.90753       177.542       182.450    
  13  0.910123     -0.941755E-01 -0.681003      0.681003       172.255       172.936    
  14  0.323556      -1.12838      -8.15958       8.15958       176.135       184.295    
  15  0.666279     -0.406046      -2.93621       2.93621       171.708       174.645    
  16  0.781920     -0.246002      -1.77889       1.77889       168.270       170.049    
  17  0.921689     -0.815478E-01 -0.589689      0.589689       175.132       175.721    
  18  0.152544      -1.88030      -13.5969       13.5969       180.949       194.546    
  19  0.265926      -1.32454      -9.57802       9.57802       178.432       188.010    
  20  0.812409     -0.207751      -1.50229       1.50229       176.672       178.174    
  21  0.517560E-01  -2.96121      -21.4132       21.4132       179.665       201.078    
  22  0.559187     -0.581271      -4.20329       4.20329       180.221       184.425    
  23  0.708792     -0.344194      -2.48894       2.48894       180.389       182.878    
  24  0.287762      -1.24562      -9.00736       9.00736       183.165       192.173    
  25  0.896953     -0.108752     -0.786411      0.786411       183.837       184.624    
  26  0.305048      -1.18729      -8.58553       8.58553       172.968       181.553    
  27  0.752428     -0.284450      -2.05692       2.05692       184.071       186.128    
  28  0.248159      -1.39369      -10.0780       10.0780       181.080       191.158    
  29  0.997822     -0.217989E-02 -0.157633E-01  0.157633E-01   179.763       179.779    
  30  0.706427     -0.347535      -2.51310       2.51310       183.092       185.605    
  31  0.885217     -0.121923     -0.881649      0.881649       184.883       185.764    
  32  0.448301     -0.802290      -5.80153       5.80153       175.715       181.516    
  33  0.316275      -1.15114      -8.32417       8.32417       179.727       188.051    
  34  0.682241     -0.382372      -2.76501       2.76501       181.547       184.312    
  35  0.655896     -0.421752      -3.04978       3.04978       185.430       188.480    
  36  0.129575      -2.04350      -14.7770       14.7770       186.910       201.687    
  37  0.236133      -1.44336      -10.4373       10.4373       187.220       197.657    
  38  0.481338     -0.731186      -5.28736       5.28736       184.490       189.777    
  39  0.825902     -0.191279      -1.38318       1.38318       182.875       184.258    
  40  0.818029     -0.200857      -1.45244       1.45244       184.313       185.766    
  41  0.135951E-01  -4.29805      -31.0801       31.0801       183.292       214.372    
  42  0.535484     -0.624585      -4.51651       4.51651       180.706       185.223    
  43  0.451882     -0.794334      -5.74399       5.74399       183.898       189.642    
  44  0.591282     -0.525463      -3.79973       3.79973       189.919       193.719    
  45  0.220584      -1.51148      -10.9298       10.9298       189.670       200.599    
  46  0.217569      -1.52524      -11.0293       11.0293       187.646       198.676    
  47  0.541669     -0.613101      -4.43346       4.43346       187.470       191.904    
  48  0.927891     -0.748411E-01 -0.541192      0.541192       184.056       184.597    
  49  0.888902     -0.117768     -0.851604      0.851604       192.598       193.450    
  50  0.391529     -0.937694      -6.78067       6.78067       191.913       198.694    
  51  0.611187     -0.492353      -3.56031       3.56031       194.243       197.803    
  52  0.475002     -0.744437      -5.38318       5.38318       191.810       197.193    
  53  0.504237     -0.684709      -4.95128       4.95128       186.584       191.535    
  54  0.605691     -0.501385      -3.62562       3.62562       193.650       197.275    
  55  0.476618     -0.741039      -5.35861       5.35861       185.115       190.474    
  56  0.128287      -2.05348      -14.8492       14.8492       192.845       207.694    
  57  0.164258      -1.80632      -13.0619       13.0619       193.212       206.274    
  58  0.381764     -0.962954      -6.96332       6.96332       193.694       200.657    
  59  0.824295     -0.193227      -1.39726       1.39726       175.068       176.465    
  60  0.170823      -1.76713      -12.7785       12.7785       191.159       203.937    
  61  0.258309      -1.35360      -9.78816       9.78816       193.513       203.301    
  62  0.470573     -0.753804      -5.45092       5.45092       192.846       198.297    
  63  0.939649     -0.622488E-01 -0.450134      0.450134       184.706       185.156    
  64  0.323567      -1.12835      -8.15934       8.15934       187.446       195.606    
  65  0.192095      -1.64976      -11.9298       11.9298       188.964       200.894    
  66  0.739439     -0.301863      -2.18284       2.18284       187.149       189.332    
  67  0.259637      -1.34847      -9.75108       9.75108       192.832       202.583    
  68  0.478982     -0.736093      -5.32285       5.32285       192.832       198.155    
  69  0.980393     -0.198018E-01 -0.143191      0.143191       177.589       177.733    
  70  0.792065     -0.233112      -1.68568       1.68568       186.821       188.507    
  71  0.446480     -0.806361      -5.83097       5.83097       207.310       213.141    
  72  0.680447     -0.385005      -2.78405       2.78405       194.654       197.438    
loop,thermsimp(1:2)       77   3.58799       5.97234    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355        174.49          0.84          1.11         25.08          0.22          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    356        183.22          0.84          1.11         25.25          0.14          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    174.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       77
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       78
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      356
neval,tstepnext:      355     356

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -16.7951       16.7951       168.270       185.065    
   2  0.700279     -0.356277      -2.57632       2.57632       166.873       169.449    
   3  0.681564     -0.383366      -2.77220       2.77220       172.255       175.027    
   4  0.838213E-01  -2.47907      -17.9267       17.9267       173.636       191.563    
   5  0.708687     -0.344341      -2.49000       2.49000       171.708       174.198    
   6  0.253966      -1.37055      -9.91076       9.91076       175.329       185.239    
   7  0.210796      -1.55686      -11.2580       11.2580       175.132       186.390    
   8  0.967741     -0.327906E-01 -0.237116      0.237116       175.068       175.305    
   9  0.901331     -0.103882     -0.751196      0.751196       177.589       178.341    
  10  0.985067     -0.150452E-01 -0.108795      0.108795       176.672       176.781    
  11  0.153899      -1.87146      -13.5329       13.5329       173.592       187.125    
  12  0.297572      -1.21210      -8.76494       8.76494       173.028       181.793    
  13  0.111036      -2.19790      -15.8935       15.8935       179.763       195.657    
  14  0.489011     -0.715370      -5.17299       5.17299       174.483       179.656    
  15  0.970731     -0.297058E-01 -0.214809      0.214809       175.715       175.930    
  16  0.246322      -1.40112      -10.1318       10.1318       172.968       183.099    
  17  0.293332      -1.22645      -8.86871       8.86871       178.392       187.260    
  18  0.545752     -0.605591      -4.37916       4.37916       177.542       181.921    
  19  0.455999     -0.785265      -5.67842       5.67842       180.389       186.067    
  20  0.427211     -0.850477      -6.14998       6.14998       173.514       179.664    
  21  0.185046E-01  -3.98974      -28.8506       28.8506       182.875       211.725    
  22  0.768936     -0.262748      -1.89998       1.89998       176.135       178.035    
  23  0.870591     -0.138583      -1.00213       1.00213       181.547       182.549    
  24  0.563023     -0.574436      -4.15387       4.15387       180.221       184.375    
  25  0.132150E-01  -4.32640      -31.2852       31.2852       184.056       215.341    
  26  0.890415     -0.116068     -0.839311      0.839311       183.837       184.677    
  27  0.163417      -1.81145      -13.0990       13.0990       184.706       197.805    
  28  0.360288      -1.02085      -7.38199       7.38199       180.706       188.088    
  29  0.622131     -0.474604      -3.43196       3.43196       183.092       186.524    
  30  0.942630     -0.590811E-01 -0.427228      0.427228       184.883       185.310    
  31  0.135626      -1.99785      -14.4469       14.4469       184.313       198.760    
  32  0.369646     -0.995208      -7.19656       7.19656       174.838       182.034    
  33  0.501457     -0.690237      -4.99125       4.99125       184.071       189.062    
  34  0.459762     -0.777047      -5.61899       5.61899       172.867       178.486    
  35  0.489970     -0.713411      -5.15883       5.15883       178.432       183.591    
  36  0.504194     -0.684794      -4.95189       4.95189       179.727       184.679    
  37  0.543102E-01  -2.91304      -21.0648       21.0648       185.430       206.495    
  38  0.873609     -0.135122     -0.977096      0.977096       186.821       187.798    
  39  0.425787     -0.853816      -6.17412       6.17412       187.149       193.324    
  40  0.792406     -0.232682      -1.68257       1.68257       183.898       185.581    
  41  0.691102     -0.369469      -2.67171       2.67171       184.490       187.161    
  42  0.752290     -0.284633      -2.05824       2.05824       185.115       187.173    
  43  0.279962      -1.27310      -9.20606       9.20606       181.080       190.286    
  44  0.315915E-01  -3.45487      -24.9829       24.9829       186.584       211.567    
  45  0.266419      -1.32269      -9.56462       9.56462       187.470       197.035    
  46  0.949868     -0.514319E-01 -0.371915      0.371915       183.165       183.537    
  47  0.520560     -0.652850      -4.72090       4.72090       192.598       197.319    
  48  0.805351     -0.216477      -1.56539       1.56539       189.919       191.485    
  49  0.281582      -1.26733      -9.16434       9.16434       180.949       190.113    
  50  0.365228      -1.00723      -7.28351       7.28351       187.446       194.730    
  51  0.961426     -0.393382E-01 -0.284463      0.284463       191.810       192.094    
  52  0.176024      -1.73713      -12.5616       12.5616       193.650       206.211    
  53  0.722488     -0.325055      -2.35054       2.35054       194.654       197.005    
  54  0.543981     -0.608841      -4.40266       4.40266       187.220       191.622    
  55  0.810204     -0.210469      -1.52195       1.52195       194.243       195.765    
  56  0.839414     -0.175052      -1.26584       1.26584       192.832       194.098    
  57  0.890272     -0.116228     -0.840470      0.840470       192.846       193.687    
  58  0.370000     -0.994252      -7.18965       7.18965       187.646       194.836    
  59  0.528163     -0.638351      -4.61605       4.61605       191.913       196.529    
  60  0.215496      -1.53481      -11.0986       11.0986       189.670       200.768    
  61  0.907335E-01  -2.39983      -17.3537       17.3537       193.694       211.047    
  62  0.853602     -0.158290      -1.14463       1.14463       188.964       190.109    
  63  0.625306     -0.469515      -3.39516       3.39516       179.665       183.060    
  64  0.267902      -1.31713      -9.52448       9.52448       186.910       196.434    
  65  0.932632E-01  -2.37233      -17.1548       17.1548       192.832       209.987    
  66  0.154744      -1.86598      -13.4933       13.4933       193.513       207.007    
  67  0.478208     -0.737710      -5.33454       5.33454       191.159       196.493    
  68  0.869735     -0.139567      -1.00924       1.00924       193.212       194.221    
  69  0.702209     -0.353524      -2.55641       2.55641       177.340       179.897    
  70  0.374797     -0.981372      -7.09651       7.09651       192.845       199.942    
  71  0.814761     -0.204861      -1.48139       1.48139       207.310       208.791    
  72  0.619425     -0.478964      -3.46349       3.46349       174.487       177.950    
loop,thermsimp(1:2)       78   16.7951       2.57632    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357        177.37          0.85          1.11         25.37          0.20          0.05         27.57
Just calling func    0   0         27.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    358        178.16          0.84          1.11         25.17          0.04          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    177.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.23121               356
loop is:       78
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    7.23121               356
loop is:       79
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    3.61561               427

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      357     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -6.00046       6.00046       166.873       172.873    
   2  0.812983     -0.207045     -0.748594      0.748594       171.708       172.457    
   3  0.820046E-01  -2.50098      -9.04256       9.04256       172.255       181.297    
   4  0.863006     -0.147333     -0.532699      0.532699       175.068       175.601    
   5  0.647901     -0.434017      -1.56924       1.56924       175.715       177.284    
   6  0.650063E-01  -2.73327      -9.88243       9.88243       176.672       186.554    
   7  0.407685E-02  -5.50243      -19.8946       19.8946       174.487       194.381    
   8  0.935930     -0.662149E-01 -0.239407      0.239407       176.135       176.375    
   9  0.158531      -1.84180      -6.65924       6.65924       177.589       184.249    
  10  0.846482     -0.166666     -0.602599      0.602599       172.867       173.470    
  11  0.252208      -1.37750      -4.98051       4.98051       174.483       179.464    
  12  0.781651E-02  -4.85152      -17.5412       17.5412       173.514       191.056    
  13  0.990286     -0.976134E-02 -0.352932E-01  0.352932E-01   177.340       177.375    
  14  0.550116     -0.597625      -2.16078       2.16078       173.028       175.189    
  15  0.483066     -0.727601      -2.63072       2.63072       177.542       180.173    
  16  0.196160      -1.62883      -5.88919       5.88919       174.838       180.727    
  17  0.469455     -0.756184      -2.73406       2.73406       181.547       184.281    
  18  0.624392     -0.470977      -1.70287       1.70287       179.665       181.368    
  19  0.743593     -0.296262      -1.07117       1.07117       172.968       174.039    
  20  0.348439      -1.05429      -3.81191       3.81191       183.165       186.977    
  21  0.779083     -0.249637     -0.902590      0.902590       178.432       179.334    
  22  0.989010     -0.110506E-01 -0.399546E-01  0.399546E-01   180.221       180.261    
  23  0.655432E-01  -2.72505      -9.85269       9.85269       183.837       193.690    
  24  0.470908     -0.753092      -2.72288       2.72288       179.727       182.450    
  25  0.685537     -0.377553      -1.36508       1.36508       168.270       169.635    
  26  0.863060E-02  -4.75244      -17.1830       17.1830       175.329       192.512    
  27  0.526195     -0.642084      -2.32152       2.32152       184.883       187.204    
  28  0.767692     -0.264367     -0.955845      0.955845       183.898       184.854    
  29  0.380048     -0.967459      -3.49795       3.49795       180.389       183.887    
  30  0.337508E-01  -3.38875      -12.2524       12.2524       175.132       187.384    
  31  0.683667     -0.380285      -1.37496       1.37496       183.092       184.467    
  32  0.245511      -1.40441      -5.07781       5.07781       173.592       178.669    
  33  0.294388      -1.22286      -4.42137       4.42137       184.490       188.911    
  34  0.159040      -1.83860      -6.64764       6.64764       185.115       191.763    
  35  0.613798     -0.488089      -1.76474       1.76474       178.392       180.156    
  36  0.863839E-01  -2.44895      -8.85445       8.85445       186.821       195.675    
  37  0.118930      -2.12922      -7.69842       7.69842       180.706       188.405    
  38  0.961460     -0.393026E-01 -0.142103      0.142103       184.071       184.213    
  39  0.457884     -0.781140      -2.82430       2.82430       188.964       191.789    
  40  0.312963      -1.16167      -4.20014       4.20014       180.949       185.149    
  41  0.892553     -0.113669     -0.410982      0.410982       181.080       181.491    
  42  0.448774     -0.801235      -2.89695       2.89695       189.919       192.816    
  43  0.942987E-01  -2.36129      -8.53749       8.53749       173.636       182.174    
  44  0.848599     -0.164169     -0.593569      0.593569       187.220       187.813    
  45  0.665342     -0.407455      -1.47320       1.47320       191.810       193.283    
  46  0.894010     -0.112039     -0.405087      0.405087       187.149       187.554    
  47  0.403928     -0.906518      -3.27761       3.27761       192.846       196.124    
  48  0.612812     -0.489696      -1.77055       1.77055       192.832       194.603    
  49  0.726279     -0.319821      -1.15635       1.15635       193.212       194.368    
  50  0.694767     -0.364179      -1.31673       1.31673       187.446       188.763    
  51  0.849471     -0.163141     -0.589854      0.589854       187.646       188.236    
  52  0.615908     -0.484657      -1.75233       1.75233       179.763       181.515    
  53  0.256250      -1.36160      -4.92302       4.92302       194.243       199.166    
  54  0.124633      -2.08238      -7.52907       7.52907       186.910       194.439    
  55  0.629294E-01  -2.76574      -9.99983       9.99983       191.159       201.159    
  56  0.127527      -2.05943      -7.44608       7.44608       191.913       199.360    
  57  0.721510     -0.326409      -1.18017       1.18017       194.654       195.834    
  58  0.664696     -0.408425      -1.47670       1.47670       187.470       188.947    
  59  0.562617     -0.575156      -2.07954       2.07954       192.598       194.678    
  60  0.413984     -0.881928      -3.18870       3.18870       184.706       187.895    
  61  0.656751     -0.420450      -1.52018       1.52018       184.313       185.833    
  62  0.642415     -0.442520      -1.59998       1.59998       192.845       194.445    
  63  0.136182      -1.99376      -7.20866       7.20866       189.670       196.878    
  64  0.481125     -0.731629      -2.64528       2.64528       193.650       196.295    
  65  0.147280      -1.91542      -6.92540       6.92540       185.430       192.355    
  66  0.162546      -1.81680      -6.56882       6.56882       193.513       200.082    
  67  0.200903      -1.60493      -5.80281       5.80281       207.310       213.113    
  68  0.444300     -0.811254      -2.93318       2.93318       192.832       195.766    
  69  0.799825     -0.223363     -0.807591      0.807591       193.694       194.501    
  70  0.622561     -0.473914      -1.71349       1.71349       186.584       188.297    
  71  0.468358     -0.758522      -2.74252       2.74252       182.875       185.617    
  72  0.155577      -1.86061      -6.72725       6.72725       177.366       184.093    
loop,thermsimp(1:2)       79   6.00046      0.748594    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359        192.85          0.84          1.11         25.09          0.15          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       79
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       80
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      358     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -3.93137       3.93137       168.270       172.202    
   2  0.744737     -0.294724      -1.06561       1.06561       171.708       172.774    
   3  0.361564E-01  -3.31990      -12.0035       12.0035       166.873       178.876    
   4  0.312099      -1.16444      -4.21014       4.21014       172.867       177.077    
   5  0.119132      -2.12752      -7.69229       7.69229       172.968       180.660    
   6  0.617735     -0.481696      -1.74162       1.74162       173.028       174.769    
   7  0.117626      -2.14025      -7.73829       7.73829       175.068       182.806    
   8  0.258570      -1.35259      -4.89043       4.89043       176.135       181.026    
   9  0.851854E-01  -2.46293      -8.90497       8.90497       175.715       184.620    
  10  0.220620      -1.51131      -5.46431       5.46431       177.340       182.804    
  11  0.648876     -0.432513      -1.56380       1.56380       173.592       175.155    
  12  0.958689     -0.421884E-01 -0.152537      0.152537       178.432       178.584    
  13  0.240652      -1.42440      -5.15008       5.15008       174.483       179.633    
  14  0.975871     -0.244252E-01 -0.883119E-01  0.883119E-01   178.392       178.480    
  15  0.467835     -0.759639      -2.74655       2.74655       177.542       180.289    
  16  0.398205     -0.920788      -3.32921       3.32921       180.221       183.551    
  17  0.757338E-01  -2.58053      -9.33018       9.33018       174.838       184.168    
  18  0.654643     -0.423666      -1.53181       1.53181       172.255       173.787    
  19  0.305298      -1.18647      -4.28979       4.28979       179.665       183.955    
  20  0.435768     -0.830645      -3.00328       3.00328       181.080       184.083    
  21  0.689410     -0.371920      -1.34472       1.34472       179.763       181.108    
  22  0.267500      -1.31864      -4.76767       4.76767       173.636       178.404    
  23  0.590747     -0.526367      -1.90314       1.90314       179.727       181.630    
  24  0.108947E-01  -4.51948      -16.3406       16.3406       180.389       196.730    
  25  0.236025      -1.44382      -5.22028       5.22028       177.366       182.586    
  26  0.590760     -0.526345      -1.90306       1.90306       184.071       185.974    
  27  0.782443     -0.245334     -0.887031      0.887031       177.589       178.476    
  28  0.702257     -0.353456      -1.27796       1.27796       181.547       182.825    
  29  0.764991     -0.267891     -0.968590      0.968590       183.092       184.060    
  30  0.753362     -0.283210      -1.02397       1.02397       183.898       184.922    
  31  0.961949E-01  -2.34138      -8.46550       8.46550       180.949       189.414    
  32  0.541564     -0.613294      -2.21743       2.21743       182.875       185.092    
  33  0.474786     -0.744891      -2.69323       2.69323       184.313       187.006    
  34  0.242842      -1.41534      -5.11732       5.11732       176.672       181.789    
  35  0.495414     -0.702361      -2.53946       2.53946       183.165       185.705    
  36  0.636645     -0.451543      -1.63260       1.63260       184.883       186.515    
  37  0.758087     -0.276957      -1.00137       1.00137       175.132       176.133    
  38  0.209321      -1.56389      -5.65440       5.65440       187.149       192.804    
  39  0.484343     -0.724961      -2.62117       2.62117       187.220       189.841    
  40  0.499790     -0.693567      -2.50767       2.50767       184.706       187.214    
  41  0.316628      -1.15003      -4.15805       4.15805       187.646       191.804    
  42  0.705469     -0.348892      -1.26146       1.26146       186.584       187.845    
  43  0.514591     -0.664383      -2.40215       2.40215       180.706       183.109    
  44  0.869006     -0.140406     -0.507652      0.507652       187.446       187.954    
  45  0.112600      -2.18392      -7.89618       7.89618       184.490       192.386    
  46  0.511991     -0.669449      -2.42046       2.42046       187.470       189.891    
  47  0.477456     -0.739283      -2.67296       2.67296       173.514       176.187    
  48  0.494460     -0.704290      -2.54644       2.54644       185.115       187.661    
  49  0.698938     -0.358193      -1.29509       1.29509       188.964       190.259    
  50  0.430212     -0.843478      -3.04969       3.04969       185.430       188.479    
  51  0.474243E-01  -3.04862      -11.0226       11.0226       175.329       186.351    
  52  0.167497      -1.78679      -6.46032       6.46032       189.919       196.380    
  53  0.233811      -1.45324      -5.25436       5.25436       191.810       197.064    
  54  0.760101     -0.274304     -0.991774      0.991774       183.837       184.829    
  55  0.195143      -1.63402      -5.90799       5.90799       193.212       199.120    
  56  0.822875     -0.194951     -0.704866      0.704866       174.487       175.192    
  57  0.332571      -1.10090      -3.98043       3.98043       186.910       190.890    
  58  0.682214     -0.382412      -1.38265       1.38265       192.845       194.228    
  59  0.560875E-01  -2.88084      -10.4160       10.4160       193.694       204.110    
  60  0.407464     -0.897802      -3.24610       3.24610       192.832       196.078    
  61  0.650997     -0.429250      -1.55200       1.55200       192.598       194.150    
  62  0.426312E-01  -3.15517      -11.4079       11.4079       186.821       198.229    
  63  0.556139E-01  -2.88932      -10.4467       10.4467       192.832       203.279    
  64  0.837058     -0.177861     -0.643077      0.643077       194.654       195.297    
  65  0.655823     -0.421864      -1.52529       1.52529       192.846       194.371    
  66  0.846314E-02  -4.77204      -17.2538       17.2538       193.650       210.904    
  67  0.227818E-01  -3.78179      -13.6735       13.6735       189.670       203.343    
  68  0.401219     -0.913248      -3.30195       3.30195       194.243       197.545    
  69  0.663900     -0.409624      -1.48104       1.48104       191.913       193.394    
  70  0.660940     -0.414092      -1.49720       1.49720       193.513       195.010    
  71  0.106131      -2.24308      -8.11010       8.11010       191.159       199.269    
  72  0.609372     -0.495326      -1.79090       1.79090       192.851       194.642    
loop,thermsimp(1:2)       80   3.93137       1.06561    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    360        178.58          0.84          1.11         25.11          0.23          0.05         27.34
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    178.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       80
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       81
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      359     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -3.85903       3.85903       168.270       172.129    
   2  0.822787     -0.195058     -0.705252      0.705252       171.708       172.414    
   3  0.320831E-01  -3.43942      -12.4356       12.4356       172.255       184.690    
   4  0.224034      -1.49596      -5.40880       5.40880       173.028       178.437    
   5  0.200770      -1.60559      -5.80519       5.80519       173.592       179.397    
   6  0.983846     -0.162863E-01 -0.588847E-01  0.588847E-01   174.487       174.546    
   7  0.762274     -0.271449     -0.981453      0.981453       175.132       176.113    
   8  0.872649     -0.136221     -0.492523      0.492523       173.514       174.007    
   9  0.366891      -1.00269      -3.62533       3.62533       172.867       176.493    
  10  0.800852     -0.222079     -0.802951      0.802951       173.636       174.439    
  11  0.755695     -0.280117      -1.01279       1.01279       177.589       178.602    
  12  0.595174     -0.518902      -1.87614       1.87614       178.392       180.268    
  13  0.316509      -1.15040      -4.15941       4.15941       178.432       182.591    
  14  0.847901     -0.164991     -0.596542      0.596542       166.873       167.469    
  15  0.116195      -2.15248      -7.78253       7.78253       174.483       182.266    
  16  0.121963      -2.10403      -7.60736       7.60736       177.542       185.149    
  17  0.298485      -1.20903      -4.37139       4.37139       172.968       177.339    
  18  0.698751     -0.358461      -1.29605       1.29605       176.135       177.431    
  19  0.248186      -1.39358      -5.03862       5.03862       179.763       184.802    
  20  0.717251     -0.332329      -1.20157       1.20157       179.727       180.928    
  21  0.591856     -0.524491      -1.89635       1.89635       176.672       178.568    
  22  0.780177E-01  -2.55082      -9.22276       9.22276       177.366       186.588    
  23  0.314281      -1.15747      -4.18495       4.18495       177.340       181.525    
  24  0.565423E-01  -2.87277      -10.3868       10.3868       175.068       185.455    
  25  0.964829     -0.358044E-01 -0.129455      0.129455       181.547       181.676    
  26  0.900157     -0.105186     -0.380312      0.380312       180.706       181.087    
  27  0.656998     -0.420074      -1.51882       1.51882       180.221       181.740    
  28  0.888436E-01  -2.42088      -8.75294       8.75294       179.665       188.418    
  29  0.853838     -0.158014     -0.571317      0.571317       183.092       183.663    
  30  0.704842     -0.349782      -1.26467       1.26467       181.080       182.344    
  31  0.890111     -0.116409     -0.420888      0.420888       174.838       175.259    
  32  0.424397     -0.857087      -3.09889       3.09889       175.715       178.814    
  33  0.959371     -0.414778E-01 -0.149968      0.149968       183.837       183.987    
  34  0.323832      -1.12753      -4.07671       4.07671       183.898       187.975    
  35  0.943913     -0.577217E-01 -0.208699      0.208699       182.875       183.083    
  36  0.119048      -2.12823      -7.69483       7.69483       183.165       190.860    
  37  0.427842E-01  -3.15159      -11.3949       11.3949       184.071       195.466    
  38  0.433544     -0.835761      -3.02178       3.02178       175.329       178.350    
  39  0.773173     -0.257253     -0.930125      0.930125       184.883       185.813    
  40  0.455657     -0.786014      -2.84192       2.84192       184.313       187.155    
  41  0.362132      -1.01575      -3.67254       3.67254       184.706       188.378    
  42  0.775394     -0.254384     -0.919751      0.919751       185.115       186.035    
  43  0.889906     -0.116639     -0.421722      0.421722       186.584       187.006    
  44  0.415923     -0.877255      -3.17181       3.17181       187.446       190.618    
  45  0.374532E-01  -3.28466      -11.8761       11.8761       185.430       197.306    
  46  0.904805     -0.100036     -0.361691      0.361691       180.949       181.310    
  47  0.130905      -2.03328      -7.35155       7.35155       187.220       194.571    
  48  0.951733     -0.494710E-01 -0.178867      0.178867       187.470       187.649    
  49  0.720673     -0.327570      -1.18436       1.18436       188.964       190.149    
  50  0.425150     -0.855314      -3.09248       3.09248       186.910       190.002    
  51  0.464059     -0.767744      -2.77586       2.77586       187.646       190.422    
  52  0.822031     -0.195978     -0.708578      0.708578       184.490       185.198    
  53  0.325542      -1.12226      -4.05767       4.05767       187.149       191.207    
  54  0.701043     -0.355186      -1.28421       1.28421       191.913       193.198    
  55  0.135013      -2.00239      -7.23984       7.23984       192.598       199.838    
  56  0.911632     -0.925193E-01 -0.334513      0.334513       192.845       193.180    
  57  0.172993      -1.75450      -6.34359       6.34359       192.846       199.190    
  58  0.401556     -0.912409      -3.29891       3.29891       192.851       196.150    
  59  0.906091     -0.986152E-01 -0.356554      0.356554       193.513       193.870    
  60  0.322588      -1.13138      -4.09062       4.09062       194.654       198.745    
  61  0.779620     -0.248949     -0.900102      0.900102       192.832       193.732    
  62  0.886087     -0.120940     -0.437272      0.437272       189.919       190.357    
  63  0.841445     -0.172634     -0.624177      0.624177       180.389       181.013    
  64  0.960060E-01  -2.34334      -8.47261       8.47261       191.810       200.282    
  65  0.198159      -1.61868      -5.85252       5.85252       194.243       200.096    
  66  0.762088E-01  -2.57428      -9.30757       9.30757       186.821       196.128    
  67  0.829173     -0.187327     -0.677299      0.677299       193.212       193.889    
  68  0.725953     -0.320270      -1.15797       1.15797       191.159       192.317    
  69  0.881009     -0.126687     -0.458052      0.458052       192.832       193.290    
  70  0.964096     -0.365643E-01 -0.132202      0.132202       189.670       189.802    
  71  0.602895     -0.506013      -1.82954       1.82954       193.694       195.523    
  72  0.402816     -0.909276      -3.28758       3.28758       178.580       181.868    
loop,thermsimp(1:2)       81   3.85903      0.705252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361        173.39          0.84          1.11         25.15          0.11          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    173.39        1.011     -1.412      1.928     -102.6     0.8686    
                      0.1690      1.811     -99.70      3.564     0.3137    
                       2.194     -1.615      2.033      0.000     -40.00    
                      -1.365      0.000      0.000      0.000     -1.221    

                      -2.500     0.3119E+05 0.3166E+05  0.000      0.000    
                     -0.5672     -5.949     -4.437     -7.784      4.914    
                      -14.71     -2.989      429.6      0.000      269.4    

                      -2970.      8519.     -2333.     0.7607E+05  2617.    
                      -7576.     0.1829E-02-0.3442E-02  0.000     0.6776E-01
                      0.1386E-01 0.3446E-01 0.3267E-01 0.2610E-01 0.4032E-01

                     -0.1032    -0.9231      0.000    -0.7201E-01 0.2989E-01
                       0.000    -0.5110E-01-0.3604E-01-0.2125E-01-0.1192E-02
                      0.3620E-01 0.1971E-01-0.1910     -1.147      0.000    

                     -0.5671E-01-0.4929    -0.5505    -0.4647    -0.8954E-01
                      0.9379E-01  8.979      8.785     -4876.     -4.000    
                     -0.3359    -0.7937      9.057      8.764     -6129.    

                      -4.000     0.3062    -0.8412      8.942      8.831    
                      -3248.     -7.000    -0.2164    -0.8629      9.016    
                       8.813     -6119.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       81
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       82
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      360     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -2.11941       2.11941       166.873       168.992    
   2  0.926592     -0.762421E-01 -0.275661      0.275661       168.270       168.546    
   3  0.766762     -0.265579     -0.960230      0.960230       171.708       172.669    
   4  0.627980     -0.465247      -1.68215       1.68215       173.514       175.197    
   5  0.647527     -0.434594      -1.57132       1.57132       173.636       175.208    
   6  0.639464     -0.447125      -1.61663       1.61663       174.487       176.103    
   7  0.168437      -1.78119      -6.44009       6.44009       174.838       181.278    
   8  0.725133     -0.321400      -1.16206       1.16206       175.132       176.294    
   9  0.620073     -0.477917      -1.72796       1.72796       172.867       174.595    
  10  0.837394     -0.177461     -0.641628      0.641628       172.968       173.609    
  11  0.763326     -0.270070     -0.976465      0.976465       176.135       177.112    
  12  0.216703      -1.52923      -5.52909       5.52909       175.329       180.858    
  13  0.846730     -0.166373     -0.601540      0.601540       173.028       173.629    
  14  0.712127     -0.339499      -1.22750       1.22750       176.672       177.900    
  15  0.731222     -0.313039      -1.13182       1.13182       177.589       178.721    
  16  0.131329      -2.03005      -7.33987       7.33987       175.715       183.055    
  17  0.946517     -0.549662E-01 -0.198736      0.198736       173.592       173.790    
  18  0.303743      -1.19157      -4.30826       4.30826       178.392       182.700    
  19  0.452199     -0.793633      -2.86946       2.86946       179.727       182.596    
  20  0.176302      -1.73556      -6.27509       6.27509       180.389       186.664    
  21  0.569871     -0.562345      -2.03322       2.03322       180.706       182.740    
  22  0.267873      -1.31724      -4.76263       4.76263       180.949       185.711    
  23  0.295877      -1.21781      -4.40312       4.40312       177.340       181.743    
  24  0.658567     -0.417689      -1.51020       1.51020       181.547       183.057    
  25  0.633120     -0.457096      -1.65268       1.65268       180.221       181.874    
  26  0.655522     -0.422324      -1.52696       1.52696       178.580       180.107    
  27  0.532295     -0.630558      -2.27985       2.27985       174.483       176.763    
  28  0.611209     -0.492317      -1.78002       1.78002       181.080       182.860    
  29  0.768812E-01  -2.56549      -9.27581       9.27581       178.432       187.708    
  30  0.845132     -0.168262     -0.608369      0.608369       182.875       183.483    
  31  0.133696      -2.01219      -7.27527       7.27527       183.092       190.367    
  32  0.850522E-01  -2.46449      -8.91062       8.91062       183.837       192.748    
  33  0.901960     -0.103185     -0.373076      0.373076       172.255       172.628    
  34  0.394454E-01  -3.23284      -11.6887       11.6887       179.763       191.452    
  35  0.152819      -1.87850      -6.79191       6.79191       177.542       184.334    
  36  0.951369     -0.498538E-01 -0.180252      0.180252       184.490       184.670    
  37  0.909075     -0.953273E-01 -0.344666      0.344666       175.068       175.413    
  38  0.552964     -0.592462      -2.14211       2.14211       184.883       187.025    
  39  0.904748     -0.100099     -0.361919      0.361919       185.115       185.477    
  40  0.434860     -0.832731      -3.01083       3.01083       177.366       180.376    
  41  0.807557E-01  -2.51633      -9.09805       9.09805       186.584       195.682    
  42  0.245089      -1.40614      -5.08403       5.08403       184.313       189.397    
  43  0.566857     -0.567648      -2.05239       2.05239       187.470       189.523    
  44  0.154441      -1.86794      -6.75374       6.75374       183.898       190.652    
  45  0.961849     -0.388974E-01 -0.140638      0.140638       184.706       184.847    
  46  0.267234      -1.31963      -4.77127       4.77127       179.665       184.436    
  47  0.170042      -1.77171      -6.40580       6.40580       189.670       196.075    
  48  0.796608     -0.227393     -0.822163      0.822163       186.910       187.732    
  49  0.474137     -0.746260      -2.69818       2.69818       188.964       191.663    
  50  0.164737      -1.80340      -6.52040       6.52040       189.919       196.440    
  51  0.728428     -0.316867      -1.14567       1.14567       187.646       188.792    
  52  0.259284      -1.34983      -4.88046       4.88046       187.446       192.327    
  53  0.932415     -0.699773E-01 -0.253010      0.253010       183.165       183.418    
  54  0.905731     -0.990126E-01 -0.357991      0.357991       187.149       187.507    
  55  0.975166     -0.251472E-01 -0.909222E-01  0.909222E-01   191.159       191.250    
  56  0.312519      -1.16309      -4.20528       4.20528       192.845       197.051    
  57  0.363326      -1.01246      -3.66064       3.66064       191.913       195.574    
  58  0.633693     -0.456191      -1.64941       1.64941       192.832       194.482    
  59  0.765432     -0.267315     -0.966505      0.966505       192.832       193.799    
  60  0.197736      -1.62082      -5.86025       5.86025       193.513       199.374    
  61  0.825376     -0.191916     -0.693893      0.693893       193.212       193.906    
  62  0.401700     -0.912049      -3.29761       3.29761       187.220       190.517    
  63  0.637472     -0.450245      -1.62791       1.62791       184.071       185.699    
  64  0.989702     -0.103516E-01 -0.374274E-01  0.374274E-01   193.694       193.731    
  65  0.980344     -0.198515E-01 -0.717753E-01  0.717753E-01   186.821       186.893    
  66  0.719848     -0.328715      -1.18850       1.18850       192.851       194.040    
  67  0.779598     -0.248976     -0.900200      0.900200       185.430       186.330    
  68  0.979665     -0.205443E-01 -0.742800E-01  0.742800E-01   194.654       194.729    
  69  0.904051E-01  -2.40345      -8.68995       8.68995       192.846       201.536    
  70  0.484052     -0.725563      -2.62335       2.62335       192.598       195.221    
  71  0.487443     -0.718583      -2.59811       2.59811       194.243       196.841    
  72  0.132340      -2.02238      -7.31214       7.31214       173.391       180.704    
loop,thermsimp(1:2)       82   2.11941      0.275661    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    362        174.07          0.84          1.11         25.17          0.10          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       82
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       83
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      361     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -1.72511       1.72511       168.270       169.995    
   2  0.835522     -0.179699     -0.649720      0.649720       166.873       167.522    
   3  0.626661     -0.467350      -1.68975       1.68975       172.255       173.945    
   4  0.197939      -1.61980      -5.85654       5.85654       171.708       177.565    
   5  0.842637     -0.171219     -0.619060      0.619060       172.968       173.587    
   6  0.873669     -0.135053     -0.488300      0.488300       173.028       173.516    
   7  0.298180E-01  -3.51264      -12.7003       12.7003       173.592       186.292    
   8  0.548374     -0.600797      -2.17225       2.17225       172.867       175.040    
   9  0.407469E-01  -3.20037      -11.5713       11.5713       173.514       185.086    
  10  0.210105E-02  -6.16532      -22.2914       22.2914       173.636       195.928    
  11  0.631577     -0.459536      -1.66150       1.66150       175.068       176.730    
  12  0.944026     -0.576013E-01 -0.208264      0.208264       174.487       174.695    
  13  0.492775     -0.707703      -2.55877       2.55877       175.132       177.691    
  14  0.195107      -1.63421      -5.90865       5.90865       174.483       180.392    
  15  0.775688     -0.254005     -0.918381      0.918381       176.135       177.054    
  16  0.763907     -0.269310     -0.973718      0.973718       176.672       177.646    
  17  0.797499     -0.226275     -0.818120      0.818120       177.589       178.407    
  18  0.639217     -0.447511      -1.61803       1.61803       178.580       180.198    
  19  0.775225     -0.254602     -0.920540      0.920540       177.366       178.286    
  20  0.680633     -0.384733      -1.39104       1.39104       173.391       174.782    
  21  0.532184     -0.630766      -2.28060       2.28060       175.329       177.609    
  22  0.843009     -0.170778     -0.617467      0.617467       174.838       175.455    
  23  0.943186     -0.584913E-01 -0.211481      0.211481       177.340       177.552    
  24  0.601611     -0.508143      -1.83725       1.83725       180.221       182.059    
  25  0.259021      -1.35084      -4.88412       4.88412       179.727       184.611    
  26  0.855132     -0.156500     -0.565842      0.565842       178.392       178.958    
  27  0.351229      -1.04632      -3.78307       3.78307       180.706       184.489    
  28  0.950362     -0.509122E-01 -0.184078      0.184078       181.080       181.264    
  29  0.447301     -0.804524      -2.90884       2.90884       175.715       178.624    
  30  0.325509      -1.12237      -4.05803       4.05803       181.547       185.605    
  31  0.717010     -0.332666      -1.20279       1.20279       183.165       184.368    
  32  0.676718     -0.390500      -1.41190       1.41190       182.875       184.286    
  33  0.493623     -0.705983      -2.55256       2.55256       177.542       180.095    
  34  0.155805E-01  -4.16174      -15.0472       15.0472       179.665       194.712    
  35  0.417708     -0.872973      -3.15633       3.15633       184.490       187.646    
  36  0.395067     -0.928699      -3.35781       3.35781       184.706       188.064    
  37  0.977835     -0.224139E-01 -0.810399E-01  0.810399E-01   185.115       185.196    
  38  0.603414     -0.505151      -1.82643       1.82643       184.071       185.898    
  39  0.173810      -1.74979      -6.32656       6.32656       180.949       187.275    
  40  0.979719     -0.204895E-01 -0.740819E-01  0.740819E-01   185.430       185.504    
  41  0.234071      -1.45213      -5.25033       5.25033       180.389       185.639    
  42  0.264051      -1.33161      -4.81459       4.81459       186.821       191.635    
  43  0.756353     -0.279247      -1.00965       1.00965       184.883       185.892    
  44  0.980782     -0.194046E-01 -0.701594E-01  0.701594E-01   187.149       187.220    
  45  0.444591E-01  -3.11319      -11.2561       11.2561       178.432       189.688    
  46  0.276895      -1.28412      -4.64286       4.64286       186.910       191.553    
  47  0.754338     -0.281915      -1.01929       1.01929       187.646       188.666    
  48  0.288496      -1.24308      -4.49447       4.49447       184.313       188.808    
  49  0.945547     -0.559915E-01 -0.202443      0.202443       187.470       187.673    
  50  0.698722     -0.358502      -1.29620       1.29620       183.092       184.388    
  51  0.586821     -0.533035      -1.92725       1.92725       187.220       189.147    
  52  0.173241      -1.75307      -6.33842       6.33842       183.898       190.237    
  53  0.157974      -1.84532      -6.67197       6.67197       191.159       197.831    
  54  0.789304     -0.236604     -0.855467      0.855467       179.763       180.619    
  55  0.351815      -1.04465      -3.77704       3.77704       188.964       192.741    
  56  0.109517      -2.21167      -7.99654       7.99654       187.446       195.443    
  57  0.884115     -0.123168     -0.445328      0.445328       183.837       184.283    
  58  0.590256     -0.527198      -1.90614       1.90614       193.694       195.600    
  59  0.720991     -0.327128      -1.18277       1.18277       192.832       194.015    
  60  0.584697     -0.536661      -1.94035       1.94035       193.212       195.152    
  61  0.798909E-01  -2.52709      -9.13697       9.13697       192.851       201.988    
  62  0.476858     -0.740537      -2.67749       2.67749       192.832       195.510    
  63  0.366415      -1.00399      -3.63003       3.63003       194.654       198.284    
  64  0.579292     -0.545948      -1.97393       1.97393       192.598       194.572    
  65  0.859086     -0.151886     -0.549159      0.549159       191.913       192.463    
  66  0.178211      -1.72479      -6.23616       6.23616       186.584       192.820    
  67  0.372347     -0.987929      -3.57196       3.57196       189.670       193.242    
  68  0.132090      -2.02427      -7.31896       7.31896       189.919       197.238    
  69  0.292834      -1.22815      -4.44051       4.44051       194.243       198.684    
  70  0.788579     -0.237522     -0.858787      0.858787       192.845       193.704    
  71  0.555831     -0.587292      -2.12342       2.12342       193.513       195.637    
  72  0.621814     -0.475115      -1.71783       1.71783       174.069       175.787    
loop,thermsimp(1:2)       83   1.72511      0.649720    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363        207.12          0.84          1.11         25.08          0.14          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    364        186.67          0.84          1.11         25.29          0.14          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    186.67
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       83
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       84
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      363     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -2.00873       2.00873       166.873       168.881    
   2  0.583943E-01  -2.84054      -10.2703       10.2703       168.270       178.540    
   3  0.377108     -0.975224      -3.52602       3.52602       173.028       176.554    
   4  0.117758      -2.13912      -7.73423       7.73423       172.968       180.702    
   5  0.531627     -0.631812      -2.28438       2.28438       172.255       174.539    
   6  0.348101      -1.05526      -3.81541       3.81541       174.487       178.302    
   7  0.713050     -0.338204      -1.22281       1.22281       173.391       174.614    
   8  0.895286     -0.110612     -0.399930      0.399930       172.867       173.267    
   9  0.873863     -0.134831     -0.487496      0.487496       174.838       175.325    
  10  0.225074      -1.49132      -5.39204       5.39204       174.069       179.461    
  11  0.542220     -0.612083      -2.21305       2.21305       175.068       177.281    
  12  0.262707      -1.33672      -4.83304       4.83304       176.135       180.968    
  13  0.864358E-01  -2.44835      -8.85228       8.85228       177.340       186.192    
  14  0.468331     -0.758581      -2.74273       2.74273       171.708       174.451    
  15  0.896509     -0.109247     -0.394995      0.394995       175.329       175.724    
  16  0.169842E-01  -4.07547      -14.7353       14.7353       176.672       191.407    
  17  0.980158     -0.200410E-01 -0.724604E-01  0.724604E-01   175.132       175.204    
  18  0.252821      -1.37507      -4.97172       4.97172       177.366       182.337    
  19  0.556823     -0.585507      -2.11696       2.11696       177.589       179.706    
  20  0.520304     -0.653342      -2.36223       2.36223       175.715       178.077    
  21  0.956705E-01  -2.34685      -8.48527       8.48527       178.392       186.877    
  22  0.458762     -0.779224      -2.81737       2.81737       177.542       180.359    
  23  0.684654     -0.378842      -1.36974       1.36974       178.580       179.950    
  24  0.749393     -0.288492      -1.04307       1.04307       174.483       175.526    
  25  0.112724      -2.18282      -7.89220       7.89220       179.763       187.655    
  26  0.642114     -0.442989      -1.60167       1.60167       181.080       182.681    
  27  0.881888     -0.125691     -0.454448      0.454448       180.221       180.676    
  28  0.933845     -0.684452E-01 -0.247471      0.247471       183.837       184.085    
  29  0.124482      -2.08359      -7.53345       7.53345       182.875       190.408    
  30  0.189487      -1.66344      -6.01433       6.01433       183.165       189.180    
  31  0.526869     -0.640804      -2.31690       2.31690       183.092       185.409    
  32  0.490162     -0.713020      -2.57800       2.57800       180.706       183.284    
  33  0.292049      -1.23083      -4.45021       4.45021       179.727       184.177    
  34  0.646685     -0.435896      -1.57603       1.57603       173.514       175.091    
  35  0.738289     -0.303420      -1.09705       1.09705       185.115       186.212    
  36  0.379268     -0.969513      -3.50538       3.50538       185.430       188.935    
  37  0.691037     -0.369562      -1.33619       1.33619       181.547       182.883    
  38  0.566288     -0.568653      -2.05603       2.05603       180.389       182.445    
  39  0.130734      -2.03459      -7.35628       7.35628       184.883       192.239    
  40  0.298876      -1.20773      -4.36666       4.36666       184.071       188.438    
  41  0.369194     -0.996434      -3.60271       3.60271       173.592       177.194    
  42  0.291325      -1.23331      -4.45918       4.45918       187.149       191.609    
  43  0.828296     -0.188384     -0.681124      0.681124       180.949       181.630    
  44  0.540492E-01  -2.91786      -10.5498       10.5498       184.490       195.040    
  45  0.979889     -0.203162E-01 -0.734555E-01  0.734555E-01   187.470       187.544    
  46  0.411533     -0.887866      -3.21017       3.21017       184.706       187.916    
  47  0.430635     -0.842495      -3.04613       3.04613       187.646       190.692    
  48  0.948338     -0.530447E-01 -0.191789      0.191789       184.313       184.505    
  49  0.400713E-02  -5.51968      -19.9570       19.9570       187.220       207.177    
  50  0.963092     -0.376065E-01 -0.135970      0.135970       178.432       178.568    
  51  0.101802      -2.28472      -8.26066       8.26066       183.898       192.159    
  52  0.161305      -1.82446      -6.59653       6.59653       186.910       193.506    
  53  0.579295     -0.545944      -1.97392       1.97392       186.821       188.795    
  54  0.246178      -1.40170      -5.06800       5.06800       191.913       196.981    
  55  0.783155     -0.244425     -0.883743      0.883743       188.964       189.848    
  56  0.643375     -0.441028      -1.59458       1.59458       186.584       188.179    
  57  0.440007     -0.820964      -2.96828       2.96828       189.670       192.638    
  58  0.478097     -0.737941      -2.66810       2.66810       192.845       195.513    
  59  0.174252      -1.74725      -6.31737       6.31737       192.832       199.150    
  60  0.947266E-01  -2.35676      -8.52112       8.52112       192.598       201.119    
  61  0.115878      -2.15522      -7.79242       7.79242       179.665       187.457    
  62  0.523006     -0.648162      -2.34350       2.34350       193.212       195.555    
  63  0.114447      -2.16765      -7.83735       7.83735       187.446       195.284    
  64  0.694365     -0.364757      -1.31882       1.31882       192.832       194.151    
  65  0.551880     -0.594425      -2.14921       2.14921       193.694       195.843    
  66  0.558116     -0.583189      -2.10858       2.10858       193.513       195.622    
  67  0.160284      -1.83081      -6.61948       6.61948       173.636       180.256    
  68  0.786878     -0.239682     -0.866597      0.866597       189.919       190.786    
  69  0.450862     -0.796593      -2.88017       2.88017       191.159       194.039    
  70  0.857757     -0.153434     -0.554758      0.554758       194.654       195.209    
  71  0.789461     -0.236405     -0.854748      0.854748       194.243       195.098    
  72  0.507184     -0.678881      -2.45457       2.45457       186.665       189.120    
loop,thermsimp(1:2)       84   2.00873       10.2703    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365        175.80          0.84          1.11         25.13          0.17          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       84
neval is:      364
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       85
neval is:      364


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      364     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.236430      0.236430       166.873       167.109    
   2  0.765516     -0.267206     -0.966110      0.966110       172.867       173.833    
   3  0.899266     -0.106176     -0.383890      0.383890       171.708       172.092    
   4  0.953341     -0.477822E-01 -0.172762      0.172762       172.255       172.428    
   5  0.642356     -0.442612      -1.60031       1.60031       173.391       174.992    
   6  0.265713      -1.32534      -4.79191       4.79191       173.514       178.306    
   7  0.379937     -0.967749      -3.49900       3.49900       175.132       178.631    
   8  0.449606     -0.799384      -2.89026       2.89026       174.838       177.728    
   9  0.810725     -0.209826     -0.758649      0.758649       174.483       175.242    
  10  0.218977      -1.51879      -5.49135       5.49135       175.329       180.820    
  11  0.456613     -0.783919      -2.83434       2.83434       173.028       175.862    
  12  0.439289E-02  -5.42777      -19.6247       19.6247       173.592       193.216    
  13  0.710409     -0.341914      -1.23623       1.23623       175.068       176.304    
  14  0.385315     -0.953695      -3.44819       3.44819       175.715       179.163    
  15  0.116701      -2.14814      -7.76684       7.76684       174.487       182.254    
  16  0.985237     -0.148728E-01 -0.537740E-01  0.537740E-01   168.270       168.324    
  17  0.856588     -0.154798     -0.559688      0.559688       178.432       178.992    
  18  0.155419      -1.86163      -6.73092       6.73092       174.069       180.800    
  19  0.257525      -1.35664      -4.90508       4.90508       177.589       182.494    
  20  0.548716     -0.600174      -2.16999       2.16999       178.580       180.750    
  21  0.589698     -0.528145      -1.90956       1.90956       173.636       175.546    
  22  0.884364     -0.122887     -0.444309      0.444309       177.542       177.986    
  23  0.871018E-01  -2.44068      -8.82453       8.82453       180.221       189.046    
  24  0.486795     -0.719912      -2.60292       2.60292       172.968       175.571    
  25  0.161417      -1.82376      -6.59401       6.59401       176.135       182.729    
  26  0.598774     -0.512871      -1.85434       1.85434       180.949       182.803    
  27  0.483527     -0.726647      -2.62727       2.62727       177.366       179.993    
  28  0.715961     -0.334130      -1.20808       1.20808       180.389       181.597    
  29  0.771801     -0.259029     -0.936545      0.936545       181.080       182.016    
  30  0.458713     -0.779330      -2.81775       2.81775       181.547       184.365    
  31  0.235181      -1.44740      -5.23323       5.23323       180.706       185.940    
  32  0.488220     -0.716988      -2.59235       2.59235       183.837       186.430    
  33  0.365473      -1.00656      -3.63934       3.63934       179.727       183.366    
  34  0.191311      -1.65386      -5.97970       5.97970       184.313       190.293    
  35  0.484999     -0.723609      -2.61629       2.61629       183.092       185.708    
  36  0.799086     -0.224286     -0.810930      0.810930       177.340       178.151    
  37  0.811458     -0.208923     -0.755383      0.755383       185.115       185.870    
  38  0.829885E-01  -2.48905      -8.99944       8.99944       178.392       187.391    
  39  0.731085     -0.313226      -1.13250       1.13250       179.665       180.798    
  40  0.854012     -0.157810     -0.570577      0.570577       187.470       188.041    
  41  0.699629     -0.357205      -1.29151       1.29151       179.763       181.055    
  42  0.918965     -0.845069E-01 -0.305544      0.305544       184.706       185.011    
  43  0.463498     -0.768952      -2.78023       2.78023       186.584       189.364    
  44  0.758690E-01  -2.57875      -9.32373       9.32373       184.071       193.395    
  45  0.577757     -0.548602      -1.98353       1.98353       186.821       188.804    
  46  0.897332     -0.108329     -0.391675      0.391675       185.430       185.821    
  47  0.522547     -0.649040      -2.34667       2.34667       186.665       189.012    
  48  0.408730E-01  -3.19729      -11.5601       11.5601       183.165       194.726    
  49  0.244793      -1.40734      -5.08839       5.08839       188.964       194.053    
  50  0.503867     -0.685443      -2.47829       2.47829       182.875       185.353    
  51  0.268075      -1.31649      -4.75991       4.75991       187.646       192.406    
  52  0.502965     -0.687236      -2.48477       2.48477       189.919       192.404    
  53  0.204120      -1.58905      -5.74537       5.74537       176.672       182.417    
  54  0.815323     -0.204171     -0.738200      0.738200       187.149       187.888    
  55  0.197358      -1.62274      -5.86718       5.86718       183.898       189.766    
  56  0.754254     -0.282026      -1.01969       1.01969       184.883       185.902    
  57  0.693043E-01  -2.66925      -9.65095       9.65095       189.670       199.321    
  58  0.913327     -0.906616E-01 -0.327797      0.327797       186.910       187.238    
  59  0.921558     -0.816897E-01 -0.295358      0.295358       191.159       191.454    
  60  0.383396     -0.958686      -3.46623       3.46623       192.832       196.299    
  61  0.641735     -0.443580      -1.60381       1.60381       184.490       186.094    
  62  0.380707     -0.965725      -3.49168       3.49168       194.243       197.735    
  63  0.877180E-01  -2.43363      -8.79904       8.79904       194.654       203.453    
  64  0.768830     -0.262886     -0.950492      0.950492       187.446       188.397    
  65  0.998270     -0.173121E-02 -0.625937E-02  0.625937E-02   192.845       192.852    
  66  0.504375     -0.684435      -2.47465       2.47465       193.212       195.686    
  67  0.789522     -0.236327     -0.854466      0.854466       193.513       194.368    
  68  0.182758E-01  -4.00218      -14.4703       14.4703       193.694       208.164    
  69  0.828868     -0.187695     -0.678630      0.678630       191.913       192.592    
  70  0.147499      -1.91393      -6.92003       6.92003       192.832       199.752    
  71  0.928056     -0.746629E-01 -0.269952      0.269952       192.598       192.868    
  72  0.575315     -0.552838      -1.99884       1.99884       175.800       177.799    
loop,thermsimp(1:2)       85  0.236430      0.966110    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    366        177.99          0.84          1.11         25.21          0.03          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       85
neval is:      365
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       86
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      365     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -3.96061       3.96061       166.873       170.833    
   2  0.140144      -1.96508      -7.10497       7.10497       168.270       175.375    
   3  0.520913     -0.652172      -2.35800       2.35800       171.708       174.066    
   4  0.628337     -0.464678      -1.68009       1.68009       172.255       173.935    
   5  0.203324      -1.59296      -5.75950       5.75950       172.867       178.627    
   6  0.481205     -0.731462      -2.64468       2.64468       173.391       176.036    
   7  0.948759     -0.526009E-01 -0.190184      0.190184       174.483       174.674    
   8  0.251825      -1.37902      -4.98599       4.98599       173.636       178.622    
   9  0.363806      -1.01114      -3.65587       3.65587       172.968       176.624    
  10  0.465077     -0.765552      -2.76793       2.76793       173.028       175.796    
  11  0.580920     -0.543143      -1.96379       1.96379       175.068       177.032    
  12  0.957129     -0.438167E-01 -0.158424      0.158424       174.838       174.996    
  13  0.345007      -1.06419      -3.84769       3.84769       175.800       179.648    
  14  0.177852E-01  -4.02939      -14.5687       14.5687       177.542       192.111    
  15  0.843779     -0.169864     -0.614162      0.614162       177.340       177.954    
  16  0.765452     -0.267288     -0.966409      0.966409       173.514       174.481    
  17  0.453925     -0.789824      -2.85569       2.85569       175.132       177.987    
  18  0.378234     -0.972243      -3.51525       3.51525       178.432       181.947    
  19  0.167312      -1.78790      -6.46433       6.46433       175.715       182.179    
  20  0.240345      -1.42568      -5.15469       5.15469       177.366       182.520    
  21  0.868226     -0.141303     -0.510897      0.510897       178.580       179.091    
  22  0.907002     -0.976102E-01 -0.352920      0.352920       179.665       180.018    
  23  0.433040     -0.836925      -3.02599       3.02599       174.069       177.095    
  24  0.291080      -1.23416      -4.46223       4.46223       175.329       179.791    
  25  0.391091     -0.938815      -3.39438       3.39438       179.763       183.157    
  26  0.541803     -0.612853      -2.21584       2.21584       180.389       182.605    
  27  0.494251     -0.704711      -2.54796       2.54796       181.080       183.627    
  28  0.617376     -0.482277      -1.74372       1.74372       174.487       176.231    
  29  0.919515     -0.839094E-01 -0.303384      0.303384       176.672       176.975    
  30  0.836216     -0.178868     -0.646717      0.646717       177.589       178.236    
  31  0.436173     -0.829716      -2.99993       2.99993       176.135       179.135    
  32  0.175211      -1.74176      -6.29753       6.29753       180.949       187.246    
  33  0.304297      -1.18975      -4.30167       4.30167       179.727       184.028    
  34  0.996125     -0.388259E-02 -0.140379E-01  0.140379E-01   181.547       181.561    
  35  0.146253      -1.92242      -6.95070       6.95070       184.706       191.657    
  36  0.110666      -2.20124      -7.95880       7.95880       182.875       190.833    
  37  0.481190E-01  -3.03408      -10.9700       10.9700       183.092       194.062    
  38  0.342728      -1.07082      -3.87165       3.87165       185.430       189.301    
  39  0.998409E-01  -2.30418      -8.33100       8.33100       185.115       193.446    
  40  0.509248     -0.674821      -2.43989       2.43989       184.883       187.323    
  41  0.974159     -0.261804E-01 -0.946582E-01  0.946582E-01   180.706       180.801    
  42  0.950347     -0.509279E-01 -0.184135      0.184135       184.490       184.674    
  43  0.333494      -1.09813      -3.97041       3.97041       183.837       187.808    
  44  0.914660     -0.892024E-01 -0.322521      0.322521       186.910       187.232    
  45  0.249678      -1.38758      -5.01696       5.01696       178.392       183.409    
  46  0.512508     -0.668440      -2.41682       2.41682       187.149       189.566    
  47  0.592185     -0.523937      -1.89435       1.89435       187.470       189.365    
  48  0.931089     -0.714008E-01 -0.258157      0.258157       187.446       187.704    
  49  0.638700     -0.448321      -1.62095       1.62095       186.821       188.442    
  50  0.563786     -0.573081      -2.07204       2.07204       186.665       188.737    
  51  0.136824      -1.98906      -7.19166       7.19166       180.221       187.413    
  52  0.806361     -0.215224     -0.778164      0.778164       186.584       187.362    
  53  0.106433      -2.24024      -8.09982       8.09982       183.898       191.998    
  54  0.637638     -0.449985      -1.62697       1.62697       184.313       185.940    
  55  0.677480     -0.389375      -1.40782       1.40782       191.159       192.567    
  56  0.533764     -0.627801      -2.26988       2.26988       189.919       192.189    
  57  0.879213     -0.128728     -0.465431      0.465431       187.646       188.112    
  58  0.260545E-01  -3.64756      -13.1882       13.1882       191.913       205.102    
  59  0.249338      -1.38895      -5.02189       5.02189       192.845       197.867    
  60  0.101288      -2.28979      -8.27896       8.27896       192.598       200.877    
  61  0.563390     -0.573782      -2.07457       2.07457       173.592       175.666    
  62  0.735149     -0.307682      -1.11246       1.11246       184.071       185.184    
  63  0.720819     -0.327367      -1.18363       1.18363       188.964       190.148    
  64  0.493868     -0.705487      -2.55076       2.55076       193.513       196.064    
  65  0.417909     -0.872492      -3.15459       3.15459       183.165       186.320    
  66  0.529854     -0.635153      -2.29646       2.29646       193.212       195.508    
  67  0.732047     -0.311910      -1.12774       1.12774       192.832       193.960    
  68  0.926465     -0.763785E-01 -0.276155      0.276155       194.243       194.519    
  69  0.948726     -0.526350E-01 -0.190307      0.190307       189.670       189.860    
  70  0.433699     -0.835404      -3.02049       3.02049       192.832       195.853    
  71  0.901840     -0.103319     -0.373559      0.373559       194.654       195.028    
  72  0.804136     -0.217987     -0.788156      0.788156       177.988       178.776    
loop,thermsimp(1:2)       86   3.96061       7.10497    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    367        173.46          0.85          1.11         25.31          0.14          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       86
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       87
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      366     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -11.2355       11.2355       166.873       178.108    
   2  0.682805     -0.381545      -1.37952       1.37952       172.255       173.634    
   3  0.699780     -0.356989      -1.29073       1.29073       171.708       172.999    
   4  0.515086     -0.663422      -2.39867       2.39867       173.514       175.913    
   5  0.402461     -0.910157      -3.29077       3.29077       174.483       177.774    
   6  0.652803     -0.426480      -1.54198       1.54198       174.838       176.380    
   7  0.483213     -0.727297      -2.62962       2.62962       168.270       170.900    
   8  0.873684     -0.135037     -0.488240      0.488240       173.592       174.080    
   9  0.142648      -1.94738      -7.04095       7.04095       173.028       180.069    
  10  0.844357     -0.169180     -0.611689      0.611689       173.391       174.003    
  11  0.154187      -1.86959      -6.75969       6.75969       174.487       181.247    
  12  0.437314E-01  -3.12969      -11.3157       11.3157       172.968       184.283    
  13  0.455393E-02  -5.39176      -19.4945       19.4945       176.672       196.167    
  14  0.236800      -1.44054      -5.20842       5.20842       175.068       180.276    
  15  0.660181     -0.415241      -1.50135       1.50135       174.069       175.570    
  16  0.652586     -0.426813      -1.54319       1.54319       177.340       178.883    
  17  0.153101      -1.87666      -6.78526       6.78526       175.132       181.917    
  18  0.753412     -0.283143      -1.02373       1.02373       177.589       178.613    
  19  0.240839      -1.42363      -5.14727       5.14727       173.636       178.784    
  20  0.684622     -0.378888      -1.36991       1.36991       172.867       174.237    
  21  0.243018      -1.41462      -5.11471       5.11471       177.988       183.102    
  22  0.815539     -0.203906     -0.737244      0.737244       178.580       179.317    
  23  0.589355     -0.528726      -1.91167       1.91167       176.135       178.047    
  24  0.243009      -1.41466      -5.11484       5.11484       175.800       180.915    
  25  0.821886     -0.196154     -0.709216      0.709216       175.329       176.038    
  26  0.261401      -1.34170      -4.85106       4.85106       179.665       184.516    
  27  0.571134     -0.560131      -2.02521       2.02521       180.706       182.732    
  28  0.406429E-01  -3.20293      -11.5805       11.5805       181.547       193.127    
  29  0.341463      -1.07451      -3.88502       3.88502       178.432       182.317    
  30  0.252643      -1.37578      -4.97427       4.97427       175.715       180.689    
  31  0.503366     -0.686439      -2.48189       2.48189       177.366       179.847    
  32  0.247804      -1.39512      -5.04419       5.04419       180.389       185.433    
  33  0.902392     -0.102706     -0.371344      0.371344       179.763       180.134    
  34  0.198330E-01  -3.92041      -14.1747       14.1747       178.392       192.566    
  35  0.695627     -0.362942      -1.31225       1.31225       181.080       182.392    
  36  0.833441     -0.182192     -0.658736      0.658736       179.727       180.386    
  37  0.720954     -0.327181      -1.18296       1.18296       184.490       185.673    
  38  0.155604      -1.86044      -6.72663       6.72663       184.071       190.798    
  39  0.496580E-01  -3.00260      -10.8562       10.8562       184.313       195.169    
  40  0.804644     -0.217356     -0.785873      0.785873       183.165       183.951    
  41  0.329241      -1.11097      -4.01681       4.01681       186.910       190.927    
  42  0.889596     -0.116988     -0.422983      0.422983       180.949       181.372    
  43  0.857341     -0.153920     -0.556513      0.556513       184.883       185.439    
  44  0.238258      -1.43440      -5.18622       5.18622       186.584       191.770    
  45  0.998437     -0.156448E-02 -0.565654E-02  0.565654E-02   180.221       180.227    
  46  0.280889      -1.26979      -4.59108       4.59108       187.446       192.037    
  47  0.518450     -0.656912      -2.37514       2.37514       183.837       186.212    
  48  0.348786      -1.05330      -3.80831       3.80831       187.646       191.455    
  49  0.250207      -1.38547      -5.00930       5.00930       186.821       191.830    
  50  0.442136     -0.816138      -2.95083       2.95083       186.665       189.616    
  51  0.881002     -0.126696     -0.458082      0.458082       185.430       185.888    
  52  0.903963     -0.100967     -0.365056      0.365056       187.470       187.835    
  53  0.227541      -1.48043      -5.35264       5.35264       187.149       192.502    
  54  0.468734     -0.757719      -2.73961       2.73961       189.670       192.409    
  55  0.622565E-01  -2.77649      -10.0387       10.0387       188.964       199.003    
  56  0.650607     -0.429850      -1.55417       1.55417       182.875       184.429    
  57  0.947139     -0.543094E-01 -0.196361      0.196361       184.706       184.902    
  58  0.942852     -0.588460E-01 -0.212764      0.212764       183.898       184.111    
  59  0.204603      -1.58668      -5.73682       5.73682       177.542       183.279    
  60  0.781809     -0.246145     -0.889963      0.889963       189.919       190.809    
  61  0.543108     -0.610447      -2.20713       2.20713       191.159       193.366    
  62  0.199157E-02  -6.21883      -22.4848       22.4848       185.115       207.600    
  63  0.867255     -0.142422     -0.514943      0.514943       192.832       193.347    
  64  0.846580     -0.166550     -0.602180      0.602180       183.092       183.694    
  65  0.267681      -1.31796      -4.76522       4.76522       194.243       199.008    
  66  0.656550E-01  -2.72334      -9.84653       9.84653       194.654       204.501    
  67  0.914706     -0.891526E-01 -0.322341      0.322341       193.212       193.534    
  68  0.177217      -1.73038      -6.25637       6.25637       192.832       199.089    
  69  0.973717     -0.266348E-01 -0.963010E-01  0.963010E-01   193.513       193.610    
  70  0.329699E-01  -3.41216      -12.3370       12.3370       192.845       205.182    
  71  0.242441E-01  -3.71958      -13.4485       13.4485       192.598       206.047    
  72  0.884493     -0.122740     -0.443780      0.443780       173.455       173.899    
loop,thermsimp(1:2)       87   11.2355       1.37952    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368        175.17          0.84          1.11         25.13          0.11          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       87
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       88
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      367     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -2.72165       2.72165       168.270       170.992    
   2  0.531040     -0.632917      -2.28838       2.28838       171.708       173.997    
   3  0.592986E-01  -2.82517      -10.2147       10.2147       172.255       182.470    
   4  0.247694      -1.39556      -5.04581       5.04581       173.455       178.501    
   5  0.131832      -2.02623      -7.32604       7.32604       173.391       180.717    
   6  0.928797E-01  -2.37645      -8.59231       8.59231       173.592       182.184    
   7  0.638590     -0.448492      -1.62157       1.62157       172.867       174.489    
   8  0.220145      -1.51347      -5.47211       5.47211       174.069       179.541    
   9  0.764323     -0.268765     -0.971748      0.971748       173.514       174.486    
  10  0.223429      -1.49866      -5.41856       5.41856       175.329       180.747    
  11  0.705665     -0.348615      -1.26045       1.26045       174.838       176.098    
  12  0.812667     -0.207434     -0.750001      0.750001       174.483       175.233    
  13  0.344167      -1.06663      -3.85651       3.85651       176.135       179.992    
  14  0.691720     -0.368573      -1.33262       1.33262       166.873       168.205    
  15  0.601584     -0.508189      -1.83741       1.83741       177.589       179.427    
  16  0.323598      -1.12825      -4.07932       4.07932       173.636       177.716    
  17  0.536181     -0.623284      -2.25355       2.25355       177.340       179.594    
  18  0.224445      -1.49412      -5.40216       5.40216       178.580       183.982    
  19  0.967837     -0.326916E-01 -0.118200      0.118200       177.366       177.484    
  20  0.982234     -0.179257E-01 -0.648124E-01  0.648124E-01   173.028       173.093    
  21  0.656459     -0.420894      -1.52179       1.52179       179.763       181.285    
  22  0.138036      -1.98024      -7.15976       7.15976       180.221       187.381    
  23  0.698821     -0.358360      -1.29569       1.29569       175.068       176.364    
  24  0.603237     -0.505446      -1.82749       1.82749       179.727       181.554    
  25  0.253585      -1.37205      -4.96081       4.96081       175.715       180.676    
  26  0.404885     -0.904153      -3.26906       3.26906       175.800       179.069    
  27  0.802083     -0.220543     -0.797396      0.797396       174.487       175.284    
  28  0.756447     -0.279123      -1.00920       1.00920       180.949       181.958    
  29  0.390929     -0.939231      -3.39589       3.39589       175.132       178.528    
  30  0.260757      -1.34417      -4.85998       4.85998       178.432       183.292    
  31  0.177681      -1.72776      -6.24692       6.24692       181.080       187.326    
  32  0.806362     -0.215223     -0.778161      0.778161       180.706       181.485    
  33  0.222380      -1.50337      -5.43558       5.43558       177.988       183.423    
  34  0.969986     -0.304736E-01 -0.110181      0.110181       177.542       177.652    
  35  0.417166     -0.874272      -3.16102       3.16102       183.092       186.253    
  36  0.212672      -1.54800      -5.59697       5.59697       183.165       188.762    
  37  0.141187      -1.95767      -7.07816       7.07816       183.898       190.977    
  38  0.750343     -0.287224      -1.03849       1.03849       172.968       174.006    
  39  0.628172     -0.464941      -1.68104       1.68104       182.875       184.556    
  40  0.466629     -0.762221      -2.75589       2.75589       179.665       182.421    
  41  0.120425      -2.11672      -7.65324       7.65324       184.706       192.359    
  42  0.179567      -1.71721      -6.20875       6.20875       180.389       186.598    
  43  0.209268      -1.56414      -5.65531       5.65531       184.883       190.538    
  44  0.730304E-01  -2.61688      -9.46161       9.46161       184.490       193.951    
  45  0.985392     -0.147157E-01 -0.532063E-01  0.532063E-01   185.430       185.483    
  46  0.726759E-01  -2.62175      -9.47920       9.47920       183.837       193.317    
  47  0.205943      -1.58016      -5.71323       5.71323       187.470       193.184    
  48  0.198791      -1.61550      -5.84102       5.84102       186.665       192.506    
  49  0.320500      -1.13787      -4.11411       4.11411       184.071       188.185    
  50  0.911267     -0.929191E-01 -0.335959      0.335959       189.919       190.255    
  51  0.153842      -1.87183      -6.76781       6.76781       186.910       193.678    
  52  0.152265      -1.88213      -6.80505       6.80505       187.646       194.451    
  53  0.396303     -0.925575      -3.34652       3.34652       186.584       189.930    
  54  0.964537     -0.361075E-01 -0.130550      0.130550       186.821       186.951    
  55  0.259986      -1.34713      -4.87068       4.87068       187.446       192.317    
  56  0.710828     -0.341325      -1.23410       1.23410       189.670       190.904    
  57  0.189878E-01  -3.96396      -14.3321       14.3321       187.149       201.481    
  58  0.960744     -0.400468E-01 -0.144793      0.144793       178.392       178.537    
  59  0.514017     -0.665499      -2.40618       2.40618       181.547       183.953    
  60  0.507688     -0.677888      -2.45098       2.45098       192.832       195.283    
  61  0.915765     -0.879957E-01 -0.318158      0.318158       191.159       191.477    
  62  0.648043     -0.433798      -1.56844       1.56844       193.212       194.780    
  63  0.395249     -0.928240      -3.35615       3.35615       193.513       196.869    
  64  0.604600     -0.503188      -1.81933       1.81933       184.313       186.132    
  65  0.348789      -1.05329      -3.80827       3.80827       176.672       180.480    
  66  0.497548     -0.698064      -2.52392       2.52392       188.964       191.488    
  67  0.240711E-01  -3.72675      -13.4744       13.4744       194.243       207.718    
  68  0.745753     -0.293361      -1.06068       1.06068       192.832       193.893    
  69  0.195047      -1.63452      -5.90977       5.90977       194.654       200.564    
  70  0.792585     -0.232456     -0.840469      0.840469       192.845       193.686    
  71  0.411313     -0.888400      -3.21211       3.21211       192.598       195.810    
  72  0.574995     -0.553393      -2.00085       2.00085       175.167       177.168    
loop,thermsimp(1:2)       88   2.72165       2.28838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369        174.81          0.84          1.11         25.12          0.20          0.05         27.32
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       88
neval is:      368
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       89
neval is:      368


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      368     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -3.79194       3.79194       166.873       170.665    
   2  0.650675     -0.429745      -1.55379       1.55379       168.270       169.824    
   3  0.849247     -0.163405     -0.590809      0.590809       173.028       173.619    
   4  0.910703     -0.935381E-01 -0.338197      0.338197       171.708       172.047    
   5  0.188892      -1.66658      -6.02569       6.02569       172.968       178.993    
   6  0.256564      -1.36038      -4.91859       4.91859       173.514       178.433    
   7  0.465488E-01  -3.06725      -11.0900       11.0900       172.867       183.957    
   8  0.824855     -0.192548     -0.696178      0.696178       174.483       175.180    
   9  0.730565     -0.313937      -1.13507       1.13507       174.487       175.622    
  10  0.888077     -0.118697     -0.429161      0.429161       174.838       175.267    
  11  0.898172     -0.107394     -0.388295      0.388295       175.068       175.456    
  12  0.314974      -1.15527      -4.17699       4.17699       175.167       179.344    
  13  0.247979      -1.39441      -5.04164       5.04164       177.366       182.407    
  14  0.330032E-01  -3.41115      -12.3334       12.3334       177.542       189.875    
  15  0.570783E-01  -2.86333      -10.3527       10.3527       173.636       183.989    
  16  0.694187     -0.365014      -1.31975       1.31975       173.455       174.775    
  17  0.314834      -1.15571      -4.17859       4.17859       175.132       179.310    
  18  0.917621     -0.859711E-01 -0.310838      0.310838       178.392       178.703    
  19  0.613858     -0.487991      -1.76438       1.76438       175.800       177.564    
  20  0.744084E-01  -2.59819      -9.39402       9.39402       177.589       186.983    
  21  0.454198     -0.789221      -2.85351       2.85351       174.069       176.922    
  22  0.118203E-01  -4.43793      -16.0458       16.0458       177.340       193.386    
  23  0.746996     -0.291695      -1.05465       1.05465       176.135       177.190    
  24  0.416160     -0.876686      -3.16975       3.16975       176.672       179.842    
  25  0.339178E-01  -3.38381      -12.2345       12.2345       175.715       187.949    
  26  0.824080     -0.193487     -0.699573      0.699573       173.391       174.091    
  27  0.589652     -0.528223      -1.90985       1.90985       175.329       177.238    
  28  0.680293     -0.385231      -1.39284       1.39284       179.763       181.156    
  29  0.864872E-01  -2.44776      -8.85013       8.85013       180.706       189.557    
  30  0.672988     -0.396027      -1.43188       1.43188       179.727       181.159    
  31  0.797049E-01  -2.52942      -9.14540       9.14540       180.949       190.094    
  32  0.831708     -0.184273     -0.666260      0.666260       173.592       174.258    
  33  0.280253E-01  -3.57465      -12.9245       12.9245       179.665       192.590    
  34  0.131717      -2.02710      -7.32919       7.32919       172.255       179.584    
  35  0.343675      -1.06806      -3.86168       3.86168       178.432       182.293    
  36  0.280745      -1.27031      -4.59294       4.59294       177.988       182.580    
  37  0.322275      -1.13235      -4.09413       4.09413       181.547       185.641    
  38  0.769830E-01  -2.56417      -9.27103       9.27103       178.580       187.851    
  39  0.851798     -0.160406     -0.579963      0.579963       182.875       183.454    
  40  0.864683     -0.145392     -0.525680      0.525680       185.430       185.955    
  41  0.157880      -1.84592      -6.67411       6.67411       184.313       190.987    
  42  0.371895     -0.989143      -3.57635       3.57635       183.092       186.668    
  43  0.861425     -0.149167     -0.539330      0.539330       180.389       180.928    
  44  0.778275E-01  -2.55326      -9.23158       9.23158       186.821       196.052    
  45  0.450106     -0.798272      -2.88624       2.88624       181.080       183.966    
  46  0.188928      -1.66639      -6.02501       6.02501       180.221       186.246    
  47  0.225391      -1.48992      -5.38696       5.38696       184.071       189.458    
  48  0.814689     -0.204949     -0.741013      0.741013       183.165       183.906    
  49  0.556109     -0.586791      -2.12160       2.12160       186.584       188.706    
  50  0.860351     -0.150415     -0.543843      0.543843       189.919       190.463    
  51  0.124594      -2.08269      -7.53019       7.53019       184.883       192.413    
  52  0.924630     -0.783615E-01 -0.283324      0.283324       189.670       189.953    
  53  0.463685     -0.768549      -2.77877       2.77877       183.898       186.677    
  54  0.719654     -0.328985      -1.18948       1.18948       191.159       192.348    
  55  0.740445     -0.300503      -1.08650       1.08650       188.964       190.051    
  56  0.948188     -0.532020E-01 -0.192358      0.192358       187.446       187.639    
  57  0.174315      -1.74689      -6.31607       6.31607       184.706       191.022    
  58  0.436138     -0.829795      -3.00021       3.00021       186.665       189.666    
  59  0.442627     -0.815027      -2.94682       2.94682       187.470       190.417    
  60  0.781531     -0.246500     -0.891247      0.891247       183.837       184.729    
  61  0.233219E-01  -3.75836      -13.5888       13.5888       186.910       200.499    
  62  0.529855     -0.635152      -2.29646       2.29646       192.845       195.142    
  63  0.415693     -0.877807      -3.17381       3.17381       192.832       196.006    
  64  0.655864     -0.421801      -1.52507       1.52507       184.490       186.015    
  65  0.932327     -0.700720E-01 -0.253353      0.253353       187.646       187.900    
  66  0.570322     -0.561554      -2.03036       2.03036       193.212       195.242    
  67  0.969693     -0.307757E-01 -0.111273      0.111273       192.832       192.944    
  68  0.707842     -0.345534      -1.24932       1.24932       192.598       193.847    
  69  0.971476E-01  -2.33152      -8.42987       8.42987       193.513       201.943    
  70  0.807879     -0.213342     -0.771362      0.771362       194.654       195.426    
  71  0.261134      -1.34272      -4.85475       4.85475       187.149       192.004    
  72  0.395767     -0.926929      -3.35141       3.35141       174.808       178.160    
loop,thermsimp(1:2)       89   3.79194       1.55379    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    370        174.45          0.84          1.11         25.07          0.18          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       89
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       90
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      369     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -7.33193       7.33193       168.270       175.602    
   2  0.314760      -1.15594      -4.17944       4.17944       166.873       171.052    
   3  0.748375     -0.289851      -1.04799       1.04799       171.708       172.756    
   4  0.632472     -0.458119      -1.65638       1.65638       173.028       174.684    
   5  0.677472     -0.389387      -1.40787       1.40787       173.391       174.799    
   6  0.433475     -0.835921      -3.02236       3.02236       173.592       176.614    
   7  0.458976     -0.778758      -2.81568       2.81568       173.455       176.271    
   8  0.411427E-02  -5.49329      -19.8616       19.8616       174.483       194.345    
   9  0.904989     -0.998322E-01 -0.360954      0.360954       174.838       175.199    
  10  0.480311     -0.733322      -2.65140       2.65140       175.068       177.719    
  11  0.277870      -1.28060      -4.63015       4.63015       174.487       179.117    
  12  0.958372     -0.425196E-01 -0.153734      0.153734       174.069       174.223    
  13  0.321639      -1.13432      -4.10127       4.10127       176.135       180.237    
  14  0.562333     -0.575660      -2.08136       2.08136       175.329       177.410    
  15  0.665565     -0.407119      -1.47198       1.47198       175.800       177.272    
  16  0.307614      -1.17891      -4.26248       4.26248       174.808       179.071    
  17  0.504790E-01  -2.98620      -10.7969       10.7969       173.514       184.311    
  18  0.361959      -1.01622      -3.67427       3.67427       178.392       182.066    
  19  0.470787     -0.753350      -2.72382       2.72382       172.968       175.691    
  20  0.312221      -1.16404      -4.20872       4.20872       175.132       179.340    
  21  0.156792      -1.85283      -6.69912       6.69912       175.167       181.866    
  22  0.445216     -0.809196      -2.92573       2.92573       172.255       175.181    
  23  0.999492     -0.508321E-03 -0.183789E-02  0.183789E-02   176.672       176.674    
  24  0.167067      -1.78936      -6.46962       6.46962       180.389       186.859    
  25  0.435083     -0.832219      -3.00898       3.00898       179.763       182.772    
  26  0.110403      -2.20362      -7.96741       7.96741       179.727       187.694    
  27  0.704194     -0.350701      -1.26800       1.26800       178.432       179.700    
  28  0.767816     -0.264205     -0.955262      0.955262       177.366       178.321    
  29  0.231293      -1.46407      -5.29350       5.29350       177.988       183.281    
  30  0.965513     -0.350953E-01 -0.126891      0.126891       182.875       183.001    
  31  0.674440     -0.393873      -1.42409       1.42409       183.165       184.589    
  32  0.248626      -1.39181      -5.03223       5.03223       172.867       177.900    
  33  0.461218     -0.773884      -2.79806       2.79806       181.080       183.878    
  34  0.778910     -0.249859     -0.903393      0.903393       173.636       174.540    
  35  0.665530     -0.407172      -1.47217       1.47217       183.837       185.309    
  36  0.383296     -0.958947      -3.46717       3.46717       181.547       185.014    
  37  0.492311     -0.708645      -2.56218       2.56218       185.430       187.992    
  38  0.631911     -0.459006      -1.65959       1.65959       184.490       186.149    
  39  0.150454E-01  -4.19668      -15.1736       15.1736       180.221       195.395    
  40  0.958677     -0.422006E-01 -0.152581      0.152581       183.092       183.244    
  41  0.411899     -0.886977      -3.20696       3.20696       183.898       187.105    
  42  0.466999     -0.761428      -2.75302       2.75302       177.589       180.342    
  43  0.622674     -0.473731      -1.71283       1.71283       187.446       189.159    
  44  0.497710     -0.697737      -2.52274       2.52274       178.580       181.103    
  45  0.763352E-01  -2.57262      -9.30158       9.30158       187.646       196.948    
  46  0.192360      -1.64839      -5.95991       5.95991       175.715       181.675    
  47  0.444368     -0.811101      -2.93262       2.93262       186.584       189.517    
  48  0.617268     -0.482452      -1.74436       1.74436       184.071       185.816    
  49  0.898554     -0.106968     -0.386754      0.386754       180.706       181.093    
  50  0.382850     -0.960111      -3.47139       3.47139       186.665       190.137    
  51  0.769319     -0.262250     -0.948191      0.948191       177.542       178.490    
  52  0.356805      -1.03057      -3.72612       3.72612       189.670       193.396    
  53  0.159449E-01  -4.13862      -14.9636       14.9636       188.964       203.928    
  54  0.879661     -0.128218     -0.463587      0.463587       180.949       181.412    
  55  0.413677     -0.882671      -3.19139       3.19139       187.470       190.662    
  56  0.332125      -1.10224      -3.98528       3.98528       189.919       193.905    
  57  0.963873     -0.367956E-01 -0.133039      0.133039       184.313       184.446    
  58  0.440660     -0.819481      -2.96292       2.96292       184.706       187.669    
  59  0.968287     -0.322271E-01 -0.116520      0.116520       187.149       187.266    
  60  0.174603      -1.74524      -6.31010       6.31010       191.159       197.469    
  61  0.915676E-01  -2.39068      -8.64375       8.64375       184.883       193.526    
  62  0.882563     -0.124926     -0.451682      0.451682       179.665       180.117    
  63  0.504296     -0.684592      -2.47522       2.47522       192.832       195.308    
  64  0.877119     -0.131112     -0.474050      0.474050       177.340       177.814    
  65  0.703997     -0.350981      -1.26901       1.26901       192.598       193.867    
  66  0.349323      -1.05176      -3.80275       3.80275       192.845       196.648    
  67  0.417707     -0.872976      -3.15634       3.15634       193.212       196.368    
  68  0.442862E-01  -3.11708      -11.2701       11.2701       194.654       205.924    
  69  0.135627      -1.99785      -7.22343       7.22343       192.832       200.056    
  70  0.684853     -0.378551      -1.36869       1.36869       186.821       188.190    
  71  0.191848      -1.65105      -5.96956       5.96956       186.910       192.879    
  72  0.273174      -1.29765      -4.69178       4.69178       174.449       179.141    
loop,thermsimp(1:2)       90   7.33193       4.17944    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371        201.58          0.85          1.12         25.37          0.26          0.05         27.65
Just calling func    0   0         27.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    201.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       90
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       91
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      370     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.299993      0.299993       166.873       167.173    
   2  0.393393     -0.932946      -3.37316       3.37316       171.708       175.082    
   3  0.317218      -1.14817      -4.15132       4.15132       174.069       178.220    
   4  0.324247      -1.12625      -4.07207       4.07207       173.636       177.708    
   5  0.515746E-01  -2.96473      -10.7193       10.7193       173.028       183.747    
   6  0.143224      -1.94335      -7.02637       7.02637       173.391       180.418    
   7  0.512136     -0.669164      -2.41943       2.41943       172.255       174.674    
   8  0.993896     -0.612239E-02 -0.221362E-01  0.221362E-01   174.838       174.860    
   9  0.440900     -0.818937      -2.96095       2.96095       168.270       171.231    
  10  0.861233     -0.149390     -0.540137      0.540137       172.968       173.508    
  11  0.690005     -0.371056      -1.34159       1.34159       173.455       174.797    
  12  0.192792      -1.64614      -5.95180       5.95180       173.592       179.543    
  13  0.975175     -0.251388E-01 -0.908918E-01  0.908918E-01   176.672       176.763    
  14  0.595327E-01  -2.82123      -10.2005       10.2005       175.800       186.000    
  15  0.142661      -1.94729      -7.04062       7.04062       175.329       182.369    
  16  0.141610      -1.95468      -7.06734       7.06734       175.068       182.135    
  17  0.976591     -0.236872E-01 -0.856437E-01  0.856437E-01   177.340       177.426    
  18  0.894748     -0.111213     -0.402104      0.402104       172.867       173.269    
  19  0.747310     -0.291275      -1.05314       1.05314       177.366       178.419    
  20  0.434887     -0.832670      -3.01061       3.01061       177.542       180.553    
  21  0.673581     -0.395146      -1.42869       1.42869       174.808       176.237    
  22  0.624944     -0.470094      -1.69967       1.69967       174.487       176.187    
  23  0.617967     -0.481321      -1.74027       1.74027       174.449       176.189    
  24  0.659853     -0.415739      -1.50315       1.50315       175.132       176.635    
  25  0.963159E-01  -2.34012      -8.46096       8.46096       178.432       186.893    
  26  0.179190      -1.71931      -6.21634       6.21634       179.665       185.881    
  27  0.251042      -1.38213      -4.99725       4.99725       176.135       181.133    
  28  0.116711      -2.14806      -7.76653       7.76653       177.589       185.356    
  29  0.890376     -0.116112     -0.419814      0.419814       180.706       181.126    
  30  0.880065E-02  -4.73293      -17.1124       17.1124       178.580       195.693    
  31  0.613810     -0.488070      -1.76467       1.76467       180.949       182.713    
  32  0.960436E-01  -2.34295      -8.47119       8.47119       175.715       184.186    
  33  0.768907E-02  -4.86796      -17.6006       17.6006       175.167       192.768    
  34  0.316163      -1.15150      -4.16336       4.16336       178.392       182.555    
  35  0.195769      -1.63082      -5.89639       5.89639       179.763       185.659    
  36  0.813020     -0.207000     -0.748429      0.748429       182.875       183.623    
  37  0.578245     -0.547758      -1.98048       1.98048       183.092       185.072    
  38  0.711511     -0.340365      -1.23062       1.23062       177.988       179.218    
  39  0.565886     -0.569362      -2.05859       2.05859       181.080       183.138    
  40  0.874556     -0.134039     -0.484632      0.484632       173.514       173.999    
  41  0.335685      -1.09158      -3.94673       3.94673       184.313       188.260    
  42  0.861776     -0.148759     -0.537856      0.537856       183.165       183.703    
  43  0.634500     -0.454918      -1.64481       1.64481       181.547       183.192    
  44  0.211879      -1.55174      -5.61048       5.61048       183.837       189.448    
  45  0.789454     -0.236414     -0.854781      0.854781       184.071       184.926    
  46  0.726316E-01  -2.62235      -9.48140       9.48140       184.490       193.971    
  47  0.344022      -1.06705      -3.85803       3.85803       180.389       184.247    
  48  0.367544      -1.00091      -3.61890       3.61890       183.898       187.517    
  49  0.634223     -0.455355      -1.64638       1.64638       187.149       188.796    
  50  0.462643     -0.770799      -2.78691       2.78691       184.706       187.493    
  51  0.904061     -0.100859     -0.364665      0.364665       179.727       180.091    
  52  0.183754      -1.69416      -6.12540       6.12540       185.430       191.555    
  53  0.214369      -1.54005      -5.56823       5.56823       186.821       192.389    
  54  0.515075     -0.663442      -2.39875       2.39875       187.446       189.845    
  55  0.173268      -1.75291      -6.33785       6.33785       186.584       192.922    
  56  0.788225     -0.237971     -0.860410      0.860410       186.665       187.526    
  57  0.657874     -0.418741      -1.51400       1.51400       187.470       188.984    
  58  0.262790      -1.33640      -4.83189       4.83189       186.910       191.742    
  59  0.806843     -0.214626     -0.776002      0.776002       189.670       190.446    
  60  0.121073      -2.11136      -7.63385       7.63385       184.883       192.517    
  61  0.928422     -0.742690E-01 -0.268528      0.268528       192.598       192.867    
  62  0.971911     -0.284914E-01 -0.103014      0.103014       189.919       190.022    
  63  0.167455      -1.78704      -6.46123       6.46123       174.483       180.945    
  64  0.280629E-01  -3.57331      -12.9197       12.9197       192.832       205.752    
  65  0.668523E-01  -2.70527      -9.78119       9.78119       180.221       190.003    
  66  0.714939     -0.335559      -1.21325       1.21325       193.212       194.425    
  67  0.990226     -0.982180E-02 -0.355118E-01  0.355118E-01   192.845       192.881    
  68  0.229020      -1.47395      -5.32921       5.32921       187.646       192.975    
  69  0.130543      -2.03605      -7.36155       7.36155       191.159       198.520    
  70  0.520653     -0.652672      -2.35980       2.35980       192.832       195.192    
  71  0.338340      -1.08370      -3.91825       3.91825       188.964       192.883    
  72  0.518446     -0.656920      -2.37516       2.37516       201.575       203.950    
loop,thermsimp(1:2)       91  0.299993       3.37316    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372        173.56          0.84          1.12         25.04          0.18          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    373        182.58          0.84          1.12         25.03          0.25          0.05         27.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    173.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       91
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       92
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      372     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -4.18896       4.18896       166.873       171.062    
   2  0.484866     -0.723883      -2.61727       2.61727       168.270       170.887    
   3  0.743257     -0.296713      -1.07280       1.07280       172.867       173.940    
   4  0.476659     -0.740953      -2.67899       2.67899       172.968       175.647    
   5  0.895662E-01  -2.41278      -8.72365       8.72365       173.514       182.238    
   6  0.100541      -2.29719      -8.30572       8.30572       172.255       180.561    
   7  0.394309     -0.930621      -3.36476       3.36476       173.455       176.820    
   8  0.856201     -0.155250     -0.561322      0.561322       174.838       175.399    
   9  0.903325     -0.101673     -0.367610      0.367610       171.708       172.076    
  10  0.849389     -0.163238     -0.590203      0.590203       174.487       175.077    
  11  0.245876      -1.40293      -5.07244       5.07244       174.449       179.522    
  12  0.535664     -0.624247      -2.25703       2.25703       174.808       177.065    
  13  0.509317     -0.674685      -2.43939       2.43939       175.132       177.571    
  14  0.103141      -2.27166      -8.21343       8.21343       176.672       184.885    
  15  0.822327     -0.195617     -0.707273      0.707273       177.340       178.047    
  16  0.293454      -1.22603      -4.43285       4.43285       173.636       178.069    
  17  0.610098E-01  -2.79672      -10.1118       10.1118       174.069       184.181    
  18  0.467864E-01  -3.06216      -11.0716       11.0716       177.366       188.437    
  19  0.888641     -0.118062     -0.426865      0.426865       177.988       178.414    
  20  0.371769     -0.989482      -3.57758       3.57758       173.592       177.169    
  21  0.770202     -0.261103     -0.944044      0.944044       179.727       180.671    
  22  0.752967E-01  -2.58632      -9.35111       9.35111       173.391       182.742    
  23  0.787365E-01  -2.54165      -9.18960       9.18960       177.542       186.732    
  24  0.516026     -0.661597      -2.39208       2.39208       174.483       176.875    
  25  0.133613      -2.01281      -7.27753       7.27753       180.706       187.984    
  26  0.705575     -0.348742      -1.26092       1.26092       176.135       177.396    
  27  0.747326     -0.291254      -1.05306       1.05306       175.068       176.121    
  28  0.941066E-01  -2.36333      -8.54486       8.54486       175.329       183.873    
  29  0.243001      -1.41469      -5.11496       5.11496       178.392       183.507    
  30  0.186020      -1.68190      -6.08109       6.08109       180.949       187.030    
  31  0.707073     -0.346621      -1.25325       1.25325       181.080       182.333    
  32  0.820399     -0.197964     -0.715760      0.715760       181.547       182.263    
  33  0.169787E-01  -4.07580      -14.7365       14.7365       182.875       197.611    
  34  0.196118      -1.62904      -5.88996       5.88996       183.165       189.055    
  35  0.910420E-01  -2.39643      -8.66456       8.66456       173.028       181.692    
  36  0.101963      -2.28314      -8.25495       8.25495       175.715       183.970    
  37  0.816143     -0.203166     -0.734567      0.734567       180.389       181.123    
  38  0.921931     -0.812847E-01 -0.293893      0.293893       184.071       184.365    
  39  0.867385     -0.142273     -0.514402      0.514402       183.092       183.606    
  40  0.534867     -0.625737      -2.26242       2.26242       177.589       179.852    
  41  0.354961      -1.03575      -3.74486       3.74486       179.763       183.508    
  42  0.707205     -0.346435      -1.25257       1.25257       179.665       180.918    
  43  0.341296      -1.07501      -3.88680       3.88680       175.800       179.687    
  44  0.615332     -0.485594      -1.75572       1.75572       178.432       180.188    
  45  0.100325      -2.29934      -8.31350       8.31350       184.706       193.019    
  46  0.218012      -1.52321      -5.50731       5.50731       183.898       189.406    
  47  0.346044      -1.06119      -3.83684       3.83684       186.665       190.502    
  48  0.313706      -1.15930      -4.19157       4.19157       184.313       188.505    
  49  0.884226     -0.123043     -0.444875      0.444875       187.149       187.594    
  50  0.562231     -0.575842      -2.08202       2.08202       187.470       189.552    
  51  0.208749      -1.56662      -5.66429       5.66429       183.837       189.502    
  52  0.553752     -0.591038      -2.13696       2.13696       187.446       189.583    
  53  0.389358     -0.943257      -3.41045       3.41045       180.221       183.632    
  54  0.290822      -1.23504      -4.46543       4.46543       189.919       194.385    
  55  0.592574     -0.523280      -1.89197       1.89197       189.670       191.562    
  56  0.816972     -0.202151     -0.730897      0.730897       185.430       186.161    
  57  0.674491     -0.393797      -1.42381       1.42381       186.910       188.334    
  58  0.136892      -1.98856      -7.18986       7.18986       186.821       194.011    
  59  0.783273     -0.244273     -0.883196      0.883196       184.883       185.766    
  60  0.896165     -0.109631     -0.396381      0.396381       175.167       175.563    
  61  0.268163      -1.31616      -4.75872       4.75872       192.598       197.357    
  62  0.773898     -0.256315     -0.926734      0.926734       192.845       193.772    
  63  0.929489     -0.731207E-01 -0.264376      0.264376       188.964       189.229    
  64  0.588680     -0.529872      -1.91581       1.91581       186.584       188.500    
  65  0.234390      -1.45077      -5.24540       5.24540       187.646       192.892    
  66  0.471928     -0.750929      -2.71506       2.71506       184.490       187.205    
  67  0.487657     -0.718143      -2.59652       2.59652       193.212       195.808    
  68  0.669180     -0.401702      -1.45240       1.45240       192.832       194.285    
  69  0.781256     -0.246852     -0.892520      0.892520       178.580       179.473    
  70  0.781840     -0.246106     -0.889821      0.889821       191.159       192.049    
  71  0.688901     -0.372658      -1.34738       1.34738       201.575       202.923    
  72  0.204580      -1.58679      -5.73722       5.73722       173.561       179.298    
loop,thermsimp(1:2)       92   4.18896       2.61727    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374        194.10          0.84          1.11         25.07          0.14          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       92
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       93
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      373     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -18.2512       18.2512       168.270       186.521    
   2  0.977343     -0.229176E-01 -0.828612E-01  0.828612E-01   166.873       166.956    
   3  0.515611     -0.662402      -2.39499       2.39499       171.708       174.103    
   4  0.985018     -0.150949E-01 -0.545774E-01  0.545774E-01   172.867       172.922    
   5  0.909744E-01  -2.39718      -8.66725       8.66725       174.487       183.154    
   6  0.163485      -1.81103      -6.54799       6.54799       174.838       181.386    
   7  0.709610     -0.343039      -1.24029       1.24029       175.167       176.407    
   8  0.639309     -0.447368      -1.61751       1.61751       172.968       174.585    
   9  0.500633     -0.691882      -2.50157       2.50157       175.068       177.570    
  10  0.623218     -0.472859      -1.70967       1.70967       173.455       175.165    
  11  0.974620     -0.257075E-01 -0.929481E-01  0.929481E-01   174.483       174.576    
  12  0.940866     -0.609540E-01 -0.220386      0.220386       174.808       175.028    
  13  0.268848      -1.31361      -4.74949       4.74949       173.592       178.341    
  14  0.131404      -2.02948      -7.33779       7.33779       176.135       183.473    
  15  0.242045      -1.41863      -5.12922       5.12922       175.132       180.261    
  16  0.333489      -1.09815      -3.97046       3.97046       177.340       181.311    
  17  0.540917     -0.614489      -2.22175       2.22175       173.636       175.858    
  18  0.935945     -0.661981E-01 -0.239346      0.239346       177.988       178.227    
  19  0.948265     -0.531218E-01 -0.192067      0.192067       173.561       173.753    
  20  0.306672      -1.18198      -4.27356       4.27356       178.580       182.854    
  21  0.674766E-01  -2.69597      -9.74758       9.74758       174.449       184.197    
  22  0.304885      -1.18782      -4.29470       4.29470       175.800       180.095    
  23  0.987276     -0.128055E-01 -0.462995E-01  0.462995E-01   177.589       177.636    
  24  0.866309     -0.143514     -0.518890      0.518890       178.432       178.951    
  25  0.325072      -1.12371      -4.06288       4.06288       172.255       176.318    
  26  0.882651     -0.124826     -0.451321      0.451321       179.727       180.178    
  27  0.608994E-02  -5.10112      -18.4436       18.4436       179.665       198.109    
  28  0.956776     -0.441859E-01 -0.159759      0.159759       180.389       180.549    
  29  0.680690E-01  -2.68723      -9.71598       9.71598       173.028       182.744    
  30  0.870194     -0.139039     -0.502710      0.502710       173.514       174.017    
  31  0.154954      -1.86463      -6.74175       6.74175       181.547       188.289    
  32  0.533144     -0.628963      -2.27408       2.27408       181.080       183.354    
  33  0.848128     -0.164724     -0.595576      0.595576       173.391       173.987    
  34  0.302343E-01  -3.49878      -12.6502       12.6502       178.392       191.042    
  35  0.670768     -0.399332      -1.44383       1.44383       179.763       181.207    
  36  0.575709     -0.552152      -1.99637       1.99637       183.092       185.088    
  37  0.961243     -0.395278E-01 -0.142917      0.142917       180.221       180.364    
  38  0.174287      -1.74705      -6.31666       6.31666       175.329       181.645    
  39  0.450902     -0.796506      -2.87985       2.87985       175.715       178.595    
  40  0.807155     -0.214240     -0.774607      0.774607       174.069       174.843    
  41  0.245094E-01  -3.70870      -13.4092       13.4092       184.071       197.480    
  42  0.840819     -0.173379     -0.626868      0.626868       176.672       177.299    
  43  0.418157     -0.871899      -3.15244       3.15244       184.883       188.035    
  44  0.795491     -0.228796     -0.827235      0.827235       185.430       186.257    
  45  0.675445E-01  -2.69497      -9.74394       9.74394       177.542       187.286    
  46  0.158617      -1.84126      -6.65729       6.65729       180.949       187.606    
  47  0.538475     -0.619015      -2.23811       2.23811       184.490       186.728    
  48  0.318292      -1.14479      -4.13910       4.13910       187.149       191.288    
  49  0.427160     -0.850596      -3.07542       3.07542       180.706       183.782    
  50  0.485422     -0.722737      -2.61313       2.61313       186.910       189.523    
  51  0.603579     -0.504879      -1.82544       1.82544       177.366       179.191    
  52  0.151674      -1.88602      -6.81912       6.81912       186.584       193.403    
  53  0.216599      -1.52971      -5.53082       5.53082       184.313       189.844    
  54  0.838062     -0.176664     -0.638746      0.638746       183.165       183.804    
  55  0.728698     -0.316496      -1.14432       1.14432       188.964       190.109    
  56  0.866837     -0.142904     -0.516686      0.516686       183.898       184.415    
  57  0.921748     -0.814837E-01 -0.294613      0.294613       183.837       184.132    
  58  0.325236      -1.12320      -4.06106       4.06106       187.470       191.531    
  59  0.316044      -1.15187      -4.16472       4.16472       187.446       191.611    
  60  0.163050      -1.81370      -6.55763       6.55763       186.665       193.223    
  61  0.940520     -0.613225E-01 -0.221718      0.221718       189.670       189.891    
  62  0.439004     -0.823246      -2.97653       2.97653       191.159       194.135    
  63  0.209586      -1.56262      -5.64982       5.64982       187.646       193.296    
  64  0.521405     -0.651229      -2.35459       2.35459       184.706       187.060    
  65  0.397376     -0.922872      -3.33674       3.33674       192.845       196.182    
  66  0.398167     -0.920883      -3.32955       3.32955       186.821       190.150    
  67  0.821539     -0.196576     -0.710741      0.710741       192.832       193.543    
  68  0.652451     -0.427020      -1.54394       1.54394       189.919       191.463    
  69  0.412127     -0.886423      -3.20496       3.20496       193.212       196.417    
  70  0.748303E-02  -4.89512      -17.6988       17.6988       192.598       210.297    
  71  0.287259      -1.24737      -4.51000       4.51000       182.875       187.385    
  72  0.813902     -0.205915     -0.744508      0.744508       194.096       194.841    
loop,thermsimp(1:2)       93   18.2512      0.828612E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375        173.04          0.84          1.11         25.10          0.15          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       93
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       94
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      374     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -3.17389       3.17389       166.873       170.047    
   2  0.262668E-01  -3.63945      -13.1588       13.1588       172.867       186.026    
   3  0.620248     -0.477636      -1.72694       1.72694       173.561       175.288    
   4  0.249183      -1.38957      -5.02413       5.02413       173.391       178.416    
   5  0.999872     -0.128438E-03 -0.464380E-03  0.464380E-03   173.514       173.515    
   6  0.933252     -0.690802E-01 -0.249767      0.249767       171.708       171.958    
   7  0.857047     -0.154263     -0.557754      0.557754       174.483       175.041    
   8  0.365787      -1.00570      -3.63623       3.63623       172.968       176.604    
   9  0.499682     -0.693784      -2.50845       2.50845       174.069       176.577    
  10  0.761560     -0.272387     -0.984843      0.984843       174.808       175.793    
  11  0.793904E-01  -2.53338      -9.15969       9.15969       173.455       182.615    
  12  0.514449     -0.664659      -2.40314       2.40314       173.636       176.040    
  13  0.678176     -0.388349      -1.40412       1.40412       172.255       173.659    
  14  0.257558      -1.35651      -4.90461       4.90461       175.167       180.072    
  15  0.832067E-01  -2.48643      -8.98994       8.98994       176.672       185.662    
  16  0.272851      -1.29883      -4.69606       4.69606       175.068       179.764    
  17  0.255245      -1.36553      -4.93723       4.93723       177.589       182.527    
  18  0.419883     -0.867779      -3.13755       3.13755       177.988       181.125    
  19  0.870346     -0.138865     -0.502080      0.502080       173.592       174.094    
  20  0.814510E-01  -2.50775      -9.06705       9.06705       175.715       184.782    
  21  0.560000     -0.579819      -2.09640       2.09640       178.432       180.528    
  22  0.860285     -0.150492     -0.544119      0.544119       177.366       177.910    
  23  0.538601     -0.618780      -2.23727       2.23727       175.800       178.037    
  24  0.542321     -0.611898      -2.21238       2.21238       179.727       181.939    
  25  0.836575     -0.178440     -0.645167      0.645167       175.132       175.777    
  26  0.705694     -0.348574      -1.26031       1.26031       180.221       181.482    
  27  0.301063      -1.20043      -4.34030       4.34030       180.389       184.729    
  28  0.125899      -2.07227      -7.49252       7.49252       179.763       187.256    
  29  0.476747     -0.740770      -2.67833       2.67833       177.340       180.018    
  30  0.676103     -0.391410      -1.41518       1.41518       174.838       176.253    
  31  0.385349     -0.953606      -3.44786       3.44786       175.329       178.776    
  32  0.141470      -1.95567      -7.07092       7.07092       173.028       180.099    
  33  0.146971      -1.91752      -6.93300       6.93300       178.580       185.513    
  34  0.616396     -0.483866      -1.74947       1.74947       174.487       176.236    
  35  0.962361     -0.383659E-01 -0.138716      0.138716       181.080       181.218    
  36  0.618266     -0.480836      -1.73851       1.73851       176.135       177.874    
  37  0.369072     -0.996763      -3.60390       3.60390       180.706       184.310    
  38  0.312675      -1.16259      -4.20347       4.20347       183.165       187.369    
  39  0.367326      -1.00150      -3.62105       3.62105       183.837       187.458    
  40  0.184422      -1.69053      -6.11229       6.11229       174.449       180.561    
  41  0.113088      -2.17959      -7.88054       7.88054       183.898       191.779    
  42  0.333487      -1.09815      -3.97049       3.97049       183.092       187.062    
  43  0.407562     -0.897562      -3.24523       3.24523       185.430       188.675    
  44  0.443434     -0.813206      -2.94023       2.94023       168.270       171.210    
  45  0.265046      -1.32785      -4.80099       4.80099       184.490       189.291    
  46  0.444603     -0.810573      -2.93071       2.93071       184.706       187.637    
  47  0.689395E-01  -2.67453      -9.67003       9.67003       177.542       187.212    
  48  0.862417     -0.148017     -0.535170      0.535170       182.875       183.410    
  49  0.541063     -0.614219      -2.22077       2.22077       180.949       183.169    
  50  0.885208     -0.121933     -0.440861      0.440861       184.883       185.324    
  51  0.808718     -0.212305     -0.767611      0.767611       181.547       182.314    
  52  0.238877E-01  -3.73439      -13.5021       13.5021       186.910       200.412    
  53  0.428951     -0.846414      -3.06030       3.06030       184.313       187.373    
  54  0.860433     -0.150319     -0.543496      0.543496       189.670       190.213    
  55  0.367713      -1.00045      -3.61724       3.61724       188.964       192.582    
  56  0.782210     -0.245632     -0.888109      0.888109       186.821       187.709    
  57  0.916512E-01  -2.38976      -8.64045       8.64045       178.392       187.032    
  58  0.230050      -1.46946      -5.31299       5.31299       187.149       192.462    
  59  0.715909     -0.334202      -1.20834       1.20834       189.919       191.128    
  60  0.992857E-01  -2.30975      -8.35116       8.35116       187.470       195.821    
  61  0.697124     -0.360791      -1.30448       1.30448       187.446       188.751    
  62  0.232699      -1.45801      -5.27159       5.27159       186.665       191.937    
  63  0.134492      -2.00625      -7.25382       7.25382       187.646       194.900    
  64  0.778931     -0.249833     -0.903297      0.903297       186.584       187.487    
  65  0.248765      -1.39125      -5.03020       5.03020       192.832       197.863    
  66  0.317309      -1.14788      -4.15028       4.15028       191.159       195.309    
  67  0.555562     -0.587775      -2.12516       2.12516       194.096       196.221    
  68  0.924692     -0.782950E-01 -0.283084      0.283084       192.845       193.128    
  69  0.930266     -0.722849E-01 -0.261354      0.261354       193.212       193.473    
  70  0.839348     -0.175130     -0.633200      0.633200       184.071       184.704    
  71  0.555632     -0.587650      -2.12471       2.12471       179.665       181.790    
  72  0.717506     -0.331974      -1.20029       1.20029       173.042       174.242    
loop,thermsimp(1:2)       94   3.17389       13.1588    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    376        182.43          0.84          1.11         25.04          0.18          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    182.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       94
neval is:      375
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       95
neval is:      375


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      375     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -4.43986       4.43986       166.873       171.313    
   2  0.225242      -1.49058      -5.38935       5.38935       168.270       173.659    
   3  0.946430E-01  -2.35764      -8.52431       8.52431       171.708       180.233    
   4  0.371694     -0.989684      -3.57831       3.57831       173.514       177.093    
   5  0.933291     -0.690381E-01 -0.249615      0.249615       172.255       172.504    
   6  0.926571     -0.762651E-01 -0.275745      0.275745       173.592       173.867    
   7  0.138048      -1.98015      -7.15946       7.15946       173.042       180.201    
   8  0.113008E-01  -4.48288      -16.2083       16.2083       174.483       190.692    
   9  0.405736     -0.902053      -3.26147       3.26147       173.561       176.823    
  10  0.390885     -0.939341      -3.39629       3.39629       175.132       178.528    
  11  0.873008     -0.135810     -0.491036      0.491036       174.808       175.299    
  12  0.945037     -0.565316E-01 -0.204396      0.204396       173.636       173.841    
  13  0.642194E-01  -2.74545      -9.92646       9.92646       174.487       184.413    
  14  0.322052E-01  -3.43563      -12.4219       12.4219       174.838       187.260    
  15  0.521559     -0.650933      -2.35352       2.35352       174.069       176.422    
  16  0.271788      -1.30273      -4.71017       4.71017       172.968       177.678    
  17  0.153503      -1.87403      -6.77577       6.77577       176.135       182.911    
  18  0.219303      -1.51730      -5.48596       5.48596       177.366       182.852    
  19  0.476616     -0.741044      -2.67932       2.67932       175.800       178.479    
  20  0.510024     -0.673297      -2.43438       2.43438       173.391       175.826    
  21  0.393388     -0.932959      -3.37321       3.37321       175.329       178.702    
  22  0.947927     -0.534776E-01 -0.193354      0.193354       175.068       175.261    
  23  0.472009     -0.750758      -2.71444       2.71444       177.340       180.055    
  24  0.678717     -0.387551      -1.40123       1.40123       175.167       176.568    
  25  0.617620     -0.481882      -1.74230       1.74230       173.028       174.770    
  26  0.138594E-01  -4.27879      -15.4704       15.4704       178.432       193.902    
  27  0.588445     -0.530273      -1.91726       1.91726       174.449       176.366    
  28  0.950805     -0.504465E-01 -0.182395      0.182395       177.988       178.170    
  29  0.444108     -0.811687      -2.93474       2.93474       181.080       184.014    
  30  0.299195      -1.20666      -4.36281       4.36281       180.221       184.584    
  31  0.808517E-01  -2.51514      -9.09375       9.09375       179.665       188.759    
  32  0.493903     -0.705415      -2.55050       2.55050       179.727       182.277    
  33  0.973584     -0.267710E-01 -0.967933E-01  0.967933E-01   181.547       181.644    
  34  0.219889      -1.51463      -5.47632       5.47632       177.589       183.066    
  35  0.872114     -0.136835     -0.494743      0.494743       173.455       173.950    
  36  0.413991     -0.881912      -3.18865       3.18865       180.949       184.137    
  37  0.155656      -1.86011      -6.72542       6.72542       182.875       189.600    
  38  0.744603     -0.294905      -1.06626       1.06626       180.706       181.773    
  39  0.627736     -0.465635      -1.68355       1.68355       184.071       185.755    
  40  0.137880      -1.98137      -7.16385       7.16385       180.389       187.553    
  41  0.270817      -1.30631      -4.72311       4.72311       175.715       180.438    
  42  0.271872      -1.30243      -4.70906       4.70906       184.883       189.592    
  43  0.988104     -0.119670E-01 -0.432679E-01  0.432679E-01   178.580       178.624    
  44  0.837729E-01  -2.47965      -8.96542       8.96542       176.672       185.637    
  45  0.731806     -0.312240      -1.12894       1.12894       172.867       173.996    
  46  0.520356     -0.653242      -2.36186       2.36186       178.392       180.754    
  47  0.158934      -1.83927      -6.65007       6.65007       183.092       189.742    
  48  0.724534     -0.322226      -1.16504       1.16504       177.542       178.707    
  49  0.895315     -0.110580     -0.399812      0.399812       179.763       180.163    
  50  0.850194     -0.162291     -0.586779      0.586779       183.165       183.752    
  51  0.428755     -0.846869      -3.06194       3.06194       184.313       187.375    
  52  0.523907     -0.646440      -2.33727       2.33727       183.837       186.175    
  53  0.358551      -1.02568      -3.70847       3.70847       186.584       190.292    
  54  0.680509     -0.384914      -1.39170       1.39170       184.706       186.098    
  55  0.607274     -0.498775      -1.80337       1.80337       186.821       188.624    
  56  0.591502     -0.525090      -1.89852       1.89852       185.430       187.328    
  57  0.121812      -2.10527      -7.61184       7.61184       187.446       195.058    
  58  0.812950     -0.207086     -0.748741      0.748741       184.490       185.238    
  59  0.915745     -0.880175E-01 -0.318237      0.318237       189.670       189.988    
  60  0.596748     -0.516260      -1.86659       1.86659       189.919       191.786    
  61  0.229246      -1.47296      -5.32565       5.32565       183.898       189.224    
  62  0.706979     -0.346754      -1.25372       1.25372       186.665       187.919    
  63  0.879114     -0.128841     -0.465837      0.465837       187.149       187.615    
  64  0.529368     -0.636072      -2.29979       2.29979       188.964       191.264    
  65  0.193084      -1.64463      -5.94634       5.94634       192.845       198.792    
  66  0.179439      -1.71792      -6.21132       6.21132       193.212       199.423    
  67  0.945530     -0.560096E-01 -0.202509      0.202509       187.646       187.849    
  68  0.486508     -0.720502      -2.60505       2.60505       191.159       193.764    
  69  0.131906      -2.02566      -7.32400       7.32400       187.470       194.794    
  70  0.203721      -1.59100      -5.75244       5.75244       194.096       199.849    
  71  0.493535     -0.706161      -2.55320       2.55320       192.832       195.386    
  72  0.501297     -0.690556      -2.49678       2.49678       182.432       184.929    
loop,thermsimp(1:2)       95   4.43986       5.38935    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    377        200.37          0.84          1.11         25.07          0.22          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    378        183.75          0.84          1.11         25.14          0.14          0.05         27.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    183.75
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       95
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   6.15670    

hmean,hstd :    179.874       6.15670    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    179.874       6.15670    
h(1),h(best1),h(np1) :    166.873       166.873       183.752    
htherm(1),htherm(best1),htherm(np1) :    171.313       171.313       199.849    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        1
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      377     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -5.90156       5.90156       166.873       172.774    
   2  0.313379      -1.16034      -4.19534       4.19534       172.255       176.450    
   3  0.769177     -0.262434     -0.948858      0.948858       168.270       169.219    
   4  0.884560E-01  -2.42525      -8.76875       8.76875       173.636       182.405    
   5  0.890596     -0.115865     -0.418922      0.418922       173.592       174.011    
   6  0.657268     -0.419664      -1.51734       1.51734       173.455       174.973    
   7  0.960898     -0.398874E-01 -0.144217      0.144217       172.867       173.011    
   8  0.613422E-01  -2.79129      -10.0922       10.0922       173.028       183.120    
   9  0.264483E-01  -3.63256      -13.1339       13.1339       175.068       188.202    
  10  0.304822      -1.18803      -4.29544       4.29544       174.808       179.104    
  11  0.977907     -0.223409E-01 -0.807758E-01  0.807758E-01   173.391       173.472    
  12  0.746737     -0.292042      -1.05591       1.05591       174.449       175.505    
  13  0.450918E-01  -3.09905      -11.2050       11.2050       174.069       185.274    
  14  0.625433     -0.469311      -1.69684       1.69684       175.167       176.864    
  15  0.990029     -0.100208E-01 -0.362311E-01  0.362311E-01   173.561       173.597    
  16  0.985060     -0.150527E-01 -0.544246E-01  0.544246E-01   173.514       173.569    
  17  0.691362     -0.369092      -1.33449       1.33449       172.968       174.302    
  18  0.864323E-02  -4.75098      -17.1777       17.1777       177.988       195.165    
  19  0.908027E-01  -2.39907      -8.67408       8.67408       175.800       184.474    
  20  0.500093     -0.692962      -2.50548       2.50548       175.132       177.637    
  21  0.806913     -0.214539     -0.775689      0.775689       178.580       179.356    
  22  0.317749      -1.14649      -4.14527       4.14527       175.329       179.474    
  23  0.753050     -0.283623      -1.02547       1.02547       177.542       178.567    
  24  0.850048     -0.162463     -0.587401      0.587401       177.340       177.928    
  25  0.346718      -1.05924      -3.82980       3.82980       179.763       183.593    
  26  0.731558     -0.312579      -1.13016       1.13016       173.042       174.172    
  27  0.226645      -1.48437      -5.36690       5.36690       171.708       177.075    
  28  0.887805     -0.119003     -0.430267      0.430267       175.715       176.145    
  29  0.277731      -1.28110      -4.63197       4.63197       178.392       183.024    
  30  0.914814     -0.890349E-01 -0.321915      0.321915       181.547       181.869    
  31  0.298911      -1.20761      -4.36624       4.36624       180.706       185.073    
  32  0.469757     -0.755540      -2.73173       2.73173       179.727       182.459    
  33  0.217087      -1.52746      -5.52269       5.52269       177.366       182.888    
  34  0.143996      -1.93797      -7.00694       7.00694       176.135       183.142    
  35  0.873815     -0.134887     -0.487697      0.487697       177.589       178.077    
  36  0.102289      -2.27995      -8.24340       8.24340       183.165       191.409    
  37  0.583483     -0.538740      -1.94787       1.94787       181.080       183.027    
  38  0.308185      -1.17705      -4.25577       4.25577       180.949       185.204    
  39  0.129509      -2.04400      -7.39031       7.39031       174.487       181.877    
  40  0.858329     -0.152767     -0.552347      0.552347       180.221       180.774    
  41  0.247121      -1.39788      -5.05417       5.05417       182.432       187.486    
  42  0.672462     -0.396810      -1.43471       1.43471       184.490       185.924    
  43  0.978226     -0.220145E-01 -0.795957E-01  0.795957E-01   176.672       176.752    
  44  0.571205     -0.560006      -2.02476       2.02476       184.071       186.096    
  45  0.390724E-01  -3.24234      -11.7230       11.7230       184.706       196.429    
  46  0.773307     -0.257080     -0.929499      0.929499       183.837       184.767    
  47  0.860034     -0.150783     -0.545172      0.545172       174.838       175.383    
  48  0.521048     -0.651913      -2.35706       2.35706       185.430       187.787    
  49  0.577715     -0.548675      -1.98379       1.98379       184.313       186.297    
  50  0.449025     -0.800676      -2.89493       2.89493       180.389       183.284    
  51  0.879701     -0.128173     -0.463424      0.463424       187.149       187.613    
  52  0.553161     -0.592107      -2.14082       2.14082       187.646       189.787    
  53  0.501250E-01  -2.99324      -10.8224       10.8224       186.665       197.488    
  54  0.600542     -0.509923      -1.84368       1.84368       186.821       188.665    
  55  0.268895      -1.31343      -4.74886       4.74886       179.665       184.414    
  56  0.966550     -0.340228E-01 -0.123013      0.123013       183.898       184.021    
  57  0.223816      -1.49693      -5.41231       5.41231       184.883       190.295    
  58  0.422624     -0.861271      -3.11402       3.11402       182.875       185.989    
  59  0.664887     -0.408138      -1.47567       1.47567       183.092       184.568    
  60  0.710934     -0.341176      -1.23356       1.23356       189.670       190.903    
  61  0.476264     -0.741782      -2.68199       2.68199       186.584       189.266    
  62  0.736919     -0.305278      -1.10376       1.10376       174.483       175.587    
  63  0.124855      -2.08060      -7.52264       7.52264       188.964       196.487    
  64  0.440629     -0.819552      -2.96318       2.96318       189.919       192.882    
  65  0.901765E-01  -2.40599      -8.69910       8.69910       191.159       199.858    
  66  0.344754      -1.06492      -3.85034       3.85034       178.432       182.282    
  67  0.618647     -0.480221      -1.73629       1.73629       187.470       189.207    
  68  0.550827     -0.596334      -2.15611       2.15611       187.446       189.602    
  69  0.555162     -0.588495      -2.12777       2.12777       192.832       194.960    
  70  0.295668      -1.21852      -4.40568       4.40568       192.845       197.251    
  71  0.901940     -0.103207     -0.373155      0.373155       193.212       193.585    
  72  0.497126     -0.698911      -2.52699       2.52699       183.752       186.279    
loop,thermsimp(1:2)        1   5.90156       4.19534    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    379        171.82          0.83          1.11         25.08          0.15          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    380        177.86          0.84          1.12         25.11          0.15          0.05         27.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    171.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        1
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        2
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      379     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -5.25848       5.25848       168.270       173.529    
   2  0.293881      -1.22458      -4.42760       4.42760       166.873       171.300    
   3  0.833435     -0.182199     -0.658761      0.658761       172.867       173.526    
   4  0.931284     -0.711905E-01 -0.257397      0.257397       173.391       173.649    
   5  0.965536     -0.350722E-01 -0.126807      0.126807       173.514       173.641    
   6  0.534034     -0.627296      -2.26806       2.26806       173.561       175.829    
   7  0.975689     -0.246118E-01 -0.889864E-01  0.889864E-01   173.592       173.681    
   8  0.958131     -0.427704E-01 -0.154641      0.154641       173.042       173.196    
   9  0.487835     -0.717779      -2.59520       2.59520       172.968       175.563    
  10  0.941751     -0.600144E-01 -0.216988      0.216988       173.455       173.672    
  11  0.764698     -0.268274     -0.969973      0.969973       174.838       175.808    
  12  0.282403      -1.26442      -4.57164       4.57164       174.449       179.021    
  13  0.694349     -0.364781      -1.31890       1.31890       174.483       175.802    
  14  0.257622      -1.35626      -4.90371       4.90371       175.715       180.619    
  15  0.401572     -0.912369      -3.29877       3.29877       172.255       175.554    
  16  0.828654     -0.187952     -0.679561      0.679561       176.672       177.352    
  17  0.113844      -2.17292      -7.85643       7.85643       175.167       183.023    
  18  0.383967     -0.957199      -3.46085       3.46085       171.708       175.169    
  19  0.767294     -0.264886     -0.957722      0.957722       175.132       176.089    
  20  0.230085      -1.46930      -5.31243       5.31243       177.340       182.653    
  21  0.248551      -1.39211      -5.03331       5.03331       177.589       182.623    
  22  0.739043     -0.302399      -1.09335       1.09335       177.542       178.635    
  23  0.427702     -0.849328      -3.07083       3.07083       174.808       177.879    
  24  0.217549      -1.52533      -5.51499       5.51499       178.580       184.095    
  25  0.126759      -2.06546      -7.46790       7.46790       175.329       182.797    
  26  0.278624      -1.27789      -4.62036       4.62036       180.221       184.842    
  27  0.736668     -0.305618      -1.10499       1.10499       181.547       182.652    
  28  0.183809      -1.69386      -6.12432       6.12432       174.487       180.611    
  29  0.915242     -0.885666E-01 -0.320222      0.320222       178.432       178.752    
  30  0.864610     -0.145477     -0.525987      0.525987       173.636       174.162    
  31  0.996457     -0.354911E-02 -0.128322E-01  0.128322E-01   179.727       179.740    
  32  0.937047     -0.650222E-01 -0.235095      0.235095       177.366       177.601    
  33  0.664908     -0.408106      -1.47555       1.47555       178.392       179.867    
  34  0.409422     -0.893009      -3.22877       3.22877       181.080       184.308    
  35  0.293825E-01  -3.52736      -12.7535       12.7535       173.028       185.781    
  36  0.528099     -0.638471      -2.30846       2.30846       176.135       178.444    
  37  0.582244E-01  -2.84345      -10.2808       10.2808       180.389       190.670    
  38  0.394879     -0.929175      -3.35953       3.35953       179.763       183.123    
  39  0.619316     -0.479139      -1.73238       1.73238       183.898       185.631    
  40  0.760056     -0.274363     -0.991989      0.991989       179.665       180.657    
  41  0.322606      -1.13132      -4.09043       4.09043       175.800       179.890    
  42  0.806034     -0.215629     -0.779630      0.779630       183.092       183.872    
  43  0.158197      -1.84391      -6.66686       6.66686       183.837       190.504    
  44  0.964399     -0.362497E-01 -0.131065      0.131065       180.706       180.837    
  45  0.891984     -0.114307     -0.413288      0.413288       180.949       181.362    
  46  0.896576E-01  -2.41176      -8.71996       8.71996       174.069       182.789    
  47  0.976522     -0.237576E-01 -0.858980E-01  0.858980E-01   184.490       184.576    
  48  0.145640      -1.92662      -6.96588       6.96588       182.875       189.840    
  49  0.580689E-01  -2.84612      -10.2905       10.2905       184.071       194.362    
  50  0.154224      -1.86935      -6.75884       6.75884       183.752       190.511    
  51  0.623776     -0.471964      -1.70644       1.70644       184.313       186.020    
  52  0.949887     -0.514119E-01 -0.185885      0.185885       182.432       182.618    
  53  0.681810     -0.383005      -1.38479       1.38479       187.149       188.534    
  54  0.377382     -0.974497      -3.52340       3.52340       185.430       188.953    
  55  0.928894     -0.737604E-01 -0.266689      0.266689       175.068       175.335    
  56  0.484665     -0.724298      -2.61877       2.61877       186.821       189.440    
  57  0.499587     -0.693974      -2.50914       2.50914       187.470       189.979    
  58  0.478934     -0.736193      -2.66178       2.66178       186.584       189.246    
  59  0.520581     -0.652809      -2.36030       2.36030       187.446       189.807    
  60  0.320323E-01  -3.44101      -12.4413       12.4413       187.646       200.088    
  61  0.157322      -1.84946      -6.68693       6.68693       184.883       191.570    
  62  0.590227     -0.527248      -1.90632       1.90632       189.670       191.576    
  63  0.686824     -0.375677      -1.35830       1.35830       183.165       184.524    
  64  0.423825     -0.858435      -3.10376       3.10376       189.919       193.023    
  65  0.503291     -0.686586      -2.48242       2.48242       193.212       195.694    
  66  0.902595E-01  -2.40507      -8.69577       8.69577       192.832       201.528    
  67  0.952906     -0.482388E-01 -0.174413      0.174413       177.988       178.162    
  68  0.798848     -0.224585     -0.812010      0.812010       184.706       185.518    
  69  0.403317     -0.908033      -3.28309       3.28309       188.964       192.247    
  70  0.988352     -0.117167E-01 -0.423629E-01  0.423629E-01   192.845       192.888    
  71  0.360626      -1.01992      -3.68761       3.68761       186.665       190.353    
  72  0.885151     -0.121997     -0.441092      0.441092       171.815       172.256    
loop,thermsimp(1:2)        2   5.25848       4.42760    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381        173.58          0.84          1.12         25.46          0.09          0.05         27.56
Just calling func    0   0         27.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    173.58        1.039     -1.531      1.992     -102.6     0.8447    
                      0.1696      1.794     -99.70      3.484     0.3905    
                       2.241     -1.621      2.072      0.000     -40.00    
                      -1.192      0.000      0.000      0.000     -1.221    

                      -2.500     0.3230E+05 0.3234E+05  0.000      0.000    
                     -0.5672     -5.856     -4.421     -7.826      5.351    
                      -14.82     -3.026      127.3      0.000     -735.9    

                      -8295.      8519.     -4831.     0.1022E+06  2233.    
                       6059.    -0.8424E-03 0.4288E-02  0.000     0.5817E-01
                      0.1287E-01 0.2335E-01 0.3972E-01 0.3120E-01 0.4369E-01

                     -0.1114    -0.9102      0.000    -0.8851E-01 0.3194E-01
                       0.000    -0.5285E-01-0.4783E-01-0.1428E-01-0.7145E-02
                      0.3797E-01 0.2301E-01-0.2241     -1.198      0.000    

                     -0.4354E-01-0.5295    -0.5624    -0.4531    -0.7083E-01
                      0.4164E-01  9.005      8.784     -4693.     -4.000    
                     -0.3218    -0.8368      9.099      8.748     -6008.    

                      -4.000    -0.6752    -0.9111      8.949      8.833    
                      -2853.     -7.000    -0.2323    -0.9003      9.052    
                       8.819     -6041.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        2
neval is:      380
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        3
neval is:      380


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      380     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -3.28637       3.28637       166.873       170.159    
   2  0.995767     -0.424237E-02 -0.153387E-01  0.153387E-01   171.815       171.831    
   3  0.232708      -1.45797      -5.27145       5.27145       173.042       178.313    
   4  0.844104     -0.169480     -0.612773      0.612773       172.867       173.480    
   5  0.835080     -0.180228     -0.651632      0.651632       168.270       168.922    
   6  0.492927     -0.707395      -2.55766       2.55766       173.514       176.072    
   7  0.669838     -0.400719      -1.44884       1.44884       173.391       174.840    
   8  0.161727      -1.82184      -6.58707       6.58707       173.455       180.042    
   9  0.712877     -0.338447      -1.22369       1.22369       173.592       174.815    
  10  0.187101      -1.67610      -6.06013       6.06013       173.636       179.697    
  11  0.152475      -1.88075      -6.80006       6.80006       171.708       178.508    
  12  0.299805      -1.20462      -4.35544       4.35544       175.068       179.423    
  13  0.388928     -0.944360      -3.41443       3.41443       172.255       175.669    
  14  0.396030     -0.926264      -3.34901       3.34901       172.968       176.317    
  15  0.795332     -0.228996     -0.827960      0.827960       174.483       175.311    
  16  0.209301      -1.56398      -5.65474       5.65474       174.838       180.493    
  17  0.292717      -1.22855      -4.44195       4.44195       173.561       178.003    
  18  0.128603E-01  -4.35361      -15.7409       15.7409       175.132       190.873    
  19  0.386579E-01  -3.25301      -11.7616       11.7616       176.672       188.434    
  20  0.284417      -1.25731      -4.54595       4.54595       177.366       181.912    
  21  0.962037     -0.387027E-01 -0.139934      0.139934       174.808       174.948    
  22  0.340824      -1.07639      -3.89180       3.89180       177.988       181.879    
  23  0.463892     -0.768103      -2.77716       2.77716       176.135       178.912    
  24  0.772349     -0.258319     -0.933980      0.933980       177.542       178.476    
  25  0.580884     -0.543204      -1.96401       1.96401       178.432       180.396    
  26  0.519264     -0.655343      -2.36946       2.36946       174.449       176.819    
  27  0.336321      -1.08969      -3.93989       3.93989       179.727       183.667    
  28  0.975360     -0.249491E-01 -0.902060E-01  0.902060E-01   178.392       178.482    
  29  0.768530     -0.263276     -0.951902      0.951902       175.800       176.752    
  30  0.536540     -0.622614      -2.25113       2.25113       174.487       176.738    
  31  0.922732     -0.804161E-01 -0.290753      0.290753       175.715       176.006    
  32  0.603353     -0.505252      -1.82679       1.82679       179.665       181.492    
  33  0.927279E-01  -2.37809      -8.59822       8.59822       180.706       189.305    
  34  0.180890      -1.70987      -6.18220       6.18220       180.949       187.131    
  35  0.933825E-01  -2.37105      -8.57279       8.57279       182.432       191.005    
  36  0.343444      -1.06873      -3.86411       3.86411       177.589       181.453    
  37  0.102193      -2.28089      -8.24680       8.24680       181.547       189.794    
  38  0.397576     -0.922370      -3.33493       3.33493       177.340       180.675    
  39  0.455007     -0.787443      -2.84708       2.84708       174.069       176.916    
  40  0.559910     -0.579979      -2.09698       2.09698       175.329       177.426    
  41  0.901058     -0.104186     -0.376695      0.376695       175.167       175.544    
  42  0.849435     -0.163184     -0.590008      0.590008       179.763       180.353    
  43  0.231812      -1.46183      -5.28539       5.28539       183.092       188.377    
  44  0.119620      -2.12344      -7.67751       7.67751       178.580       186.258    
  45  0.885994     -0.121045     -0.437650      0.437650       181.080       181.517    
  46  0.166933      -1.79016      -6.47253       6.47253       183.165       189.638    
  47  0.284605      -1.25665      -4.54356       4.54356       184.490       189.033    
  48  0.392630     -0.934887      -3.38018       3.38018       180.221       183.602    
  49  0.275341      -1.28974      -4.66320       4.66320       184.706       189.369    
  50  0.808723     -0.212299     -0.767589      0.767589       183.898       184.666    
  51  0.544552     -0.607792      -2.19753       2.19753       173.028       175.225    
  52  0.729547     -0.315331      -1.14011       1.14011       184.313       185.453    
  53  0.986801     -0.132865E-01 -0.480388E-01  0.480388E-01   187.149       187.197    
  54  0.814160     -0.205599     -0.743365      0.743365       185.430       186.173    
  55  0.847794     -0.165117     -0.596999      0.596999       186.584       187.181    
  56  0.248789      -1.39115      -5.02985       5.02985       186.821       191.851    
  57  0.294277      -1.22323      -4.42274       4.42274       187.446       191.869    
  58  0.747234     -0.291377      -1.05350       1.05350       182.875       183.928    
  59  0.517211     -0.659304      -2.38378       2.38378       187.470       189.854    
  60  0.362192      -1.01558      -3.67194       3.67194       186.665       190.337    
  61  0.495572     -0.702043      -2.53831       2.53831       183.837       186.376    
  62  0.742180     -0.298163      -1.07804       1.07804       183.752       184.830    
  63  0.464476     -0.766845      -2.77261       2.77261       180.389       183.162    
  64  0.179754      -1.71616      -6.20497       6.20497       184.883       191.088    
  65  0.696938     -0.361059      -1.30545       1.30545       189.670       190.975    
  66  0.688154E-01  -2.67633      -9.67655       9.67655       188.964       198.641    
  67  0.592601     -0.523233      -1.89181       1.89181       192.845       194.737    
  68  0.399987E-01  -3.21891      -11.6383       11.6383       189.919       201.558    
  69  0.425783     -0.853826      -3.08710       3.08710       184.071       187.158    
  70  0.843399     -0.170315     -0.615794      0.615794       193.212       193.827    
  71  0.114575      -2.16653      -7.83331       7.83331       187.646       195.480    
  72  0.666802     -0.405262      -1.46527       1.46527       173.585       175.050    
loop,thermsimp(1:2)        3   3.28637      0.153387E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    382        174.33          0.84          1.11         25.18          0.23          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        3
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        4
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      381     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -3.85075       3.85075       168.270       172.121    
   2  0.337825      -1.08523      -3.92375       3.92375       166.873       170.796    
   3  0.129257      -2.04595      -7.39736       7.39736       171.815       179.213    
   4  0.218013      -1.52320      -5.50730       5.50730       172.867       178.375    
   5  0.764988     -0.267896     -0.968605      0.968605       173.592       174.560    
   6  0.134235      -2.00816      -7.26072       7.26072       173.391       180.652    
   7  0.921891     -0.813288E-01 -0.294053      0.294053       174.808       175.102    
   8  0.879140E-01  -2.43140      -8.79097       8.79097       173.585       182.376    
   9  0.853506     -0.158403     -0.572721      0.572721       173.028       173.601    
  10  0.781888     -0.246043     -0.889596      0.889596       174.483       175.373    
  11  0.572060     -0.558512      -2.01936       2.01936       175.167       177.186    
  12  0.370929     -0.991745      -3.58576       3.58576       172.255       175.841    
  13  0.659208     -0.416716      -1.50668       1.50668       175.715       177.222    
  14  0.192080      -1.64984      -5.96518       5.96518       173.514       179.480    
  15  0.834249     -0.181224     -0.655234      0.655234       172.968       173.623    
  16  0.275735      -1.28831      -4.65804       4.65804       174.487       179.145    
  17  0.899896     -0.105476     -0.381359      0.381359       175.800       176.181    
  18  0.263842      -1.33241      -4.81745       4.81745       174.449       179.267    
  19  0.542051     -0.612396      -2.21418       2.21418       174.069       176.283    
  20  0.883103     -0.124314     -0.449469      0.449469       175.329       175.778    
  21  0.603547     -0.504931      -1.82563       1.82563       173.561       175.387    
  22  0.461006     -0.774344      -2.79972       2.79972       173.042       175.842    
  23  0.640920     -0.444850      -1.60840       1.60840       177.542       179.150    
  24  0.787319     -0.239122     -0.864571      0.864571       178.392       179.256    
  25  0.258775E-01  -3.65438      -13.2128       13.2128       171.708       184.921    
  26  0.838926     -0.175633     -0.635019      0.635019       176.135       176.770    
  27  0.184807      -1.68845      -6.10476       6.10476       175.068       181.173    
  28  0.642750     -0.441999      -1.59809       1.59809       173.636       175.234    
  29  0.962815     -0.378938E-01 -0.137009      0.137009       173.455       173.592    
  30  0.866393     -0.143417     -0.518538      0.518538       179.763       180.282    
  31  0.652626     -0.426751      -1.54296       1.54296       178.432       179.975    
  32  0.170956      -1.76635      -6.38642       6.38642       174.838       181.224    
  33  0.769008     -0.262654     -0.949653      0.949653       177.340       178.290    
  34  0.156770      -1.85298      -6.69964       6.69964       177.589       184.289    
  35  0.256549E-01  -3.66302      -13.2440       13.2440       179.665       192.909    
  36  0.726661     -0.319295      -1.15444       1.15444       181.080       182.234    
  37  0.556665     -0.585792      -2.11799       2.11799       177.988       180.106    
  38  0.381201     -0.964427      -3.48699       3.48699       177.366       180.853    
  39  0.312648      -1.16268      -4.20378       4.20378       180.389       184.593    
  40  0.523641     -0.646949      -2.33911       2.33911       180.221       182.561    
  41  0.525107     -0.644154      -2.32901       2.32901       179.727       182.056    
  42  0.577096     -0.549746      -1.98767       1.98767       182.875       184.862    
  43  0.218919      -1.51905      -5.49230       5.49230       183.898       189.391    
  44  0.406968     -0.899021      -3.25051       3.25051       183.752       187.003    
  45  0.269244      -1.31214      -4.74417       4.74417       184.313       189.057    
  46  0.150666      -1.89269      -6.84321       6.84321       185.430       192.273    
  47  0.619490     -0.478859      -1.73137       1.73137       178.580       180.312    
  48  0.204317      -1.58808      -5.74189       5.74189       183.837       189.579    
  49  0.924766     -0.782150E-01 -0.282795      0.282795       180.949       181.231    
  50  0.897527E-01  -2.41070      -8.71613       8.71613       184.071       192.787    
  51  0.938635     -0.633286E-01 -0.228971      0.228971       186.584       186.813    
  52  0.265009      -1.32799      -4.80150       4.80150       187.149       191.951    
  53  0.914538     -0.893366E-01 -0.323006      0.323006       183.092       183.415    
  54  0.369988     -0.994284      -3.59494       3.59494       176.672       180.267    
  55  0.670325     -0.399992      -1.44621       1.44621       184.490       185.936    
  56  0.580716     -0.543494      -1.96506       1.96506       180.706       182.671    
  57  0.640472     -0.445550      -1.61093       1.61093       184.706       186.317    
  58  0.711348E-01  -2.64318      -9.55669       9.55669       183.165       192.722    
  59  0.377254E-01  -3.27742      -11.8499       11.8499       181.547       193.397    
  60  0.712296     -0.339261      -1.22664       1.22664       187.470       188.697    
  61  0.628609     -0.464246      -1.67853       1.67853       186.665       188.344    
  62  0.729486     -0.315415      -1.14042       1.14042       175.132       176.272    
  63  0.851489     -0.160769     -0.581277      0.581277       189.670       190.251    
  64  0.728439     -0.316851      -1.14561       1.14561       182.432       183.578    
  65  0.813668     -0.206203     -0.745550      0.745550       184.883       185.628    
  66  0.176154      -1.73639      -6.27812       6.27812       186.821       193.099    
  67  0.803356     -0.218957     -0.791663      0.791663       187.446       188.238    
  68  0.842930     -0.170871     -0.617802      0.617802       193.212       193.829    
  69  0.585957     -0.534508      -1.93257       1.93257       192.845       194.778    
  70  0.108696      -2.21920      -8.02375       8.02375       187.646       195.670    
  71  0.440194     -0.820540      -2.96675       2.96675       188.964       191.931    
  72  0.425757     -0.853886      -3.08732       3.08732       174.331       177.418    
loop,thermsimp(1:2)        4   3.85075       3.92375    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383        175.48          0.84          1.11         25.04          0.19          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        4
neval is:      382
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        5
neval is:      382


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      382     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.221944E-01  0.221944E-01   166.873       166.895    
   2  0.544036     -0.608740      -2.20097       2.20097       168.270       170.471    
   3  0.752151     -0.284818      -1.02979       1.02979       173.455       174.485    
   4  0.128894      -2.04876      -7.40752       7.40752       173.028       180.435    
   5  0.954586     -0.464781E-01 -0.168046      0.168046       172.968       173.136    
   6  0.699109     -0.357949      -1.29420       1.29420       173.592       174.886    
   7  0.158831      -1.83992      -6.65241       6.65241       174.808       181.461    
   8  0.317803      -1.14632      -4.14465       4.14465       173.636       177.781    
   9  0.533633     -0.628047      -2.27077       2.27077       174.483       176.754    
  10  0.232061      -1.46076      -5.28152       5.28152       173.561       178.843    
  11  0.798671     -0.224806     -0.812809      0.812809       175.329       176.141    
  12  0.629719     -0.462482      -1.67215       1.67215       172.255       173.927    
  13  0.285415      -1.25381      -4.53328       4.53328       173.042       177.575    
  14  0.101345      -2.28923      -8.27694       8.27694       175.800       184.077    
  15  0.523846     -0.646557      -2.33770       2.33770       175.132       177.469    
  16  0.570798     -0.560721      -2.02735       2.02735       174.069       176.096    
  17  0.471006     -0.752884      -2.72213       2.72213       176.135       178.857    
  18  0.439034     -0.823179      -2.97629       2.97629       175.167       178.143    
  19  0.755118     -0.280881      -1.01556       1.01556       175.715       176.731    
  20  0.987033     -0.130515E-01 -0.471890E-01  0.471890E-01   174.331       174.378    
  21  0.800390E-01  -2.52524      -9.13028       9.13028       177.340       186.470    
  22  0.739282     -0.302075      -1.09219       1.09219       172.867       173.959    
  23  0.367536      -1.00093      -3.61898       3.61898       174.487       178.106    
  24  0.397431     -0.922735      -3.33625       3.33625       177.542       180.878    
  25  0.338773      -1.08242      -3.91362       3.91362       171.815       175.729    
  26  0.388721     -0.944893      -3.41636       3.41636       178.392       181.808    
  27  0.298998      -1.20732      -4.36518       4.36518       174.449       178.814    
  28  0.668470     -0.402763      -1.45623       1.45623       173.514       174.971    
  29  0.604587     -0.503210      -1.81941       1.81941       178.432       180.251    
  30  0.455577     -0.786190      -2.84255       2.84255       177.988       180.830    
  31  0.842360     -0.171548     -0.620251      0.620251       176.672       177.292    
  32  0.452047     -0.793969      -2.87068       2.87068       179.763       182.634    
  33  0.994488     -0.552709E-02 -0.199838E-01  0.199838E-01   178.580       178.600    
  34  0.309000E-02  -5.77958      -20.8967       20.8967       173.391       194.288    
  35  0.171789      -1.76149      -6.36884       6.36884       177.366       183.734    
  36  0.567417     -0.566661      -2.04882       2.04882       175.068       177.117    
  37  0.885121     -0.122031     -0.441216      0.441216       174.838       175.279    
  38  0.342608      -1.07117      -3.87292       3.87292       180.949       184.822    
  39  0.954017     -0.470733E-01 -0.170199      0.170199       179.727       179.897    
  40  0.439346     -0.822467      -2.97372       2.97372       181.080       184.053    
  41  0.237365E-01  -3.74074      -13.5251       13.5251       173.585       187.110    
  42  0.100236      -2.30023      -8.31672       8.31672       180.221       188.538    
  43  0.539338     -0.617412      -2.23232       2.23232       180.706       182.939    
  44  0.825393     -0.191896     -0.693821      0.693821       183.092       183.786    
  45  0.252744      -1.37538      -4.97282       4.97282       182.432       187.405    
  46  0.676050     -0.391488      -1.41547       1.41547       177.589       179.005    
  47  0.621378     -0.475815      -1.72036       1.72036       180.389       182.109    
  48  0.375614     -0.979194      -3.54038       3.54038       182.875       186.415    
  49  0.638637     -0.448418      -1.62130       1.62130       171.708       173.330    
  50  0.540154     -0.615902      -2.22686       2.22686       184.883       187.110    
  51  0.295099      -1.22045      -4.41265       4.41265       184.490       188.902    
  52  0.195781      -1.63076      -5.89618       5.89618       184.706       190.602    
  53  0.430058     -0.843836      -3.05098       3.05098       186.584       189.635    
  54  0.686512E-01  -2.67872      -9.68519       9.68519       183.752       193.438    
  55  0.689090     -0.372384      -1.34639       1.34639       187.446       188.793    
  56  0.737045     -0.305106      -1.10314       1.10314       186.665       187.768    
  57  0.303800      -1.19139      -4.30758       4.30758       187.470       191.778    
  58  0.709025     -0.343864      -1.24328       1.24328       184.313       185.556    
  59  0.754321     -0.281937      -1.01937       1.01937       183.898       184.918    
  60  0.917745E-01  -2.38842      -8.63559       8.63559       183.837       192.473    
  61  0.600903     -0.509321      -1.84151       1.84151       189.670       191.511    
  62  0.880182     -0.127627     -0.461447      0.461447       188.964       189.426    
  63  0.318171      -1.14517      -4.14048       4.14048       187.149       191.290    
  64  0.625153     -0.469759      -1.69846       1.69846       185.430       187.128    
  65  0.956330     -0.446527E-01 -0.161447      0.161447       183.165       183.327    
  66  0.152880      -1.87810      -6.79048       6.79048       184.071       190.862    
  67  0.933903     -0.683823E-01 -0.247243      0.247243       179.665       179.912    
  68  0.875511     -0.132948     -0.480686      0.480686       186.821       187.302    
  69  0.929728E-02  -4.67803      -16.9139       16.9139       181.547       198.461    
  70  0.554939     -0.588896      -2.12922       2.12922       193.212       195.341    
  71  0.630856     -0.460677      -1.66563       1.66563       192.845       194.511    
  72  0.152909      -1.87791      -6.78980       6.78980       175.475       182.265    
loop,thermsimp(1:2)        5  0.221944E-01   2.20097    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    384        176.04          0.84          1.11         25.13          0.18          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        5
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        6
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      383     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -3.87433       3.87433       166.873       170.747    
   2  0.738210     -0.303527      -1.09744       1.09744       168.270       169.368    
   3  0.254388      -1.36889      -4.94938       4.94938       172.968       177.917    
   4  0.184184      -1.69182      -6.11695       6.11695       171.708       177.825    
   5  0.467311     -0.760760      -2.75061       2.75061       172.255       175.005    
   6  0.718957     -0.329953      -1.19298       1.19298       172.867       174.060    
   7  0.233172      -1.45598      -5.26424       5.26424       174.331       179.595    
   8  0.855319     -0.156281     -0.565049      0.565049       173.455       174.020    
   9  0.331323      -1.10466      -3.99402       3.99402       173.592       177.586    
  10  0.737635E-01  -2.60689      -9.42549       9.42549       173.514       182.940    
  11  0.960656     -0.401393E-01 -0.145128      0.145128       174.838       174.983    
  12  0.312287      -1.16383      -4.20796       4.20796       171.815       176.023    
  13  0.252190      -1.37757      -4.98075       4.98075       174.069       179.050    
  14  0.775876     -0.253763     -0.917506      0.917506       175.329       176.246    
  15  0.397248     -0.923194      -3.33791       3.33791       175.715       179.053    
  16  0.587084E-01  -2.83517      -10.2509       10.2509       174.483       184.734    
  17  0.923214     -0.798941E-01 -0.288865      0.288865       175.068       175.357    
  18  0.147001      -1.91731      -6.93225       6.93225       176.672       183.604    
  19  0.275551      -1.28898      -4.66046       4.66046       175.132       179.792    
  20  0.157032      -1.85131      -6.69360       6.69360       173.042       179.735    
  21  0.468534     -0.758146      -2.74116       2.74116       173.636       176.378    
  22  0.101055      -2.29209      -8.28729       8.28729       174.487       182.774    
  23  0.891765     -0.114553     -0.414177      0.414177       175.167       175.581    
  24  0.756241     -0.279395      -1.01018       1.01018       178.580       179.590    
  25  0.212181E-01  -3.85290      -13.9306       13.9306       174.449       188.380    
  26  0.807607     -0.213679     -0.772581      0.772581       173.561       174.334    
  27  0.233854      -1.45306      -5.25369       5.25369       176.135       181.389    
  28  0.622600     -0.473852      -1.71326       1.71326       177.589       179.303    
  29  0.188561      -1.66833      -6.03203       6.03203       179.727       185.759    
  30  0.938432E-01  -2.36613      -8.55499       8.55499       179.665       188.220    
  31  0.846333     -0.166843     -0.603237      0.603237       178.432       179.035    
  32  0.258796      -1.35172      -4.88727       4.88727       173.028       177.915    
  33  0.503854     -0.685469      -2.47838       2.47838       177.988       180.466    
  34  0.577410     -0.549202      -1.98570       1.98570       177.542       179.528    
  35  0.282259E-01  -3.56751      -12.8987       12.8987       174.808       187.707    
  36  0.618901     -0.479811      -1.73481       1.73481       178.392       180.127    
  37  0.563982     -0.572733      -2.07078       2.07078       180.389       182.460    
  38  0.290650      -1.23563      -4.46757       4.46757       175.475       179.943    
  39  0.165662      -1.79781      -6.50016       6.50016       179.763       186.263    
  40  0.871949E-01  -2.43961      -8.82067       8.82067       180.706       189.527    
  41  0.494744     -0.703714      -2.54435       2.54435       183.165       185.710    
  42  0.156326      -1.85581      -6.70988       6.70988       177.366       184.075    
  43  0.558357     -0.582757      -2.10702       2.10702       183.092       185.199    
  44  0.974745     -0.255792E-01 -0.924842E-01  0.924842E-01   181.080       181.172    
  45  0.399321     -0.917991      -3.31909       3.31909       175.800       179.119    
  46  0.649792     -0.431103      -1.55870       1.55870       180.949       182.507    
  47  0.210634      -1.55763      -5.63178       5.63178       183.898       189.530    
  48  0.939937     -0.619427E-01 -0.223960      0.223960       184.313       184.537    
  49  0.617394     -0.482248      -1.74362       1.74362       182.875       184.618    
  50  0.435355     -0.831593      -3.00671       3.00671       177.340       180.347    
  51  0.423449     -0.859323      -3.10697       3.10697       184.883       187.990    
  52  0.922974     -0.801543E-01 -0.289806      0.289806       173.585       173.874    
  53  0.877321     -0.130883     -0.473220      0.473220       185.430       185.903    
  54  0.757805     -0.277329      -1.00271       1.00271       186.821       187.824    
  55  0.972356     -0.280336E-01 -0.101358      0.101358       182.432       182.533    
  56  0.535145     -0.625217      -2.26054       2.26054       186.665       188.926    
  57  0.654598     -0.423734      -1.53205       1.53205       180.221       181.754    
  58  0.131676E-01  -4.32999      -15.6556       15.6556       187.446       203.102    
  59  0.835144     -0.180151     -0.651354      0.651354       184.490       185.141    
  60  0.965311E-01  -2.33789      -8.45289       8.45289       188.964       197.417    
  61  0.955098     -0.459413E-01 -0.166106      0.166106       186.584       186.750    
  62  0.807730     -0.213527     -0.772030      0.772030       184.706       185.478    
  63  0.312538      -1.16303      -4.20506       4.20506       184.071       188.276    
  64  0.757580     -0.277626      -1.00379       1.00379       187.149       188.153    
  65  0.852108     -0.160043     -0.578651      0.578651       189.670       190.248    
  66  0.893102E-01  -2.41564      -8.73400       8.73400       187.470       196.204    
  67  0.973210     -0.271549E-01 -0.981814E-01  0.981814E-01   183.837       183.935    
  68  0.126785      -2.06527      -7.46719       7.46719       183.752       191.220    
  69  0.765960     -0.266625     -0.964013      0.964013       173.391       174.355    
  70  0.768352     -0.263507     -0.952739      0.952739       192.845       193.798    
  71  0.771160     -0.259860     -0.939551      0.939551       193.212       194.151    
  72  0.771741     -0.259106     -0.936825      0.936825       176.040       176.977    
loop,thermsimp(1:2)        6   3.87433       1.09744    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    385        179.16          0.84          1.11         25.06          0.16          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    179.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        6
neval is:      384
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        7
neval is:      384


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      384     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -1.46194       1.46194       168.270       169.732    
   2  0.361364E-01  -3.32046      -12.0055       12.0055       166.873       178.878    
   3  0.167171      -1.78874      -6.46736       6.46736       173.585       180.052    
   4  0.268590E-01  -3.61716      -13.0782       13.0782       173.455       186.534    
   5  0.979339     -0.208774E-01 -0.754845E-01  0.754845E-01   172.867       172.943    
   6  0.285956E-01  -3.55450      -12.8517       12.8517       173.561       186.413    
   7  0.614036     -0.487701      -1.76334       1.76334       173.391       175.155    
   8  0.291622      -1.23230      -4.45549       4.45549       174.838       179.293    
   9  0.495778     -0.701626      -2.53680       2.53680       172.255       174.792    
  10  0.289385      -1.24000      -4.48334       4.48334       175.068       179.551    
  11  0.601390     -0.508511      -1.83858       1.83858       175.167       177.006    
  12  0.868837     -0.140599     -0.508351      0.508351       171.815       172.324    
  13  0.289097E-01  -3.54358      -12.8122       12.8122       175.329       188.141    
  14  0.999895     -0.104574E-03 -0.378100E-03  0.378100E-03   173.636       173.637    
  15  0.547924     -0.601620      -2.17522       2.17522       176.040       178.215    
  16  0.562607     -0.575175      -2.07961       2.07961       173.592       175.671    
  17  0.422387     -0.861832      -3.11605       3.11605       171.708       174.824    
  18  0.934703     -0.675264E-01 -0.244149      0.244149       173.028       173.272    
  19  0.484044     -0.725579      -2.62341       2.62341       172.968       175.591    
  20  0.362136      -1.01574      -3.67250       3.67250       178.432       182.104    
  21  0.826677     -0.190341     -0.688197      0.688197       174.069       174.757    
  22  0.383965     -0.957204      -3.46087       3.46087       175.715       179.176    
  23  0.403854     -0.906702      -3.27828       3.27828       175.800       179.078    
  24  0.375365     -0.979857      -3.54278       3.54278       177.589       181.132    
  25  0.335540      -1.09201      -3.94829       3.94829       177.542       181.490    
  26  0.744256     -0.295370      -1.06794       1.06794       178.580       179.648    
  27  0.611040     -0.492593      -1.78102       1.78102       174.331       176.112    
  28  0.361728      -1.01686      -3.67657       3.67657       173.042       176.718    
  29  0.381582     -0.963430      -3.48338       3.48338       175.132       178.615    
  30  0.738884E-01  -2.60520      -9.41937       9.41937       175.475       184.895    
  31  0.185722E-01  -3.98609      -14.4121       14.4121       178.392       192.804    
  32  0.470279     -0.754429      -2.72772       2.72772       177.340       180.068    
  33  0.499505     -0.694139      -2.50973       2.50973       177.988       180.497    
  34  0.641578     -0.443824      -1.60469       1.60469       181.080       182.684    
  35  0.462400     -0.771325      -2.78881       2.78881       176.135       178.924    
  36  0.953656     -0.474527E-01 -0.171570      0.171570       180.221       180.393    
  37  0.305321E-01  -3.48898      -12.6148       12.6148       180.389       193.004    
  38  0.281396      -1.26799      -4.58456       4.58456       180.949       185.533    
  39  0.642231     -0.442807      -1.60102       1.60102       182.432       184.033    
  40  0.506226     -0.680772      -2.46140       2.46140       174.487       176.948    
  41  0.152451      -1.88091      -6.80065       6.80065       173.514       180.315    
  42  0.825356     -0.191941     -0.693981      0.693981       176.672       177.366    
  43  0.895901     -0.109926     -0.397448      0.397448       183.837       184.235    
  44  0.706880     -0.346894      -1.25423       1.25423       177.366       178.620    
  45  0.810453     -0.210162     -0.759864      0.759864       184.313       185.073    
  46  0.463153     -0.769698      -2.78293       2.78293       182.875       185.657    
  47  0.333587      -1.09785      -3.96939       3.96939       174.483       178.453    
  48  0.588678     -0.529875      -1.91582       1.91582       184.490       186.406    
  49  0.724542E-01  -2.62480      -9.49025       9.49025       183.092       192.582    
  50  0.550549     -0.596839      -2.15794       2.15794       184.706       186.864    
  51  0.945764     -0.557622E-01 -0.201614      0.201614       183.165       183.367    
  52  0.903703E-01  -2.40384      -8.69134       8.69134       179.727       188.418    
  53  0.435583     -0.831070      -3.00482       3.00482       185.430       188.435    
  54  0.364079E-01  -3.31297      -11.9784       11.9784       179.763       191.741    
  55  0.801026     -0.221862     -0.802167      0.802167       186.584       187.386    
  56  0.440703     -0.819384      -2.96257       2.96257       174.808       177.771    
  57  0.585820     -0.534743      -1.93342       1.93342       186.821       188.754    
  58  0.874676     -0.133902     -0.484137      0.484137       184.883       185.367    
  59  0.709061     -0.343814      -1.24310       1.24310       187.149       188.392    
  60  0.937361     -0.646865E-01 -0.233881      0.233881       179.665       179.899    
  61  0.775497     -0.254252     -0.919274      0.919274       184.071       184.990    
  62  0.966192     -0.343929E-01 -0.124351      0.124351       174.449       174.574    
  63  0.521378     -0.651281      -2.35477       2.35477       186.665       189.020    
  64  0.162994      -1.81404      -6.55886       6.55886       180.706       187.265    
  65  0.732373     -0.311466      -1.12614       1.12614       183.898       185.025    
  66  0.845693     -0.167599     -0.605971      0.605971       189.670       190.276    
  67  0.227566      -1.48031      -5.35223       5.35223       183.752       189.105    
  68  0.985726     -0.143764E-01 -0.519795E-01  0.519795E-01   192.845       192.897    
  69  0.841574     -0.172481     -0.623623      0.623623       193.212       193.835    
  70  0.408663     -0.894863      -3.23547       3.23547       187.470       190.706    
  71  0.740436     -0.300516      -1.08655       1.08655       188.964       190.051    
  72  0.969580     -0.308926E-01 -0.111695      0.111695       179.165       179.277    
loop,thermsimp(1:2)        7   1.46194       12.0055    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    386        171.27          0.84          1.11         25.28          0.09          0.05         27.37
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    387        188.69          0.84          1.11         25.37          0.12          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    171.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        7
neval is:      386
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        8
neval is:      386


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      386     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891     -0.661264      0.661264       168.270       168.931    
   2  0.610299     -0.493806      -1.78541       1.78541       171.815       173.601    
   3  0.652915     -0.426308      -1.54136       1.54136       172.867       174.409    
   4  0.273016      -1.29823      -4.69387       4.69387       173.028       177.722    
   5  0.570853     -0.560623      -2.02699       2.02699       173.636       175.663    
   6  0.107477E-01  -4.53306      -16.3898       16.3898       174.449       190.839    
   7  0.651717     -0.428145      -1.54800       1.54800       174.069       175.617    
   8  0.214404      -1.53989      -5.56765       5.56765       172.255       177.823    
   9  0.132680      -2.01982      -7.30286       7.30286       171.708       179.011    
  10  0.370727     -0.992290      -3.58773       3.58773       173.391       176.979    
  11  0.330444      -1.10732      -4.00362       4.00362       172.968       176.971    
  12  0.462713     -0.770647      -2.78636       2.78636       173.592       176.378    
  13  0.514022     -0.665489      -2.40615       2.40615       174.331       176.737    
  14  0.644984     -0.438530      -1.58555       1.58555       173.042       174.627    
  15  0.813975     -0.205826     -0.744186      0.744186       174.487       175.231    
  16  0.434803     -0.832863      -3.01131       3.01131       175.167       178.178    
  17  0.212985      -1.54653      -5.59165       5.59165       176.672       182.264    
  18  0.796179     -0.227931     -0.824108      0.824108       174.808       175.632    
  19  0.259948      -1.34727      -4.87121       4.87121       176.040       180.911    
  20  0.526723     -0.641081      -2.31790       2.31790       174.483       176.801    
  21  0.392691     -0.934731      -3.37962       3.37962       175.132       178.511    
  22  0.949472     -0.518494E-01 -0.187467      0.187467       177.366       177.553    
  23  0.665479E-01  -2.70983      -9.79769       9.79769       166.873       176.670    
  24  0.927466E-01  -2.37788      -8.59749       8.59749       176.135       184.733    
  25  0.630503     -0.461237      -1.66765       1.66765       175.800       177.468    
  26  0.714749     -0.335823      -1.21421       1.21421       175.715       176.929    
  27  0.450999     -0.796290      -2.87907       2.87907       179.165       182.044    
  28  0.184997      -1.68742      -6.10104       6.10104       174.838       180.939    
  29  0.989607     -0.104473E-01 -0.377734E-01  0.377734E-01   175.068       175.106    
  30  0.530766     -0.633434      -2.29025       2.29025       178.580       180.871    
  31  0.495227     -0.702738      -2.54082       2.54082       179.665       182.206    
  32  0.787696     -0.238642     -0.862837      0.862837       173.585       174.447    
  33  0.168123      -1.78306      -6.44685       6.44685       177.340       183.787    
  34  0.205580      -1.58192      -5.71960       5.71960       173.514       179.234    
  35  0.182087      -1.70327      -6.15837       6.15837       180.221       186.380    
  36  0.320489      -1.13791      -4.11423       4.11423       177.988       182.102    
  37  0.591526     -0.525050      -1.89837       1.89837       177.589       179.488    
  38  0.374258     -0.982811      -3.55346       3.55346       177.542       181.095    
  39  0.578871     -0.546675      -1.97656       1.97656       178.432       180.408    
  40  0.542113     -0.612280      -2.21376       2.21376       181.080       183.293    
  41  0.123399      -2.09233      -7.56506       7.56506       183.165       190.730    
  42  0.874747     -0.133820     -0.483842      0.483842       182.432       182.916    
  43  0.521146     -0.651725      -2.35638       2.35638       183.837       186.194    
  44  0.160493      -1.82950      -6.61476       6.61476       175.475       182.090    
  45  0.606451     -0.500131      -1.80828       1.80828       184.071       185.879    
  46  0.947463     -0.539676E-01 -0.195126      0.195126       183.898       184.094    
  47  0.187698      -1.67292      -6.04862       6.04862       184.313       190.362    
  48  0.157453      -1.84863      -6.68392       6.68392       184.883       191.567    
  49  0.411413     -0.888157      -3.21123       3.21123       180.949       184.160    
  50  0.399256     -0.918152      -3.31968       3.31968       182.875       186.194    
  51  0.629238     -0.463246      -1.67492       1.67492       184.490       186.165    
  52  0.831952     -0.183980     -0.665200      0.665200       173.561       174.226    
  53  0.677270     -0.389686      -1.40895       1.40895       173.455       174.864    
  54  0.937557     -0.644782E-01 -0.233128      0.233128       184.706       184.939    
  55  0.410617     -0.890095      -3.21823       3.21823       180.706       183.925    
  56  0.896761E-01  -2.41155      -8.71922       8.71922       186.584       195.303    
  57  0.757537     -0.277683      -1.00399       1.00399       175.329       176.333    
  58  0.893032     -0.113133     -0.409043      0.409043       187.149       187.558    
  59  0.689367E-02  -4.97715      -17.9954       17.9954       179.727       197.722    
  60  0.315133      -1.15476      -4.17516       4.17516       185.430       189.605    
  61  0.206555      -1.57719      -5.70249       5.70249       186.821       192.523    
  62  0.577131     -0.549685      -1.98745       1.98745       186.665       188.653    
  63  0.796209     -0.227894     -0.823975      0.823975       183.752       184.576    
  64  0.519424     -0.655035      -2.36835       2.36835       188.964       191.333    
  65  0.906043     -0.986690E-01 -0.356748      0.356748       189.670       190.026    
  66  0.112560      -2.18427      -7.89747       7.89747       187.470       195.368    
  67  0.104180      -2.26164      -8.17719       8.17719       179.763       187.940    
  68  0.972264     -0.281281E-01 -0.101700      0.101700       183.092       183.194    
  69  0.824404     -0.193095     -0.698156      0.698156       178.392       179.090    
  70  0.337178      -1.08714      -3.93068       3.93068       192.845       196.776    
  71  0.283334      -1.26113      -4.55975       4.55975       180.389       184.949    
  72  0.837969     -0.176774     -0.639144      0.639144       171.272       171.912    
loop,thermsimp(1:2)        8  0.661264       1.78541    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    388        177.00          0.84          1.11         24.98          0.21          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        8
neval is:      387
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:        9
neval is:      387


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      387     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -5.94644       5.94644       168.270       174.217    
   2  0.822950     -0.194860     -0.704537      0.704537       171.272       171.977    
   3  0.396787     -0.924357      -3.34211       3.34211       171.815       175.157    
   4  0.141060      -1.95857      -7.08141       7.08141       173.561       180.643    
   5  0.673747     -0.394901      -1.42781       1.42781       172.867       174.295    
   6  0.142835      -1.94606      -7.03619       7.03619       173.585       180.621    
   7  0.707555     -0.345940      -1.25078       1.25078       173.042       174.293    
   8  0.957483     -0.434474E-01 -0.157089      0.157089       173.455       173.612    
   9  0.524586     -0.645145      -2.33259       2.33259       175.068       177.401    
  10  0.692024     -0.368135      -1.33103       1.33103       174.487       175.818    
  11  0.936675E-01  -2.36800      -8.56177       8.56177       174.069       182.631    
  12  0.216270      -1.53123      -5.53632       5.53632       174.808       180.344    
  13  0.329369      -1.11058      -4.01541       4.01541       173.636       177.652    
  14  0.670774     -0.399323      -1.44379       1.44379       175.329       176.772    
  15  0.263445      -1.33391      -4.82289       4.82289       173.592       178.414    
  16  0.150248      -1.89547      -6.85327       6.85327       166.873       173.726    
  17  0.357034      -1.02992      -3.72380       3.72380       174.331       178.054    
  18  0.833286E-01  -2.48496      -8.98465       8.98465       174.483       183.468    
  19  0.431395     -0.840731      -3.03975       3.03975       175.715       178.755    
  20  0.304550      -1.18892      -4.29867       4.29867       172.968       177.266    
  21  0.930203     -0.723520E-01 -0.261596      0.261596       173.391       173.653    
  22  0.443091     -0.813979      -2.94303       2.94303       175.800       178.743    
  23  0.361548      -1.01736      -3.67837       3.67837       177.366       181.044    
  24  0.603851     -0.504427      -1.82381       1.82381       173.028       174.852    
  25  0.825014     -0.192355     -0.695479      0.695479       172.255       172.950    
  26  0.658742     -0.417424      -1.50924       1.50924       175.167       176.676    
  27  0.938632     -0.633319E-01 -0.228983      0.228983       175.132       175.361    
  28  0.264383E-01  -3.63294      -13.1353       13.1353       171.708       184.844    
  29  0.770543     -0.260660     -0.942444      0.942444       178.392       179.334    
  30  0.536385     -0.622903      -2.25217       2.25217       173.514       175.767    
  31  0.173997      -1.74872      -6.32268       6.32268       177.589       183.912    
  32  0.876286     -0.132063     -0.477487      0.477487       178.432       178.909    
  33  0.447573     -0.803915      -2.90664       2.90664       178.580       181.487    
  34  0.521740E-01  -2.95317      -10.6775       10.6775       176.040       186.717    
  35  0.509285     -0.674747      -2.43962       2.43962       174.838       177.277    
  36  0.135259      -2.00056      -7.23324       7.23324       177.542       184.775    
  37  0.238321      -1.43414      -5.18527       5.18527       179.165       184.350    
  38  0.146995      -1.91735      -6.93240       6.93240       175.475       182.408    
  39  0.166047      -1.79549      -6.49177       6.49177       177.988       184.479    
  40  0.830113     -0.186194     -0.673203      0.673203       179.665       180.338    
  41  0.638960     -0.447914      -1.61948       1.61948       176.672       178.292    
  42  0.156696      -1.85345      -6.70135       6.70135       182.432       189.133    
  43  0.956507     -0.444668E-01 -0.160775      0.160775       183.092       183.253    
  44  0.313979      -1.15843      -4.18843       4.18843       181.080       185.268    
  45  0.185265      -1.68597      -6.09579       6.09579       177.340       183.436    
  46  0.952300     -0.488757E-01 -0.176715      0.176715       180.706       180.883    
  47  0.181060      -1.70892      -6.17880       6.17880       183.898       190.077    
  48  0.969330     -0.311499E-01 -0.112626      0.112626       180.949       181.061    
  49  0.832772     -0.182996     -0.661641      0.661641       183.752       184.414    
  50  0.733500     -0.309927      -1.12058       1.12058       176.135       177.256    
  51  0.901211     -0.104016     -0.376080      0.376080       184.706       185.082    
  52  0.598700     -0.512995      -1.85479       1.85479       180.389       182.244    
  53  0.982368     -0.177897E-01 -0.643207E-01  0.643207E-01   184.071       184.136    
  54  0.244719      -1.40764      -5.08948       5.08948       184.490       189.579    
  55  0.824383     -0.193120     -0.698244      0.698244       183.837       184.536    
  56  0.755417     -0.280485      -1.01412       1.01412       182.875       183.889    
  57  0.548139     -0.601226      -2.17380       2.17380       180.221       182.395    
  58  0.886061     -0.120970     -0.437380      0.437380       187.149       187.587    
  59  0.678820     -0.387400      -1.40069       1.40069       179.763       181.164    
  60  0.435343     -0.831622      -3.00682       3.00682       186.665       189.672    
  61  0.917598     -0.859955E-01 -0.310926      0.310926       185.430       185.741    
  62  0.356725      -1.03079      -3.72694       3.72694       189.670       193.397    
  63  0.731877     -0.312142      -1.12858       1.12858       184.313       185.442    
  64  0.509090     -0.675130      -2.44101       2.44101       183.165       185.606    
  65  0.576928     -0.550038      -1.98872       1.98872       174.449       176.438    
  66  0.854239     -0.157545     -0.569619      0.569619       188.964       189.534    
  67  0.572427E-01  -2.86046      -10.3423       10.3423       184.883       195.225    
  68  0.975343     -0.249660E-01 -0.902672E-01  0.902672E-01   186.821       186.911    
  69  0.671870E-01  -2.70028      -9.76313       9.76313       186.584       196.347    
  70  0.154919      -1.86485      -6.74257       6.74257       187.470       194.213    
  71  0.805966     -0.215714     -0.779936      0.779936       192.845       193.625    
  72  0.906586     -0.980697E-01 -0.354581      0.354581       176.998       177.353    
loop,thermsimp(1:2)        9   5.94644      0.704537    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    389        172.13          0.84          1.11         25.12          0.25          0.05         27.37
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    390        178.14          0.84          1.11         25.00          0.20          0.05         27.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    172.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:        9
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       10
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      389     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -2.39140       2.39140       171.272       173.664    
   2  0.677402     -0.389491      -1.40824       1.40824       172.255       173.663    
   3  0.899541     -0.105871     -0.382787      0.382787       173.455       173.838    
   4  0.235706      -1.44517      -5.22516       5.22516       173.391       178.617    
   5  0.194769      -1.63594      -5.91493       5.91493       166.873       172.788    
   6  0.814930     -0.204653     -0.739945      0.739945       168.270       169.010    
   7  0.727423E-01  -2.62083      -9.47590       9.47590       173.042       182.518    
   8  0.126759      -2.06547      -7.46793       7.46793       172.867       180.335    
   9  0.592876     -0.522770      -1.89013       1.89013       173.028       174.918    
  10  0.131380      -2.02966      -7.33847       7.33847       171.815       179.154    
  11  0.394760E-01  -3.23206      -11.6859       11.6859       175.132       186.818    
  12  0.539964     -0.616252      -2.22812       2.22812       173.514       175.743    
  13  0.127256      -2.06155      -7.45377       7.45377       174.487       181.941    
  14  0.245583      -1.40412      -5.07674       5.07674       174.449       179.526    
  15  0.236145E-01  -3.74590      -13.5437       13.5437       175.167       188.711    
  16  0.791943     -0.233266     -0.843397      0.843397       175.329       176.172    
  17  0.223014      -1.50052      -5.42529       5.42529       176.135       181.561    
  18  0.943370     -0.582970E-01 -0.210779      0.210779       172.968       173.178    
  19  0.844237     -0.169322     -0.612201      0.612201       174.838       175.450    
  20  0.600301     -0.510323      -1.84513       1.84513       176.998       178.843    
  21  0.742625E-01  -2.60015      -9.40112       9.40112       175.068       184.469    
  22  0.288925E-01  -3.54417      -12.8143       12.8143       173.636       186.451    
  23  0.325834      -1.12137      -4.05442       4.05442       174.331       178.385    
  24  0.317147      -1.14839      -4.15212       4.15212       176.672       180.824    
  25  0.655873     -0.421788      -1.52502       1.52502       173.592       175.117    
  26  0.259034      -1.35080      -4.88394       4.88394       175.800       180.684    
  27  0.639742E-01  -2.74927      -9.94029       9.94029       175.715       185.655    
  28  0.110416E-01  -4.50609      -16.2922       16.2922       178.432       194.724    
  29  0.768965E-01  -2.56529      -9.27510       9.27510       178.392       187.667    
  30  0.757182     -0.278151      -1.00569       1.00569       179.665       180.671    
  31  0.788615     -0.237477     -0.858622      0.858622       174.808       175.667    
  32  0.724297     -0.322554      -1.16623       1.16623       173.585       174.751    
  33  0.807261     -0.214109     -0.774133      0.774133       173.561       174.335    
  34  0.356497      -1.03143      -3.72924       3.72924       180.706       184.436    
  35  0.685602     -0.377458      -1.36474       1.36474       177.366       178.730    
  36  0.681617     -0.383288      -1.38582       1.38582       180.949       182.334    
  37  0.323748      -1.12779      -4.07764       4.07764       179.763       183.841    
  38  0.622817     -0.473503      -1.71200       1.71200       178.580       180.292    
  39  0.534584     -0.626266      -2.26433       2.26433       180.389       182.653    
  40  0.130255E-02  -6.64343      -24.0200       24.0200       180.221       204.241    
  41  0.357398      -1.02891      -3.72012       3.72012       175.475       179.195    
  42  0.290986      -1.23448      -4.46340       4.46340       174.069       178.532    
  43  0.182566      -1.70064      -6.14886       6.14886       183.092       189.241    
  44  0.695597     -0.362984      -1.31241       1.31241       177.340       178.653    
  45  0.612287     -0.490555      -1.77365       1.77365       174.483       176.257    
  46  0.845780     -0.167496     -0.605599      0.605599       182.875       183.480    
  47  0.628042     -0.465149      -1.68179       1.68179       177.589       179.271    
  48  0.830233     -0.186049     -0.672681      0.672681       184.071       184.744    
  49  0.373260     -0.985481      -3.56311       3.56311       179.165       182.728    
  50  0.711640     -0.340183      -1.22997       1.22997       183.752       184.982    
  51  0.449400     -0.799842      -2.89191       2.89191       177.988       180.879    
  52  0.253029      -1.37425      -4.96874       4.96874       183.837       188.806    
  53  0.956034     -0.449619E-01 -0.162565      0.162565       177.542       177.705    
  54  0.544467     -0.607949      -2.19810       2.19810       171.708       173.907    
  55  0.419963     -0.867588      -3.13686       3.13686       184.706       187.843    
  56  0.372696E-02  -5.59216      -20.2191       20.2191       181.080       201.299    
  57  0.519921     -0.654079      -2.36489       2.36489       184.313       186.678    
  58  0.563761     -0.573124      -2.07219       2.07219       183.165       185.238    
  59  0.231567      -1.46289      -5.28922       5.28922       185.430       190.719    
  60  0.736257     -0.306176      -1.10701       1.10701       176.040       177.147    
  61  0.408436E-01  -3.19801      -11.5627       11.5627       186.821       198.384    
  62  0.111120      -2.19714      -7.94399       7.94399       187.149       195.093    
  63  0.988251     -0.118183E-01 -0.427304E-01  0.427304E-01   182.432       182.475    
  64  0.107317E-01  -4.53455      -16.3952       16.3952       188.964       205.360    
  65  0.896884E-01  -2.41141      -8.71872       8.71872       184.490       193.208    
  66  0.190396      -1.65865      -5.99703       5.99703       186.665       192.662    
  67  0.978391     -0.218460E-01 -0.789864E-01  0.789864E-01   183.898       183.977    
  68  0.471431     -0.751983      -2.71887       2.71887       189.670       192.389    
  69  0.642804     -0.441915      -1.59779       1.59779       192.845       194.443    
  70  0.227213      -1.48187      -5.35785       5.35785       187.470       192.828    
  71  0.348332      -1.05460      -3.81302       3.81302       184.883       188.696    
  72  0.793152E-01  -2.53433      -9.16312       9.16312       172.127       181.290    
loop,thermsimp(1:2)       10   2.39140       1.40824    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    391        172.25          0.84          1.11         25.17          0.11          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       10
neval is:      390
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       11
neval is:      390


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      390     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811      -1.10208       1.10208       168.270       169.372    
   2  0.372515     -0.987477      -3.57033       3.57033       166.873       170.443    
   3  0.197611E-01  -3.92404      -14.1878       14.1878       172.968       187.155    
   4  0.939239     -0.626858E-01 -0.226647      0.226647       172.255       172.482    
   5  0.212506      -1.54879      -5.59980       5.59980       171.272       176.872    
   6  0.141762      -1.95360      -7.06346       7.06346       173.455       180.519    
   7  0.183632      -1.69482      -6.12782       6.12782       171.708       177.836    
   8  0.479067     -0.735915      -2.66078       2.66078       173.561       176.222    
   9  0.113189      -2.17870      -7.87731       7.87731       173.585       181.462    
  10  0.314091      -1.15807      -4.18713       4.18713       173.028       177.215    
  11  0.457761     -0.781409      -2.82527       2.82527       173.592       176.417    
  12  0.923744     -0.793200E-01 -0.286790      0.286790       174.838       175.125    
  13  0.805387     -0.216433     -0.782536      0.782536       174.808       175.591    
  14  0.979257     -0.209609E-01 -0.757862E-01  0.757862E-01   173.514       173.590    
  15  0.634716E-01  -2.75716      -9.96881       9.96881       175.329       185.297    
  16  0.502866     -0.687432      -2.48548       2.48548       174.483       176.969    
  17  0.844986     -0.168435     -0.608995      0.608995       176.040       176.649    
  18  0.548347     -0.600848      -2.17243       2.17243       177.542       179.714    
  19  0.825472     -0.191800     -0.693473      0.693473       174.331       175.024    
  20  0.806424     -0.215145     -0.777880      0.777880       174.069       174.847    
  21  0.497450E-01  -3.00085      -10.8499       10.8499       173.391       184.241    
  22  0.407289     -0.898233      -3.24766       3.24766       177.340       180.588    
  23  0.522833     -0.648493      -2.34469       2.34469       177.366       179.710    
  24  0.763038     -0.270448     -0.977834      0.977834       176.998       177.976    
  25  0.706120     -0.347970      -1.25812       1.25812       171.815       173.074    
  26  0.540862     -0.614591      -2.22212       2.22212       175.475       177.697    
  27  0.807340E-01  -2.51660      -9.09902       9.09902       177.589       186.688    
  28  0.310756      -1.16875      -4.22573       4.22573       174.449       178.675    
  29  0.689192     -0.372235      -1.34586       1.34586       178.580       179.926    
  30  0.634973     -0.454174      -1.64211       1.64211       172.867       174.509    
  31  0.598432     -0.513442      -1.85640       1.85640       179.665       181.521    
  32  0.393639     -0.932321      -3.37091       3.37091       175.800       179.171    
  33  0.369460     -0.995714      -3.60011       3.60011       176.672       180.272    
  34  0.129274      -2.04582      -7.39687       7.39687       177.988       185.384    
  35  0.250376      -1.38479      -5.00686       5.00686       172.127       177.134    
  36  0.536641     -0.622425      -2.25044       2.25044       176.135       178.386    
  37  0.495942     -0.701296      -2.53561       2.53561       174.487       177.022    
  38  0.650684     -0.429731      -1.55374       1.55374       180.949       182.502    
  39  0.889212     -0.117420     -0.424544      0.424544       182.432       182.856    
  40  0.314936      -1.15539      -4.17742       4.17742       173.042       177.219    
  41  0.943567     -0.580875E-01 -0.210022      0.210022       180.389       180.599    
  42  0.672016     -0.397473      -1.43710       1.43710       179.165       180.602    
  43  0.133907      -2.01061      -7.26958       7.26958       182.875       190.144    
  44  0.259017      -1.35086      -4.88418       4.88418       179.763       184.647    
  45  0.112444      -2.18530      -7.90118       7.90118       183.898       191.800    
  46  0.235994      -1.44395      -5.22075       5.22075       180.706       185.927    
  47  0.879651     -0.128231     -0.463631      0.463631       175.068       175.532    
  48  0.750555     -0.286942      -1.03747       1.03747       184.071       185.109    
  49  0.996491E-01  -2.30610      -8.33795       8.33795       183.752       192.090    
  50  0.100853      -2.29409      -8.29454       8.29454       183.165       191.460    
  51  0.520543     -0.652882      -2.36057       2.36057       175.715       178.076    
  52  0.886361E-01  -2.42322      -8.76139       8.76139       173.636       182.398    
  53  0.152463      -1.88083      -6.80034       6.80034       184.313       191.113    
  54  0.286446E-03  -8.15796      -29.4960       29.4960       175.132       204.628    
  55  0.472863     -0.748950      -2.70791       2.70791       178.392       181.100    
  56  0.907202     -0.973898E-01 -0.352123      0.352123       184.706       185.058    
  57  0.194253      -1.63859      -5.92451       5.92451       184.883       190.807    
  58  0.560994     -0.578045      -2.08998       2.08998       175.167       177.257    
  59  0.316514      -1.15039      -4.15935       4.15935       183.837       187.997    
  60  0.538541E-02  -5.22406      -18.8881       18.8881       183.092       201.980    
  61  0.414112     -0.881619      -3.18759       3.18759       185.430       188.617    
  62  0.281101      -1.26904      -4.58835       4.58835       189.670       194.258    
  63  0.550613     -0.596724      -2.15752       2.15752       186.665       188.823    
  64  0.236016      -1.44386      -5.22042       5.22042       187.470       192.691    
  65  0.330497E-01  -3.40974      -12.3283       12.3283       184.490       196.818    
  66  0.353510      -1.03984      -3.75966       3.75966       192.845       196.605    
  67  0.379763E-01  -3.27079      -11.8259       11.8259       178.432       190.258    
  68  0.431178     -0.841233      -3.04157       3.04157       187.149       190.191    
  69  0.345799      -1.06190      -3.83941       3.83941       186.821       190.660    
  70  0.244727      -1.40761      -5.08937       5.08937       181.080       186.169    
  71  0.755301     -0.280639      -1.01468       1.01468       180.221       181.236    
  72  0.229081      -1.47368      -5.32825       5.32825       172.252       177.581    
loop,thermsimp(1:2)       11   1.10208       3.57033    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    392        177.62          0.84          1.11         25.36          0.13          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       11
neval is:      391
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       12
neval is:      391


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      391     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995     -0.882190      0.882190       168.270       169.152    
   2  0.973841     -0.265069E-01 -0.958384E-01  0.958384E-01   166.873       166.969    
   3  0.294662      -1.22193      -4.41800       4.41800       172.255       176.673    
   4  0.702628     -0.352928      -1.27605       1.27605       171.815       173.091    
   5  0.763280     -0.270131     -0.976686      0.976686       173.514       174.491    
   6  0.578080E-01  -2.85063      -10.3068       10.3068       172.867       183.174    
   7  0.834037     -0.181478     -0.656153      0.656153       174.069       174.725    
   8  0.976312     -0.239730E-01 -0.866770E-01  0.866770E-01   174.331       174.417    
   9  0.603670     -0.504728      -1.82490       1.82490       174.838       176.663    
  10  0.458546     -0.779695      -2.81907       2.81907       175.068       177.887    
  11  0.201917      -1.59990      -5.78460       5.78460       174.808       180.593    
  12  0.362727      -1.01411      -3.66660       3.66660       173.561       177.228    
  13  0.466909E-01  -3.06421      -11.0790       11.0790       173.592       184.671    
  14  0.602192     -0.507180      -1.83376       1.83376       176.040       177.874    
  15  0.332545      -1.10098      -3.98071       3.98071       171.272       175.253    
  16  0.758378     -0.276574     -0.999982      0.999982       174.483       175.483    
  17  0.834950     -0.180384     -0.652197      0.652197       174.487       175.139    
  18  0.910410     -0.938599E-01 -0.339360      0.339360       172.127       172.467    
  19  0.825418E-01  -2.49445      -9.01895       9.01895       173.028       182.047    
  20  0.639611     -0.446894      -1.61579       1.61579       173.042       174.658    
  21  0.345418      -1.06300      -3.84339       3.84339       175.167       179.010    
  22  0.961674     -0.390802E-01 -0.141299      0.141299       172.252       172.394    
  23  0.274135      -1.29413      -4.67908       4.67908       175.475       180.154    
  24  0.275236      -1.29013      -4.66459       4.66459       171.708       176.373    
  25  0.373550     -0.984704      -3.56030       3.56030       176.998       180.558    
  26  0.407178     -0.898505      -3.24864       3.24864       175.715       178.964    
  27  0.908773     -0.956602E-01 -0.345870      0.345870       176.135       176.481    
  28  0.578518     -0.547286      -1.97877       1.97877       174.449       176.428    
  29  0.674288     -0.394098      -1.42490       1.42490       175.800       177.225    
  30  0.758166     -0.276853      -1.00099       1.00099       177.366       178.367    
  31  0.764349E-01  -2.57132      -9.29687       9.29687       177.542       186.839    
  32  0.962342     -0.383853E-01 -0.138786      0.138786       178.580       178.719    
  33  0.918960     -0.845125E-01 -0.305564      0.305564       176.672       176.978    
  34  0.617888     -0.481448      -1.74073       1.74073       173.455       175.196    
  35  0.227646      -1.47996      -5.35096       5.35096       177.340       182.691    
  36  0.262001      -1.33941      -4.84276       4.84276       180.389       185.232    
  37  0.589438     -0.528586      -1.91116       1.91116       179.165       181.076    
  38  0.201352      -1.60270      -5.79473       5.79473       178.392       184.186    
  39  0.350279      -1.04903      -3.79287       3.79287       180.221       184.014    
  40  0.647374     -0.434831      -1.57218       1.57218       173.585       175.157    
  41  0.604508     -0.503341      -1.81988       1.81988       179.665       181.485    
  42  0.700946     -0.355325      -1.28471       1.28471       173.636       174.921    
  43  0.575270     -0.552915      -1.99912       1.99912       180.949       182.948    
  44  0.554419     -0.589835      -2.13261       2.13261       182.432       184.565    
  45  0.375300     -0.980029      -3.54340       3.54340       173.391       176.935    
  46  0.605541     -0.501632      -1.81371       1.81371       179.763       181.577    
  47  0.109847      -2.20867      -7.98567       7.98567       184.706       192.692    
  48  0.553505     -0.591485      -2.13858       2.13858       184.071       186.210    
  49  0.412268     -0.886082      -3.20372       3.20372       175.329       178.532    
  50  0.664246     -0.409102      -1.47915       1.47915       177.988       179.467    
  51  0.707719     -0.345708      -1.24994       1.24994       180.706       181.956    
  52  0.750886     -0.286501      -1.03588       1.03588       181.080       182.115    
  53  0.339698      -1.07970      -3.90376       3.90376       177.589       181.493    
  54  0.849457     -0.163157     -0.589913      0.589913       172.968       173.558    
  55  0.206681E-02  -6.18175      -22.3508       22.3508       183.837       206.188    
  56  0.251051      -1.38210      -4.99712       4.99712       185.430       190.427    
  57  0.224827      -1.49242      -5.39602       5.39602       186.665       192.061    
  58  0.335724      -1.09147      -3.94631       3.94631       182.875       186.821    
  59  0.157522      -1.84819      -6.68232       6.68232       187.149       193.832    
  60  0.630796E-01  -2.76336      -9.99121       9.99121       178.432       188.423    
  61  0.383657     -0.958005      -3.46377       3.46377       186.821       190.285    
  62  0.777557     -0.251598     -0.909681      0.909681       184.883       185.792    
  63  0.370382     -0.993221      -3.59110       3.59110       184.313       187.904    
  64  0.459130     -0.778421      -2.81446       2.81446       183.165       185.980    
  65  0.763871     -0.269356     -0.973886      0.973886       183.898       184.872    
  66  0.649642     -0.431333      -1.55953       1.55953       183.752       185.312    
  67  0.834635     -0.180761     -0.653559      0.653559       187.470       188.124    
  68  0.119884      -2.12123      -7.66954       7.66954       189.670       197.339    
  69  0.434414     -0.833757      -3.01454       3.01454       192.845       195.860    
  70  0.237182      -1.43893      -5.20260       5.20260       184.490       189.692    
  71  0.926856     -0.759573E-01 -0.274632      0.274632       183.092       183.367    
  72  0.857919     -0.153246     -0.554077      0.554077       177.621       178.175    
loop,thermsimp(1:2)       12  0.882190      0.958384E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    393        171.51          0.84          1.10         25.32          0.16          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    171.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       12
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       13
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      392     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01 -0.131444      0.131444       166.873       167.004    
   2  0.963371     -0.373169E-01 -0.134923      0.134923       168.270       168.405    
   3  0.851172E-02  -4.76631      -17.2331       17.2331       172.252       189.486    
   4  0.731929E-01  -2.61466      -9.45357       9.45357       172.127       181.581    
   5  0.491869     -0.709543      -2.56543       2.56543       171.815       174.381    
   6  0.625436     -0.469306      -1.69682       1.69682       172.968       174.664    
   7  0.139469      -1.96991      -7.12244       7.12244       174.331       181.453    
   8  0.464987     -0.765746      -2.76864       2.76864       173.514       176.283    
   9  0.192956      -1.64529      -5.94873       5.94873       173.042       178.991    
  10  0.184589E-01  -3.99221      -14.4342       14.4342       174.069       188.503    
  11  0.327387      -1.11661      -4.03723       4.03723       173.636       177.674    
  12  0.447570     -0.803921      -2.90666       2.90666       174.487       177.394    
  13  0.282132      -1.26538      -4.57512       4.57512       173.585       178.160    
  14  0.991234     -0.880510E-02 -0.318358E-01  0.318358E-01   173.455       173.487    
  15  0.574009     -0.555110      -2.00706       2.00706       171.272       173.279    
  16  0.884017     -0.123279     -0.445727      0.445727       174.483       174.929    
  17  0.332578      -1.10088      -3.98035       3.98035       171.708       175.689    
  18  0.294524      -1.22240      -4.41970       4.41970       174.449       178.869    
  19  0.865605     -0.144326     -0.521827      0.521827       176.135       176.657    
  20  0.441883E-01  -3.11930      -11.2781       11.2781       174.838       186.116    
  21  0.652915     -0.426309      -1.54136       1.54136       172.255       173.796    
  22  0.712636E-01  -2.64137      -9.55015       9.55015       173.391       182.942    
  23  0.211397      -1.55402      -5.61871       5.61871       176.672       182.291    
  24  0.836672E-01  -2.48091      -8.96999       8.96999       175.800       184.770    
  25  0.397953     -0.921422      -3.33150       3.33150       173.561       176.893    
  26  0.545442     -0.606159      -2.19163       2.19163       176.040       178.231    
  27  0.628874     -0.463825      -1.67701       1.67701       175.068       176.745    
  28  0.243035      -1.41455      -5.11446       5.11446       177.621       182.736    
  29  0.700237     -0.356336      -1.28837       1.28837       177.366       178.654    
  30  0.887974     -0.118813     -0.429581      0.429581       175.329       175.758    
  31  0.354481      -1.03710      -3.74974       3.74974       178.580       182.330    
  32  0.579479     -0.545626      -1.97277       1.97277       175.715       177.688    
  33  0.873601E-01  -2.43772      -8.81382       8.81382       175.167       183.981    
  34  0.414510     -0.880658      -3.18411       3.18411       177.988       181.172    
  35  0.263485      -1.33376      -4.82235       4.82235       175.475       180.298    
  36  0.174560E-01  -4.04807      -14.6362       14.6362       176.998       191.634    
  37  0.461287     -0.773735      -2.79752       2.79752       174.808       177.606    
  38  0.914554     -0.893185E-01 -0.322940      0.322940       179.165       179.488    
  39  0.551497     -0.595119      -2.15172       2.15172       179.665       181.817    
  40  0.751145     -0.286157      -1.03463       1.03463       177.589       178.624    
  41  0.838814     -0.175766     -0.635500      0.635500       179.763       180.399    
  42  0.494321     -0.704571      -2.54745       2.54745       180.706       183.254    
  43  0.878137     -0.129953     -0.469857      0.469857       173.028       173.498    
  44  0.249667      -1.38763      -5.01712       5.01712       181.080       186.097    
  45  0.569995     -0.562128      -2.03243       2.03243       177.340       179.373    
  46  0.338221      -1.08406      -3.91952       3.91952       180.949       184.868    
  47  0.536421     -0.622836      -2.25193       2.25193       172.867       175.119    
  48  0.482027     -0.729755      -2.63851       2.63851       183.092       185.730    
  49  0.436505     -0.828955      -2.99717       2.99717       180.221       183.219    
  50  0.225116      -1.49114      -5.39138       5.39138       178.392       183.783    
  51  0.126546      -2.06715      -7.47401       7.47401       182.432       189.906    
  52  0.182898      -1.69882      -6.14228       6.14228       173.592       179.734    
  53  0.114159      -2.17017      -7.84647       7.84647       183.898       191.745    
  54  0.582926     -0.539695      -1.95132       1.95132       180.389       182.340    
  55  0.583079     -0.539432      -1.95037       1.95037       183.752       185.703    
  56  0.430119     -0.843693      -3.05046       3.05046       184.883       187.933    
  57  0.468275     -0.758699      -2.74316       2.74316       183.165       185.909    
  58  0.323186      -1.12953      -4.08392       4.08392       184.071       188.155    
  59  0.999190E-01  -2.30340      -8.32817       8.32817       182.875       191.203    
  60  0.710279     -0.342098      -1.23689       1.23689       177.542       178.779    
  61  0.316311      -1.15103      -4.16167       4.16167       184.313       188.475    
  62  0.972639     -0.277425E-01 -0.100306      0.100306       187.470       187.571    
  63  0.547984E-01  -2.90409      -10.5001       10.5001       178.432       188.932    
  64  0.658251     -0.418168      -1.51193       1.51193       184.490       186.002    
  65  0.364963      -1.00796      -3.64439       3.64439       186.821       190.465    
  66  0.517613     -0.658528      -2.38098       2.38098       185.430       187.811    
  67  0.888720     -0.117973     -0.426545      0.426545       186.665       187.092    
  68  0.957228     -0.437139E-01 -0.158052      0.158052       184.706       184.864    
  69  0.307204E-01  -3.48283      -12.5925       12.5925       187.149       199.742    
  70  0.800807     -0.222136     -0.803156      0.803156       192.845       193.648    
  71  0.167412      -1.78730      -6.46217       6.46217       189.670       196.132    
  72  0.128048      -2.05535      -7.43135       7.43135       171.506       178.937    
loop,thermsimp(1:2)       13  0.131444      0.134923    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    394        169.05          0.84          1.11         25.04          0.17          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    395        176.10          0.84          1.11         25.04          0.17          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    169.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       13
neval is:      394
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       14
neval is:      394


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      394     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -2.25394       2.25394       166.873       169.127    
   2  0.902010     -0.103129     -0.372875      0.372875       168.270       168.643    
   3  0.918906     -0.845717E-01 -0.305778      0.305778       171.272       171.578    
   4  0.300977E-01  -3.50330      -12.6666       12.6666       173.455       186.122    
   5  0.180939      -1.70960      -6.18123       6.18123       173.028       179.209    
   6  0.996736     -0.326981E-02 -0.118223E-01  0.118223E-01   172.255       172.267    
   7  0.974749     -0.255749E-01 -0.924687E-01  0.924687E-01   171.815       171.908    
   8  0.259085      -1.35060      -4.88323       4.88323       172.968       177.851    
   9  0.237439      -1.43784      -5.19868       5.19868       174.483       179.682    
  10  0.733816     -0.309497      -1.11902       1.11902       172.867       173.986    
  11  0.458028     -0.780824      -2.82315       2.82315       171.708       174.532    
  12  0.623300     -0.472727      -1.70919       1.70919       175.329       177.038    
  13  0.789074     -0.236895     -0.856520      0.856520       173.514       174.371    
  14  0.718847     -0.330107      -1.19354       1.19354       176.135       177.329    
  15  0.414258     -0.881266      -3.18631       3.18631       175.068       178.254    
  16  0.121880E-01  -4.40730      -15.9351       15.9351       173.561       189.496    
  17  0.976927     -0.233433E-01 -0.844000E-01  0.844000E-01   174.487       174.571    
  18  0.998133     -0.186873E-02 -0.675660E-02  0.675660E-02   174.808       174.815    
  19  0.582806     -0.539901      -1.95207       1.95207       173.636       175.588    
  20  0.461010     -0.774335      -2.79969       2.79969       175.715       178.515    
  21  0.748404     -0.289812      -1.04785       1.04785       173.585       174.632    
  22  0.627394     -0.466180      -1.68552       1.68552       176.040       177.725    
  23  0.823247     -0.194499     -0.703234      0.703234       177.589       178.293    
  24  0.696302     -0.361971      -1.30875       1.30875       177.366       178.674    
  25  0.571207     -0.560004      -2.02475       2.02475       177.542       179.567    
  26  0.189272      -1.66457      -6.01844       6.01844       174.449       180.468    
  27  0.534816     -0.625833      -2.26276       2.26276       171.506       173.768    
  28  0.846241     -0.166951     -0.603629      0.603629       173.042       173.645    
  29  0.157466      -1.84855      -6.68361       6.68361       177.340       184.024    
  30  0.123756      -2.08945      -7.55461       7.55461       179.165       186.720    
  31  0.458067     -0.780739      -2.82284       2.82284       173.592       176.414    
  32  0.989772     -0.102804E-01 -0.371698E-01  0.371698E-01   175.475       175.513    
  33  0.292614      -1.22890      -4.44322       4.44322       179.763       184.206    
  34  0.707885     -0.345474      -1.24910       1.24910       177.988       179.237    
  35  0.686290     -0.376455      -1.36111       1.36111       174.331       175.692    
  36  0.752747     -0.284026      -1.02693       1.02693       172.127       173.154    
  37  0.577950E-01  -2.85085      -10.3076       10.3076       179.665       189.973    
  38  0.496568E-02  -5.30521      -19.1815       19.1815       176.672       195.854    
  39  0.632817     -0.457575      -1.65441       1.65441       178.580       180.235    
  40  0.306568      -1.18232      -4.27479       4.27479       180.389       184.664    
  41  0.800757     -0.222198     -0.803379      0.803379       177.621       178.425    
  42  0.754206     -0.282090      -1.01993       1.01993       173.391       174.411    
  43  0.875958     -0.132437     -0.478842      0.478842       180.221       180.700    
  44  0.411581     -0.887750      -3.20976       3.20976       180.706       183.916    
  45  0.784837     -0.242279     -0.875987      0.875987       178.392       179.268    
  46  0.615964     -0.484567      -1.75201       1.75201       175.167       176.919    
  47  0.427318     -0.850227      -3.07409       3.07409       175.800       178.874    
  48  0.373288     -0.985405      -3.56284       3.56284       184.706       188.269    
  49  0.118712      -2.13106      -7.70506       7.70506       180.949       188.654    
  50  0.465204     -0.765279      -2.76695       2.76695       183.752       186.519    
  51  0.361628      -1.01714      -3.67758       3.67758       183.092       186.769    
  52  0.625886     -0.468587      -1.69423       1.69423       183.165       184.860    
  53  0.164441      -1.80521      -6.52691       6.52691       184.490       191.017    
  54  0.311940      -1.16494      -4.21198       4.21198       181.080       185.292    
  55  0.269725E-01  -3.61294      -13.0630       13.0630       174.838       187.901    
  56  0.242465      -1.41690      -5.12295       5.12295       186.665       191.788    
  57  0.263333      -1.33434      -4.82444       4.82444       187.470       192.295    
  58  0.214624E-02  -6.14404      -22.2144       22.2144       185.430       207.644    
  59  0.932315     -0.700843E-01 -0.253397      0.253397       184.883       185.136    
  60  0.622961     -0.473272      -1.71116       1.71116       184.071       185.782    
  61  0.269930      -1.30959      -4.73497       4.73497       184.313       189.048    
  62  0.298039      -1.21053      -4.37680       4.37680       174.069       178.446    
  63  0.327337      -1.11676      -4.03778       4.03778       178.432       182.470    
  64  0.789470     -0.236394     -0.854707      0.854707       172.252       173.107    
  65  0.239818      -1.42788      -5.16264       5.16264       182.432       187.595    
  66  0.753924     -0.282464      -1.02128       1.02128       186.821       187.842    
  67  0.407638     -0.897375      -3.24455       3.24455       182.875       186.119    
  68  0.465961     -0.763653      -2.76107       2.76107       176.998       179.759    
  69  0.191020      -1.65538      -5.98519       5.98519       183.898       189.884    
  70  0.586001     -0.534433      -1.93230       1.93230       192.845       194.778    
  71  0.255262      -1.36546      -4.93698       4.93698       189.670       194.607    
  72  0.944354     -0.572545E-01 -0.207010      0.207010       169.047       169.254    
loop,thermsimp(1:2)       14   2.25394      0.372875    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    396        183.43          0.84          1.11         25.11          0.13          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    183.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       14
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       15
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      395     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -5.64121       5.64121       168.270       173.911    
   2  0.682169     -0.382478      -1.38289       1.38289       166.873       168.256    
   3  0.831163     -0.184930     -0.668633      0.668633       169.047       169.716    
   4  0.625179     -0.469718      -1.69831       1.69831       171.272       172.971    
   5  0.907522     -0.970376E-01 -0.350850      0.350850       171.815       172.166    
   6  0.406703     -0.899672      -3.25286       3.25286       172.255       175.508    
   7  0.463060     -0.769899      -2.78365       2.78365       172.252       175.036    
   8  0.206056      -1.57961      -5.71124       5.71124       172.127       177.838    
   9  0.303716      -1.19166      -4.30858       4.30858       173.042       177.350    
  10  0.843889     -0.169734     -0.613693      0.613693       171.506       172.119    
  11  0.273678      -1.29580      -4.68511       4.68511       172.867       177.552    
  12  0.571842     -0.558892      -2.02073       2.02073       173.514       175.535    
  13  0.803131     -0.219238     -0.792678      0.792678       173.391       174.184    
  14  0.330375      -1.10753      -4.00438       4.00438       171.708       175.713    
  15  0.155557      -1.86074      -6.72772       6.72772       174.487       181.215    
  16  0.878823     -0.129172     -0.467035      0.467035       173.585       174.052    
  17  0.781654     -0.246343     -0.890679      0.890679       174.808       175.699    
  18  0.782655     -0.245064     -0.886053      0.886053       175.475       176.361    
  19  0.682155     -0.382499      -1.38296       1.38296       173.636       175.019    
  20  0.899702     -0.105691     -0.382138      0.382138       174.331       174.713    
  21  0.444808     -0.810113      -2.92905       2.92905       173.592       176.521    
  22  0.495252     -0.702688      -2.54064       2.54064       175.167       177.708    
  23  0.640834     -0.444984      -1.60889       1.60889       175.329       176.937    
  24  0.314465      -1.15688      -4.18283       4.18283       176.135       180.318    
  25  0.368564     -0.998140      -3.60888       3.60888       176.040       179.649    
  26  0.572254E-02  -5.16334      -18.6686       18.6686       172.968       191.636    
  27  0.468080E-01  -3.06170      -11.0699       11.0699       175.068       186.138    
  28  0.598693E-01  -2.81559      -10.1801       10.1801       177.589       187.769    
  29  0.658687     -0.417508      -1.50954       1.50954       177.621       179.131    
  30  0.449565     -0.799475      -2.89059       2.89059       174.069       176.959    
  31  0.799405     -0.223887     -0.809487      0.809487       175.715       176.524    
  32  0.414416     -0.880885      -3.18493       3.18493       177.366       180.550    
  33  0.395703E-01  -3.22968      -11.6772       11.6772       175.800       187.477    
  34  0.704129E-01  -2.65338      -9.59357       9.59357       173.028       182.621    
  35  0.336217      -1.09000      -3.94101       3.94101       177.988       181.929    
  36  0.169926      -1.77239      -6.40827       6.40827       178.392       184.800    
  37  0.846601E-01  -2.46911      -8.92733       8.92733       177.542       186.469    
  38  0.798628     -0.224860     -0.813005      0.813005       174.483       175.296    
  39  0.377891     -0.973150      -3.51853       3.51853       176.998       180.517    
  40  0.183739      -1.69424      -6.12569       6.12569       178.580       184.706    
  41  0.930280     -0.722695E-01 -0.261298      0.261298       174.449       174.710    
  42  0.280682      -1.27053      -4.59375       4.59375       180.221       184.815    
  43  0.475397     -0.743606      -2.68858       2.68858       178.432       181.120    
  44  0.705714     -0.348545      -1.26020       1.26020       180.706       181.967    
  45  0.307479      -1.17935      -4.26406       4.26406       177.340       181.604    
  46  0.408291     -0.895776      -3.23877       3.23877       179.763       183.002    
  47  0.174897      -1.74356      -6.30402       6.30402       180.389       186.693    
  48  0.462267     -0.771612      -2.78985       2.78985       183.165       185.955    
  49  0.805682E-01  -2.51865      -9.10645       9.10645       184.883       193.989    
  50  0.276714      -1.28477      -4.64523       4.64523       181.080       185.725    
  51  0.914639     -0.892253E-01 -0.322604      0.322604       184.071       184.394    
  52  0.575354     -0.552769      -1.99860       1.99860       182.875       184.873    
  53  0.537577     -0.620684      -2.24415       2.24415       173.455       175.699    
  54  0.209256      -1.56420      -5.65553       5.65553       183.752       189.408    
  55  0.778351     -0.250578     -0.905990      0.905990       179.165       180.071    
  56  0.903762E-01  -2.40377      -8.69110       8.69110       183.092       191.783    
  57  0.758334E-01  -2.57922      -9.32543       9.32543       182.432       191.757    
  58  0.588112     -0.530837      -1.91930       1.91930       186.821       188.740    
  59  0.846166     -0.167040     -0.603951      0.603951       174.838       175.442    
  60  0.275383      -1.28959      -4.66266       4.66266       184.706       189.369    
  61  0.949019     -0.523265E-01 -0.189192      0.189192       180.949       181.138    
  62  0.207077      -1.57466      -5.69337       5.69337       184.313       190.007    
  63  0.623950     -0.471685      -1.70543       1.70543       173.561       175.267    
  64  0.681742E-01  -2.68569      -9.71039       9.71039       183.898       193.609    
  65  0.157941      -1.84553      -6.67272       6.67272       179.665       186.338    
  66  0.460122     -0.776264      -2.80666       2.80666       184.490       187.296    
  67  0.861850     -0.148675     -0.537549      0.537549       186.665       187.203    
  68  0.933782     -0.685126E-01 -0.247715      0.247715       187.470       187.718    
  69  0.238289      -1.43427      -5.18575       5.18575       189.670       194.855    
  70  0.206985      -1.57511      -5.69498       5.69498       192.845       198.540    
  71  0.921058E-01  -2.38482      -8.62256       8.62256       176.672       185.295    
  72  0.912587     -0.914718E-01 -0.330726      0.330726       183.429       183.760    
loop,thermsimp(1:2)       15   5.64121       1.38289    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    397        172.14          0.84          1.11         25.11          0.16          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    398        198.74          0.84          1.11         25.00          0.23          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    172.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       15
neval is:      397
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       16
neval is:      397


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      397     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -9.86707       9.86707       166.873       176.740    
   2  0.388935     -0.944342      -3.41437       3.41437       169.047       172.462    
   3  0.716732     -0.333053      -1.20419       1.20419       171.506       172.710    
   4  0.375936     -0.978336      -3.53728       3.53728       171.815       175.353    
   5  0.518505E-01  -2.95939      -10.7000       10.7000       171.272       181.972    
   6  0.892279     -0.113976     -0.412092      0.412092       168.270       168.682    
   7  0.145412      -1.92818      -6.97156       6.97156       173.585       180.556    
   8  0.759376E-01  -2.57784      -9.32047       9.32047       173.391       182.712    
   9  0.799111     -0.224255     -0.810817      0.810817       174.449       175.260    
  10  0.566636     -0.568038      -2.05380       2.05380       174.331       176.384    
  11  0.957834     -0.430803E-01 -0.155762      0.155762       173.636       173.792    
  12  0.421133     -0.864808      -3.12680       3.12680       172.252       175.379    
  13  0.965171     -0.354495E-01 -0.128172      0.128172       173.561       173.689    
  14  0.527073     -0.640416      -2.31549       2.31549       174.483       176.799    
  15  0.221584      -1.50695      -5.44855       5.44855       174.838       180.286    
  16  0.675180     -0.392776      -1.42012       1.42012       172.255       173.675    
  17  0.462159     -0.771846      -2.79069       2.79069       173.514       176.305    
  18  0.134826      -2.00377      -7.24483       7.24483       174.808       182.053    
  19  0.869165     -0.140222     -0.506988      0.506988       173.455       173.962    
  20  0.898965     -0.106511     -0.385101      0.385101       171.708       172.094    
  21  0.174160      -1.74778      -6.31929       6.31929       175.475       181.795    
  22  0.463810     -0.768281      -2.77780       2.77780       173.592       176.369    
  23  0.145870      -1.92504      -6.96018       6.96018       175.715       182.675    
  24  0.525172     -0.644029      -2.32856       2.32856       175.329       177.657    
  25  0.667609     -0.404052      -1.46089       1.46089       174.069       175.530    
  26  0.964408     -0.362405E-01 -0.131031      0.131031       173.042       173.173    
  27  0.981636     -0.185350E-01 -0.670151E-01  0.670151E-01   172.867       172.934    
  28  0.585742     -0.534875      -1.93390       1.93390       175.167       177.101    
  29  0.956106     -0.448864E-01 -0.162291      0.162291       172.127       172.290    
  30  0.153686      -1.87284      -6.77146       6.77146       177.621       184.393    
  31  0.937356     -0.646920E-01 -0.233901      0.233901       176.040       176.274    
  32  0.821414     -0.196728     -0.711291      0.711291       179.165       179.876    
  33  0.901583     -0.103603     -0.374588      0.374588       176.135       176.510    
  34  0.145469      -1.92779      -6.97014       6.97014       176.998       183.968    
  35  0.944310     -0.573011E-01 -0.207178      0.207178       177.366       177.573    
  36  0.639748     -0.446680      -1.61502       1.61502       178.432       180.047    
  37  0.533071     -0.629101      -2.27458       2.27458       180.949       183.223    
  38  0.708805     -0.344175      -1.24440       1.24440       174.487       175.731    
  39  0.953023     -0.481167E-01 -0.173971      0.173971       177.340       177.514    
  40  0.606832     -0.499502      -1.80600       1.80600       177.988       179.794    
  41  0.791257     -0.234132     -0.846529      0.846529       180.706       181.553    
  42  0.203064      -1.59423      -5.76412       5.76412       173.028       178.792    
  43  0.168642      -1.77998      -6.43570       6.43570       179.763       186.199    
  44  0.718173     -0.331045      -1.19693       1.19693       183.429       184.626    
  45  0.976939E-02  -4.62850      -16.7348       16.7348       184.071       200.806    
  46  0.211685      -1.55265      -5.61379       5.61379       178.580       184.194    
  47  0.624191     -0.471298      -1.70403       1.70403       178.392       180.096    
  48  0.749801     -0.287948      -1.04111       1.04111       180.221       181.263    
  49  0.710340     -0.342011      -1.23658       1.23658       182.875       184.111    
  50  0.447179     -0.804797      -2.90983       2.90983       176.672       179.582    
  51  0.567779     -0.566023      -2.04652       2.04652       181.080       183.126    
  52  0.262390      -1.33792      -4.83741       4.83741       183.165       188.003    
  53  0.907024     -0.975861E-01 -0.352833      0.352833       175.068       175.421    
  54  0.621682E-01  -2.77791      -10.0438       10.0438       179.665       189.709    
  55  0.667173     -0.404707      -1.46326       1.46326       177.542       179.005    
  56  0.429586     -0.844932      -3.05494       3.05494       180.389       183.444    
  57  0.758744     -0.276091     -0.998236      0.998236       186.665       187.664    
  58  0.890716     -0.115730     -0.418434      0.418434       184.490       184.908    
  59  0.101520E-01  -4.59008      -16.5959       16.5959       175.800       192.396    
  60  0.302396      -1.19602      -4.32432       4.32432       187.470       191.795    
  61  0.618723     -0.480097      -1.73584       1.73584       177.589       179.325    
  62  0.323728      -1.12785      -4.07787       4.07787       186.821       190.899    
  63  0.667954     -0.403536      -1.45903       1.45903       184.706       186.165    
  64  0.870722     -0.138433     -0.500519      0.500519       183.752       184.253    
  65  0.471572     -0.751683      -2.71779       2.71779       184.313       187.031    
  66  0.139523      -1.96953      -7.12103       7.12103       172.968       180.089    
  67  0.322617      -1.13129      -4.09030       4.09030       182.432       186.522    
  68  0.916959     -0.866922E-01 -0.313445      0.313445       183.092       183.405    
  69  0.598403E-02  -5.11866      -18.5071       18.5071       183.898       202.406    
  70  0.869598     -0.139724     -0.505188      0.505188       184.883       185.388    
  71  0.151888      -1.88461      -6.81402       6.81402       189.670       196.484    
  72  0.642634     -0.442179      -1.59875       1.59875       172.139       173.738    
loop,thermsimp(1:2)       16   9.86707       3.41437    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    399        175.55          0.84          1.11         25.30          0.20          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       16
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       17
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      398     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -2.58679       2.58679       168.270       170.857    
   2  0.243137      -1.41413      -5.11293       5.11293       171.708       176.821    
   3  0.530653     -0.633646      -2.29102       2.29102       172.127       174.418    
   4  0.926282     -0.765763E-01 -0.276870      0.276870       169.047       169.324    
   5  0.374288     -0.982729      -3.55316       3.55316       171.506       175.059    
   6  0.675293     -0.392608      -1.41952       1.41952       172.867       174.287    
   7  0.605942     -0.500970      -1.81131       1.81131       173.042       174.853    
   8  0.280229      -1.27215      -4.59958       4.59958       172.255       176.854    
   9  0.297259      -1.21315      -4.38628       4.38628       173.561       177.947    
  10  0.697504E-01  -2.66283      -9.62775       9.62775       172.139       181.767    
  11  0.824348     -0.193163     -0.698402      0.698402       173.636       174.335    
  12  0.750452     -0.287080      -1.03797       1.03797       173.455       174.493    
  13  0.120595      -2.11532      -7.64816       7.64816       174.449       182.097    
  14  0.935324     -0.668625E-01 -0.241748      0.241748       171.815       172.057    
  15  0.215551      -1.53456      -5.54836       5.54836       172.252       177.801    
  16  0.708821     -0.344153      -1.24432       1.24432       175.068       176.312    
  17  0.402499     -0.910063      -3.29043       3.29043       174.069       177.359    
  18  0.836443     -0.178597     -0.645736      0.645736       174.487       175.133    
  19  0.969979E-01  -2.33307      -8.43545       8.43545       176.040       184.475    
  20  0.178795      -1.72152      -6.22432       6.22432       173.514       179.739    
  21  0.140077      -1.96556      -7.10669       7.10669       173.592       180.698    
  22  0.375507     -0.979479      -3.54141       3.54141       174.331       177.872    
  23  0.831487     -0.184540     -0.667223      0.667223       176.135       176.803    
  24  0.815951     -0.203401     -0.735417      0.735417       166.873       167.608    
  25  0.468603     -0.757998      -2.74062       2.74062       174.483       177.224    
  26  0.677551     -0.389270      -1.40745       1.40745       175.167       176.575    
  27  0.169538      -1.77468      -6.41654       6.41654       177.340       183.757    
  28  0.950448     -0.508223E-01 -0.183753      0.183753       177.366       177.549    
  29  0.981726     -0.184427E-01 -0.666817E-01  0.666817E-01   175.329       175.395    
  30  0.442406     -0.815527      -2.94863       2.94863       173.028       175.976    
  31  0.531953     -0.631200      -2.28217       2.28217       177.542       179.824    
  32  0.363692      -1.01145      -3.65700       3.65700       177.589       181.246    
  33  0.144511E-01  -4.23698      -15.3193       15.3193       176.672       191.991    
  34  0.748780     -0.289310      -1.04603       1.04603       177.988       179.034    
  35  0.195075      -1.63437      -5.90924       5.90924       179.165       185.074    
  36  0.440325     -0.820241      -2.96567       2.96567       178.432       181.397    
  37  0.805864     -0.215841     -0.780395      0.780395       172.968       173.748    
  38  0.921415     -0.818451E-01 -0.295920      0.295920       178.392       178.688    
  39  0.296293      -1.21641      -4.39804       4.39804       174.838       179.236    
  40  0.645874E-01  -2.73974      -9.90581       9.90581       173.585       183.490    
  41  0.488279     -0.716868      -2.59191       2.59191       180.221       182.813    
  42  0.573105     -0.556686      -2.01276       2.01276       180.706       182.719    
  43  0.967891     -0.326356E-01 -0.117997      0.117997       175.475       175.593    
  44  0.780434E-01  -2.55049      -9.22157       9.22157       171.272       180.494    
  45  0.968859     -0.316363E-01 -0.114384      0.114384       174.808       174.922    
  46  0.858835     -0.152178     -0.550216      0.550216       175.715       176.265    
  47  0.968806     -0.316911E-01 -0.114583      0.114583       173.391       173.506    
  48  0.134500      -2.00619      -7.25358       7.25358       181.080       188.333    
  49  0.993707     -0.631323E-02 -0.228262E-01  0.228262E-01   180.949       180.971    
  50  0.300401      -1.20264      -4.34826       4.34826       183.092       187.440    
  51  0.166933      -1.79016      -6.47253       6.47253       180.389       186.861    
  52  0.917937     -0.856264E-01 -0.309592      0.309592       176.998       177.308    
  53  0.587259     -0.532289      -1.92455       1.92455       182.875       184.799    
  54  0.470076     -0.754861      -2.72928       2.72928       178.580       181.310    
  55  0.256936      -1.35893      -4.91335       4.91335       183.752       188.666    
  56  0.723917     -0.323079      -1.16813       1.16813       177.621       178.789    
  57  0.294593      -1.22216      -4.41885       4.41885       183.429       187.848    
  58  0.700842     -0.355473      -1.28525       1.28525       184.490       185.775    
  59  0.845975     -0.167265     -0.604765      0.604765       184.883       185.487    
  60  0.690580     -0.370224      -1.33858       1.33858       184.706       186.044    
  61  0.413361     -0.883435      -3.19415       3.19415       179.763       182.957    
  62  0.950705     -0.505510E-01 -0.182773      0.182773       182.432       182.615    
  63  0.455802     -0.785697      -2.84077       2.84077       184.313       187.154    
  64  0.937099     -0.649663E-01 -0.234892      0.234892       186.665       186.900    
  65  0.872489     -0.136405     -0.493186      0.493186       183.165       183.659    
  66  0.159694      -1.83449      -6.63281       6.63281       179.665       186.298    
  67  0.518082E-01  -2.96021      -10.7029       10.7029       186.821       197.524    
  68  0.786285     -0.240436     -0.869323      0.869323       187.470       188.340    
  69  0.564461     -0.571885      -2.06771       2.06771       175.800       177.868    
  70  0.593490     -0.521735      -1.88639       1.88639       189.670       191.556    
  71  0.627696     -0.465699      -1.68379       1.68379       184.071       185.755    
  72  0.333151      -1.09916      -3.97413       3.97413       175.545       179.519    
loop,thermsimp(1:2)       17   2.58679       5.11293    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    400        172.69          0.84          1.11         25.42          0.09          0.05         27.52
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       17
neval is:      399
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       18
neval is:      399


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      399     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -2.57464       2.57464       166.873       169.447    
   2  0.486668     -0.720173      -2.60386       2.60386       169.047       171.651    
   3  0.319995E-01  -3.44203      -12.4450       12.4450       168.270       180.715    
   4  0.957863     -0.430503E-01 -0.155653      0.155653       171.815       171.971    
   5  0.713202E-01  -2.64058      -9.54728       9.54728       173.391       182.939    
   6  0.677570     -0.389242      -1.40735       1.40735       172.968       174.375    
   7  0.533853     -0.627634      -2.26928       2.26928       172.867       175.137    
   8  0.963967     -0.366984E-01 -0.132687      0.132687       173.636       173.769    
   9  0.590118     -0.527432      -1.90699       1.90699       172.127       174.034    
  10  0.102350      -2.27936      -8.24126       8.24126       173.455       181.697    
  11  0.313487      -1.16000      -4.19409       4.19409       173.042       177.236    
  12  0.876181     -0.132183     -0.477920      0.477920       174.808       175.286    
  13  0.780541     -0.247768     -0.895831      0.895831       171.506       172.402    
  14  0.222922      -1.50093      -5.42678       5.42678       174.487       179.914    
  15  0.913991     -0.899351E-01 -0.325170      0.325170       175.329       175.654    
  16  0.493176     -0.706888      -2.55583       2.55583       175.475       178.031    
  17  0.884766     -0.122432     -0.442666      0.442666       173.028       173.470    
  18  0.576549E-01  -2.85328      -10.3163       10.3163       175.715       186.031    
  19  0.398597     -0.919804      -3.32565       3.32565       175.068       178.394    
  20  0.980633     -0.195573E-01 -0.707114E-01  0.707114E-01   175.167       175.238    
  21  0.304985      -1.18749      -4.29350       4.29350       176.135       180.429    
  22  0.628666     -0.464156      -1.67820       1.67820       171.708       173.387    
  23  0.367895     -0.999957      -3.61545       3.61545       172.255       175.870    
  24  0.442302     -0.815762      -2.94948       2.94948       174.483       177.433    
  25  0.656121     -0.421410      -1.52365       1.52365       176.998       178.522    
  26  0.229893      -1.47014      -5.31544       5.31544       174.069       179.384    
  27  0.475469     -0.743453      -2.68803       2.68803       177.366       180.054    
  28  0.801985     -0.220665     -0.797838      0.797838       172.252       173.050    
  29  0.454630     -0.788272      -2.85008       2.85008       175.800       178.650    
  30  0.858022     -0.153126     -0.553642      0.553642       174.331       174.884    
  31  0.692704     -0.367153      -1.32748       1.32748       173.561       174.889    
  32  0.466274     -0.762981      -2.75864       2.75864       178.392       181.150    
  33  0.682446     -0.382072      -1.38142       1.38142       177.621       179.003    
  34  0.660760     -0.414365      -1.49818       1.49818       177.988       179.486    
  35  0.957519     -0.434092E-01 -0.156951      0.156951       174.838       174.995    
  36  0.108167      -2.22408      -8.04139       8.04139       175.545       183.587    
  37  0.846378     -0.166789     -0.603044      0.603044       173.514       174.118    
  38  0.621158E-01  -2.77876      -10.0469       10.0469       177.542       187.589    
  39  0.988945E-01  -2.31370      -8.36543       8.36543       171.272       179.638    
  40  0.253472      -1.37250      -4.96243       4.96243       173.592       178.554    
  41  0.915015     -0.888152E-01 -0.321121      0.321121       180.949       181.270    
  42  0.662342     -0.411973      -1.48953       1.48953       177.589       179.079    
  43  0.210223      -1.55959      -5.63886       5.63886       178.580       184.219    
  44  0.141043      -1.95869      -7.08187       7.08187       178.432       185.514    
  45  0.839834     -0.174551     -0.631109      0.631109       172.139       172.770    
  46  0.132358      -2.02225      -7.31164       7.31164       174.449       181.761    
  47  0.129895E-01  -4.34361      -15.7048       15.7048       182.432       198.137    
  48  0.795497     -0.228788     -0.827207      0.827207       180.706       181.534    
  49  0.547485     -0.602421      -2.17812       2.17812       180.221       182.400    
  50  0.137643      -1.98309      -7.17007       7.17007       179.763       186.933    
  51  0.603188     -0.505526      -1.82778       1.82778       173.585       175.412    
  52  0.394039     -0.931305      -3.36723       3.36723       183.165       186.533    
  53  0.777307     -0.251920     -0.910843      0.910843       177.340       178.251    
  54  0.946969     -0.544893E-01 -0.197012      0.197012       176.040       176.237    
  55  0.137504      -1.98410      -7.17372       7.17372       182.875       190.048    
  56  0.712611     -0.338820      -1.22504       1.22504       179.165       180.390    
  57  0.274991      -1.29102      -4.66780       4.66780       184.883       189.550    
  58  0.847791     -0.165121     -0.597014      0.597014       184.071       184.668    
  59  0.107545      -2.22984      -8.06224       8.06224       184.490       192.552    
  60  0.224670      -1.49312      -5.39854       5.39854       184.706       190.104    
  61  0.827554E-01  -2.49187      -9.00961       9.00961       179.665       188.675    
  62  0.467473     -0.760413      -2.74935       2.74935       180.389       183.138    
  63  0.746927     -0.291788      -1.05499       1.05499       186.665       187.720    
  64  0.346805E-01  -3.36158      -12.1541       12.1541       184.313       196.467    
  65  0.900153     -0.105190     -0.380326      0.380326       183.092       183.472    
  66  0.136291      -1.99296      -7.20577       7.20577       183.429       190.635    
  67  0.971712     -0.286957E-01 -0.103752      0.103752       181.080       181.183    
  68  0.116648      -2.14860      -7.76848       7.76848       187.470       195.239    
  69  0.675516E-01  -2.69486      -9.74356       9.74356       183.752       193.496    
  70  0.354044      -1.03833      -3.75421       3.75421       189.670       193.424    
  71  0.480723     -0.732464      -2.64830       2.64830       176.672       179.320    
  72  0.814966     -0.204609     -0.739787      0.739787       172.689       173.429    
loop,thermsimp(1:2)       18   2.57464       2.60386    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    401        178.43          0.84          1.11         25.04          0.16          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    178.43        1.019     -1.302      1.914     -102.6     0.9172    
                     -0.6652      1.794     -99.70      3.501     0.1567    
                       2.052     -1.490      1.930      0.000     -40.00    
                      -1.558      0.000      0.000      0.000     -1.221    

                      -2.500     0.3173E+05 0.3244E+05  0.000      0.000    
                     -0.5672     -6.204     -4.471     -7.681      4.363    
                      -14.37     -3.136      1573.      0.000      623.0    

                      -1679.      8519.     -1113.     0.6835E+05  1316.    
                       4939.    -0.7952E-02-0.1600E-02  0.000     0.3341E-01
                     -0.2867E-01 0.2096E-01 0.2403E-01 0.2271E-01 0.9995E-02

                     -0.1309    -0.9446      0.000    -0.1470E-01 0.3470E-03
                       0.000    -0.2579E-01-0.2207E-01-0.1067E-01-0.6925E-02
                      0.4373E-02 0.1473E-02-0.1418     -1.109      0.000    

                     -0.4668E-01-0.3130    -0.5841    -0.5654    -0.6051E-01
                      0.1920      8.971      8.806     -5192.     -4.000    
                     -0.4342    -0.6084      9.022      8.791     -5580.    

                      -4.000     0.1528    -0.7042      8.931      8.845    
                      -4046.     -7.000    -0.3188    -0.6808      8.996    
                       8.822     -5605.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    178.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       18
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       19
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      400     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -6.73739       6.73739       166.873       173.610    
   2  0.881882     -0.125697     -0.454472      0.454472       169.047       169.502    
   3  0.908319     -0.961592E-01 -0.347674      0.347674       171.815       172.163    
   4  0.732380     -0.311455      -1.12610       1.12610       171.506       172.632    
   5  0.367412      -1.00127      -3.62020       3.62020       172.139       175.760    
   6  0.624330     -0.471077      -1.70323       1.70323       172.252       173.956    
   7  0.833858     -0.181693     -0.656929      0.656929       171.708       172.365    
   8  0.194603E-02  -6.24197      -22.5685       22.5685       172.689       195.258    
   9  0.995416     -0.459497E-02 -0.166136E-01  0.166136E-01   173.028       173.044    
  10  0.665599     -0.407068      -1.47180       1.47180       173.636       175.108    
  11  0.747574     -0.290922      -1.05186       1.05186       172.127       173.179    
  12  0.539692     -0.616756      -2.22995       2.22995       173.514       175.744    
  13  0.958323     -0.425700E-01 -0.153916      0.153916       172.968       173.122    
  14  0.111027      -2.19798      -7.94705       7.94705       174.331       182.278    
  15  0.520965     -0.652072      -2.35763       2.35763       173.561       175.919    
  16  0.177207E-01  -4.03302      -14.5818       14.5818       174.838       189.420    
  17  0.860365     -0.150398     -0.543782      0.543782       172.867       173.411    
  18  0.383700     -0.957895      -3.46337       3.46337       175.167       178.630    
  19  0.524904     -0.644539      -2.33040       2.33040       174.808       177.138    
  20  0.589629     -0.528262      -1.90999       1.90999       173.585       175.495    
  21  0.125125      -2.07844      -7.51483       7.51483       175.329       182.843    
  22  0.154207      -1.86946      -6.75923       6.75923       172.255       179.014    
  23  0.752747     -0.284026      -1.02693       1.02693       176.040       177.067    
  24  0.551286     -0.595501      -2.15310       2.15310       173.042       175.195    
  25  0.733343     -0.310142      -1.12135       1.12135       174.483       175.605    
  26  0.904985     -0.998368E-01 -0.360971      0.360971       175.475       175.836    
  27  0.987632     -0.124455E-01 -0.449982E-01  0.449982E-01   177.340       177.385    
  28  0.228587      -1.47584      -5.33604       5.33604       175.068       180.404    
  29  0.384883     -0.954815      -3.45224       3.45224       176.998       180.450    
  30  0.781910     -0.246015     -0.889494      0.889494       173.592       174.481    
  31  0.402051E-02  -5.51635      -19.9449       19.9449       175.800       195.745    
  32  0.880575     -0.127180     -0.459835      0.459835       177.621       178.081    
  33  0.427180     -0.850550      -3.07525       3.07525       177.589       180.665    
  34  0.613064     -0.489286      -1.76907       1.76907       176.672       178.441    
  35  0.529053     -0.636668      -2.30194       2.30194       174.069       176.371    
  36  0.973505     -0.268519E-01 -0.970861E-01  0.970861E-01   177.988       178.085    
  37  0.889868     -0.116682     -0.421877      0.421877       171.272       171.694    
  38  0.133989      -2.01000      -7.26735       7.26735       174.487       181.754    
  39  0.289828      -1.23847      -4.47781       4.47781       177.366       181.843    
  40  0.724995     -0.321591      -1.16275       1.16275       179.165       180.328    
  41  0.547932     -0.601605      -2.17517       2.17517       176.135       178.310    
  42  0.608240E-01  -2.79977      -10.1229       10.1229       168.270       178.393    
  43  0.481259E-01  -3.03393      -10.9695       10.9695       178.392       189.361    
  44  0.356843      -1.03046      -3.72573       3.72573       181.080       184.805    
  45  0.417411     -0.873685      -3.15890       3.15890       180.949       184.108    
  46  0.918903     -0.845742E-01 -0.305787      0.305787       180.706       181.012    
  47  0.852285     -0.159834     -0.577897      0.577897       173.455       174.033    
  48  0.744864     -0.294553      -1.06499       1.06499       174.449       175.514    
  49  0.128521      -2.05166      -7.41801       7.41801       180.221       187.639    
  50  0.484639     -0.724351      -2.61897       2.61897       173.391       176.010    
  51  0.478847     -0.736375      -2.66244       2.66244       180.389       183.051    
  52  0.557656     -0.584013      -2.11156       2.11156       183.092       185.203    
  53  0.799673     -0.223552     -0.808275      0.808275       175.545       176.353    
  54  0.734793     -0.308167      -1.11421       1.11421       178.580       179.694    
  55  0.306231      -1.18342      -4.27876       4.27876       184.071       188.350    
  56  0.286852      -1.24879      -4.51513       4.51513       178.432       182.947    
  57  0.731298     -0.312934      -1.13145       1.13145       175.715       176.846    
  58  0.681466     -0.383509      -1.38662       1.38662       183.165       184.552    
  59  0.246139      -1.40186      -5.06857       5.06857       179.763       184.832    
  60  0.339728      -1.07961      -3.90344       3.90344       177.542       181.445    
  61  0.740009     -0.301093      -1.08863       1.08863       186.665       187.754    
  62  0.923584     -0.794938E-01 -0.287418      0.287418       179.665       179.952    
  63  0.108454      -2.22143      -8.03183       8.03183       184.883       192.915    
  64  0.658643     -0.417574      -1.50978       1.50978       182.875       184.384    
  65  0.399262     -0.918138      -3.31962       3.31962       184.706       188.026    
  66  0.826271     -0.190833     -0.689975      0.689975       183.429       184.119    
  67  0.162727      -1.81568      -6.56479       6.56479       184.490       191.055    
  68  0.597317     -0.515307      -1.86315       1.86315       189.670       191.533    
  69  0.441859     -0.816765      -2.95310       2.95310       183.752       186.705    
  70  0.733350     -0.310132      -1.12132       1.12132       187.470       188.592    
  71  0.897038     -0.108657     -0.392861      0.392861       184.313       184.706    
  72  0.575144     -0.553135      -1.99992       1.99992       178.427       180.427    
loop,thermsimp(1:2)       19   6.73739      0.454472    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    402        173.02          0.84          1.11         25.07          0.20          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       19
neval is:      401
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       20
neval is:      401


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      401     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -4.69690       4.69690       169.047       173.744    
   2  0.284829      -1.25587      -4.54072       4.54072       171.272       175.813    
   3  0.422534E-01  -3.16407      -11.4400       11.4400       171.815       183.255    
   4  0.788018E-01  -2.54082      -9.18660       9.18660       171.708       180.895    
   5  0.396626E-01  -3.22735      -11.6688       11.6688       171.506       183.174    
   6  0.412432     -0.885684      -3.20228       3.20228       173.028       176.230    
   7  0.390866     -0.939390      -3.39646       3.39646       172.968       176.364    
   8  0.853334     -0.158604     -0.573449      0.573449       172.127       172.701    
   9  0.506127     -0.680968      -2.46211       2.46211       172.867       175.329    
  10  0.254200      -1.36963      -4.95206       4.95206       166.873       171.825    
  11  0.643116     -0.441430      -1.59604       1.59604       172.252       173.849    
  12  0.897721     -0.107896     -0.390110      0.390110       173.455       173.845    
  13  0.830899     -0.185247     -0.669781      0.669781       173.592       174.261    
  14  0.357312      -1.02915      -3.72099       3.72099       173.636       177.357    
  15  0.525942     -0.642564      -2.32326       2.32326       173.042       175.365    
  16  0.742929     -0.297155      -1.07439       1.07439       173.585       174.659    
  17  0.970959     -0.294711E-01 -0.106556      0.106556       174.449       174.556    
  18  0.235894      -1.44437      -5.22228       5.22228       174.483       179.706    
  19  0.723381E-01  -2.62640      -9.49604       9.49604       173.514       183.011    
  20  0.190915      -1.65593      -5.98718       5.98718       172.139       178.127    
  21  0.524670     -0.644986      -2.33202       2.33202       175.475       177.807    
  22  0.536043     -0.623540      -2.25448       2.25448       173.561       175.816    
  23  0.281730      -1.26681      -4.58027       4.58027       173.391       177.972    
  24  0.747791     -0.290632      -1.05081       1.05081       175.545       176.596    
  25  0.255771      -1.36347      -4.92977       4.92977       174.069       178.999    
  26  0.194866      -1.63544      -5.91312       5.91312       175.715       181.628    
  27  0.639630     -0.446865      -1.61569       1.61569       176.040       177.655    
  28  0.485808     -0.721941      -2.61025       2.61025       174.808       177.418    
  29  0.659147     -0.416809      -1.50702       1.50702       177.340       178.847    
  30  0.196308      -1.62807      -5.88646       5.88646       177.621       183.508    
  31  0.308964      -1.17453      -4.24663       4.24663       177.988       182.234    
  32  0.181287      -1.70768      -6.17429       6.17429       176.135       182.310    
  33  0.386667     -0.950191      -3.43552       3.43552       168.270       171.706    
  34  0.947825     -0.535853E-01 -0.193743      0.193743       176.672       176.866    
  35  0.699942     -0.356758      -1.28990       1.28990       175.167       176.457    
  36  0.208747      -1.56663      -5.66432       5.66432       172.255       177.919    
  37  0.717648     -0.331775      -1.19957       1.19957       178.580       179.780    
  38  0.734922     -0.307991      -1.11357       1.11357       179.665       180.779    
  39  0.862816     -0.147554     -0.533497      0.533497       179.165       179.698    
  40  0.677494     -0.389354      -1.40775       1.40775       175.068       176.476    
  41  0.829375     -0.187082     -0.676416      0.676416       178.427       179.104    
  42  0.393856     -0.931770      -3.36891       3.36891       176.998       180.367    
  43  0.447370     -0.804370      -2.90828       2.90828       177.589       180.498    
  44  0.485389     -0.722806      -2.61338       2.61338       180.706       183.320    
  45  0.522363     -0.649392      -2.34794       2.34794       177.542       179.890    
  46  0.740056E-01  -2.60361      -9.41364       9.41364       174.487       183.901    
  47  0.396252     -0.925705      -3.34698       3.34698       177.366       180.713    
  48  0.429395     -0.845378      -3.05655       3.05655       174.331       177.387    
  49  0.865472     -0.144480     -0.522384      0.522384       175.329       175.851    
  50  0.103085      -2.27220      -8.21539       8.21539       178.432       186.647    
  51  0.257437      -1.35698      -4.90630       4.90630       180.389       185.295    
  52  0.136338      -1.99262      -7.20452       7.20452       180.949       188.153    
  53  0.153596      -1.87343      -6.77359       6.77359       183.429       190.202    
  54  0.305406      -1.18611      -4.28851       4.28851       182.875       187.163    
  55  0.473340     -0.747942      -2.70426       2.70426       183.165       185.870    
  56  0.475010     -0.744419      -2.69153       2.69153       184.313       187.005    
  57  0.779699     -0.248847     -0.899734      0.899734       181.080       181.979    
  58  0.143364      -1.94237      -7.02283       7.02283       179.763       186.786    
  59  0.739804     -0.301371      -1.08964       1.08964       183.092       184.182    
  60  0.571699     -0.559143      -2.02164       2.02164       183.752       185.774    
  61  0.641967     -0.443219      -1.60251       1.60251       180.221       181.824    
  62  0.339882      -1.07916      -3.90181       3.90181       186.665       190.567    
  63  0.658898E-01  -2.71977      -9.83362       9.83362       184.706       194.540    
  64  0.441939     -0.816583      -2.95244       2.95244       184.071       187.024    
  65  0.470437     -0.754093      -2.72650       2.72650       187.470       190.197    
  66  0.190313      -1.65908      -5.99859       5.99859       178.392       184.390    
  67  0.901027     -0.104220     -0.376818      0.376818       174.838       175.215    
  68  0.860734     -0.149970     -0.542232      0.542232       184.490       185.032    
  69  0.456875     -0.783344      -2.83227       2.83227       189.670       192.502    
  70  0.846393     -0.166772     -0.602982      0.602982       184.883       185.486    
  71  0.697782E-01  -2.66243      -9.62631       9.62631       172.689       182.316    
  72  0.304557      -1.18890      -4.29858       4.29858       173.024       177.322    
loop,thermsimp(1:2)       20   4.69690       4.54072    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    403        177.81          0.84          1.11         25.04          0.15          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       20
neval is:      402
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       21
neval is:      402


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      402     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -9.97364       9.97364       168.270       178.244    
   2  0.713782     -0.337177      -1.21910       1.21910       166.873       168.092    
   3  0.851614     -0.160622     -0.580747      0.580747       172.127       172.708    
   4  0.721769     -0.326050      -1.17887       1.17887       169.047       170.226    
   5  0.954937     -0.461102E-01 -0.166716      0.166716       173.455       173.622    
   6  0.302532E-01  -3.49815      -12.6479       12.6479       172.252       184.900    
   7  0.942920E-01  -2.36136      -8.53775       8.53775       173.592       182.129    
   8  0.515750E-01  -2.96472      -10.7193       10.7193       174.449       185.168    
   9  0.612753     -0.489794      -1.77090       1.77090       173.585       175.355    
  10  0.758041     -0.277018      -1.00159       1.00159       174.838       175.839    
  11  0.530485E-01  -2.93655      -10.6174       10.6174       172.867       183.485    
  12  0.941175     -0.606258E-01 -0.219199      0.219199       173.042       173.261    
  13  0.167539      -1.78654      -6.45943       6.45943       171.272       177.732    
  14  0.738662E-01  -2.60550      -9.42046       9.42046       173.561       182.982    
  15  0.822155     -0.195827     -0.708033      0.708033       175.329       176.037    
  16  0.578765     -0.546859      -1.97723       1.97723       173.028       175.005    
  17  0.912739E-01  -2.39389      -8.65536       8.65536       172.968       181.623    
  18  0.949215     -0.521197E-01 -0.188444      0.188444       175.167       175.356    
  19  0.485124     -0.723351      -2.61535       2.61535       175.068       177.683    
  20  0.359009      -1.02441      -3.70386       3.70386       175.545       179.249    
  21  0.747559     -0.290942      -1.05193       1.05193       176.672       177.724    
  22  0.482847     -0.728056      -2.63237       2.63237       173.024       175.656    
  23  0.994301     -0.571526E-02 -0.206641E-01  0.206641E-01   173.636       173.657    
  24  0.937801     -0.642177E-01 -0.232186      0.232186       174.331       174.563    
  25  0.699033     -0.358058      -1.29460       1.29460       174.808       176.103    
  26  0.358162      -1.02677      -3.71240       3.71240       176.040       179.752    
  27  0.746418     -0.292470      -1.05745       1.05745       175.475       176.533    
  28  0.532195     -0.630744      -2.28052       2.28052       172.255       174.535    
  29  0.727066     -0.318738      -1.15243       1.15243       173.391       174.544    
  30  0.461510     -0.773252      -2.79577       2.79577       172.139       174.935    
  31  0.285112      -1.25487      -4.53713       4.53713       177.340       181.877    
  32  0.316830      -1.14939      -4.15574       4.15574       174.069       178.225    
  33  0.835731     -0.179448     -0.648814      0.648814       178.427       179.076    
  34  0.516269E-02  -5.26630      -19.0409       19.0409       179.165       198.206    
  35  0.309002      -1.17441      -4.24620       4.24620       174.483       178.730    
  36  0.770766     -0.260370     -0.941396      0.941396       178.580       179.522    
  37  0.878913     -0.129069     -0.466662      0.466662       177.542       178.009    
  38  0.981341E-01  -2.32142      -8.39334       8.39334       176.998       185.391    
  39  0.634060     -0.455612      -1.64731       1.64731       177.589       179.237    
  40  0.359967      -1.02174      -3.69422       3.69422       177.366       181.060    
  41  0.480002     -0.733964      -2.65373       2.65373       179.665       182.319    
  42  0.706923     -0.346834      -1.25401       1.25401       171.708       172.962    
  43  0.497828     -0.697501      -2.52189       2.52189       175.715       178.237    
  44  0.885038     -0.122125     -0.441554      0.441554       180.221       180.663    
  45  0.504752     -0.683689      -2.47195       2.47195       181.080       183.551    
  46  0.719262     -0.329529      -1.19145       1.19145       177.988       179.179    
  47  0.516359     -0.660954      -2.38975       2.38975       176.135       178.525    
  48  0.584389E-01  -2.83977      -10.2675       10.2675       172.689       182.957    
  49  0.768960E-01  -2.56530      -9.27512       9.27512       173.514       182.790    
  50  0.253658      -1.37177      -4.95977       4.95977       171.506       176.465    
  51  0.451822     -0.794468      -2.87248       2.87248       171.815       174.688    
  52  0.816822     -0.202334     -0.731560      0.731560       180.706       181.438    
  53  0.774668     -0.255321     -0.923140      0.923140       177.621       178.544    
  54  0.528070     -0.638526      -2.30866       2.30866       174.487       176.796    
  55  0.367170      -1.00193      -3.62258       3.62258       183.092       186.714    
  56  0.960919E-01  -2.34245      -8.46938       8.46938       178.392       186.861    
  57  0.621616     -0.475432      -1.71898       1.71898       184.490       186.209    
  58  0.678193     -0.388324      -1.40403       1.40403       180.389       181.793    
  59  0.400445E-01  -3.21776      -11.6342       11.6342       184.883       196.517    
  60  0.643930     -0.440165      -1.59146       1.59146       183.752       185.344    
  61  0.695390     -0.363282      -1.31348       1.31348       183.165       184.479    
  62  0.669334E-01  -2.70406      -9.77680       9.77680       178.432       188.209    
  63  0.850395E-01  -2.46464      -8.91117       8.91117       179.763       188.674    
  64  0.972359     -0.280307E-01 -0.101348      0.101348       184.313       184.414    
  65  0.994658     -0.535647E-02 -0.193669E-01  0.193669E-01   184.071       184.091    
  66  0.881217     -0.126451     -0.457198      0.457198       182.875       183.332    
  67  0.460812     -0.774766      -2.80125       2.80125       180.949       183.750    
  68  0.579353     -0.545843      -1.97356       1.97356       187.470       189.444    
  69  0.189905      -1.66123      -6.00636       6.00636       183.429       189.435    
  70  0.963487     -0.371960E-01 -0.134486      0.134486       186.665       186.800    
  71  0.281063      -1.26917      -4.58884       4.58884       189.670       194.259    
  72  0.113474      -2.17618      -7.86821       7.86821       177.810       185.678    
loop,thermsimp(1:2)       21   9.97364       1.21910    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    404        182.41          0.84          1.11         25.06          0.19          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    182.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       21
neval is:      403
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       22
neval is:      403


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      403     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -3.01084       3.01084       166.873       169.884    
   2  0.380177E-01  -3.26970      -11.8220       11.8220       169.047       180.869    
   3  0.198795      -1.61548      -5.84094       5.84094       172.127       177.968    
   4  0.880944E-01  -2.42935      -8.78356       8.78356       171.708       180.492    
   5  0.279105      -1.27617      -4.61412       4.61412       173.042       177.656    
   6  0.379482     -0.968948      -3.50334       3.50334       173.455       176.959    
   7  0.510142     -0.673065      -2.43354       2.43354       173.636       176.070    
   8  0.869007     -0.140404     -0.507645      0.507645       172.255       172.763    
   9  0.905256     -0.995378E-01 -0.359889      0.359889       173.391       173.751    
  10  0.587200     -0.532390      -1.92491       1.92491       174.331       176.255    
  11  0.309008      -1.17439      -4.24613       4.24613       171.815       176.062    
  12  0.210718      -1.55723      -5.63034       5.63034       172.139       177.770    
  13  0.362152      -1.01569      -3.67234       3.67234       173.028       176.700    
  14  0.465452     -0.764747      -2.76502       2.76502       173.585       176.350    
  15  0.155270E-01  -4.16518      -15.0596       15.0596       175.167       190.227    
  16  0.632166     -0.458603      -1.65813       1.65813       173.024       174.682    
  17  0.171028      -1.76593      -6.38491       6.38491       174.838       181.223    
  18  0.926401     -0.764482E-01 -0.276407      0.276407       175.329       175.605    
  19  0.130449      -2.03678      -7.36418       7.36418       174.808       182.172    
  20  0.536069     -0.623492      -2.25430       2.25430       171.506       173.760    
  21  0.128128      -2.05472      -7.42907       7.42907       175.475       182.904    
  22  0.729730     -0.315081      -1.13921       1.13921       174.487       175.626    
  23  0.982387     -0.177702E-01 -0.642500E-01  0.642500E-01   175.068       175.132    
  24  0.707707     -0.345726      -1.25001       1.25001       176.672       177.922    
  25  0.643878     -0.440245      -1.59175       1.59175       171.272       172.864    
  26  0.136721      -1.98982      -7.19439       7.19439       177.542       184.736    
  27  0.146320      -1.92196      -6.94906       6.94906       174.069       181.018    
  28  0.214169      -1.54099      -5.57162       5.57162       175.715       181.287    
  29  0.774008     -0.256172     -0.926219      0.926219       168.270       169.196    
  30  0.487333     -0.718808      -2.59893       2.59893       176.135       178.734    
  31  0.594481E-01  -2.82265      -10.2056       10.2056       177.621       187.827    
  32  0.305368      -1.18624      -4.28896       4.28896       174.483       178.772    
  33  0.206200      -1.57891      -5.70871       5.70871       178.427       184.136    
  34  0.185235      -1.68613      -6.09638       6.09638       177.988       184.084    
  35  0.945154     -0.564077E-01 -0.203948      0.203948       177.589       177.793    
  36  0.657328     -0.419572      -1.51701       1.51701       175.545       177.062    
  37  0.932191     -0.702171E-01 -0.253877      0.253877       178.580       178.834    
  38  0.258055      -1.35458      -4.89764       4.89764       176.040       180.937    
  39  0.525568E-01  -2.94586      -10.6511       10.6511       180.221       190.873    
  40  0.692807     -0.367004      -1.32694       1.32694       177.366       178.692    
  41  0.691658     -0.368664      -1.33294       1.33294       180.706       182.039    
  42  0.163447      -1.81127      -6.54882       6.54882       172.968       179.516    
  43  0.462923     -0.770194      -2.78472       2.78472       180.389       183.174    
  44  0.758611     -0.276266     -0.998868      0.998868       177.340       178.339    
  45  0.278938      -1.27677      -4.61628       4.61628       173.592       178.208    
  46  0.726655     -0.319304      -1.15448       1.15448       179.665       180.820    
  47  0.288418      -1.24334      -4.49544       4.49544       173.514       178.010    
  48  0.640221     -0.445941      -1.61235       1.61235       172.689       174.302    
  49  0.531981     -0.631147      -2.28198       2.28198       173.561       175.843    
  50  0.494380     -0.704450      -2.54702       2.54702       182.875       185.422    
  51  0.765719     -0.266940     -0.965152      0.965152       172.867       173.832    
  52  0.274236      -1.29377      -4.67775       4.67775       181.080       185.757    
  53  0.946599     -0.548792E-01 -0.198422      0.198422       180.949       181.147    
  54  0.264711      -1.32912      -4.80557       4.80557       184.071       188.877    
  55  0.129097      -2.04719      -7.40183       7.40183       184.313       191.715    
  56  0.217636      -1.52493      -5.51355       5.51355       183.165       188.679    
  57  0.430633     -0.842500      -3.04615       3.04615       172.252       175.299    
  58  0.307617      -1.17890      -4.26244       4.26244       174.449       178.712    
  59  0.137533      -1.98389      -7.17296       7.17296       183.752       190.925    
  60  0.560294     -0.579293      -2.09449       2.09449       176.998       179.092    
  61  0.531695     -0.631686      -2.28393       2.28393       177.810       180.094    
  62  0.259312      -1.34972      -4.88007       4.88007       184.490       189.370    
  63  0.928174     -0.745366E-01 -0.269495      0.269495       183.092       183.361    
  64  0.501730     -0.689694      -2.49366       2.49366       186.665       189.159    
  65  0.978765     -0.214635E-01 -0.776037E-01  0.776037E-01   178.392       178.469    
  66  0.977551     -0.227050E-01 -0.820924E-01  0.820924E-01   178.432       178.514    
  67  0.298331      -1.20955      -4.37326       4.37326       179.763       184.136    
  68  0.958356     -0.425363E-01 -0.153795      0.153795       183.429       183.583    
  69  0.140025      -1.96594      -7.10805       7.10805       187.470       194.578    
  70  0.204883      -1.58531      -5.73187       5.73187       189.670       195.402    
  71  0.408241     -0.895898      -3.23921       3.23921       184.883       188.122    
  72  0.552023     -0.594165      -2.14827       2.14827       182.406       184.554    
loop,thermsimp(1:2)       22   3.01084       11.8220    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    405        171.91          0.84          1.11         25.03          0.17          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    406        194.26          0.84          1.11         25.14          0.07          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    171.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       22
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       23
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      405     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -4.83108       4.83108       168.270       173.101    
   2  0.388449     -0.945595      -3.41890       3.41890       166.873       170.292    
   3  0.827051     -0.189889     -0.686565      0.686565       172.255       172.941    
   4  0.958395     -0.424951E-01 -0.153646      0.153646       171.272       171.426    
   5  0.125400      -2.07625      -7.50690       7.50690       173.391       180.898    
   6  0.524174     -0.645931      -2.33543       2.33543       171.506       173.841    
   7  0.783721     -0.243702     -0.881131      0.881131       172.867       173.748    
   8  0.183361      -1.69630      -6.13315       6.13315       172.689       178.822    
   9  0.122208      -2.10203      -7.60011       7.60011       173.024       180.624    
  10  0.913915     -0.900182E-01 -0.325470      0.325470       175.068       175.394    
  11  0.273776      -1.29545      -4.68382       4.68382       172.252       176.936    
  12  0.779874     -0.248622     -0.898920      0.898920       175.329       176.228    
  13  0.305314      -1.18641      -4.28960       4.28960       174.487       178.776    
  14  0.720732     -0.327488      -1.18407       1.18407       173.561       174.745    
  15  0.222329      -1.50360      -5.43641       5.43641       171.815       177.252    
  16  0.826299     -0.190798     -0.689851      0.689851       173.636       174.326    
  17  0.581574     -0.542017      -1.95972       1.95972       174.331       176.290    
  18  0.616258     -0.484089      -1.75028       1.75028       173.585       175.335    
  19  0.604230     -0.503801      -1.82154       1.82154       173.028       174.849    
  20  0.333333      -1.09861      -3.97216       3.97216       173.455       177.427    
  21  0.289888E-01  -3.54085      -12.8023       12.8023       175.545       188.347    
  22  0.396892     -0.924091      -3.34115       3.34115       173.042       176.383    
  23  0.910378     -0.938957E-01 -0.339490      0.339490       172.139       172.479    
  24  0.998355     -0.164683E-02 -0.595427E-02  0.595427E-02   177.589       177.595    
  25  0.735990     -0.306539      -1.10832       1.10832       176.672       177.780    
  26  0.779044     -0.249688     -0.902774      0.902774       172.127       173.030    
  27  0.498268     -0.696618      -2.51870       2.51870       173.514       176.033    
  28  0.693129     -0.366539      -1.32526       1.32526       173.592       174.917    
  29  0.691370     -0.369080      -1.33445       1.33445       177.340       178.675    
  30  0.519398     -0.655086      -2.36853       2.36853       178.392       180.760    
  31  0.365801      -1.00567      -3.63609       3.63609       178.432       182.068    
  32  0.352392      -1.04301      -3.77111       3.77111       177.366       181.137    
  33  0.176642      -1.73363      -6.26813       6.26813       174.449       180.717    
  34  0.982977     -0.171697E-01 -0.620788E-01  0.620788E-01   176.135       176.197    
  35  0.466781     -0.761894      -2.75471       2.75471       174.483       177.238    
  36  0.481130     -0.731617      -2.64524       2.64524       178.580       181.225    
  37  0.238852      -1.43191      -5.17723       5.17723       176.998       182.175    
  38  0.453247     -0.791318      -2.86109       2.86109       172.968       175.829    
  39  0.579188     -0.546129      -1.97459       1.97459       177.810       179.784    
  40  0.802776E-01  -2.52226      -9.11952       9.11952       171.708       180.828    
  41  0.819632     -0.198900     -0.719145      0.719145       179.665       180.384    
  42  0.917023     -0.866231E-01 -0.313195      0.313195       169.047       169.360    
  43  0.328296      -1.11384      -4.02721       4.02721       176.040       180.067    
  44  0.751681     -0.285443      -1.03205       1.03205       174.069       175.101    
  45  0.760454     -0.273840     -0.990097      0.990097       180.949       181.939    
  46  0.655053     -0.423039      -1.52954       1.52954       174.838       176.367    
  47  0.438192     -0.825097      -2.98323       2.98323       175.715       178.698    
  48  0.615984E-01  -2.78712      -10.0771       10.0771       180.706       190.783    
  49  0.373345     -0.985252      -3.56228       3.56228       174.808       178.370    
  50  0.173578      -1.75113      -6.33138       6.33138       175.475       181.807    
  51  0.787098     -0.239402     -0.865584      0.865584       180.389       181.254    
  52  0.476899     -0.740450      -2.67718       2.67718       183.092       185.769    
  53  0.267079      -1.32021      -4.77336       4.77336       183.429       188.202    
  54  0.328534E-01  -3.41570      -12.3498       12.3498       177.988       190.337    
  55  0.223376      -1.49890      -5.41942       5.41942       178.427       183.847    
  56  0.950133     -0.511529E-01 -0.184949      0.184949       179.763       179.948    
  57  0.802688     -0.219789     -0.794670      0.794670       182.406       183.200    
  58  0.687564     -0.374601      -1.35441       1.35441       177.542       178.896    
  59  0.389763     -0.942217      -3.40668       3.40668       182.875       186.281    
  60  0.828122     -0.188595     -0.681884      0.681884       181.080       181.761    
  61  0.447451     -0.804188      -2.90763       2.90763       177.621       180.529    
  62  0.132831      -2.01868      -7.29874       7.29874       184.883       192.181    
  63  0.217304E-01  -3.82904      -13.8443       13.8443       183.165       197.010    
  64  0.466508     -0.762480      -2.75683       2.75683       184.071       186.828    
  65  0.713806     -0.337144      -1.21898       1.21898       186.665       187.884    
  66  0.198949E-01  -3.91729      -14.1634       14.1634       184.490       198.653    
  67  0.532640     -0.629910      -2.27751       2.27751       175.167       177.445    
  68  0.788490     -0.237636     -0.859198      0.859198       180.221       181.081    
  69  0.603947     -0.504269      -1.82324       1.82324       183.752       185.576    
  70  0.150417      -1.89434      -6.84920       6.84920       184.313       191.162    
  71  0.504457     -0.684273      -2.47406       2.47406       187.470       189.944    
  72  0.893450     -0.112665     -0.407353      0.407353       171.909       172.316    
loop,thermsimp(1:2)       23   4.83108       3.41890    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    407        188.45          0.84          1.11         25.11          0.17          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       23
neval is:      406
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       24
neval is:      406


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      406     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -2.08063       2.08063       169.047       171.128    
   2  0.429755     -0.844539      -3.05352       3.05352       166.873       169.926    
   3  0.598807     -0.512815      -1.85414       1.85414       171.272       173.127    
   4  0.757798     -0.277339      -1.00275       1.00275       171.909       172.912    
   5  0.954130E-01  -2.34954      -8.49501       8.49501       172.139       180.634    
   6  0.968708E-01  -2.33438      -8.44019       8.44019       172.255       180.695    
   7  0.196924      -1.62494      -5.87513       5.87513       172.127       178.002    
   8  0.616654     -0.483447      -1.74795       1.74795       168.270       170.018    
   9  0.181969      -1.70392      -6.16070       6.16070       172.867       179.028    
  10  0.383918     -0.957326      -3.46131       3.46131       171.506       174.967    
  11  0.377012     -0.975478      -3.52695       3.52695       173.636       177.163    
  12  0.899192     -0.106259     -0.384189      0.384189       173.561       173.945    
  13  0.409833     -0.892005      -3.22514       3.22514       173.028       176.253    
  14  0.728621     -0.316601      -1.14470       1.14470       173.592       174.736    
  15  0.568233     -0.565224      -2.04363       2.04363       174.069       176.112    
  16  0.647091     -0.435269      -1.57376       1.57376       173.585       175.158    
  17  0.118896      -2.12951      -7.69946       7.69946       175.068       182.768    
  18  0.910801     -0.934313E-01 -0.337811      0.337811       172.968       173.305    
  19  0.484176     -0.725308      -2.62243       2.62243       173.514       176.137    
  20  0.327343      -1.11675      -4.03772       4.03772       176.135       180.173    
  21  0.674995     -0.393050      -1.42111       1.42111       175.329       176.750    
  22  0.234857      -1.44878      -5.23822       5.23822       174.331       179.569    
  23  0.800837     -0.222098     -0.803019      0.803019       174.838       175.641    
  24  0.619975     -0.478077      -1.72854       1.72854       173.042       174.770    
  25  0.578519     -0.547284      -1.97876       1.97876       172.252       174.231    
  26  0.837214     -0.177675     -0.642405      0.642405       174.483       175.126    
  27  0.935915     -0.662302E-01 -0.239462      0.239462       171.815       172.055    
  28  0.779751     -0.248781     -0.899493      0.899493       173.455       174.355    
  29  0.801557     -0.221199     -0.799769      0.799769       175.167       175.967    
  30  0.827533E-01  -2.49189      -9.00970       9.00970       177.589       186.599    
  31  0.640581     -0.445379      -1.61032       1.61032       176.672       178.282    
  32  0.226382      -1.48553      -5.37110       5.37110       174.808       180.179    
  33  0.198814E-01  -3.91797      -14.1658       14.1658       177.340       191.506    
  34  0.147003      -1.91730      -6.93220       6.93220       175.715       182.647    
  35  0.568592     -0.564592      -2.04134       2.04134       174.487       176.528    
  36  0.650717     -0.429680      -1.55355       1.55355       172.689       174.243    
  37  0.259092      -1.35057      -4.88314       4.88314       177.542       182.425    
  38  0.935898     -0.662490E-01 -0.239530      0.239530       177.810       178.049    
  39  0.702433     -0.353205      -1.27705       1.27705       179.763       181.040    
  40  0.622661     -0.473753      -1.71290       1.71290       176.040       177.753    
  41  0.546960     -0.603380      -2.18159       2.18159       179.665       181.847    
  42  0.883578     -0.123775     -0.447523      0.447523       177.621       178.069    
  43  0.728206E-02  -4.92234      -17.7972       17.7972       173.024       190.821    
  44  0.112001      -2.18925      -7.91546       7.91546       174.449       182.365    
  45  0.689494     -0.371797      -1.34427       1.34427       178.392       179.736    
  46  0.872629     -0.136244     -0.492606      0.492606       171.708       172.201    
  47  0.688489     -0.373256      -1.34955       1.34955       173.391       174.741    
  48  0.947843     -0.535662E-01 -0.193674      0.193674       180.221       180.415    
  49  0.294529      -1.22238      -4.41963       4.41963       177.366       181.785    
  50  0.717675E-01  -2.63432      -9.52468       9.52468       178.580       188.105    
  51  0.738094     -0.303684      -1.09800       1.09800       180.389       181.487    
  52  0.237514      -1.43753      -5.19754       5.19754       181.080       186.277    
  53  0.932770     -0.695962E-01 -0.251632      0.251632       175.475       175.727    
  54  0.973437     -0.269222E-01 -0.973400E-01  0.973400E-01   180.949       181.046    
  55  0.216069      -1.53216      -5.53968       5.53968       178.432       183.971    
  56  0.927621     -0.751319E-01 -0.271647      0.271647       176.998       177.270    
  57  0.882551     -0.124939     -0.451731      0.451731       182.406       182.857    
  58  0.958611     -0.422698E-01 -0.152831      0.152831       178.427       178.580    
  59  0.174241      -1.74732      -6.31761       6.31761       183.752       190.070    
  60  0.165969      -1.79595      -6.49346       6.49346       183.092       189.585    
  61  0.449805     -0.798942      -2.88866       2.88866       182.875       185.763    
  62  0.749166     -0.288795      -1.04417       1.04417       184.071       185.115    
  63  0.564353     -0.572075      -2.06840       2.06840       186.665       188.734    
  64  0.721233     -0.326792      -1.18155       1.18155       183.429       184.610    
  65  0.160496      -1.82949      -6.61470       6.61470       175.545       182.160    
  66  0.951367     -0.498557E-01 -0.180258      0.180258       187.470       187.651    
  67  0.392818     -0.934408      -3.37845       3.37845       177.988       181.366    
  68  0.502077     -0.689002      -2.49116       2.49116       180.706       183.198    
  69  0.414837     -0.879871      -3.18127       3.18127       184.313       187.494    
  70  0.954606     -0.464567E-01 -0.167969      0.167969       184.883       185.051    
  71  0.444045     -0.811830      -2.93526       2.93526       183.165       186.101    
  72  0.420207     -0.867007      -3.13476       3.13476       188.448       191.582    
loop,thermsimp(1:2)       24   2.08063       3.05352    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    408        184.49          0.84          1.11         25.36          0.17          0.05         27.55
Just calling func    0   0         27.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       24
neval is:      407
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       25
neval is:      407


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      407     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553      -1.01075       1.01075       166.873       167.883    
   2  0.693006     -0.366716      -1.32590       1.32590       168.270       169.596    
   3  0.647780     -0.434203      -1.56991       1.56991       169.047       170.617    
   4  0.895769     -0.110072     -0.397979      0.397979       171.815       172.213    
   5  0.775956     -0.253659     -0.917130      0.917130       171.708       172.626    
   6  0.891264     -0.115114     -0.416208      0.416208       171.909       172.325    
   7  0.553736     -0.591068      -2.13707       2.13707       171.272       173.409    
   8  0.646797     -0.435723      -1.57540       1.57540       172.968       174.543    
   9  0.646048     -0.436881      -1.57959       1.57959       173.561       175.141    
  10  0.160937      -1.82675      -6.60479       6.60479       172.252       178.857    
  11  0.840732     -0.173482     -0.627242      0.627242       172.689       173.316    
  12  0.377447     -0.974325      -3.52278       3.52278       173.455       176.978    
  13  0.214649      -1.53875      -5.56352       5.56352       173.592       179.155    
  14  0.424093     -0.857804      -3.10148       3.10148       173.391       176.493    
  15  0.693510     -0.365990      -1.32328       1.32328       173.042       174.365    
  16  0.252894      -1.37478      -4.97068       4.97068       171.506       176.476    
  17  0.765441     -0.267303     -0.966463      0.966463       174.483       175.450    
  18  0.481029     -0.731828      -2.64600       2.64600       173.585       176.231    
  19  0.211808      -1.55207      -5.61169       5.61169       174.838       180.449    
  20  0.616599E-01  -2.78612      -10.0735       10.0735       175.475       185.549    
  21  0.110259      -2.20492      -7.97212       7.97212       175.167       183.139    
  22  0.475319     -0.743769      -2.68918       2.68918       174.069       176.758    
  23  0.500411E-01  -2.99491      -10.8284       10.8284       173.514       184.343    
  24  0.126445      -2.06795      -7.47688       7.47688       173.028       180.505    
  25  0.693760     -0.365629      -1.32197       1.32197       174.487       175.809    
  26  0.876607E-01  -2.43428      -8.80141       8.80141       175.329       184.130    
  27  0.564718     -0.571429      -2.06606       2.06606       173.636       175.702    
  28  0.572706     -0.557383      -2.01528       2.01528       176.998       179.013    
  29  0.739618     -0.301621      -1.09054       1.09054       176.040       177.130    
  30  0.428028     -0.848566      -3.06808       3.06808       172.127       175.195    
  31  0.864224     -0.145923     -0.527600      0.527600       177.810       178.337    
  32  0.326884      -1.11815      -4.04279       4.04279       177.621       181.664    
  33  0.626295     -0.467933      -1.69186       1.69186       176.672       178.364    
  34  0.576680     -0.550467      -1.99027       1.99027       178.427       180.418    
  35  0.988375     -0.116929E-01 -0.422771E-01  0.422771E-01   172.867       172.910    
  36  0.834431     -0.181006     -0.654445      0.654445       174.331       174.985    
  37  0.944839     -0.567403E-01 -0.205151      0.205151       178.392       178.597    
  38  0.182182      -1.70275      -6.15647       6.15647       176.135       182.292    
  39  0.882984     -0.124449     -0.449957      0.449957       174.808       175.258    
  40  0.756839     -0.278604      -1.00732       1.00732       180.221       181.229    
  41  0.530350     -0.634218      -2.29308       2.29308       172.139       174.432    
  42  0.257866      -1.35531      -4.90028       4.90028       172.255       177.155    
  43  0.575794     -0.552006      -1.99584       1.99584       179.763       181.759    
  44  0.907029     -0.975811E-01 -0.352815      0.352815       180.949       181.301    
  45  0.385513     -0.953180      -3.44632       3.44632       177.988       181.434    
  46  0.352081      -1.04389      -3.77431       3.77431       180.389       184.163    
  47  0.587153     -0.532470      -1.92520       1.92520       177.366       179.291    
  48  0.748916     -0.289129      -1.04538       1.04538       179.665       180.710    
  49  0.152024      -1.88371      -6.81077       6.81077       175.545       182.356    
  50  0.501193     -0.690765      -2.49753       2.49753       174.449       176.947    
  51  0.743551     -0.296318      -1.07137       1.07137       177.542       178.613    
  52  0.336569      -1.08895      -3.93722       3.93722       175.715       179.652    
  53  0.523746     -0.646748      -2.33839       2.33839       175.068       177.406    
  54  0.471323     -0.752211      -2.71970       2.71970       182.406       185.125    
  55  0.131680E-01  -4.32996      -15.6554       15.6554       180.706       196.362    
  56  0.410982     -0.889205      -3.21502       3.21502       178.432       181.647    
  57  0.476445E-01  -3.04399      -11.0059       11.0059       183.429       194.435    
  58  0.734680     -0.308321      -1.11477       1.11477       184.883       185.997    
  59  0.426979     -0.851021      -3.07696       3.07696       184.071       187.148    
  60  0.196810      -1.62552      -5.87724       5.87724       182.875       188.752    
  61  0.317540      -1.14715      -4.14765       4.14765       183.165       187.313    
  62  0.616579     -0.483568      -1.74839       1.74839       181.080       182.828    
  63  0.828245     -0.188447     -0.681349      0.681349       177.589       178.271    
  64  0.996165     -0.384219E-02 -0.138918E-01  0.138918E-01   184.313       184.327    
  65  0.804642     -0.217357     -0.785879      0.785879       187.470       188.256    
  66  0.407370     -0.898034      -3.24694       3.24694       178.580       181.827    
  67  0.192241      -1.64900      -5.96215       5.96215       186.665       192.627    
  68  0.393311     -0.933154      -3.37392       3.37392       183.092       186.466    
  69  0.393016     -0.933905      -3.37663       3.37663       183.752       187.129    
  70  0.593931     -0.520992      -1.88370       1.88370       173.024       174.908    
  71  0.307970      -1.17775      -4.25829       4.25829       177.340       181.598    
  72  0.858655E-02  -4.75756      -17.2015       17.2015       184.490       201.691    
loop,thermsimp(1:2)       25   1.01075       1.32590    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    409        188.45          0.84          1.11         25.09          0.10          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       25
neval is:      408
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       26
neval is:      408


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      408     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -3.22464       3.22464       166.873       170.097    
   2  0.389332     -0.943323      -3.41069       3.41069       168.270       171.681    
   3  0.765657     -0.267021     -0.965443      0.965443       169.047       170.013    
   4  0.505025     -0.683148      -2.46999       2.46999       171.815       174.285    
   5  0.681598     -0.383316      -1.38592       1.38592       171.909       173.295    
   6  0.895525     -0.110345     -0.398964      0.398964       171.708       172.107    
   7  0.540074     -0.616050      -2.22739       2.22739       172.867       175.095    
   8  0.125370      -2.07648      -7.50775       7.50775       172.689       180.197    
   9  0.306095      -1.18386      -4.28037       4.28037       171.272       175.553    
  10  0.898677     -0.106831     -0.386260      0.386260       173.042       173.428    
  11  0.355276      -1.03486      -3.74165       3.74165       172.139       175.881    
  12  0.855641     -0.155905     -0.563690      0.563690       172.968       173.531    
  13  0.894333E-01  -2.41426      -8.72902       8.72902       173.024       181.753    
  14  0.291038      -1.23430      -4.46275       4.46275       174.331       178.793    
  15  0.848476E-01  -2.46690      -8.91933       8.91933       173.561       182.481    
  16  0.655469     -0.422404      -1.52725       1.52725       172.127       173.655    
  17  0.181028      -1.70910      -6.17945       6.17945       174.808       180.988    
  18  0.801189     -0.221659     -0.801431      0.801431       174.483       175.285    
  19  0.659702     -0.415967      -1.50397       1.50397       173.636       175.140    
  20  0.500397     -0.692354      -2.50328       2.50328       174.487       176.990    
  21  0.901964     -0.103181     -0.373062      0.373062       173.585       173.958    
  22  0.331186      -1.10508      -3.99552       3.99552       171.506       175.501    
  23  0.572805E-01  -2.85979      -10.3399       10.3399       173.391       183.731    
  24  0.511624     -0.670164      -2.42305       2.42305       174.069       176.492    
  25  0.953295     -0.478312E-01 -0.172939      0.172939       174.449       174.622    
  26  0.454382     -0.788818      -2.85205       2.85205       173.455       176.307    
  27  0.697217E-01  -2.66324      -9.62924       9.62924       176.040       185.669    
  28  0.269239      -1.31216      -4.74425       4.74425       172.255       176.999    
  29  0.855725     -0.155806     -0.563334      0.563334       175.068       175.631    
  30  0.408332E-02  -5.50085      -19.8889       19.8889       177.589       197.478    
  31  0.926366     -0.764862E-01 -0.276544      0.276544       177.810       178.086    
  32  0.356547      -1.03129      -3.72873       3.72873       176.672       180.401    
  33  0.550351     -0.597200      -2.15924       2.15924       178.392       180.551    
  34  0.475063     -0.744308      -2.69112       2.69112       177.542       180.233    
  35  0.420107     -0.867246      -3.13562       3.13562       172.252       175.388    
  36  0.521034     -0.651939      -2.35715       2.35715       176.998       179.355    
  37  0.979034     -0.211889E-01 -0.766107E-01  0.766107E-01   173.592       173.668    
  38  0.599858     -0.511062      -1.84780       1.84780       177.366       179.213    
  39  0.800850     -0.222082     -0.802960      0.802960       175.715       176.518    
  40  0.823189     -0.194570     -0.703488      0.703488       178.427       179.131    
  41  0.709226E-01  -2.64617      -9.56750       9.56750       174.838       184.405    
  42  0.555654     -0.587609      -2.12456       2.12456       173.028       175.152    
  43  0.920379     -0.829696E-01 -0.299985      0.299985       179.665       179.965    
  44  0.904537     -0.100332     -0.362760      0.362760       180.221       180.584    
  45  0.990568     -0.947695E-02 -0.342649E-01  0.342649E-01   180.949       180.983    
  46  0.647203     -0.435096      -1.57313       1.57313       177.988       179.561    
  47  0.634714     -0.454580      -1.64358       1.64358       177.340       178.984    
  48  0.771196     -0.259812     -0.939379      0.939379       178.432       179.371    
  49  0.857464     -0.153776     -0.555995      0.555995       177.621       178.177    
  50  0.816462     -0.202774     -0.733152      0.733152       179.763       180.496    
  51  0.233603      -1.45413      -5.25757       5.25757       178.580       183.838    
  52  0.554523     -0.589647      -2.13193       2.13193       176.135       178.267    
  53  0.217770      -1.52432      -5.51132       5.51132       175.545       181.056    
  54  0.795785     -0.228426     -0.825897      0.825897       181.080       181.905    
  55  0.458481     -0.779836      -2.81958       2.81958       175.167       177.987    
  56  0.725204     -0.321302      -1.16170       1.16170       175.329       176.490    
  57  0.962495     -0.382260E-01 -0.138210      0.138210       180.389       180.527    
  58  0.652668     -0.426687      -1.54273       1.54273       184.313       185.856    
  59  0.562055     -0.576156      -2.08315       2.08315       173.514       175.598    
  60  0.620063     -0.477935      -1.72802       1.72802       182.406       184.134    
  61  0.487741     -0.717971      -2.59590       2.59590       175.475       178.071    
  62  0.561234     -0.577617      -2.08844       2.08844       184.883       186.971    
  63  0.758662     -0.276198     -0.998625      0.998625       183.092       184.091    
  64  0.144869      -1.93192      -6.98508       6.98508       183.752       190.737    
  65  0.572142     -0.558368      -2.01884       2.01884       184.071       186.090    
  66  0.105888      -2.24537      -8.11839       8.11839       183.165       191.284    
  67  0.469880     -0.755279      -2.73079       2.73079       187.470       190.201    
  68  0.268533      -1.31478      -4.75373       4.75373       182.875       187.628    
  69  0.807102     -0.214305     -0.774843      0.774843       186.665       187.440    
  70  0.522324     -0.649467      -2.34822       2.34822       183.429       185.777    
  71  0.732040     -0.311921      -1.12778       1.12778       180.706       181.834    
  72  0.136731      -1.98974      -7.19410       7.19410       188.448       195.642    
loop,thermsimp(1:2)       26   3.22464       3.41069    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    410        171.32          0.84          1.11         25.16          0.04          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    171.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       26
neval is:      409
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       27
neval is:      409


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      409     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -2.66265       2.66265       169.047       171.710    
   2  0.431280     -0.840999      -3.04072       3.04072       166.873       169.913    
   3  0.231120      -1.46482      -5.29621       5.29621       168.270       173.566    
   4  0.306155      -1.18366      -4.27966       4.27966       171.708       175.988    
   5  0.514107     -0.665324      -2.40555       2.40555       171.909       174.314    
   6  0.784944E-01  -2.54473      -9.20073       9.20073       173.042       182.243    
   7  0.767893     -0.264105     -0.954900      0.954900       172.968       173.923    
   8  0.240450E-02  -6.03041      -21.8036       21.8036       172.127       193.931    
   9  0.185505      -1.68467      -6.09111       6.09111       173.592       179.683    
  10  0.405909     -0.901627      -3.25993       3.25993       173.585       176.844    
  11  0.681143     -0.383983      -1.38833       1.38833       171.815       173.204    
  12  0.529175     -0.636436      -2.30110       2.30110       174.449       176.750    
  13  0.873060     -0.135751     -0.490823      0.490823       172.867       173.358    
  14  0.457661     -0.781625      -2.82605       2.82605       173.636       176.462    
  15  0.564230     -0.572293      -2.06919       2.06919       173.028       175.097    
  16  0.949800     -0.515039E-01 -0.186218      0.186218       174.483       174.670    
  17  0.581003E-01  -2.84558      -10.2885       10.2885       172.252       182.541    
  18  0.180069      -1.71442      -6.19865       6.19865       171.506       177.704    
  19  0.222412      -1.50322      -5.43506       5.43506       171.272       176.707    
  20  0.821703     -0.196377     -0.710021      0.710021       173.514       174.225    
  21  0.948363     -0.530176E-01 -0.191691      0.191691       175.068       175.260    
  22  0.796186     -0.227922     -0.824076      0.824076       172.139       172.963    
  23  0.881546     -0.126078     -0.455847      0.455847       173.455       173.911    
  24  0.702001     -0.353821      -1.27928       1.27928       175.329       176.608    
  25  0.878483     -0.129559     -0.468435      0.468435       174.069       174.537    
  26  0.158251      -1.84358      -6.66564       6.66564       175.715       182.381    
  27  0.759310E-02  -4.88052      -17.6460       17.6460       174.487       192.133    
  28  0.549090     -0.599492      -2.16753       2.16753       172.255       174.422    
  29  0.294083      -1.22389      -4.42512       4.42512       175.167       179.592    
  30  0.358851      -1.02485      -3.70544       3.70544       175.475       179.181    
  31  0.591031E-01  -2.82847      -10.2266       10.2266       177.810       188.036    
  32  0.413139     -0.883972      -3.19610       3.19610       177.621       180.817    
  33  0.564800     -0.571284      -2.06554       2.06554       176.135       178.201    
  34  0.472034     -0.750704      -2.71425       2.71425       174.331       177.045    
  35  0.270343      -1.30806      -4.72944       4.72944       177.340       182.070    
  36  0.704266     -0.350600      -1.26763       1.26763       178.427       179.695    
  37  0.317895E-01  -3.44862      -12.4688       12.4688       177.366       189.834    
  38  0.489641     -0.714083      -2.58184       2.58184       176.998       179.580    
  39  0.558309     -0.582843      -2.10733       2.10733       178.432       180.539    
  40  0.239099      -1.43088      -5.17349       5.17349       177.988       183.161    
  41  0.387399     -0.948301      -3.42868       3.42868       179.665       183.094    
  42  0.434686     -0.833131      -3.01227       3.01227       172.689       175.701    
  43  0.713921     -0.336983      -1.21840       1.21840       177.542       178.760    
  44  0.655374     -0.422550      -1.52777       1.52777       176.672       178.200    
  45  0.739749     -0.301444      -1.08990       1.08990       179.763       180.853    
  46  0.758411     -0.276530     -0.999823      0.999823       180.389       181.389    
  47  0.750796     -0.286621      -1.03631       1.03631       178.392       179.428    
  48  0.557150E-01  -2.88751      -10.4401       10.4401       180.221       190.662    
  49  0.438885     -0.823518      -2.97752       2.97752       180.949       183.926    
  50  0.384409     -0.956048      -3.45669       3.45669       174.808       178.265    
  51  0.163955E-01  -4.11075      -14.8628       14.8628       175.545       190.408    
  52  0.493958     -0.705305      -2.55011       2.55011       173.024       175.574    
  53  0.654549     -0.423809      -1.53233       1.53233       180.706       182.239    
  54  0.779913     -0.248573     -0.898742      0.898742       181.080       181.978    
  55  0.173265      -1.75293      -6.33791       6.33791       173.561       179.899    
  56  0.179445      -1.71789      -6.21120       6.21120       173.391       179.603    
  57  0.278651      -1.27780      -4.62001       4.62001       178.580       183.200    
  58  0.413230E-01  -3.18634      -11.5205       11.5205       183.092       194.612    
  59  0.406979     -0.898993      -3.25040       3.25040       182.406       185.656    
  60  0.860177     -0.150617     -0.544571      0.544571       174.838       175.382    
  61  0.199311      -1.61289      -5.83156       5.83156       176.040       181.871    
  62  0.896296     -0.109485     -0.395854      0.395854       183.429       183.825    
  63  0.893483E-01  -2.41521      -8.73246       8.73246       184.313       193.046    
  64  0.456564     -0.784026      -2.83473       2.83473       184.071       186.906    
  65  0.382288     -0.961582      -3.47670       3.47670       184.883       188.359    
  66  0.840946     -0.173227     -0.626322      0.626322       186.665       187.292    
  67  0.853937     -0.157898     -0.570896      0.570896       182.875       183.445    
  68  0.684923     -0.378448      -1.36832       1.36832       187.470       188.839    
  69  0.744622     -0.294878      -1.06616       1.06616       183.752       184.819    
  70  0.535942     -0.623729      -2.25516       2.25516       183.165       185.421    
  71  0.730934     -0.313432      -1.13325       1.13325       188.448       189.581    
  72  0.303021      -1.19395      -4.31687       4.31687       171.324       175.641    
loop,thermsimp(1:2)       27   2.66265       3.04072    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    411        168.42          0.84          1.11         25.09          0.21          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    412        185.65          0.84          1.13         25.08          0.08          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    168.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       27
neval is:      411
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       28
neval is:      411


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      411     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -3.47393       3.47393       166.873       170.347    
   2  0.718155     -0.331070      -1.19702       1.19702       169.047       170.244    
   3  0.581515     -0.542118      -1.96008       1.96008       172.139       174.099    
   4  0.230175E-01  -3.77150      -13.6363       13.6363       171.815       185.452    
   5  0.506601     -0.680031      -2.45872       2.45872       172.867       175.326    
   6  0.209297      -1.56400      -5.65482       5.65482       168.270       173.925    
   7  0.757725     -0.277434      -1.00309       1.00309       173.455       174.458    
   8  0.230972      -1.46546      -5.29852       5.29852       172.968       178.266    
   9  0.495080     -0.703037      -2.54190       2.54190       173.514       176.056    
  10  0.947190     -0.542553E-01 -0.196166      0.196166       171.909       172.105    
  11  0.977432     -0.228269E-01 -0.825330E-01  0.825330E-01   172.255       172.337    
  12  0.320616      -1.13751      -4.11279       4.11279       174.069       178.182    
  13  0.252125      -1.37783      -4.98169       4.98169       174.483       179.465    
  14  0.871535     -0.137499     -0.497143      0.497143       173.028       173.525    
  15  0.856468E-02  -4.76011      -17.2107       17.2107       175.068       192.279    
  16  0.352534      -1.04261      -3.76966       3.76966       174.838       178.607    
  17  0.750419     -0.287124      -1.03813       1.03813       173.024       174.062    
  18  0.215691      -1.53391      -5.54601       5.54601       171.324       176.870    
  19  0.833929     -0.181606     -0.656617      0.656617       172.689       173.346    
  20  0.714656E-01  -2.63854      -9.53992       9.53992       171.708       181.248    
  21  0.758349     -0.276612      -1.00012       1.00012       173.636       174.637    
  22  0.571963     -0.558680      -2.01997       2.01997       175.329       177.349    
  23  0.472398     -0.749934      -2.71147       2.71147       171.272       173.984    
  24  0.606854     -0.499467      -1.80588       1.80588       174.449       176.255    
  25  0.247109      -1.39793      -5.05435       5.05435       173.585       178.639    
  26  0.581778     -0.541666      -1.95845       1.95845       174.331       176.289    
  27  0.455447     -0.786476      -2.84359       2.84359       171.506       174.349    
  28  0.606617     -0.499857      -1.80729       1.80729       176.672       178.479    
  29  0.620033     -0.477983      -1.72820       1.72820       176.135       177.863    
  30  0.367527      -1.00096      -3.61907       3.61907       174.808       178.427    
  31  0.611260     -0.492233      -1.77972       1.77972       177.542       179.322    
  32  0.310332      -1.17011      -4.23066       4.23066       175.475       179.706    
  33  0.611387     -0.492025      -1.77897       1.77897       178.392       180.171    
  34  0.584386     -0.537193      -1.94228       1.94228       176.998       178.940    
  35  0.950350     -0.509246E-01 -0.184123      0.184123       175.167       175.351    
  36  0.228570      -1.47591      -5.33632       5.33632       173.391       178.728    
  37  0.879867     -0.127985     -0.462742      0.462742       173.592       174.054    
  38  0.390808E-01  -3.24212      -11.7222       11.7222       178.427       190.150    
  39  0.104244      -2.26102      -8.17495       8.17495       173.561       181.736    
  40  0.922634     -0.805225E-01 -0.291138      0.291138       178.432       178.723    
  41  0.559015     -0.581578      -2.10276       2.10276       177.621       179.724    
  42  0.809074     -0.211865     -0.766022      0.766022       179.763       180.529    
  43  0.840951     -0.173222     -0.626302      0.626302       180.389       181.015    
  44  0.384796     -0.955043      -3.45306       3.45306       176.040       179.493    
  45  0.471744     -0.751318      -2.71647       2.71647       181.080       183.796    
  46  0.750950     -0.286417      -1.03557       1.03557       177.340       178.376    
  47  0.197617      -1.62143      -5.86244       5.86244       180.706       186.569    
  48  0.405005     -0.903855      -3.26798       3.26798       173.042       176.310    
  49  0.526481     -0.641540      -2.31956       2.31956       175.715       178.035    
  50  0.808042     -0.213142     -0.770637      0.770637       172.252       173.023    
  51  0.315225      -1.15447      -4.17411       4.17411       179.665       183.839    
  52  0.233772      -1.45341      -5.25495       5.25495       177.988       183.242    
  53  0.455864E-01  -3.08815      -11.1655       11.1655       178.580       189.746    
  54  0.748722     -0.289387      -1.04631       1.04631       182.875       183.921    
  55  0.237196E-01  -3.74145      -13.5276       13.5276       183.429       196.956    
  56  0.881679     -0.125927     -0.455303      0.455303       180.949       181.404    
  57  0.395054     -0.928733      -3.35793       3.35793       183.752       187.110    
  58  0.725060     -0.321501      -1.16242       1.16242       183.165       184.328    
  59  0.698840     -0.358333      -1.29559       1.29559       182.406       183.701    
  60  0.508334     -0.676617      -2.44638       2.44638       184.071       186.518    
  61  0.944269E-01  -2.35993      -8.53258       8.53258       186.665       195.198    
  62  0.604101     -0.504014      -1.82232       1.82232       177.810       179.632    
  63  0.662995     -0.410988      -1.48597       1.48597       184.883       186.369    
  64  0.715954     -0.334139      -1.20811       1.20811       187.470       188.678    
  65  0.528742     -0.637255      -2.30406       2.30406       188.448       190.752    
  66  0.971881     -0.285216E-01 -0.103123      0.103123       177.366       177.469    
  67  0.744068     -0.295622      -1.06885       1.06885       175.545       176.614    
  68  0.606637     -0.499824      -1.80717       1.80717       180.221       182.029    
  69  0.895363     -0.110526     -0.399617      0.399617       174.487       174.886    
  70  0.564713     -0.571438      -2.06609       2.06609       184.313       186.379    
  71  0.895199     -0.110709     -0.400282      0.400282       172.127       172.528    
  72  0.373078     -0.985968      -3.56487       3.56487       168.424       171.989    
loop,thermsimp(1:2)       28   3.47393       1.19702    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    413        175.64          0.84          1.11         25.13          0.09          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       28
neval is:      412
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       29
neval is:      412


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      412     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223      -2.02193       2.02193       169.047       171.069    
   2  0.243540      -1.41247      -5.10695       5.10695       166.873       171.980    
   3  0.374772     -0.981437      -3.54849       3.54849       168.424       171.973    
   4  0.700054     -0.356598      -1.28932       1.28932       171.909       173.198    
   5  0.301581      -1.19872      -4.33408       4.33408       172.255       176.589    
   6  0.531818     -0.631454      -2.28309       2.28309       172.127       174.410    
   7  0.185013      -1.68733      -6.10073       6.10073       172.252       178.353    
   8  0.107050      -2.23446      -8.07893       8.07893       172.689       180.768    
   9  0.979566     -0.206453E-01 -0.746451E-01  0.746451E-01   173.028       173.102    
  10  0.706074     -0.348035      -1.25836       1.25836       168.270       169.529    
  11  0.112110      -2.18827      -7.91193       7.91193       171.272       179.184    
  12  0.212442      -1.54908      -5.60088       5.60088       173.592       179.192    
  13  0.625740     -0.468820      -1.69507       1.69507       173.024       174.719    
  14  0.265918      -1.32457      -4.78911       4.78911       172.139       176.928    
  15  0.369004     -0.996947      -3.60457       3.60457       171.506       175.110    
  16  0.531799     -0.631491      -2.28322       2.28322       173.455       175.739    
  17  0.227318      -1.48140      -5.35617       5.35617       173.636       178.993    
  18  0.512871     -0.667732      -2.41426       2.41426       174.487       176.901    
  19  0.394785     -0.929415      -3.36040       3.36040       172.867       176.228    
  20  0.720084     -0.328388      -1.18732       1.18732       175.167       176.354    
  21  0.185505      -1.68467      -6.09111       6.09111       173.514       179.606    
  22  0.658242     -0.418183      -1.51199       1.51199       174.449       175.961    
  23  0.888593     -0.118116     -0.427061      0.427061       174.331       174.758    
  24  0.773453     -0.256890     -0.928813      0.928813       173.042       173.971    
  25  0.594480E-01  -2.82265      -10.2056       10.2056       175.545       185.751    
  26  0.112908      -2.18118      -7.88630       7.88630       171.324       179.210    
  27  0.940300     -0.615559E-01 -0.222562      0.222562       175.329       175.551    
  28  0.990261     -0.978663E-02 -0.353846E-01  0.353846E-01   177.366       177.401    
  29  0.686451     -0.376220      -1.36026       1.36026       176.135       177.496    
  30  0.558815     -0.581936      -2.10405       2.10405       175.715       177.819    
  31  0.574196     -0.554784      -2.00588       2.00588       174.069       176.075    
  32  0.678960     -0.387193      -1.39994       1.39994       172.968       174.368    
  33  0.306232      -1.18341      -4.27876       4.27876       177.340       181.619    
  34  0.969485     -0.309907E-01 -0.112050      0.112050       174.808       174.920    
  35  0.520627     -0.652722      -2.35999       2.35999       176.672       179.032    
  36  0.870581     -0.138594     -0.501102      0.501102       174.838       175.339    
  37  0.127650      -2.05846      -7.44258       7.44258       173.585       181.027    
  38  0.276190      -1.28667      -4.65208       4.65208       178.432       183.084    
  39  0.842544     -0.171330     -0.619460      0.619460       173.391       174.011    
  40  0.336933      -1.08787      -3.93332       3.93332       176.998       180.931    
  41  0.685284     -0.377921      -1.36641       1.36641       177.542       178.908    
  42  0.555142     -0.588531      -2.12790       2.12790       174.483       176.611    
  43  0.857048     -0.154261     -0.557747      0.557747       176.040       176.598    
  44  0.612111E-01  -2.79343      -10.0999       10.0999       177.810       187.910    
  45  0.672500     -0.396753      -1.43450       1.43450       175.475       176.910    
  46  0.820423E-01  -2.50052      -9.04089       9.04089       177.621       186.662    
  47  0.546679     -0.603893      -2.18344       2.18344       178.392       180.575    
  48  0.624723     -0.470446      -1.70095       1.70095       179.763       181.464    
  49  0.906365     -0.983128E-01 -0.355460      0.355460       180.389       180.744    
  50  0.807763     -0.213487     -0.771883      0.771883       171.708       172.480    
  51  0.347580      -1.05676      -3.82083       3.82083       180.949       184.769    
  52  0.233390      -1.45504      -5.26087       5.26087       173.561       178.822    
  53  0.265609      -1.32573      -4.79332       4.79332       180.221       185.015    
  54  0.277652      -1.28139      -4.63299       4.63299       177.988       182.621    
  55  0.836033     -0.179087     -0.647507      0.647507       182.406       183.053    
  56  0.170063      -1.77159      -6.40537       6.40537       181.080       187.485    
  57  0.798928     -0.224485     -0.811649      0.811649       179.665       180.477    
  58  0.707521E-01  -2.64857      -9.57620       9.57620       182.875       192.451    
  59  0.699192     -0.357830      -1.29377       1.29377       183.165       184.459    
  60  0.190598      -1.65759      -5.99319       5.99319       171.815       177.809    
  61  0.932984     -0.693669E-01 -0.250803      0.250803       184.883       185.133    
  62  0.626920     -0.466936      -1.68826       1.68826       184.313       186.001    
  63  0.849515     -0.163090     -0.589668      0.589668       184.071       184.661    
  64  0.405877     -0.901705      -3.26021       3.26021       180.706       183.967    
  65  0.375531     -0.979415      -3.54118       3.54118       183.752       187.294    
  66  0.726552     -0.319445      -1.15499       1.15499       187.470       188.625    
  67  0.964302     -0.363506E-01 -0.131430      0.131430       178.580       178.712    
  68  0.371995     -0.988875      -3.57538       3.57538       178.427       182.003    
  69  0.553003     -0.592392      -2.14186       2.14186       188.448       190.589    
  70  0.562065     -0.576138      -2.08309       2.08309       175.068       177.151    
  71  0.961597     -0.391593E-01 -0.141585      0.141585       186.665       186.807    
  72  0.544063     -0.608691      -2.20079       2.20079       175.636       177.837    
loop,thermsimp(1:2)       29   2.02193       5.10695    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    414        175.92          0.84          1.11         25.28          0.10          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    415        223.92          0.84          1.11         25.09          0.19          0.05         27.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    175.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       29
neval is:      414
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       30
neval is:      414


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      414     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -5.49926       5.49926       168.270       173.769    
   2  0.142120      -1.95108      -7.05434       7.05434       169.047       176.102    
   3  0.240947      -1.42318      -5.14565       5.14565       168.424       173.570    
   4  0.622235     -0.474438      -1.71538       1.71538       166.873       168.588    
   5  0.167679      -1.78570      -6.45640       6.45640       171.708       178.165    
   6  0.712985E-01  -2.64088      -9.54838       9.54838       173.028       182.576    
   7  0.861645E-02  -4.75408      -17.1889       17.1889       171.909       189.098    
   8  0.820106     -0.198321     -0.717052      0.717052       173.042       173.759    
   9  0.882469     -0.125032     -0.452065      0.452065       173.391       173.843    
  10  0.530124     -0.634644      -2.29462       2.29462       172.968       175.262    
  11  0.920027E-01  -2.38594      -8.62661       8.62661       172.127       180.754    
  12  0.669458     -0.401287      -1.45090       1.45090       173.024       174.475    
  13  0.348419      -1.05435      -3.81211       3.81211       174.331       178.143    
  14  0.979616     -0.205944E-01 -0.744614E-01  0.744614E-01   174.808       174.883    
  15  0.661083     -0.413875      -1.49641       1.49641       171.506       173.002    
  16  0.535120     -0.625265      -2.26071       2.26071       174.838       177.099    
  17  0.929679E-01  -2.37550      -8.58888       8.58888       175.329       183.917    
  18  0.580221     -0.544346      -1.96814       1.96814       173.455       175.423    
  19  0.652449     -0.427023      -1.54395       1.54395       174.449       175.993    
  20  0.252328      -1.37703      -4.97879       4.97879       174.069       179.048    
  21  0.364859      -1.00824      -3.64541       3.64541       172.867       176.513    
  22  0.205873      -1.58049      -5.71444       5.71444       175.167       180.882    
  23  0.404183E-01  -3.20847      -11.6006       11.6006       172.255       183.855    
  24  0.922242     -0.809474E-01 -0.292674      0.292674       176.040       176.332    
  25  0.164359      -1.80570      -6.52870       6.52870       174.483       181.012    
  26  0.606051     -0.500791      -1.81066       1.81066       174.487       176.298    
  27  0.461849E-01  -3.07510      -11.1184       11.1184       175.475       186.594    
  28  0.761223     -0.272829     -0.986443      0.986443       172.139       173.126    
  29  0.170682      -1.76796      -6.39223       6.39223       175.068       181.460    
  30  0.501713     -0.689726      -2.49378       2.49378       177.366       179.859    
  31  0.892390E-01  -2.41644      -8.73688       8.73688       176.135       184.872    
  32  0.281632E-01  -3.56974      -12.9068       12.9068       171.815       184.722    
  33  0.664381     -0.408899      -1.47842       1.47842       175.715       177.193    
  34  0.124936      -2.07995      -7.52030       7.52030       175.636       183.156    
  35  0.623262     -0.472788      -1.70942       1.70942       172.252       173.962    
  36  0.876206     -0.132154     -0.477817      0.477817       178.580       179.058    
  37  0.744183     -0.295469      -1.06830       1.06830       173.561       174.629    
  38  0.251914      -1.37867      -4.98471       4.98471       177.542       182.527    
  39  0.391818     -0.936959      -3.38767       3.38767       173.636       177.024    
  40  0.131094      -2.03184      -7.34634       7.34634       176.672       184.018    
  41  0.887574     -0.119263     -0.431207      0.431207       171.272       171.704    
  42  0.682509     -0.381980      -1.38109       1.38109       173.592       174.973    
  43  0.184805      -1.68846      -6.10479       6.10479       171.324       177.429    
  44  0.258729      -1.35197      -4.88821       4.88821       173.514       178.403    
  45  0.275506      -1.28915      -4.66105       4.66105       179.665       184.326    
  46  0.718710     -0.330297      -1.19423       1.19423       178.392       179.586    
  47  0.445066     -0.809533      -2.92695       2.92695       180.389       183.316    
  48  0.772965     -0.257522     -0.931098      0.931098       172.689       173.620    
  49  0.992595     -0.743255E-02 -0.268732E-01  0.268732E-01   176.998       177.025    
  50  0.847655E-01  -2.46787      -8.92283       8.92283       173.585       182.507    
  51  0.805100E-01  -2.51937      -9.10906       9.10906       179.763       188.872    
  52  0.218783      -1.51968      -5.49455       5.49455       177.340       182.835    
  53  0.177967      -1.72616      -6.24110       6.24110       178.427       184.668    
  54  0.435468E-02  -5.43650      -19.6563       19.6563       177.988       197.644    
  55  0.189855      -1.66150      -6.00732       6.00732       182.406       188.413    
  56  0.483774     -0.726137      -2.62542       2.62542       178.432       181.057    
  57  0.407968     -0.896566      -3.24163       3.24163       180.706       183.948    
  58  0.895063     -0.110861     -0.400831      0.400831       183.165       183.566    
  59  0.160465      -1.82968      -6.61539       6.61539       184.071       190.687    
  60  0.557179     -0.584868      -2.11465       2.11465       180.949       183.063    
  61  0.992824     -0.720237E-02 -0.260409E-01  0.260409E-01   180.221       180.248    
  62  0.757533     -0.277689      -1.00401       1.00401       184.883       185.887    
  63  0.707064     -0.346634      -1.25329       1.25329       175.545       176.798    
  64  0.940151     -0.617150E-01 -0.223137      0.223137       184.313       184.536    
  65  0.777188     -0.252074     -0.911399      0.911399       177.621       178.533    
  66  0.427529     -0.849732      -3.07230       3.07230       186.665       189.738    
  67  0.178910      -1.72087      -6.22199       6.22199       183.752       189.974    
  68  0.630789     -0.460784      -1.66601       1.66601       181.080       182.746    
  69  0.612488E-01  -2.79281      -10.0977       10.0977       177.810       187.907    
  70  0.708553     -0.344530      -1.24569       1.24569       187.470       188.716    
  71  0.829919     -0.186427     -0.674047      0.674047       188.448       189.122    
  72  0.829598E-03  -7.09457      -25.6512       25.6512       175.917       201.568    
loop,thermsimp(1:2)       30   5.49926       7.05434    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    416        182.87          0.84          1.11         25.01          0.25          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    182.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       30
neval is:      415
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       31
neval is:      415


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      415     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -6.20358       6.20358       166.873       173.076    
   2  0.422562     -0.861418      -3.11455       3.11455       171.272       174.387    
   3  0.186245      -1.68069      -6.07672       6.07672       171.506       177.582    
   4  0.567236     -0.566979      -2.04997       2.04997       172.139       174.189    
   5  0.464464E-01  -3.06946      -11.0979       11.0979       168.424       179.522    
   6  0.349374      -1.05161      -3.80222       3.80222       172.689       176.491    
   7  0.336208      -1.09002      -3.94110       3.94110       173.042       176.983    
   8  0.631615     -0.459475      -1.66128       1.66128       168.270       169.931    
   9  0.225630E-01  -3.79144      -13.7084       13.7084       173.391       187.100    
  10  0.221391      -1.50782      -5.45170       5.45170       172.252       177.704    
  11  0.635199     -0.453817      -1.64082       1.64082       173.024       174.665    
  12  0.957727     -0.431923E-01 -0.156166      0.156166       173.561       173.717    
  13  0.284413      -1.25733      -4.54600       4.54600       174.808       179.354    
  14  0.814352     -0.205363     -0.742510      0.742510       173.592       174.334    
  15  0.699052     -0.358030      -1.29450       1.29450       172.968       174.262    
  16  0.145269      -1.92917      -6.97512       6.97512       173.455       180.430    
  17  0.397569     -0.922386      -3.33499       3.33499       174.449       177.784    
  18  0.610583     -0.493342      -1.78373       1.78373       169.047       170.831    
  19  0.737372     -0.304663      -1.10154       1.10154       174.487       175.588    
  20  0.230083      -1.46931      -5.31246       5.31246       176.040       181.352    
  21  0.721698     -0.326149      -1.17923       1.17923       172.867       174.047    
  22  0.469765     -0.755524      -2.73168       2.73168       175.545       178.277    
  23  0.148742      -1.90554      -6.88970       6.88970       173.636       180.526    
  24  0.631872     -0.459069      -1.65981       1.65981       176.998       178.658    
  25  0.456921     -0.783245      -2.83191       2.83191       174.838       177.670    
  26  0.631874E-01  -2.76165      -9.98504       9.98504       175.715       185.700    
  27  0.470948     -0.753008      -2.72258       2.72258       171.324       174.047    
  28  0.313695      -1.15933      -4.19170       4.19170       174.331       178.522    
  29  0.856516     -0.154883     -0.559995      0.559995       171.708       172.268    
  30  0.487159     -0.719166      -2.60022       2.60022       173.514       176.115    
  31  0.383726     -0.957827      -3.46313       3.46313       177.621       181.084    
  32  0.242248      -1.41779      -5.12619       5.12619       174.069       179.195    
  33  0.760305     -0.274035     -0.990803      0.990803       178.580       179.571    
  34  0.524314     -0.645664      -2.33447       2.33447       178.392       180.726    
  35  0.759572     -0.275001     -0.994294      0.994294       177.366       178.360    
  36  0.784019     -0.243322     -0.879757      0.879757       180.221       181.101    
  37  0.430930     -0.841810      -3.04365       3.04365       172.127       175.171    
  38  0.670659     -0.399494      -1.44441       1.44441       175.167       176.611    
  39  0.458005     -0.780876      -2.82334       2.82334       174.483       177.307    
  40  0.413739     -0.882521      -3.19085       3.19085       178.432       181.623    
  41  0.388661     -0.945048      -3.41692       3.41692       175.068       178.485    
  42  0.753750     -0.282694      -1.02211       1.02211       173.585       174.607    
  43  0.505767     -0.681679      -2.46468       2.46468       177.542       180.007    
  44  0.759664     -0.274878     -0.993852      0.993852       173.028       174.022    
  45  0.468968     -0.757221      -2.73781       2.73781       181.080       183.817    
  46  0.740796     -0.300031      -1.08479       1.08479       177.340       178.425    
  47  0.737223     -0.304865      -1.10227       1.10227       180.949       182.051    
  48  0.584325     -0.537298      -1.94266       1.94266       175.636       177.578    
  49  0.850800     -0.161578     -0.584203      0.584203       180.389       180.973    
  50  0.181706      -1.70536      -6.16592       6.16592       183.165       189.331    
  51  0.801855E-01  -2.52341      -9.12367       9.12367       172.255       181.379    
  52  0.989218     -0.108406E-01 -0.391955E-01  0.391955E-01   175.329       175.368    
  53  0.214049      -1.54155      -5.57363       5.57363       180.706       186.280    
  54  0.522539     -0.649055      -2.34673       2.34673       176.672       179.019    
  55  0.964020     -0.366433E-01 -0.132488      0.132488       179.665       179.798    
  56  0.559622     -0.580494      -2.09884       2.09884       184.313       186.412    
  57  0.944229     -0.573866E-01 -0.207487      0.207487       178.427       178.635    
  58  0.212625      -1.54823      -5.59778       5.59778       171.815       177.413    
  59  0.735854     -0.306724      -1.10899       1.10899       176.135       177.244    
  60  0.693280E-01  -2.66891      -9.64971       9.64971       184.883       194.532    
  61  0.208371      -1.56843      -5.67084       5.67084       175.475       181.146    
  62  0.396847     -0.924205      -3.34156       3.34156       177.810       181.151    
  63  0.835639     -0.179558     -0.649211      0.649211       182.406       183.055    
  64  0.527941     -0.638770      -2.30954       2.30954       187.470       189.780    
  65  0.631616     -0.459473      -1.66127       1.66127       179.763       181.424    
  66  0.619534     -0.478788      -1.73111       1.73111       171.909       173.640    
  67  0.712866     -0.338461      -1.22374       1.22374       188.448       189.671    
  68  0.588242     -0.530616      -1.91850       1.91850       186.665       188.584    
  69  0.265742      -1.32523      -4.79151       4.79151       183.752       188.544    
  70  0.191257      -1.65414      -5.98071       5.98071       184.071       190.052    
  71  0.904007     -0.100919     -0.364882      0.364882       177.988       178.352    
  72  0.981469     -0.187047E-01 -0.676289E-01  0.676289E-01   182.875       182.942    
loop,thermsimp(1:2)       31   6.20358       3.11455    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    417        176.71          0.84          1.11         25.05          0.23          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       31
neval is:      416
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       32
neval is:      416


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      416     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -10.3263       10.3263       168.270       178.596    
   2  0.695439     -0.363212      -1.31323       1.31323       169.047       170.360    
   3  0.338668      -1.08273      -3.91474       3.91474       171.708       175.623    
   4  0.494821     -0.703559      -2.54379       2.54379       166.873       169.417    
   5  0.433638E-02  -5.44072      -19.6715       19.6715       171.909       191.580    
   6  0.270974      -1.30573      -4.72102       4.72102       173.561       178.282    
   7  0.926362E-01  -2.37907      -8.60180       8.60180       173.028       181.630    
   8  0.437858     -0.825861      -2.98599       2.98599       172.867       175.853    
   9  0.297746      -1.21151      -4.38035       4.38035       171.324       175.704    
  10  0.948309     -0.530750E-01 -0.191898      0.191898       172.139       172.331    
  11  0.845139     -0.168254     -0.608341      0.608341       172.968       173.576    
  12  0.930128     -0.724325E-01 -0.261888      0.261888       173.592       173.853    
  13  0.921850     -0.813732E-01 -0.294214      0.294214       171.272       171.567    
  14  0.447950     -0.803074      -2.90360       2.90360       173.585       176.488    
  15  0.712740     -0.338638      -1.22438       1.22438       173.024       174.248    
  16  0.574809     -0.553717      -2.00202       2.00202       172.127       174.129    
  17  0.136104      -1.99433      -7.21072       7.21072       175.329       182.539    
  18  0.340340      -1.07781      -3.89693       3.89693       174.487       178.384    
  19  0.149160      -1.90274      -6.87955       6.87955       173.514       180.394    
  20  0.433234E-01  -3.13906      -11.3496       11.3496       172.689       184.039    
  21  0.909134     -0.952630E-01 -0.344434      0.344434       175.167       175.512    
  22  0.619739     -0.478456      -1.72991       1.72991       173.042       174.772    
  23  0.726693     -0.319251      -1.15428       1.15428       176.135       177.290    
  24  0.962860     -0.378471E-01 -0.136840      0.136840       174.483       174.620    
  25  0.615108     -0.485958      -1.75703       1.75703       171.815       173.572    
  26  0.500401     -0.692346      -2.50325       2.50325       175.636       178.139    
  27  0.402080     -0.911104      -3.29419       3.29419       171.506       174.800    
  28  0.749737     -0.288033      -1.04141       1.04141       174.838       175.879    
  29  0.926553     -0.762839E-01 -0.275813      0.275813       172.252       172.528    
  30  0.519037     -0.655779      -2.37104       2.37104       174.449       176.820    
  31  0.498178E-01  -2.99938      -10.8446       10.8446       175.545       186.390    
  32  0.473692     -0.747197      -2.70157       2.70157       177.988       180.689    
  33  0.574927E-02  -5.15868      -18.6518       18.6518       177.366       196.017    
  34  0.349575      -1.05104      -3.80014       3.80014       177.340       181.140    
  35  0.661333     -0.413498      -1.49505       1.49505       175.068       176.563    
  36  0.314247E-01  -3.46016      -12.5106       12.5106       174.331       186.841    
  37  0.318841      -1.14306      -4.13287       4.13287       178.427       182.560    
  38  0.111349E-01  -4.49767      -16.2618       16.2618       176.998       193.260    
  39  0.845234E-02  -4.77331      -17.2584       17.2584       176.672       193.930    
  40  0.704975E-01  -2.65218      -9.58923       9.58923       174.069       183.658    
  41  0.126423      -2.06812      -7.47752       7.47752       174.808       182.286    
  42  0.120140      -2.11910      -7.66182       7.66182       168.424       176.086    
  43  0.664865     -0.408172      -1.47579       1.47579       178.580       180.056    
  44  0.829336     -0.187130     -0.676587      0.676587       179.665       180.342    
  45  0.656735     -0.420475      -1.52027       1.52027       177.542       179.062    
  46  0.955374     -0.456526E-01 -0.165062      0.165062       173.455       173.620    
  47  0.220157      -1.51341      -5.47191       5.47191       173.636       179.108    
  48  0.151230      -1.88895      -6.82971       6.82971       178.392       185.221    
  49  0.127393      -2.06048      -7.44988       7.44988       180.389       187.839    
  50  0.206727      -1.57636      -5.69949       5.69949       177.621       183.321    
  51  0.637521     -0.450168      -1.62763       1.62763       180.221       181.849    
  52  0.432940     -0.837156      -3.02683       3.02683       175.475       178.502    
  53  0.429465     -0.845215      -3.05596       3.05596       177.810       180.866    
  54  0.989331E-01  -2.31331      -8.36402       8.36402       176.040       184.404    
  55  0.158609      -1.84131      -6.65746       6.65746       172.255       178.912    
  56  0.811960     -0.208304     -0.753146      0.753146       179.763       180.516    
  57  0.112024      -2.18904      -7.91470       7.91470       178.432       186.347    
  58  0.922858     -0.802799E-01 -0.290261      0.290261       180.949       181.239    
  59  0.738003     -0.303807      -1.09845       1.09845       182.875       183.973    
  60  0.896667     -0.109070     -0.394356      0.394356       182.406       182.800    
  61  0.736055     -0.306450      -1.10800       1.10800       181.080       182.188    
  62  0.607864     -0.497804      -1.79986       1.79986       175.715       177.515    
  63  0.974093     -0.262480E-01 -0.949025E-01  0.949025E-01   180.706       180.801    
  64  0.624292     -0.471137      -1.70345       1.70345       184.313       186.017    
  65  0.190711      -1.65700      -5.99105       5.99105       173.391       179.382    
  66  0.655755     -0.421967      -1.52567       1.52567       183.752       185.278    
  67  0.678530     -0.387827      -1.40223       1.40223       186.665       188.068    
  68  0.725997     -0.320210      -1.15775       1.15775       183.165       184.323    
  69  0.797831     -0.225858     -0.816614      0.816614       188.448       189.264    
  70  0.354092      -1.03820      -3.75372       3.75372       187.470       191.224    
  71  0.687487     -0.374712      -1.35481       1.35481       184.071       185.426    
  72  0.670718     -0.399406      -1.44409       1.44409       176.714       178.158    
loop,thermsimp(1:2)       32   10.3263       1.31323    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    418        175.44          0.83          1.11         25.31          0.18          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       32
neval is:      417
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       33
neval is:      417


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      417     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739     -0.776411      0.776411       166.873       167.649    
   2  0.549594     -0.598576      -2.16422       2.16422       169.047       171.211    
   3  0.631143     -0.460223      -1.66399       1.66399       171.272       172.936    
   4  0.268455      -1.31507      -4.75478       4.75478       172.139       176.894    
   5  0.513519     -0.666468      -2.40969       2.40969       172.252       174.662    
   6  0.886725     -0.120220     -0.434668      0.434668       171.815       172.250    
   7  0.568618     -0.564546      -2.04118       2.04118       172.968       175.009    
   8  0.443178     -0.813783      -2.94232       2.94232       173.455       176.398    
   9  0.898491     -0.107039     -0.387010      0.387010       173.592       173.979    
  10  0.235118      -1.44767      -5.23419       5.23419       172.127       177.361    
  11  0.509444     -0.674434      -2.43849       2.43849       173.024       175.462    
  12  0.223921      -1.49646      -5.41061       5.41061       174.483       179.894    
  13  0.188995      -1.66603      -6.02372       6.02372       173.042       179.066    
  14  0.969568     -0.309049E-01 -0.111740      0.111740       171.506       171.617    
  15  0.287265      -1.24735      -4.50993       4.50993       175.167       179.677    
  16  0.559573E-01  -2.88317      -10.4244       10.4244       171.708       182.133    
  17  0.668393     -0.402878      -1.45665       1.45665       171.324       172.781    
  18  0.488393     -0.716635      -2.59107       2.59107       172.867       175.458    
  19  0.605591     -0.501551      -1.81341       1.81341       174.838       176.651    
  20  0.490783     -0.711753      -2.57342       2.57342       168.424       170.998    
  21  0.313180      -1.16098      -4.19763       4.19763       173.585       177.782    
  22  0.200234      -1.60827      -5.81486       5.81486       175.068       180.883    
  23  0.575811     -0.551975      -1.99573       1.99573       174.449       176.445    
  24  0.856965     -0.154358     -0.558097      0.558097       176.135       176.693    
  25  0.310774      -1.16869      -4.22552       4.22552       175.715       179.940    
  26  0.836513     -0.178513     -0.645433      0.645433       175.636       176.281    
  27  0.286335      -1.25059      -4.52166       4.52166       176.714       181.235    
  28  0.240507      -1.42500      -5.15226       5.15226       173.561       178.713    
  29  0.103511E-01  -4.57066      -16.5257       16.5257       174.487       191.013    
  30  0.516897     -0.659912      -2.38598       2.38598       175.475       177.861    
  31  0.237615      -1.43710      -5.19600       5.19600       168.270       173.466    
  32  0.602330     -0.506950      -1.83293       1.83293       172.255       174.088    
  33  0.677792     -0.388915      -1.40616       1.40616       177.542       178.948    
  34  0.965031     -0.355954E-01 -0.128699      0.128699       173.636       173.765    
  35  0.851769     -0.160440     -0.580089      0.580089       173.391       173.971    
  36  0.998637     -0.136415E-02 -0.493222E-02  0.493222E-02   178.580       178.585    
  37  0.690071E-01  -2.67355      -9.66649       9.66649       179.665       189.332    
  38  0.865316E-02  -4.74983      -17.1735       17.1735       173.514       190.688    
  39  0.657551     -0.419234      -1.51578       1.51578       179.763       181.279    
  40  0.249918      -1.38662      -5.01348       5.01348       177.988       183.001    
  41  0.762839     -0.270708     -0.978773      0.978773       180.706       181.685    
  42  0.875176     -0.133331     -0.482071      0.482071       177.810       178.292    
  43  0.805569     -0.216207     -0.781719      0.781719       177.340       178.122    
  44  0.308797      -1.17507      -4.24859       4.24859       180.949       185.197    
  45  0.255763      -1.36350      -4.92989       4.92989       173.028       177.958    
  46  0.218508      -1.52093      -5.49910       5.49910       180.221       185.721    
  47  0.518593     -0.656637      -2.37414       2.37414       181.080       183.454    
  48  0.856838     -0.154506     -0.558633      0.558633       174.808       175.367    
  49  0.300810      -1.20128      -4.34335       4.34335       175.329       179.672    
  50  0.310312      -1.17018      -4.23090       4.23090       178.427       182.658    
  51  0.503825     -0.685526      -2.47859       2.47859       182.406       184.884    
  52  0.940514     -0.613291E-01 -0.221742      0.221742       177.621       177.843    
  53  0.778953     -0.249804     -0.903194      0.903194       174.069       174.972    
  54  0.586433     -0.533697      -1.92964       1.92964       182.875       184.804    
  55  0.866496     -0.143298     -0.518108      0.518108       172.689       173.207    
  56  0.371870E-01  -3.29180      -11.9018       11.9018       183.165       195.067    
  57  0.592656     -0.523141      -1.89147       1.89147       176.040       177.931    
  58  0.337285      -1.08683      -3.92953       3.92953       178.392       182.321    
  59  0.277582      -1.28164      -4.63390       4.63390       183.752       188.386    
  60  0.690983E-01  -2.67223      -9.66171       9.66171       184.071       193.733    
  61  0.688060     -0.373879      -1.35180       1.35180       184.313       185.665    
  62  0.279054      -1.27635      -4.61478       4.61478       178.432       183.047    
  63  0.927849     -0.748862E-01 -0.270759      0.270759       175.545       175.816    
  64  0.360885      -1.01920      -3.68501       3.68501       174.331       178.016    
  65  0.301914      -1.19761      -4.33010       4.33010       180.389       184.719    
  66  0.732817     -0.310859      -1.12395       1.12395       186.665       187.789    
  67  0.366767      -1.00303      -3.62655       3.62655       188.448       192.074    
  68  0.255505      -1.36451      -4.93354       4.93354       187.470       192.404    
  69  0.117155      -2.14426      -7.75280       7.75280       171.909       179.662    
  70  0.716329     -0.333616      -1.20623       1.20623       176.998       178.204    
  71  0.209869      -1.56127      -5.64495       5.64495       176.672       182.317    
  72  0.716721     -0.333069      -1.20425       1.20425       175.444       176.649    
loop,thermsimp(1:2)       33  0.776411       2.16422    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    419        172.73          0.84          1.11         25.13          0.19          0.05         27.33
Just calling func    0   0         27.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       33
neval is:      418
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       34
neval is:      418


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      418     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -3.53769       3.53769       166.873       170.410    
   2  0.356800      -1.03058      -3.72617       3.72617       168.424       172.150    
   3  0.686180     -0.376616      -1.36169       1.36169       169.047       170.409    
   4  0.443986     -0.811963      -2.93574       2.93574       171.506       174.441    
   5  0.837544     -0.177281     -0.640979      0.640979       171.815       172.456    
   6  0.902394     -0.102704     -0.371337      0.371337       171.324       171.695    
   7  0.509658E-01  -2.97660      -10.7622       10.7622       171.272       182.035    
   8  0.662569     -0.411631      -1.48830       1.48830       172.689       174.178    
   9  0.226311      -1.48585      -5.37224       5.37224       168.270       173.642    
  10  0.336196      -1.09006      -3.94123       3.94123       173.636       177.578    
  11  0.122038      -2.10342      -7.60514       7.60514       173.391       180.997    
  12  0.323275      -1.12925      -4.08293       4.08293       173.592       177.675    
  13  0.326513      -1.11929      -4.04690       4.04690       172.255       176.302    
  14  0.904434     -0.100446     -0.363172      0.363172       172.252       172.616    
  15  0.856476     -0.154928     -0.560160      0.560160       174.069       174.629    
  16  0.873700     -0.135019     -0.488174      0.488174       172.968       173.456    
  17  0.989627     -0.104267E-01 -0.376989E-01  0.376989E-01   174.808       174.846    
  18  0.546745     -0.603772      -2.18300       2.18300       172.867       175.050    
  19  0.731718     -0.312360      -1.12937       1.12937       173.024       174.153    
  20  0.859154     -0.151807     -0.548874      0.548874       175.545       176.094    
  21  0.419381     -0.868976      -3.14187       3.14187       175.636       178.778    
  22  0.587067     -0.532617      -1.92573       1.92573       173.455       175.381    
  23  0.460289E-01  -3.07849      -11.1306       11.1306       174.449       185.580    
  24  0.522902     -0.648362      -2.34422       2.34422       175.444       177.788    
  25  0.398671     -0.919618      -3.32498       3.32498       174.838       178.163    
  26  0.881302     -0.126355     -0.456849      0.456849       176.135       176.592    
  27  0.226039      -1.48705      -5.37657       5.37657       172.139       177.516    
  28  0.124144      -2.08631      -7.54328       7.54328       172.127       179.671    
  29  0.542680     -0.611235      -2.20999       2.20999       173.585       175.795    
  30  0.167496      -1.78679      -6.46034       6.46034       177.621       184.082    
  31  0.619825     -0.478318      -1.72941       1.72941       175.475       177.205    
  32  0.169564      -1.77452      -6.41598       6.41598       176.040       182.456    
  33  0.781291     -0.246807     -0.892357      0.892357       173.028       173.920    
  34  0.486264     -0.721004      -2.60687       2.60687       174.331       176.937    
  35  0.895366     -0.110522     -0.399605      0.399605       177.340       177.740    
  36  0.321503      -1.13475      -4.10280       4.10280       176.998       181.101    
  37  0.607862E-01  -2.80039      -10.1251       10.1251       177.810       187.935    
  38  0.365124      -1.00752      -3.64279       3.64279       178.580       182.223    
  39  0.110107      -2.20630      -7.97712       7.97712       173.561       181.538    
  40  0.905082     -0.997294E-01 -0.360582      0.360582       177.542       177.903    
  41  0.960140     -0.406759E-01 -0.147068      0.147068       173.042       173.189    
  42  0.320200      -1.13881      -4.11748       4.11748       171.909       176.026    
  43  0.396920     -0.924021      -3.34090       3.34090       175.329       178.670    
  44  0.674668     -0.393534      -1.42287       1.42287       175.167       176.590    
  45  0.894300     -0.111715     -0.403916      0.403916       174.483       174.887    
  46  0.875669     -0.132767     -0.480034      0.480034       175.715       176.195    
  47  0.881286     -0.126374     -0.456917      0.456917       175.068       175.525    
  48  0.779885     -0.248609     -0.898873      0.898873       176.714       177.612    
  49  0.691264     -0.369233      -1.33500       1.33500       179.763       181.098    
  50  0.406618     -0.899882      -3.25362       3.25362       180.706       183.960    
  51  0.225318      -1.49024      -5.38812       5.38812       171.708       177.097    
  52  0.172220      -1.75898      -6.35979       6.35979       176.672       183.032    
  53  0.479523     -0.734964      -2.65734       2.65734       178.392       181.049    
  54  0.313312      -1.16056      -4.19611       4.19611       178.427       182.623    
  55  0.389868     -0.941947      -3.40571       3.40571       177.988       181.393    
  56  0.510295     -0.672766      -2.43246       2.43246       178.432       180.864    
  57  0.782049     -0.245838     -0.888852      0.888852       181.080       181.968    
  58  0.193896      -1.64043      -5.93115       5.93115       180.389       186.320    
  59  0.560612     -0.578727      -2.09245       2.09245       182.875       184.967    
  60  0.127407      -2.06037      -7.44948       7.44948       182.406       189.855    
  61  0.898287     -0.107266     -0.387830      0.387830       180.949       181.336    
  62  0.680859     -0.384400      -1.38984       1.38984       184.313       185.703    
  63  0.535951     -0.623712      -2.25510       2.25510       180.221       182.477    
  64  0.109035      -2.21609      -8.01250       8.01250       186.665       194.678    
  65  0.696476     -0.361721      -1.30784       1.30784       183.752       185.060    
  66  0.336539      -1.08904      -3.93755       3.93755       179.665       183.603    
  67  0.115832      -2.15562      -7.79386       7.79386       173.514       181.308    
  68  0.179134      -1.71962      -6.21747       6.21747       174.487       180.704    
  69  0.435434     -0.831411      -3.00606       3.00606       188.448       191.454    
  70  0.330463      -1.10726      -4.00342       4.00342       187.470       191.474    
  71  0.209525      -1.56291      -5.65087       5.65087       184.071       189.722    
  72  0.354998      -1.03564      -3.74447       3.74447       172.730       176.474    
loop,thermsimp(1:2)       34   3.53769       3.72617    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    420        166.22          0.84          1.11         25.03          0.26          0.07         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    421        164.31          0.82          1.11         25.03          0.14          0.05         27.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  420    164.31       0.9804     -1.841      2.197     -102.6     0.7491    
                      0.7401E-01  1.708     -99.70      3.340     0.4998    
                       2.164     -1.578      2.204      0.000     -40.00    
                      -1.194      0.000      0.000      0.000     -1.221    

                      -2.500     0.3460E+05 0.3294E+05  0.000      0.000    
                     -0.5672     -5.942     -4.645     -8.117      5.274    
                      -14.83     -3.167     -41.41      0.000     -2652.    

                     -0.1417E+05  8519.     -5202.     0.1388E+06  988.7    
                       6559.    -0.3444E-01 0.5137E-01  0.000     0.6984E-01
                     -0.5114E-02-0.6185E-02 0.7166E-01 0.4896E-01 0.4748E-01

                     -0.4359E-01-0.9313      0.000    -0.1526     0.4947E-02
                       0.000    -0.1238E-01-0.6708E-01-0.8105E-02-0.2127E-01
                      0.3672E-01-0.1491E-01-0.2379     -1.171      0.000    

                      -1.559    -0.6290    -0.5476    -0.4393     0.5486E-01
                      0.1069      9.063      8.778     -5499.     -4.000    
                     -0.3002    -0.8762      9.219      8.764     -5616.    

                      -4.000     0.2550    -0.9254      8.982      8.881    
                      -3263.     -7.000    -0.2868    -0.8654      9.152    
                       8.792     -5764.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       34
neval is:      420
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       35
neval is:      420


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      420     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -2.66573       2.66573       169.047       171.713    
   2  0.380700     -0.965745      -3.49175       3.49175       166.873       170.364    
   3  0.821138     -0.197064     -0.712506      0.712506       171.324       172.037    
   4  0.728654     -0.316557      -1.14455       1.14455       168.424       169.569    
   5  0.670900     -0.399135      -1.44312       1.44312       171.815       173.259    
   6  0.175262      -1.74147      -6.29648       6.29648       172.252       178.549    
   7  0.709150     -0.343688      -1.24264       1.24264       173.042       174.284    
   8  0.247481      -1.39642      -5.04890       5.04890       172.968       178.017    
   9  0.231597      -1.46276      -5.28876       5.28876       168.270       173.559    
  10  0.764757     -0.268198     -0.969697      0.969697       173.028       173.998    
  11  0.798540     -0.224970     -0.813402      0.813402       173.024       173.837    
  12  0.903782     -0.101167     -0.365781      0.365781       172.689       173.055    
  13  0.136634      -1.99045      -7.19669       7.19669       171.506       178.702    
  14  0.141955      -1.95225      -7.05856       7.05856       174.069       181.127    
  15  0.658650     -0.417563      -1.50974       1.50974       174.808       176.318    
  16  0.265370      -1.32663      -4.79657       4.79657       174.483       179.280    
  17  0.439277E-01  -3.12521      -11.2995       11.2995       172.867       184.167    
  18  0.451732     -0.794667      -2.87320       2.87320       173.455       176.328    
  19  0.475868     -0.742615      -2.68500       2.68500       175.068       177.753    
  20  0.336185      -1.09009      -3.94135       3.94135       173.585       177.526    
  21  0.519277     -0.655317      -2.36937       2.36937       171.909       174.278    
  22  0.455030     -0.787393      -2.84690       2.84690       175.545       178.392    
  23  0.272148E-01  -3.60399      -13.0306       13.0306       175.715       188.746    
  24  0.125510      -2.07537      -7.50372       7.50372       172.255       179.759    
  25  0.687868     -0.374159      -1.35281       1.35281       172.730       174.083    
  26  0.271894      -1.30234      -4.70876       4.70876       175.167       179.876    
  27  0.641335     -0.444204      -1.60607       1.60607       176.135       177.741    
  28  0.858838E-01  -2.45476      -8.87544       8.87544       174.331       183.206    
  29  0.579605     -0.545408      -1.97198       1.97198       171.708       173.680    
  30  0.249942      -1.38653      -5.01314       5.01314       175.475       180.489    
  31  0.938016     -0.639885E-01 -0.231357      0.231357       172.139       172.371    
  32  0.453695     -0.790330      -2.85752       2.85752       173.636       176.494    
  33  0.319751      -1.14021      -4.12256       4.12256       176.714       180.836    
  34  0.346149      -1.06089      -3.83575       3.83575       173.592       177.427    
  35  0.870951     -0.138169     -0.499566      0.499566       177.340       177.840    
  36  0.187313      -1.67497      -6.05604       6.05604       175.444       181.500    
  37  0.984950     -0.151645E-01 -0.548290E-01  0.548290E-01   177.542       177.597    
  38  0.524062     -0.646145      -2.33621       2.33621       174.838       177.174    
  39  0.432392     -0.838423      -3.03141       3.03141       175.329       178.360    
  40  0.687254     -0.375052      -1.35604       1.35604       175.636       176.992    
  41  0.869131     -0.140262     -0.507131      0.507131       172.127       172.634    
  42  0.350749      -1.04769      -3.78802       3.78802       174.487       178.275    
  43  0.663152E-01  -2.71334      -9.81036       9.81036       178.432       188.242    
  44  0.306857      -1.18137      -4.27138       4.27138       173.391       177.663    
  45  0.925728     -0.771751E-01 -0.279035      0.279035       178.392       178.671    
  46  0.649899     -0.430939      -1.55811       1.55811       179.763       181.321    
  47  0.492368     -0.708529      -2.56176       2.56176       176.998       179.560    
  48  0.104223      -2.26122      -8.17568       8.17568       173.514       181.690    
  49  0.345103      -1.06391      -3.84669       3.84669       180.949       184.795    
  50  0.425380     -0.854773      -3.09052       3.09052       177.988       181.078    
  51  0.922590     -0.805699E-01 -0.291309      0.291309       173.561       173.852    
  52  0.209663      -1.56226      -5.64850       5.64850       181.080       186.728    
  53  0.402772     -0.909384      -3.28797       3.28797       171.272       174.560    
  54  0.246006      -1.40240      -5.07052       5.07052       178.580       183.651    
  55  0.811871     -0.208414     -0.753542      0.753542       176.040       176.793    
  56  0.929927     -0.726495E-01 -0.262672      0.262672       180.221       180.484    
  57  0.407345     -0.898096      -3.24716       3.24716       178.427       181.674    
  58  0.870102     -0.139145     -0.503094      0.503094       176.672       177.175    
  59  0.987510     -0.125691E-01 -0.454447E-01  0.454447E-01   179.665       179.711    
  60  0.263762E-01  -3.63529      -13.1438       13.1438       180.706       193.850    
  61  0.303836      -1.19127      -4.30716       4.30716       177.621       181.928    
  62  0.494574     -0.704059      -2.54560       2.54560       182.875       185.420    
  63  0.940738     -0.610903E-01 -0.220879      0.220879       183.752       183.973    
  64  0.234997      -1.44818      -5.23605       5.23605       174.449       179.685    
  65  0.694757     -0.364193      -1.31678       1.31678       184.313       185.630    
  66  0.301995      -1.19734      -4.32912       4.32912       180.389       184.718    
  67  0.336046E-01  -3.39309      -12.2681       12.2681       177.810       190.078    
  68  0.380975     -0.965022      -3.48914       3.48914       184.071       187.560    
  69  0.147703      -1.91255      -6.91503       6.91503       182.406       189.321    
  70  0.688734     -0.372900      -1.34826       1.34826       188.448       189.796    
  71  0.588097     -0.530864      -1.91939       1.91939       187.470       189.390    
  72  0.988588     -0.114775E-01 -0.414983E-01  0.414983E-01   164.315       164.356    
loop,thermsimp(1:2)       35   2.66573       3.49175    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    422        176.14          0.83          1.11         25.16          0.15          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       35
neval is:      421
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       36
neval is:      421


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      421     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01 -0.209495      0.209495       164.315       164.524    
   2  0.628336     -0.464680      -1.68010       1.68010       168.424       170.104    
   3  0.261321      -1.34200      -4.85216       4.85216       166.873       171.725    
   4  0.256100      -1.36219      -4.92513       4.92513       169.047       173.972    
   5  0.318070      -1.14548      -4.14162       4.14162       171.324       175.466    
   6  0.895943     -0.109878     -0.397277      0.397277       172.139       172.537    
   7  0.856491     -0.154912     -0.560100      0.560100       172.127       172.687    
   8  0.269953      -1.30951      -4.73467       4.73467       172.689       177.424    
   9  0.663616     -0.410051      -1.48258       1.48258       171.815       173.298    
  10  0.249338E-01  -3.69153      -13.3471       13.3471       168.270       181.617    
  11  0.362852      -1.01376      -3.66536       3.66536       171.708       175.374    
  12  0.868529E-02  -4.74612      -17.1601       17.1601       173.024       190.184    
  13  0.705785     -0.348444      -1.25984       1.25984       173.561       174.821    
  14  0.527358     -0.639875      -2.31354       2.31354       173.028       175.341    
  15  0.831399     -0.184645     -0.667603      0.667603       172.730       173.398    
  16  0.594963     -0.519255      -1.87742       1.87742       171.909       173.786    
  17  0.501981     -0.689193      -2.49185       2.49185       173.042       175.534    
  18  0.594311     -0.520353      -1.88139       1.88139       171.272       173.154    
  19  0.618124     -0.481066      -1.73935       1.73935       174.808       176.547    
  20  0.959578E-01  -2.34385      -8.47443       8.47443       173.455       181.930    
  21  0.776845     -0.252514     -0.912993      0.912993       173.636       174.549    
  22  0.458742     -0.779266      -2.81752       2.81752       176.040       178.857    
  23  0.645084     -0.438374      -1.58499       1.58499       175.636       177.221    
  24  0.545194     -0.606614      -2.19328       2.19328       174.838       177.031    
  25  0.618072     -0.481151      -1.73965       1.73965       176.672       178.412    
  26  0.390168     -0.941179      -3.40293       3.40293       173.592       176.995    
  27  0.122318      -2.10113      -7.59687       7.59687       173.585       181.181    
  28  0.823049     -0.194740     -0.704101      0.704101       177.542       178.246    
  29  0.817844E-01  -2.50367      -9.05228       9.05228       173.391       182.444    
  30  0.189400      -1.66389      -6.01598       6.01598       176.135       182.151    
  31  0.257378      -1.35721      -4.90714       4.90714       175.068       179.975    
  32  0.854384     -0.157375     -0.569006      0.569006       177.340       177.909    
  33  0.128350      -2.05300      -7.42283       7.42283       172.968       180.390    
  34  0.410790     -0.889673      -3.21671       3.21671       174.487       177.704    
  35  0.645584     -0.437599      -1.58219       1.58219       175.329       176.911    
  36  0.309517      -1.17274      -4.24017       4.24017       175.545       179.785    
  37  0.568550     -0.564667      -2.04161       2.04161       172.252       174.294    
  38  0.702184     -0.353560      -1.27834       1.27834       178.392       179.670    
  39  0.939991     -0.618850E-01 -0.223752      0.223752       171.506       171.729    
  40  0.944105     -0.575180E-01 -0.207962      0.207962       174.483       174.691    
  41  0.202943      -1.59483      -5.76629       5.76629       176.998       182.764    
  42  0.948631E-02  -4.65791      -16.8412       16.8412       174.449       191.290    
  43  0.568674     -0.564449      -2.04082       2.04082       179.665       181.706    
  44  0.216733      -1.52909      -5.52858       5.52858       172.255       177.783    
  45  0.385755     -0.952553      -3.44406       3.44406       175.167       178.611    
  46  0.894850E-01  -2.41368      -8.72693       8.72693       180.221       188.948    
  47  0.136648      -1.99035      -7.19632       7.19632       175.475       182.672    
  48  0.473765     -0.747044      -2.70102       2.70102       176.714       179.415    
  49  0.208114E-01  -3.87225      -14.0005       14.0005       177.988       191.988    
  50  0.158159      -1.84415      -6.66773       6.66773       174.069       180.737    
  51  0.112432      -2.18541      -7.90156       7.90156       179.763       187.665    
  52  0.135630      -1.99782      -7.22334       7.22334       175.444       182.668    
  53  0.976001E-01  -2.32688      -8.41307       8.41307       178.427       186.840    
  54  0.914947     -0.888887E-01 -0.321387      0.321387       173.514       173.836    
  55  0.832290     -0.183575     -0.663735      0.663735       177.621       178.285    
  56  0.592436     -0.523513      -1.89282       1.89282       174.331       176.223    
  57  0.938858     -0.630909E-01 -0.228112      0.228112       178.580       178.808    
  58  0.390466     -0.940415      -3.40017       3.40017       183.752       187.153    
  59  0.599449     -0.511744      -1.85026       1.85026       172.867       174.718    
  60  0.225097      -1.49123      -5.39169       5.39169       180.389       185.781    
  61  0.178203      -1.72483      -6.23630       6.23630       180.949       187.185    
  62  0.634237     -0.455332      -1.64630       1.64630       182.875       184.521    
  63  0.740506     -0.300422      -1.08621       1.08621       184.313       185.399    
  64  0.619863E-01  -2.78084      -10.0544       10.0544       181.080       191.134    
  65  0.184904      -1.68792      -6.10284       6.10284       184.071       190.174    
  66  0.127308      -2.06115      -7.45229       7.45229       178.432       185.884    
  67  0.112882      -2.18141      -7.88713       7.88713       175.715       183.602    
  68  0.830124     -0.186180     -0.673154      0.673154       182.406       183.079    
  69  0.810936     -0.209567     -0.757710      0.757710       187.470       188.228    
  70  0.547031     -0.603250      -2.18111       2.18111       188.448       190.629    
  71  0.933356     -0.689686E-01 -0.249363      0.249363       177.810       178.059    
  72  0.260857      -1.34378      -4.85859       4.85859       176.135       180.994    
loop,thermsimp(1:2)       36  0.209495       1.68010    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    423        174.85          0.84          1.11         25.24          0.16          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       36
neval is:      422
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       37
neval is:      422


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      422     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.577652     -0.548784      -1.98419       1.98419       164.315       166.299    
   2  0.954687     -0.463716E-01 -0.167661      0.167661       168.424       168.592    
   3  0.530232     -0.634441      -2.29389       2.29389       166.873       169.167    
   4  0.762581     -0.271046     -0.979996      0.979996       171.506       172.486    
   5  0.261488      -1.34137      -4.84985       4.84985       172.139       176.989    
   6  0.639820     -0.446569      -1.61462       1.61462       172.127       173.742    
   7  0.527286     -0.640012      -2.31403       2.31403       171.272       173.586    
   8  0.819676     -0.198846     -0.718948      0.718948       171.815       172.534    
   9  0.564974     -0.570976      -2.06442       2.06442       172.730       174.794    
  10  0.313261      -1.16072      -4.19670       4.19670       171.909       176.106    
  11  0.741013     -0.299737      -1.08373       1.08373       173.514       174.598    
  12  0.286155      -1.25122      -4.52392       4.52392       169.047       173.571    
  13  0.145515      -1.92747      -6.96899       6.96899       172.252       179.221    
  14  0.417445     -0.873602      -3.15860       3.15860       173.636       176.795    
  15  0.110117      -2.20621      -7.97678       7.97678       174.483       182.460    
  16  0.798228     -0.225361     -0.814817      0.814817       172.867       173.682    
  17  0.981317     -0.188596E-01 -0.681889E-01  0.681889E-01   173.561       173.629    
  18  0.947313     -0.541256E-01 -0.195697      0.195697       173.028       173.224    
  19  0.979175     -0.210453E-01 -0.760914E-01  0.760914E-01   171.708       171.784    
  20  0.507968     -0.677337      -2.44898       2.44898       171.324       173.773    
  21  0.313327      -1.16051      -4.19594       4.19594       173.042       177.238    
  22  0.174912      -1.74347      -6.30372       6.30372       174.331       180.634    
  23  0.278222      -1.27933      -4.62557       4.62557       174.808       179.434    
  24  0.551320     -0.595439      -2.15287       2.15287       175.329       177.481    
  25  0.509281     -0.674756      -2.43965       2.43965       173.592       176.031    
  26  0.202795E-01  -3.89814      -14.0941       14.0941       174.838       188.932    
  27  0.394215     -0.930860      -3.36562       3.36562       175.636       179.001    
  28  0.463302     -0.769377      -2.78176       2.78176       172.689       175.471    
  29  0.132020      -2.02480      -7.32089       7.32089       174.487       181.808    
  30  0.330810      -1.10621      -3.99963       3.99963       172.255       176.255    
  31  0.415110     -0.879212      -3.17888       3.17888       177.340       180.519    
  32  0.381803     -0.962850      -3.48128       3.48128       177.810       181.291    
  33  0.209798E-01  -3.86420      -13.9714       13.9714       177.542       191.513    
  34  0.906539     -0.981217E-01 -0.354769      0.354769       177.621       177.976    
  35  0.507460     -0.678337      -2.45260       2.45260       176.672       179.125    
  36  0.694619     -0.364392      -1.31750       1.31750       175.167       176.485    
  37  0.704259     -0.350610      -1.26767       1.26767       178.580       179.848    
  38  0.953152     -0.479806E-01 -0.173479      0.173479       176.040       176.213    
  39  0.393408     -0.932907      -3.37302       3.37302       176.714       180.087    
  40  0.361825      -1.01659      -3.67560       3.67560       178.392       182.067    
  41  0.420592     -0.866091      -3.13145       3.13145       175.545       178.677    
  42  0.474514     -0.745463      -2.69530       2.69530       175.068       177.763    
  43  0.769306     -0.262267     -0.948253      0.948253       172.968       173.916    
  44  0.881065     -0.126624     -0.457821      0.457821       174.069       174.527    
  45  0.298206      -1.20997      -4.37477       4.37477       176.135       180.510    
  46  0.364982E-01  -3.31049      -11.9694       11.9694       173.585       185.554    
  47  0.835758     -0.179417     -0.648700      0.648700       168.270       168.919    
  48  0.936392     -0.657215E-01 -0.237623      0.237623       179.665       179.903    
  49  0.213316      -1.54498      -5.58604       5.58604       173.455       179.041    
  50  0.942026     -0.597221E-01 -0.215932      0.215932       176.135       176.351    
  51  0.130068      -2.03970      -7.37474       7.37474       173.391       180.766    
  52  0.115047      -2.16241      -7.81842       7.81842       175.444       183.263    
  53  0.320926      -1.13654      -4.10930       4.10930       175.475       179.585    
  54  0.256901      -1.35906      -4.91384       4.91384       176.998       181.912    
  55  0.712293E-02  -4.94444      -17.8771       17.8771       182.406       200.283    
  56  0.470217     -0.754561      -2.72820       2.72820       175.715       178.443    
  57  0.934029     -0.682473E-01 -0.246755      0.246755       182.875       183.121    
  58  0.312307      -1.16377      -4.20773       4.20773       184.313       188.521    
  59  0.292579      -1.22902      -4.44365       4.44365       180.389       184.833    
  60  0.811492     -0.208881     -0.755233      0.755233       178.432       179.187    
  61  0.424749     -0.856258      -3.09589       3.09589       178.427       181.523    
  62  0.574444     -0.554353      -2.00432       2.00432       183.752       185.757    
  63  0.884133     -0.123147     -0.445252      0.445252       180.949       181.394    
  64  0.515226     -0.663150      -2.39769       2.39769       179.763       182.161    
  65  0.129966      -2.04049      -7.37759       7.37759       187.470       194.848    
  66  0.769822     -0.261596     -0.945829      0.945829       180.221       181.167    
  67  0.987280     -0.128019E-01 -0.462868E-01  0.462868E-01   184.071       184.118    
  68  0.424664     -0.856458      -3.09661       3.09661       173.024       176.120    
  69  0.663727     -0.409884      -1.48198       1.48198       188.448       189.930    
  70  0.281797      -1.26657      -4.57941       4.57941       181.080       185.659    
  71  0.949094     -0.522477E-01 -0.188907      0.188907       174.449       174.638    
  72  0.642131E-01  -2.74555      -9.92682       9.92682       174.846       184.772    
loop,thermsimp(1:2)       37   1.98419      0.167661    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    424        176.45          0.84          1.11         25.09          0.24          0.05         27.34
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       37
neval is:      423
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       38
neval is:      423


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      423     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708199     -0.345030      -1.24749       1.24749       164.315       165.562    
   2  0.656861     -0.420283      -1.51958       1.51958       168.424       169.944    
   3  0.531016     -0.632963      -2.28854       2.28854       168.270       170.559    
   4  0.259645      -1.34844      -4.87543       4.87543       166.873       171.748    
   5  0.509285E-01  -2.97733      -10.7649       10.7649       171.708       182.473    
   6  0.222403      -1.50327      -5.43522       5.43522       171.506       176.941    
   7  0.883122E-01  -2.42688      -8.77463       8.77463       171.815       180.590    
   8  0.689941     -0.371150      -1.34193       1.34193       173.028       174.370    
   9  0.811351     -0.209054     -0.755858      0.755858       169.047       169.803    
  10  0.252526      -1.37624      -4.97595       4.97595       171.272       176.248    
  11  0.229840      -1.47037      -5.31629       5.31629       173.561       178.877    
  12  0.108257      -2.22324      -8.03837       8.03837       172.867       180.906    
  13  0.933379E-02  -4.67411      -16.8998       16.8998       172.127       189.027    
  14  0.685050E-01  -2.68085      -9.69289       9.69289       171.324       181.017    
  15  0.875782     -0.132638     -0.479568      0.479568       172.968       173.447    
  16  0.592250     -0.523826      -1.89395       1.89395       174.069       175.963    
  17  0.259190E-01  -3.65278      -13.2070       13.2070       173.514       186.722    
  18  0.411624     -0.887646      -3.20938       3.20938       174.449       177.659    
  19  0.215731      -1.53372      -5.54534       5.54534       172.730       178.275    
  20  0.104157      -2.26185      -8.17797       8.17797       172.689       180.867    
  21  0.796475     -0.227560     -0.822767      0.822767       173.592       174.414    
  22  0.316732      -1.14970      -4.15686       4.15686       171.909       176.066    
  23  0.868566     -0.140911     -0.509479      0.509479       173.024       173.533    
  24  0.932817     -0.695461E-01 -0.251451      0.251451       176.040       176.291    
  25  0.704796E-01  -2.65243      -9.59015       9.59015       172.255       181.845    
  26  0.584289     -0.537360      -1.94288       1.94288       176.135       178.078    
  27  0.345306      -1.06332      -3.84456       3.84456       175.167       179.012    
  28  0.367589E-01  -3.30338      -11.9437       11.9437       173.636       185.580    
  29  0.470285     -0.754417      -2.72767       2.72767       172.139       174.867    
  30  0.303718      -1.19165      -4.30855       4.30855       173.042       177.350    
  31  0.298675      -1.20840      -4.36909       4.36909       175.329       179.698    
  32  0.506100     -0.681022      -2.46231       2.46231       175.068       177.530    
  33  0.240488      -1.42508      -5.15254       5.15254       177.621       182.774    
  34  0.673726     -0.394932      -1.42792       1.42792       175.715       177.143    
  35  0.303531      -1.19227      -4.31078       4.31078       175.545       179.856    
  36  0.450278     -0.797890      -2.88486       2.88486       175.636       178.521    
  37  0.850970     -0.161378     -0.583479      0.583479       173.455       174.039    
  38  0.370442     -0.993060      -3.59051       3.59051       176.672       180.263    
  39  0.328520      -1.11316      -4.02474       4.02474       178.432       182.457    
  40  0.194991      -1.63480      -5.91080       5.91080       172.252       178.163    
  41  0.547740     -0.601955      -2.17643       2.17643       174.808       176.985    
  42  0.574734     -0.553847      -2.00249       2.00249       175.475       177.478    
  43  0.900615     -0.104678     -0.378474      0.378474       178.580       178.959    
  44  0.316870      -1.14926      -4.15528       4.15528       179.665       183.820    
  45  0.961546     -0.392133E-01 -0.141780      0.141780       176.714       176.855    
  46  0.714054     -0.336796      -1.21772       1.21772       176.135       177.353    
  47  0.325407E-01  -3.42526      -12.3844       12.3844       177.340       189.725    
  48  0.264027      -1.33170      -4.81492       4.81492       174.331       179.145    
  49  0.139486      -1.96979      -7.12199       7.12199       173.391       180.513    
  50  0.568563     -0.564643      -2.04153       2.04153       180.221       182.263    
  51  0.691470     -0.368936      -1.33393       1.33393       177.810       179.144    
  52  0.214963      -1.53729      -5.55824       5.55824       180.949       186.507    
  53  0.515636     -0.662353      -2.39481       2.39481       178.427       180.822    
  54  0.803808     -0.218395     -0.789631      0.789631       174.487       175.277    
  55  0.930258     -0.722938E-01 -0.261386      0.261386       176.998       177.259    
  56  0.121241      -2.10998      -7.62885       7.62885       178.392       186.021    
  57  0.510661     -0.672049      -2.42986       2.42986       179.763       182.193    
  58  0.689134     -0.372319      -1.34616       1.34616       174.483       175.830    
  59  0.716530     -0.333335      -1.20521       1.20521       182.875       184.080    
  60  0.502196E-01  -2.99135      -10.8155       10.8155       175.444       186.260    
  61  0.901495     -0.103701     -0.374942      0.374942       184.071       184.446    
  62  0.933572     -0.687370E-01 -0.248526      0.248526       174.846       175.094    
  63  0.385092E-02  -5.55944      -20.1008       20.1008       180.389       200.490    
  64  0.965118     -0.355051E-01 -0.128373      0.128373       173.585       173.713    
  65  0.112744E-01  -4.48522      -16.2168       16.2168       181.080       197.296    
  66  0.836992     -0.177941     -0.643364      0.643364       183.752       184.396    
  67  0.993563     -0.645748E-02 -0.233477E-01  0.233477E-01   184.313       184.336    
  68  0.873807     -0.134896     -0.487729      0.487729       174.838       175.326    
  69  0.915114E-01  -2.39129      -8.64597       8.64597       188.448       197.094    
  70  0.198055      -1.61921      -5.85442       5.85442       177.542       183.396    
  71  0.480641     -0.732636      -2.64892       2.64892       187.470       190.119    
  72  0.678735     -0.387524      -1.40113       1.40113       176.450       177.851    
loop,thermsimp(1:2)       38   1.24749       1.51958    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    425        172.42          0.84          1.11         25.02          0.17          0.05         27.19
Just calling func    0   0         27.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       38
neval is:      424
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       39
neval is:      424


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      424     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.796195     -0.227912     -0.824039      0.824039       164.315       165.139    
   2  0.306803      -1.18155      -4.27201       4.27201       169.047       173.319    
   3  0.857946     -0.153214     -0.553962      0.553962       168.424       168.978    
   4  0.363815      -1.01111      -3.65577       3.65577       168.270       171.926    
   5  0.755322E-01  -2.58320      -9.33982       9.33982       166.873       176.213    
   6  0.345998E-01  -3.36391      -12.1626       12.1626       172.968       185.130    
   7  0.280587      -1.27087      -4.59497       4.59497       173.024       177.619    
   8  0.907418     -0.971519E-01 -0.351263      0.351263       173.585       173.936    
   9  0.696180     -0.362147      -1.30938       1.30938       173.455       174.765    
  10  0.640049     -0.446211      -1.61332       1.61332       173.028       174.641    
  11  0.620842     -0.476679      -1.72348       1.72348       173.592       175.315    
  12  0.850691     -0.161706     -0.584666      0.584666       172.139       172.724    
  13  0.308317      -1.17663      -4.25421       4.25421       174.846       179.100    
  14  0.198496      -1.61698      -5.84638       5.84638       174.487       180.333    
  15  0.119809      -2.12186      -7.67180       7.67180       174.838       182.510    
  16  0.905871     -0.988582E-01 -0.357432      0.357432       174.483       174.841    
  17  0.386344     -0.951028      -3.43854       3.43854       174.069       177.507    
  18  0.112809      -2.18206      -7.88946       7.88946       171.909       179.798    
  19  0.682866     -0.381457      -1.37920       1.37920       171.272       172.652    
  20  0.819362     -0.199230     -0.720337      0.720337       176.040       176.760    
  21  0.412742     -0.884933      -3.19957       3.19957       176.714       179.913    
  22  0.211811E-01  -3.85464      -13.9369       13.9369       171.506       185.443    
  23  0.422800     -0.860857      -3.11252       3.11252       174.808       177.921    
  24  0.826028     -0.191126     -0.691037      0.691037       175.715       176.406    
  25  0.457858     -0.781197      -2.82450       2.82450       176.998       179.822    
  26  0.551067     -0.595900      -2.15454       2.15454       173.042       175.196    
  27  0.160440      -1.82984      -6.61596       6.61596       176.135       182.751    
  28  0.240310      -1.42582      -5.15522       5.15522       175.475       180.631    
  29  0.614859     -0.486362      -1.75849       1.75849       175.068       176.827    
  30  0.489204     -0.714976      -2.58507       2.58507       174.449       177.034    
  31  0.151691      -1.88591      -6.81870       6.81870       176.450       183.269    
  32  0.221776      -1.50609      -5.44542       5.44542       176.135       181.581    
  33  0.333050      -1.09946      -3.97522       3.97522       172.252       176.228    
  34  0.905001     -0.998190E-01 -0.360906      0.360906       172.730       173.091    
  35  0.598599     -0.513164      -1.85540       1.85540       175.636       177.491    
  36  0.603742     -0.504608      -1.82446       1.82446       173.561       175.386    
  37  0.989214     -0.108448E-01 -0.392105E-01  0.392105E-01   178.580       178.619    
  38  0.175887      -1.73792      -6.28362       6.28362       175.167       181.451    
  39  0.708621     -0.344434      -1.24534       1.24534       177.810       179.055    
  40  0.940581     -0.612570E-01 -0.221481      0.221481       174.331       174.552    
  41  0.870068     -0.139184     -0.503233      0.503233       175.329       175.832    
  42  0.260264      -1.34606      -4.86682       4.86682       175.545       180.412    
  43  0.216654      -1.52946      -5.52991       5.52991       176.672       182.202    
  44  0.553762     -0.591020      -2.13689       2.13689       173.391       175.528    
  45  0.891465     -0.114889     -0.415394      0.415394       171.815       172.231    
  46  0.320048      -1.13928      -4.11920       4.11920       178.427       182.547    
  47  0.163518      -1.81083      -6.54726       6.54726       172.689       179.236    
  48  0.652431     -0.427050      -1.54404       1.54404       172.867       174.411    
  49  0.317737      -1.14653      -4.14541       4.14541       171.324       175.469    
  50  0.321191      -1.13572      -4.10631       4.10631       172.255       176.361    
  51  0.750162     -0.287466      -1.03936       1.03936       179.763       180.802    
  52  0.172611      -1.75672      -6.35160       6.35160       180.221       186.573    
  53  0.413556     -0.882963      -3.19245       3.19245       178.432       181.624    
  54  0.277750      -1.28103      -4.63172       4.63172       171.708       176.340    
  55  0.326826      -1.11833      -4.04343       4.04343       177.621       181.665    
  56  0.922327     -0.808557E-01 -0.292342      0.292342       177.542       177.834    
  57  0.572255     -0.558170      -2.01812       2.01812       179.665       181.683    
  58  0.149549      -1.90013      -6.87012       6.87012       182.875       189.745    
  59  0.266959      -1.32066      -4.77499       4.77499       184.313       189.088    
  60  0.636795     -0.451307      -1.63175       1.63175       183.752       185.384    
  61  0.868293     -0.141226     -0.510619      0.510619       184.071       184.582    
  62  0.597909     -0.514316      -1.85956       1.85956       173.636       175.496    
  63  0.121507      -2.10778      -7.62091       7.62091       178.392       186.013    
  64  0.606075     -0.500751      -1.81052       1.81052       175.444       177.255    
  65  0.390347     -0.940720      -3.40127       3.40127       180.949       184.350    
  66  0.175787      -1.73849      -6.28568       6.28568       173.514       179.800    
  67  0.756550     -0.278986      -1.00870       1.00870       172.127       173.136    
  68  0.753054     -0.283618      -1.02545       1.02545       177.340       178.366    
  69  0.451941     -0.794203      -2.87152       2.87152       187.470       190.342    
  70  0.637492     -0.450214      -1.62780       1.62780       188.448       190.075    
  71  0.462733     -0.770606      -2.78621       2.78621       181.080       183.866    
  72  0.785570E-02  -4.84652      -17.5231       17.5231       172.422       189.945    
loop,thermsimp(1:2)       39  0.824039       4.27201    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    426        175.77          0.84          1.11         25.14          0.12          0.05         27.26
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       39
neval is:      425
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       40
neval is:      425


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      425     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783363     -0.244159     -0.882783      0.882783       164.315       165.197    
   2  0.179321      -1.71858      -6.21370       6.21370       168.424       174.638    
   3  0.331080      -1.10539      -3.99667       3.99667       168.270       172.267    
   4  0.130870      -2.03355      -7.35253       7.35253       171.815       179.168    
   5  0.604904     -0.502686      -1.81751       1.81751       171.272       173.090    
   6  0.140568      -1.96207      -7.09406       7.09406       172.139       179.233    
   7  0.127414      -2.06031      -7.44928       7.44928       172.730       180.179    
   8  0.389565     -0.942725      -3.40852       3.40852       172.127       175.536    
   9  0.835608     -0.179595     -0.649346      0.649346       169.047       169.697    
  10  0.934873     -0.673445E-01 -0.243491      0.243491       173.585       173.828    
  11  0.639074     -0.447735      -1.61883       1.61883       172.867       174.486    
  12  0.349757      -1.05052      -3.79825       3.79825       174.331       178.129    
  13  0.175521      -1.74000      -6.29114       6.29114       173.028       179.319    
  14  0.761611     -0.272320     -0.984601      0.984601       173.455       174.440    
  15  0.162952      -1.81430      -6.55978       6.55978       174.483       181.043    
  16  0.542858     -0.610907      -2.20880       2.20880       173.042       175.251    
  17  0.715099     -0.335334      -1.21243       1.21243       173.592       174.804    
  18  0.996052     -0.395608E-02 -0.143036E-01  0.143036E-01   173.561       173.575    
  19  0.668265     -0.403070      -1.45734       1.45734       171.324       172.781    
  20  0.294619      -1.22207      -4.41854       4.41854       173.636       178.055    
  21  0.721551     -0.326352      -1.17996       1.17996       173.391       174.571    
  22  0.216610      -1.52966      -5.53064       5.53064       175.329       180.859    
  23  0.649086     -0.432191      -1.56263       1.56263       166.873       168.435    
  24  0.692922E-01  -2.66942      -9.65158       9.65158       172.252       181.904    
  25  0.271271      -1.30464      -4.71705       4.71705       171.708       176.425    
  26  0.407239     -0.898355      -3.24810       3.24810       172.255       175.503    
  27  0.435034     -0.832331      -3.00938       3.00938       175.715       178.724    
  28  0.638725     -0.448281      -1.62081       1.62081       176.040       177.661    
  29  0.932325     -0.700735E-01 -0.253358      0.253358       175.068       175.321    
  30  0.958672     -0.422065E-01 -0.152602      0.152602       174.449       174.602    
  31  0.336870      -1.08806      -3.93399       3.93399       175.444       179.378    
  32  0.453036     -0.791783      -2.86277       2.86277       175.636       178.499    
  33  0.422569     -0.861402      -3.11449       3.11449       174.069       177.183    
  34  0.596674     -0.516385      -1.86704       1.86704       173.024       174.891    
  35  0.586088     -0.534286      -1.93177       1.93177       177.542       179.474    
  36  0.174805      -1.74409      -6.30593       6.30593       174.808       181.114    
  37  0.854432     -0.157318     -0.568801      0.568801       177.340       177.909    
  38  0.754323     -0.281935      -1.01937       1.01937       178.580       179.600    
  39  0.956897     -0.440598E-01 -0.159303      0.159303       177.810       177.969    
  40  0.334431      -1.09533      -3.96027       3.96027       174.846       178.806    
  41  0.750609     -0.286871      -1.03721       1.03721       172.689       173.726    
  42  0.778602     -0.250255     -0.904822      0.904822       171.909       172.814    
  43  0.330765      -1.10635      -4.00011       4.00011       173.514       177.515    
  44  0.601104     -0.508987      -1.84030       1.84030       176.998       178.838    
  45  0.578570     -0.547197      -1.97845       1.97845       176.714       178.692    
  46  0.381025     -0.964891      -3.48867       3.48867       174.487       177.976    
  47  0.764260     -0.268847     -0.972044      0.972044       175.545       176.517    
  48  0.194556      -1.63704      -5.91888       5.91888       175.475       181.394    
  49  0.785702E-01  -2.54376      -9.19724       9.19724       179.763       188.960    
  50  0.253837E-01  -3.67365      -13.2825       13.2825       175.167       188.450    
  51  0.149049      -1.90348      -6.88223       6.88223       176.135       183.018    
  52  0.591675     -0.524797      -1.89746       1.89746       178.432       180.329    
  53  0.471206     -0.752459      -2.72060       2.72060       177.621       180.342    
  54  0.734409     -0.308689      -1.11610       1.11610       179.665       180.781    
  55  0.183368      -1.69626      -6.13301       6.13301       176.672       182.805    
  56  0.296126      -1.21697      -4.40008       4.40008       174.838       179.238    
  57  0.664218     -0.409144      -1.47930       1.47930       178.427       179.907    
  58  0.863102     -0.147223     -0.532300      0.532300       176.135       176.667    
  59  0.142776      -1.94648      -7.03770       7.03770       176.450       183.488    
  60  0.995423     -0.458719E-02 -0.165855E-01  0.165855E-01   181.080       181.096    
  61  0.721084     -0.327000      -1.18230       1.18230       180.949       182.131    
  62  0.336569      -1.08895      -3.93722       3.93722       184.071       188.008    
  63  0.785569     -0.241347     -0.872615      0.872615       172.968       173.840    
  64  0.518120     -0.657548      -2.37743       2.37743       183.752       186.130    
  65  0.988600     -0.114656E-01 -0.414551E-01  0.414551E-01   171.506       171.547    
  66  0.584794     -0.536495      -1.93976       1.93976       178.392       180.331    
  67  0.724983     -0.321607      -1.16281       1.16281       180.221       181.384    
  68  0.386472E-01  -3.25328      -11.7626       11.7626       184.313       196.076    
  69  0.313021      -1.16149      -4.19947       4.19947       182.875       187.074    
  70  0.234708      -1.44941      -5.24051       5.24051       172.422       177.663    
  71  0.744664     -0.294822      -1.06596       1.06596       188.448       189.514    
  72  0.514978     -0.663630      -2.39943       2.39943       175.774       178.174    
loop,thermsimp(1:2)       40  0.882783       6.21370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    427        170.12          0.84          1.11         25.06          0.17          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    170.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       40
neval is:      426
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       41
neval is:      426


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      426     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762547     -0.271091     -0.980159      0.980159       164.315       165.295    
   2  0.700395     -0.356110      -1.28755       1.28755       166.873       168.160    
   3  0.110610      -2.20174      -7.96063       7.96063       169.047       177.008    
   4  0.542261     -0.612007      -2.21278       2.21278       171.506       173.718    
   5  0.993402     -0.662023E-02 -0.239361E-01  0.239361E-01   168.270       168.294    
   6  0.370923     -0.991761      -3.58582       3.58582       171.324       174.910    
   7  0.311008      -1.16794      -4.22280       4.22280       171.909       176.132    
   8  0.120775      -2.11383      -7.64277       7.64277       171.272       178.915    
   9  0.496739     -0.699690      -2.52980       2.52980       173.561       176.091    
  10  0.823539     -0.194144     -0.701949      0.701949       172.689       173.391    
  11  0.401420     -0.912746      -3.30013       3.30013       173.585       176.885    
  12  0.467810E-01  -3.06228      -11.0720       11.0720       172.968       184.040    
  13  0.104633      -2.25729      -8.16148       8.16148       173.455       181.617    
  14  0.233534      -1.45443      -5.25864       5.25864       172.867       178.126    
  15  0.959269     -0.415834E-01 -0.150349      0.150349       173.391       173.542    
  16  0.359845      -1.02208      -3.69544       3.69544       174.449       178.145    
  17  0.141753E-01  -4.25626      -15.3889       15.3889       168.424       183.813    
  18  0.566935     -0.567510      -2.05189       2.05189       173.592       175.643    
  19  0.901077     -0.104164     -0.376617      0.376617       173.024       173.400    
  20  0.465285     -0.765104      -2.76632       2.76632       173.042       175.808    
  21  0.315152      -1.15470      -4.17495       4.17495       175.068       179.243    
  22  0.954826     -0.462256E-01 -0.167134      0.167134       172.255       172.422    
  23  0.110663      -2.20127      -7.95892       7.95892       172.127       180.086    
  24  0.851067     -0.161264     -0.583067      0.583067       171.708       172.291    
  25  0.768372     -0.263481     -0.952643      0.952643       175.545       176.498    
  26  0.243081      -1.41436      -5.11377       5.11377       176.135       181.249    
  27  0.434279     -0.834069      -3.01567       3.01567       174.069       177.084    
  28  0.855138     -0.156492     -0.565814      0.565814       173.514       174.080    
  29  0.238302      -1.43422      -5.18557       5.18557       176.040       181.225    
  30  0.445547     -0.808452      -2.92305       2.92305       172.422       175.345    
  31  0.290285      -1.23689      -4.47211       4.47211       177.340       181.812    
  32  0.479492     -0.735029      -2.65758       2.65758       177.810       180.467    
  33  0.359712      -1.02245      -3.69678       3.69678       174.487       178.184    
  34  0.429040     -0.846204      -3.05954       3.05954       173.636       176.696    
  35  0.570900     -0.560541      -2.02670       2.02670       174.331       176.357    
  36  0.151312      -1.88841      -6.82776       6.82776       175.774       182.602    
  37  0.671837     -0.397739      -1.43807       1.43807       175.636       177.074    
  38  0.699384     -0.357556      -1.29278       1.29278       176.714       178.006    
  39  0.337756      -1.08543      -3.92449       3.92449       175.715       179.639    
  40  0.508282     -0.676718      -2.44675       2.44675       174.846       177.292    
  41  0.153085      -1.87676      -6.78564       6.78564       176.998       183.784    
  42  0.859571     -0.151322     -0.547121      0.547121       171.815       172.363    
  43  0.240559      -1.42479      -5.15148       5.15148       172.139       177.291    
  44  0.956907     -0.440496E-01 -0.159266      0.159266       174.838       174.997    
  45  0.695010     -0.363829      -1.31546       1.31546       173.028       174.343    
  46  0.258459      -1.35302      -4.89199       4.89199       175.444       180.336    
  47  0.851968     -0.160207     -0.579245      0.579245       177.542       178.121    
  48  0.755235     -0.280726      -1.01499       1.01499       178.580       179.595    
  49  0.618135     -0.481049      -1.73928       1.73928       178.427       180.167    
  50  0.366071      -1.00493      -3.63342       3.63342       172.730       176.363    
  51  0.768800     -0.262924     -0.950631      0.950631       178.432       179.382    
  52  0.704229     -0.350652      -1.26782       1.26782       178.392       179.660    
  53  0.900469     -0.104839     -0.379057      0.379057       177.621       178.000    
  54  0.175085      -1.74249      -6.30014       6.30014       179.665       185.965    
  55  0.905870     -0.988595E-01 -0.357437      0.357437       175.329       175.686    
  56  0.107963E-01  -4.52856      -16.3735       16.3735       174.483       190.857    
  57  0.493411     -0.706413      -2.55411       2.55411       181.080       183.634    
  58  0.538221     -0.619486      -2.23982       2.23982       174.808       177.048    
  59  0.626575     -0.467488      -1.69025       1.69025       180.221       181.912    
  60  0.904814     -0.100026     -0.361653      0.361653       175.475       175.837    
  61  0.266015      -1.32420      -4.78779       4.78779       172.252       177.040    
  62  0.328156      -1.11427      -4.02875       4.02875       180.949       184.977    
  63  0.664881     -0.408147      -1.47570       1.47570       176.672       178.148    
  64  0.858127     -0.153003     -0.553200      0.553200       176.135       176.689    
  65  0.299604      -1.20529      -4.35787       4.35787       176.450       180.808    
  66  0.220344E-01  -3.81515      -13.7941       13.7941       183.752       197.546    
  67  0.671608     -0.398081      -1.43930       1.43930       182.875       184.314    
  68  0.576408E-01  -2.85353      -10.3172       10.3172       184.071       194.388    
  69  0.905087     -0.997240E-01 -0.360563      0.360563       175.167       175.528    
  70  0.830967     -0.185166     -0.669486      0.669486       179.763       180.433    
  71  0.810927     -0.209577     -0.757749      0.757749       188.448       189.205    
  72  0.374578     -0.981955      -3.55036       3.55036       170.115       173.666    
loop,thermsimp(1:2)       41  0.980159       1.28755    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    428        170.98          0.83          1.11         25.06          0.22          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    170.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       41
neval is:      427
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       42
neval is:      427


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      427
neval,tstepnext:      427     427

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633054     -0.457200      -1.65306       1.65306       164.315       165.968    
   2  0.416661     -0.875483      -3.16540       3.16540       166.873       170.038    
   3  0.671058E-01  -2.70149      -9.76751       9.76751       168.270       178.038    
   4  0.701446     -0.354612      -1.28214       1.28214       171.708       172.991    
   5  0.176715      -1.73321      -6.26662       6.26662       171.815       178.082    
   6  0.223035      -1.50042      -5.42494       5.42494       172.255       177.680    
   7  0.907694E-01  -2.39943      -8.67540       8.67540       172.689       181.365    
   8  0.113202      -2.17858      -7.87688       7.87688       173.024       180.901    
   9  0.443192     -0.813753      -2.94221       2.94221       173.391       176.334    
  10  0.999048     -0.952172E-03 -0.344268E-02  0.344268E-02   170.115       170.119    
  11  0.606200     -0.500546      -1.80978       1.80978       171.506       173.315    
  12  0.120370      -2.11718      -7.65490       7.65490       173.514       181.169    
  13  0.448885     -0.800988      -2.89606       2.89606       173.028       175.924    
  14  0.531880     -0.631338      -2.28267       2.28267       171.324       173.607    
  15  0.804789     -0.217176     -0.785221      0.785221       174.838       175.623    
  16  0.427230     -0.850433      -3.07483       3.07483       172.422       175.497    
  17  0.222958      -1.50077      -5.42620       5.42620       175.167       180.593    
  18  0.850765     -0.161619     -0.584350      0.584350       173.592       174.176    
  19  0.926988     -0.758150E-01 -0.274117      0.274117       175.329       175.603    
  20  0.729073     -0.315981      -1.14246       1.14246       173.042       174.184    
  21  0.411512     -0.887916      -3.21036       3.21036       175.475       178.686    
  22  0.692157     -0.367942      -1.33034       1.33034       173.561       174.892    
  23  0.917319     -0.862998E-01 -0.312026      0.312026       171.909       172.221    
  24  0.376398     -0.977107      -3.53283       3.53283       174.331       177.863    
  25  0.276694      -1.28484      -4.64549       4.64549       172.730       177.375    
  26  0.296319      -1.21632      -4.39774       4.39774       175.545       179.943    
  27  0.395623     -0.927294      -3.35273       3.35273       176.135       179.488    
  28  0.397122     -0.923511      -3.33905       3.33905       173.636       176.975    
  29  0.414944     -0.879612      -3.18033       3.18033       173.585       176.765    
  30  0.249325      -1.38900      -5.02206       5.02206       169.047       174.069    
  31  0.668798     -0.402273      -1.45446       1.45446       172.252       173.707    
  32  0.765717     -0.266942     -0.965159      0.965159       174.808       175.773    
  33  0.420183     -0.867066      -3.13497       3.13497       175.636       178.771    
  34  0.851189     -0.161121     -0.582550      0.582550       174.069       174.651    
  35  0.733154     -0.310400      -1.12228       1.12228       172.139       173.262    
  36  0.721185E-01  -2.62944      -9.50704       9.50704       174.846       184.353    
  37  0.356766      -1.03068      -3.72652       3.72652       177.621       181.348    
  38  0.654280     -0.424220      -1.53381       1.53381       176.714       178.247    
  39  0.662515     -0.411712      -1.48859       1.48859       177.542       179.031    
  40  0.164156      -1.80694      -6.53317       6.53317       172.867       179.400    
  41  0.116179      -2.15263      -7.78305       7.78305       174.449       182.232    
  42  0.134772      -2.00417      -7.24630       7.24630       176.672       183.918    
  43  0.298842      -1.20784      -4.36707       4.36707       174.487       178.854    
  44  0.583690     -0.538385      -1.94659       1.94659       171.272       173.219    
  45  0.894896     -0.111047     -0.401504      0.401504       175.068       175.470    
  46  0.148951      -1.90414      -6.88462       6.88462       178.432       185.316    
  47  0.315615      -1.15323      -4.16963       4.16963       178.580       182.750    
  48  0.810942     -0.209558     -0.757680      0.757680       175.715       176.473    
  49  0.697490     -0.360268      -1.30259       1.30259       178.392       179.694    
  50  0.440376     -0.820127      -2.96526       2.96526       172.127       175.093    
  51  0.987477     -0.126020E-01 -0.455637E-01  0.455637E-01   178.427       178.473    
  52  0.788027     -0.238223     -0.861320      0.861320       175.444       176.306    
  53  0.304959      -1.18758      -4.29382       4.29382       179.763       184.057    
  54  0.918046     -0.855075E-01 -0.309161      0.309161       177.810       178.119    
  55  0.436819     -0.828237      -2.99458       2.99458       176.450       179.445    
  56  0.983182     -0.169609E-01 -0.613241E-01  0.613241E-01   176.040       176.101    
  57  0.635334     -0.453604      -1.64005       1.64005       176.135       177.775    
  58  0.331329      -1.10464      -3.99395       3.99395       173.455       177.449    
  59  0.410737     -0.889801      -3.21717       3.21717       177.340       180.557    
  60  0.351373      -1.04591      -3.78159       3.78159       180.221       184.003    
  61  0.340199      -1.07823      -3.89844       3.89844       175.774       179.673    
  62  0.510393     -0.672575      -2.43177       2.43177       181.080       183.511    
  63  0.249777      -1.38719      -5.01552       5.01552       176.998       182.014    
  64  0.432656     -0.837813      -3.02920       3.02920       168.424       171.453    
  65  0.323628      -1.12816      -4.07899       4.07899       172.968       177.047    
  66  0.179237      -1.71905      -6.21540       6.21540       182.875       189.090    
  67  0.836000     -0.179126     -0.647649      0.647649       180.949       181.596    
  68  0.438142     -0.825211      -2.98364       2.98364       179.665       182.649    
  69  0.398911     -0.919018      -3.32281       3.32281       188.448       191.770    
  70  0.700182     -0.356415      -1.28866       1.28866       174.483       175.772    
  71  0.792556     -0.232492     -0.840601      0.840601       184.071       184.912    
  72  0.156512      -1.85462      -6.70558       6.70558       170.984       177.689    
loop,thermsimp(1:2)       42   1.65306       3.16540    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    429        168.31          0.85          1.11         25.05          0.15          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    430        207.46          0.84          1.11         25.41          0.04          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    168.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.61561               427
loop is:       42
neval is:      429
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    3.61561               427
loop is:       43
neval is:      429


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.80780               498

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      429     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.165518      -1.79868      -3.25165       3.25165       164.315       167.566    
   2  0.737067     -0.305077     -0.551519      0.551519       166.873       167.424    
   3  0.332012      -1.10258      -1.99326       1.99326       170.115       172.108    
   4  0.756847     -0.278594     -0.503643      0.503643       168.424       168.928    
   5  0.168413      -1.78134      -3.22030       3.22030       171.909       175.129    
   6  0.422244     -0.862172      -1.55864       1.55864       171.708       173.267    
   7  0.865590     -0.144344     -0.260946      0.260946       171.272       171.533    
   8  0.820021     -0.198425     -0.358713      0.358713       172.139       172.498    
   9  0.681904     -0.382867     -0.692148      0.692148       171.506       172.198    
  10  0.476378E-02  -5.34671      -9.66581       9.66581       171.324       180.990    
  11  0.891588     -0.114751     -0.207447      0.207447       172.252       172.460    
  12  0.583910     -0.538008     -0.972613      0.972613       169.047       170.020    
  13  0.224086      -1.49572      -2.70397       2.70397       173.592       176.296    
  14  0.550831     -0.596327      -1.07804       1.07804       173.042       174.120    
  15  0.109755      -2.20951      -3.99435       3.99435       174.069       178.063    
  16  0.173189      -1.75337      -3.16976       3.16976       173.561       176.731    
  17  0.822854     -0.194976     -0.352479      0.352479       172.127       172.480    
  18  0.792562     -0.232484     -0.420285      0.420285       175.068       175.488    
  19  0.383253     -0.959060      -1.73379       1.73379       172.422       174.156    
  20  0.422533     -0.861488      -1.55740       1.55740       175.329       176.886    
  21  0.811047     -0.209429     -0.378606      0.378606       174.838       175.216    
  22  0.860783     -0.149912     -0.271012      0.271012       174.483       174.754    
  23  0.751011     -0.286335     -0.517637      0.517637       174.808       175.326    
  24  0.358967      -1.02452      -1.85214       1.85214       173.028       174.880    
  25  0.877019     -0.131227     -0.237232      0.237232       176.040       176.277    
  26  0.441658     -0.817220      -1.47737       1.47737       175.444       176.922    
  27  0.259650      -1.34842      -2.43768       2.43768       173.391       175.829    
  28  0.106035      -2.24398      -4.05668       4.05668       175.715       179.772    
  29  0.608421     -0.496887     -0.898275      0.898275       173.585       174.483    
  30  0.143099      -1.94422      -3.51477       3.51477       173.636       177.151    
  31  0.242177      -1.41809      -2.56362       2.56362       172.968       175.531    
  32  0.517081     -0.659556      -1.19235       1.19235       172.730       173.922    
  33  0.492461     -0.708339      -1.28054       1.28054       173.455       174.736    
  34  0.839297     -0.175190     -0.316710      0.316710       172.255       172.572    
  35  0.824305     -0.193215     -0.349295      0.349295       170.984       171.333    
  36  0.742325     -0.297968     -0.538668      0.538668       176.135       176.674    
  37  0.158654      -1.84103      -3.32822       3.32822       174.331       177.659    
  38  0.702604     -0.352962     -0.638085      0.638085       168.270       168.908    
  39  0.324396      -1.12579      -2.03520       2.03520       171.815       173.851    
  40  0.628286     -0.464760     -0.840195      0.840195       177.810       178.650    
  41  0.896889     -0.108823     -0.196730      0.196730       176.714       176.910    
  42  0.325633      -1.12199      -2.02833       2.02833       178.427       180.456    
  43  0.833588     -0.182016     -0.329049      0.329049       175.475       175.804    
  44  0.292459      -1.22943      -2.22257       2.22257       175.636       177.858    
  45  0.625236     -0.469626     -0.848991      0.848991       174.487       175.336    
  46  0.613119     -0.489197     -0.884372      0.884372       177.542       178.426    
  47  0.521950     -0.650183      -1.17540       1.17540       172.867       174.043    
  48  0.999935     -0.646019E-04 -0.116788E-03  0.116788E-03   176.450       176.450    
  49  0.971287E-01  -2.33172      -4.21529       4.21529       176.135       180.351    
  50  0.982535     -0.176198E-01 -0.318530E-01  0.318530E-01   175.774       175.806    
  51  0.930778     -0.717347E-01 -0.129682      0.129682       178.392       178.521    
  52  0.566446     -0.568373      -1.02751       1.02751       175.545       176.573    
  53  0.671812     -0.397777     -0.719102      0.719102       177.340       178.059    
  54  0.814331     -0.205388     -0.371301      0.371301       175.167       175.538    
  55  0.593504     -0.521712     -0.943153      0.943153       173.024       173.967    
  56  0.338750      -1.08249      -1.95693       1.95693       173.514       175.471    
  57  0.584939     -0.536248     -0.969431      0.969431       177.621       178.591    
  58  0.576637     -0.550541     -0.995271      0.995271       172.689       173.684    
  59  0.324991      -1.12396      -2.03190       2.03190       180.949       182.981    
  60  0.320844E-01  -3.43939      -6.21773       6.21773       176.998       183.216    
  61  0.711764     -0.340009     -0.614669      0.614669       174.449       175.064    
  62  0.340665      -1.07686      -1.94674       1.94674       179.665       181.612    
  63  0.423626E-01  -3.16149      -5.71535       5.71535       178.580       184.296    
  64  0.672710     -0.396440     -0.716686      0.716686       181.080       181.796    
  65  0.654240     -0.424282     -0.767018      0.767018       176.672       177.439    
  66  0.548342     -0.600856      -1.08623       1.08623       180.221       181.308    
  67  0.305403      -1.18612      -2.14428       2.14428       179.763       181.907    
  68  0.449145     -0.800410      -1.44698       1.44698       174.846       176.293    
  69  0.889699     -0.116872     -0.211281      0.211281       184.071       184.283    
  70  0.474782     -0.744900      -1.34663       1.34663       178.432       179.778    
  71  0.779181     -0.249512     -0.451069      0.451069       182.875       183.326    
  72  0.382818     -0.960196      -1.73584       1.73584       168.307       170.043    
loop,thermsimp(1:2)       43   3.25165      0.551519    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    431        181.13          0.84          1.11         25.21          0.16          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    181.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       43
neval is:      430
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       44
neval is:      430


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      430     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960290E-01  -2.34311      -4.23587       4.23587       166.873       171.109    
   2  0.509377     -0.674566      -1.21948       1.21948       164.315       165.534    
   3  0.960906     -0.398785E-01 -0.720925E-01  0.720925E-01   168.270       168.342    
   4  0.145058      -1.93062      -3.49018       3.49018       168.424       171.914    
   5  0.584668     -0.536711     -0.970268      0.970268       169.047       170.017    
   6  0.137819      -1.98182      -3.58274       3.58274       168.307       171.890    
   7  0.829899     -0.186451     -0.337067      0.337067       170.984       171.321    
   8  0.249142      -1.38973      -2.51236       2.51236       171.272       173.785    
   9  0.471049     -0.752793      -1.36090       1.36090       170.115       171.476    
  10  0.744784E-01  -2.59725      -4.69531       4.69531       171.506       176.201    
  11  0.233158      -1.45604      -2.63224       2.63224       172.252       174.885    
  12  0.714243E-01  -2.63912      -4.77100       4.77100       172.127       176.898    
  13  0.749743     -0.288025     -0.520693      0.520693       172.139       172.660    
  14  0.873534     -0.135209     -0.244430      0.244430       172.255       172.499    
  15  0.265951      -1.32444      -2.39433       2.39433       171.708       174.103    
  16  0.328438      -1.11341      -2.01282       2.01282       172.689       174.702    
  17  0.988010     -0.120622E-01 -0.218061E-01  0.218061E-01   171.815       171.837    
  18  0.737788     -0.304099     -0.549750      0.549750       172.730       173.280    
  19  0.171086E-01  -4.06818      -7.35446       7.35446       173.024       180.378    
  20  0.452693     -0.792540      -1.43276       1.43276       172.867       174.300    
  21  0.922976     -0.801523E-01 -0.144900      0.144900       173.042       173.187    
  22  0.323108      -1.12977      -2.04240       2.04240       172.422       174.465    
  23  0.740032     -0.301062     -0.544260      0.544260       173.585       174.129    
  24  0.606229     -0.500498     -0.904802      0.904802       173.455       174.360    
  25  0.813501     -0.206408     -0.373145      0.373145       174.483       174.857    
  26  0.457664     -0.781621      -1.41302       1.41302       173.028       174.441    
  27  0.848286     -0.164537     -0.297451      0.297451       174.449       174.747    
  28  0.430827E-01  -3.14463      -5.68488       5.68488       171.909       177.594    
  29  0.215038      -1.53694      -2.77849       2.77849       174.838       177.616    
  30  0.955068     -0.459730E-01 -0.831101E-01  0.831101E-01   174.808       174.891    
  31  0.100248      -2.30011      -4.15814       4.15814       174.487       178.645    
  32  0.272794      -1.29904      -2.34840       2.34840       173.514       175.863    
  33  0.796201E-01  -2.53049      -4.57462       4.57462       175.068       179.643    
  34  0.143803      -1.93931      -3.50589       3.50589       172.968       176.474    
  35  0.151473      -1.88734      -3.41195       3.41195       175.167       178.579    
  36  0.212508      -1.54878      -2.79988       2.79988       175.475       178.275    
  37  0.570089     -0.561962      -1.01592       1.01592       175.774       176.790    
  38  0.811663     -0.208669     -0.377233      0.377233       173.391       173.769    
  39  0.652193E-01  -2.73000      -4.93530       4.93530       176.040       180.975    
  40  0.753919     -0.282470     -0.510650      0.510650       174.846       175.356    
  41  0.915721     -0.880434E-01 -0.159165      0.159165       173.592       173.751    
  42  0.689805     -0.371347     -0.671322      0.671322       176.450       177.122    
  43  0.296032      -1.21729      -2.20062       2.20062       175.545       177.746    
  44  0.685645     -0.377395     -0.682256      0.682256       176.135       176.817    
  45  0.931075     -0.714153E-01 -0.129105      0.129105       173.561       173.690    
  46  0.273544      -1.29629      -2.34344       2.34344       175.329       177.672    
  47  0.269804E-01  -3.61265      -6.53095       6.53095       176.714       183.244    
  48  0.684598     -0.378923     -0.685018      0.685018       175.444       176.129    
  49  0.724056     -0.322886     -0.583714      0.583714       173.636       174.220    
  50  0.655515     -0.422333     -0.763496      0.763496       176.672       177.436    
  51  0.338921E-01  -3.38457      -6.11864       6.11864       174.331       180.449    
  52  0.503484     -0.686204      -1.24052       1.24052       175.636       176.876    
  53  0.283419      -1.26083      -2.27933       2.27933       177.340       179.619    
  54  0.495421     -0.702347      -1.26970       1.26970       174.069       175.338    
  55  0.966701     -0.338659E-01 -0.612228E-01  0.612228E-01   177.542       177.603    
  56  0.491710     -0.709867      -1.28330       1.28330       178.392       179.675    
  57  0.456917     -0.783254      -1.41597       1.41597       177.621       179.037    
  58  0.970984E-01  -2.33203      -4.21585       4.21585       177.810       182.026    
  59  0.713520     -0.337545     -0.610214      0.610214       175.715       176.325    
  60  0.611795E-01  -2.79394      -5.05090       5.05090       178.432       183.483    
  61  0.122834      -2.09692      -3.79083       3.79083       176.135       179.926    
  62  0.686483     -0.376174     -0.680048      0.680048       178.427       179.107    
  63  0.525237     -0.643905      -1.16405       1.16405       171.324       172.488    
  64  0.365531      -1.00640      -1.81938       1.81938       180.221       182.041    
  65  0.647121     -0.435221     -0.786794      0.786794       179.665       180.452    
  66  0.284779      -1.25604      -2.27068       2.27068       181.080       183.350    
  67  0.871365     -0.137695     -0.248925      0.248925       179.763       180.012    
  68  0.901193     -0.104035     -0.188075      0.188075       180.949       181.137    
  69  0.405524     -0.902575      -1.63168       1.63168       176.998       178.630    
  70  0.392729     -0.934635      -1.68964       1.68964       182.875       184.564    
  71  0.526508     -0.641489      -1.15969       1.15969       184.071       185.231    
  72  0.562155     -0.575977      -1.04125       1.04125       181.134       182.175    
loop,thermsimp(1:2)       44   4.23587       1.21948    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    432        177.36          0.84          1.11         24.98          0.26          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       44
neval is:      431
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       45
neval is:      431


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      431     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960257     -0.405547E-01 -0.733150E-01  0.733150E-01   164.315       164.388    
   2  0.700631     -0.355774     -0.643170      0.643170       168.270       168.913    
   3  0.900697     -0.104586     -0.189072      0.189072       169.047       169.236    
   4  0.217613      -1.52504      -2.75697       2.75697       166.873       169.630    
   5  0.247850      -1.39493      -2.52176       2.52176       170.984       173.506    
   6  0.910358     -0.939170E-01 -0.169783      0.169783       170.115       170.285    
   7  0.983752     -0.163817E-01 -0.296149E-01  0.296149E-01   171.815       171.845    
   8  0.161223      -1.82497      -3.29918       3.29918       168.307       171.606    
   9  0.527720     -0.639190      -1.15553       1.15553       168.424       169.580    
  10  0.733734     -0.309609     -0.559713      0.559713       171.324       171.884    
  11  0.406982     -0.898986      -1.62519       1.62519       172.255       173.880    
  12  0.731735     -0.312337     -0.564645      0.564645       172.139       172.704    
  13  0.840576E-01  -2.47625      -4.47658       4.47658       173.042       177.518    
  14  0.505764     -0.681685      -1.23235       1.23235       172.730       173.962    
  15  0.130210      -2.03861      -3.68540       3.68540       173.561       177.247    
  16  0.565496     -0.570053      -1.03054       1.03054       173.592       174.622    
  17  0.944307     -0.573044E-01 -0.103595      0.103595       173.391       173.495    
  18  0.131761      -2.02676      -3.66399       3.66399       171.272       174.936    
  19  0.133275      -2.01534      -3.64334       3.64334       171.708       175.352    
  20  0.890936     -0.115482     -0.208769      0.208769       173.585       173.793    
  21  0.650633     -0.429809     -0.777010      0.777010       173.636       174.413    
  22  0.132428      -2.02172      -3.65487       3.65487       172.867       176.522    
  23  0.731494     -0.312666     -0.565239      0.565239       173.455       174.021    
  24  0.171092      -1.76556      -3.19178       3.19178       173.028       176.220    
  25  0.257579      -1.35643      -2.45215       2.45215       172.422       174.874    
  26  0.324882      -1.12429      -2.03250       2.03250       172.689       174.722    
  27  0.526591     -0.641331      -1.15940       1.15940       174.449       175.609    
  28  0.282402E-01  -3.56701      -6.44845       6.44845       174.483       180.932    
  29  0.983943     -0.161877E-01 -0.292641E-01  0.292641E-01   172.252       172.282    
  30  0.629559     -0.462735     -0.836534      0.836534       174.808       175.645    
  31  0.202469      -1.59717      -2.88737       2.88737       174.069       176.956    
  32  0.737565     -0.304401     -0.550296      0.550296       174.846       175.396    
  33  0.388307     -0.945960      -1.71011       1.71011       173.514       175.225    
  34  0.585207E-01  -2.83837      -5.13122       5.13122       175.444       180.575    
  35  0.900578     -0.104719     -0.189311      0.189311       171.506       171.695    
  36  0.420335     -0.866702      -1.56683       1.56683       175.715       177.282    
  37  0.730143     -0.314515     -0.568580      0.568580       172.968       173.536    
  38  0.448331     -0.802224      -1.45026       1.45026       175.774       177.224    
  39  0.344846      -1.06466      -1.92469       1.92469       176.135       178.060    
  40  0.854608     -0.157113     -0.284029      0.284029       175.636       175.920    
  41  0.537300     -0.621198      -1.12300       1.12300       172.127       173.250    
  42  0.164937      -1.80219      -3.25801       3.25801       176.450       179.708    
  43  0.595120E-01  -2.82158      -5.10086       5.10086       176.672       181.773    
  44  0.398267E-01  -3.22322      -5.82694       5.82694       171.909       177.736    
  45  0.183210      -1.69712      -3.06806       3.06806       177.542       180.610    
  46  0.184498      -1.69011      -3.05539       3.05539       174.838       177.893    
  47  0.306635      -1.18210      -2.13700       2.13700       175.329       177.466    
  48  0.868924     -0.140500     -0.253997      0.253997       175.545       175.799    
  49  0.841633     -0.172412     -0.311686      0.311686       175.475       175.787    
  50  0.988826     -0.112370E-01 -0.203143E-01  0.203143E-01   175.167       175.187    
  51  0.244835      -1.40717      -2.54389       2.54389       176.998       179.542    
  52  0.338105      -1.08440      -1.96038       1.96038       174.487       176.447    
  53  0.609151     -0.495689     -0.896107      0.896107       177.621       178.517    
  54  0.529733E-01  -2.93797      -5.31127       5.31127       178.427       183.739    
  55  0.319654      -1.14052      -2.06183       2.06183       177.340       179.402    
  56  0.997722     -0.228025E-02 -0.412224E-02  0.412224E-02   175.068       175.072    
  57  0.703037     -0.352346     -0.636973      0.636973       178.392       179.029    
  58  0.794182E-01  -2.53303      -4.57922       4.57922       176.135       180.715    
  59  0.286060      -1.25155      -2.26256       2.26256       179.763       182.026    
  60  0.416234     -0.876507      -1.58455       1.58455       173.024       174.608    
  61  0.645642     -0.437510     -0.790932      0.790932       174.331       175.121    
  62  0.125731      -2.07361      -3.74868       3.74868       179.665       183.414    
  63  0.929125     -0.735122E-01 -0.132896      0.132896       176.040       176.173    
  64  0.281203E-01  -3.57126      -6.45614       6.45614       180.949       187.405    
  65  0.726728     -0.319203     -0.577055      0.577055       177.810       178.387    
  66  0.983013     -0.171328E-01 -0.309728E-01  0.309728E-01   180.221       180.252    
  67  0.469835     -0.755373      -1.36557       1.36557       181.134       182.500    
  68  0.292002      -1.23099      -2.22539       2.22539       176.714       178.939    
  69  0.866442     -0.143360     -0.259166      0.259166       181.080       181.339    
  70  0.507493     -0.678272      -1.22618       1.22618       178.432       179.658    
  71  0.132034      -2.02470      -3.66025       3.66025       182.875       186.535    
  72  0.614319     -0.487242     -0.880837      0.880837       177.365       178.246    
loop,thermsimp(1:2)       45  0.733150E-01  0.643170    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    433        174.17          0.83          1.11         25.09          0.22          0.05         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       45
neval is:      432
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       46
neval is:      432


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      432     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668594     -0.402578     -0.727782      0.727782       164.315       165.042    
   2  0.484900     -0.723813      -1.30851       1.30851       168.270       169.579    
   3  0.814670     -0.204972     -0.370549      0.370549       169.047       169.418    
   4  0.111039      -2.19788      -3.97333       3.97333       168.424       172.398    
   5  0.717773     -0.331602     -0.599471      0.599471       166.873       167.472    
   6  0.751748     -0.285354     -0.515864      0.515864       170.115       170.631    
   7  0.983096E-01  -2.31963      -4.19344       4.19344       168.307       172.500    
   8  0.150083      -1.89656      -3.42861       3.42861       171.506       174.934    
   9  0.733895     -0.309390     -0.559316      0.559316       171.815       172.375    
  10  0.982051     -0.181120E-01 -0.327430E-01  0.327430E-01   171.324       171.357    
  11  0.449336E-01  -3.10257      -5.60884       5.60884       172.252       177.861    
  12  0.929425     -0.731895E-01 -0.132312      0.132312       172.139       172.272    
  13  0.692017E-01  -2.67073      -4.82815       4.82815       172.127       176.955    
  14  0.644652     -0.439045     -0.793707      0.793707       173.391       174.185    
  15  0.661075     -0.413889     -0.748229      0.748229       170.984       171.732    
  16  0.410338     -0.890775      -1.61035       1.61035       172.968       174.578    
  17  0.967767     -0.327642E-01 -0.592313E-01  0.592313E-01   173.585       173.644    
  18  0.496474     -0.700224      -1.26587       1.26587       172.255       173.521    
  19  0.748701     -0.289415     -0.523205      0.523205       172.730       173.253    
  20  0.428668     -0.847073      -1.53134       1.53134       173.455       174.987    
  21  0.922992     -0.801352E-01 -0.144869      0.144869       173.636       173.781    
  22  0.844924     -0.168508     -0.304630      0.304630       173.024       173.328    
  23  0.680136     -0.385463     -0.696841      0.696841       173.592       174.288    
  24  0.136189      -1.99371      -3.60423       3.60423       172.689       176.293    
  25  0.660667     -0.414506     -0.749345      0.749345       172.422       173.171    
  26  0.473941     -0.746672      -1.34984       1.34984       171.272       172.622    
  27  0.792449     -0.232627     -0.420543      0.420543       175.068       175.489    
  28  0.960023     -0.407984E-01 -0.737554E-01  0.737554E-01   174.331       174.404    
  29  0.951587     -0.496238E-01 -0.897100E-01  0.897100E-01   175.167       175.257    
  30  0.197021      -1.62444      -2.93667       2.93667       173.514       176.451    
  31  0.664966     -0.408020     -0.737619      0.737619       171.708       172.446    
  32  0.832360     -0.183491     -0.331715      0.331715       174.846       175.177    
  33  0.589221     -0.528954     -0.956245      0.956245       174.449       175.405    
  34  0.163930      -1.80831      -3.26907       3.26907       174.808       178.077    
  35  0.967185E-01  -2.33595      -4.22294       4.22294       175.475       179.698    
  36  0.386895     -0.949603      -1.71670       1.71670       175.545       177.262    
  37  0.709158     -0.343678     -0.621301      0.621301       175.636       176.257    
  38  0.801784     -0.220916     -0.399372      0.399372       176.040       176.439    
  39  0.631968     -0.458917     -0.829631      0.829631       173.028       173.857    
  40  0.866237     -0.143597     -0.259594      0.259594       174.487       174.746    
  41  0.377203     -0.974972      -1.76256       1.76256       172.867       174.630    
  42  0.261898      -1.33980      -2.42210       2.42210       174.069       176.491    
  43  0.306694      -1.18191      -2.13665       2.13665       175.774       177.911    
  44  0.603055     -0.505747     -0.914290      0.914290       173.561       174.475    
  45  0.146094      -1.92351      -3.47732       3.47732       175.715       179.192    
  46  0.887903     -0.118893     -0.214936      0.214936       175.329       175.544    
  47  0.375387     -0.979798      -1.77128       1.77128       173.042       174.813    
  48  0.788597     -0.237500     -0.429353      0.429353       171.909       172.338    
  49  0.335228      -1.09295      -1.97583       1.97583       174.838       176.814    
  50  0.609447     -0.495204     -0.895231      0.895231       176.135       177.030    
  51  0.735916     -0.306639     -0.554343      0.554343       177.365       177.919    
  52  0.936649     -0.654462E-01 -0.118314      0.118314       177.810       177.928    
  53  0.594667     -0.519755     -0.939614      0.939614       177.621       178.561    
  54  0.521912     -0.650256      -1.17554       1.17554       176.714       177.889    
  55  0.735402     -0.307338     -0.555607      0.555607       178.392       178.947    
  56  0.909945     -0.943713E-01 -0.170605      0.170605       177.340       177.511    
  57  0.232597      -1.45845      -2.63659       2.63659       176.998       179.635    
  58  0.253136      -1.37383      -2.48361       2.48361       178.432       180.915    
  59  0.242799E-01  -3.71811      -6.72161       6.72161       176.450       183.172    
  60  0.138872      -1.97421      -3.56897       3.56897       180.221       183.790    
  61  0.570424     -0.561376      -1.01486       1.01486       175.444       176.459    
  62  0.746803     -0.291954     -0.527794      0.527794       177.542       178.070    
  63  0.768900     -0.262795     -0.475081      0.475081       176.135       176.610    
  64  0.376976     -0.975574      -1.76365       1.76365       174.483       176.247    
  65  0.917699     -0.858857E-01 -0.155264      0.155264       181.080       181.235    
  66  0.729811     -0.314970     -0.569404      0.569404       176.672       177.241    
  67  0.732995     -0.310616     -0.561532      0.561532       179.763       180.325    
  68  0.471335     -0.752186      -1.35980       1.35980       181.134       182.494    
  69  0.336453      -1.08930      -1.96924       1.96924       179.665       181.634    
  70  0.108509      -2.22092      -4.01499       4.01499       178.427       182.442    
  71  0.931313     -0.711600E-01 -0.128643      0.128643       182.875       183.003    
  72  0.362404      -1.01500      -1.83491       1.83491       174.168       176.003    
loop,thermsimp(1:2)       46  0.727782       1.30851    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    434        169.08          0.83          1.11         25.07          0.15          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    169.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       46
neval is:      433
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       47
neval is:      433


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      433     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408943     -0.894179      -1.61650       1.61650       164.315       165.931    
   2  0.431368     -0.840794      -1.51999       1.51999       166.873       168.393    
   3  0.292375      -1.22972      -2.22309       2.22309       169.047       171.270    
   4  0.336431      -1.08936      -1.96935       1.96935       168.270       170.239    
   5  0.370622     -0.992574      -1.79438       1.79438       170.115       171.910    
   6  0.398679     -0.919597      -1.66245       1.66245       171.324       172.986    
   7  0.672261     -0.397108     -0.717893      0.717893       170.984       171.702    
   8  0.451252     -0.795728      -1.43852       1.43852       172.139       173.578    
   9  0.527060     -0.640440      -1.15779       1.15779       171.909       173.067    
  10  0.131951      -2.02533      -3.66139       3.66139       171.815       175.477    
  11  0.903524     -0.101452     -0.183405      0.183405       168.424       168.608    
  12  0.881507E-01  -2.42871      -4.39062       4.39062       171.708       176.099    
  13  0.464884     -0.765968      -1.38472       1.38472       168.307       169.692    
  14  0.985345     -0.147637E-01 -0.266898E-01  0.266898E-01   171.272       171.299    
  15  0.587696     -0.531546     -0.960930      0.960930       172.422       173.383    
  16  0.581244     -0.542585     -0.980886      0.980886       172.730       173.711    
  17  0.137299      -1.98559      -3.58956       3.58956       173.024       176.613    
  18  0.330005      -1.10865      -2.00422       2.00422       172.255       174.259    
  19  0.911104     -0.930980E-01 -0.168303      0.168303       173.585       173.753    
  20  0.487848     -0.717751      -1.29755       1.29755       173.636       174.934    
  21  0.518423     -0.656964      -1.18766       1.18766       173.028       174.215    
  22  0.645499     -0.437732     -0.791334      0.791334       173.391       174.183    
  23  0.914509     -0.893680E-01 -0.161560      0.161560       173.592       173.753    
  24  0.763582E-01  -2.57232      -4.65025       4.65025       174.331       178.981    
  25  0.708063     -0.345222     -0.624094      0.624094       173.561       174.185    
  26  0.719838     -0.328729     -0.594277      0.594277       172.968       173.562    
  27  0.113625E-01  -4.47744      -8.09433       8.09433       172.867       180.962    
  28  0.272258      -1.30101      -2.35196       2.35196       174.487       176.839    
  29  0.211076      -1.55554      -2.81210       2.81210       173.042       175.854    
  30  0.931648     -0.708004E-01 -0.127993      0.127993       171.506       171.634    
  31  0.572966     -0.556929      -1.00682       1.00682       173.455       174.462    
  32  0.116283      -2.15173      -3.88990       3.88990       174.846       178.735    
  33  0.247808      -1.39510      -2.52207       2.52207       175.167       177.689    
  34  0.294404      -1.22280      -2.21059       2.21059       174.449       176.660    
  35  0.252764E-01  -3.67788      -6.64889       6.64889       175.068       181.717    
  36  0.408562     -0.895111      -1.61818       1.61818       175.329       176.947    
  37  0.753478     -0.283056     -0.511709      0.511709       174.168       174.680    
  38  0.680565     -0.384832     -0.695700      0.695700       174.483       175.179    
  39  0.973188     -0.271778E-01 -0.491320E-01  0.491320E-01   175.636       175.685    
  40  0.986871     -0.132158E-01 -0.238916E-01  0.238916E-01   172.689       172.713    
  41  0.363246      -1.01267      -1.83072       1.83072       176.040       177.870    
  42  0.138088      -1.97986      -3.57920       3.57920       173.514       177.094    
  43  0.929547E-01  -2.37564      -4.29469       4.29469       175.444       179.739    
  44  0.781724     -0.246253     -0.445178      0.445178       174.069       174.514    
  45  0.732428     -0.311390     -0.562932      0.562932       176.135       176.698    
  46  0.294929      -1.22102      -2.20737       2.20737       174.838       177.045    
  47  0.406491     -0.900193      -1.62737       1.62737       172.127       173.755    
  48  0.721836E-01  -2.62854      -4.75189       4.75189       176.135       180.887    
  49  0.982586     -0.175676E-01 -0.317588E-01  0.317588E-01   176.672       176.704    
  50  0.211502E-01  -3.85611      -6.97108       6.97108       175.545       182.516    
  51  0.790632     -0.234923     -0.424694      0.424694       177.340       177.765    
  52  0.120538      -2.11579      -3.82493       3.82493       172.252       176.077    
  53  0.586949     -0.532817     -0.963228      0.963228       176.714       177.677    
  54  0.660552     -0.414680     -0.749659      0.749659       175.774       176.524    
  55  0.627691     -0.465708     -0.841907      0.841907       177.365       178.207    
  56  0.470013     -0.754996      -1.36488       1.36488       177.810       179.175    
  57  0.735726     -0.306897     -0.554810      0.554810       177.542       178.097    
  58  0.320562      -1.13768      -2.05670       2.05670       174.808       176.865    
  59  0.256015E-01  -3.66511      -6.62579       6.62579       177.621       184.247    
  60  0.364092      -1.01035      -1.82651       1.82651       178.392       180.218    
  61  0.483739     -0.726210      -1.31284       1.31284       175.715       177.028    
  62  0.311695      -1.16573      -2.10741       2.10741       176.998       179.105    
  63  0.981768     -0.184007E-01 -0.332648E-01  0.332648E-01   175.475       175.509    
  64  0.428011E-01  -3.15119      -5.69673       5.69673       179.763       185.460    
  65  0.509532     -0.674262      -1.21893       1.21893       178.432       179.651    
  66  0.118657      -2.13152      -3.85336       3.85336       181.080       184.933    
  67  0.131462      -2.02904      -3.66811       3.66811       179.665       183.333    
  68  0.364560      -1.00906      -1.82419       1.82419       178.427       180.251    
  69  0.776895     -0.252450     -0.456381      0.456381       181.134       181.591    
  70  0.958551     -0.423320E-01 -0.765280E-01  0.765280E-01   182.875       182.951    
  71  0.288811      -1.24198      -2.24526       2.24526       176.450       178.696    
  72  0.376607     -0.976553      -1.76542       1.76542       169.081       170.846    
loop,thermsimp(1:2)       47   1.61650       1.51999    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    435        176.27          0.84          1.11         25.15          0.16          0.05         27.32
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       47
neval is:      434
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       48
neval is:      434


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      434     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813255     -0.206711     -0.373692      0.373692       164.315       164.688    
   2  0.101223E-01  -4.59302      -8.30327       8.30327       166.873       175.176    
   3  0.618937E-01  -2.78234      -5.02992       5.02992       168.424       173.454    
   4  0.206078      -1.57950      -2.85543       2.85543       168.307       171.162    
   5  0.867609     -0.142014     -0.256733      0.256733       168.270       168.527    
   6  0.578282     -0.547694     -0.990123      0.990123       169.081       170.071    
   7  0.531864     -0.631367      -1.14139       1.14139       169.047       170.189    
   8  0.304055      -1.19055      -2.15227       2.15227       171.272       173.425    
   9  0.540739     -0.614819      -1.11147       1.11147       171.506       172.617    
  10  0.476481     -0.741327      -1.34017       1.34017       170.984       172.324    
  11  0.610971     -0.492705     -0.890714      0.890714       170.115       171.006    
  12  0.735015     -0.307865     -0.556559      0.556559       172.689       173.246    
  13  0.961674     -0.390799E-01 -0.706487E-01  0.706487E-01   171.324       171.395    
  14  0.902502     -0.102585     -0.185453      0.185453       171.909       172.094    
  15  0.759072     -0.275659     -0.498337      0.498337       172.422       172.920    
  16  0.380028E-01  -3.27009      -5.91169       5.91169       172.968       178.879    
  17  0.413373     -0.883405      -1.59702       1.59702       172.139       173.736    
  18  0.260354      -1.34571      -2.43279       2.43279       172.730       175.163    
  19  0.170660      -1.76808      -3.19634       3.19634       173.585       176.781    
  20  0.563245     -0.574040      -1.03775       1.03775       173.592       174.629    
  21  0.861075     -0.149573     -0.270399      0.270399       172.127       172.398    
  22  0.797631     -0.226109     -0.408760      0.408760       173.391       173.800    
  23  0.370521E-01  -3.29543      -5.95749       5.95749       173.561       179.519    
  24  0.703530     -0.351645     -0.635705      0.635705       173.028       173.664    
  25  0.791216E-01  -2.53677      -4.58598       4.58598       172.255       176.841    
  26  0.136780      -1.98938      -3.59641       3.59641       173.455       177.052    
  27  0.409465     -0.892903      -1.61419       1.61419       174.069       175.683    
  28  0.476542     -0.741200      -1.33994       1.33994       174.168       175.508    
  29  0.169904      -1.77252      -3.20437       3.20437       173.636       176.841    
  30  0.483026     -0.727684      -1.31551       1.31551       174.483       175.799    
  31  0.740952     -0.299820     -0.542015      0.542015       171.815       172.357    
  32  0.367240      -1.00174      -1.81095       1.81095       175.475       177.286    
  33  0.704436     -0.350358     -0.633379      0.633379       175.636       176.269    
  34  0.703774     -0.351299     -0.635079      0.635079       173.042       173.677    
  35  0.547709     -0.602012      -1.08832       1.08832       172.252       173.341    
  36  0.236071      -1.44362      -2.60979       2.60979       171.708       174.318    
  37  0.512555     -0.668347      -1.20824       1.20824       175.774       176.982    
  38  0.894555     -0.111428     -0.201441      0.201441       173.024       173.225    
  39  0.100347      -2.29912      -4.15636       4.15636       174.449       178.606    
  40  0.689153     -0.372292     -0.673030      0.673030       176.135       176.808    
  41  0.188659      -1.66781      -3.01508       3.01508       176.672       179.687    
  42  0.623666     -0.472140     -0.853535      0.853535       174.487       175.340    
  43  0.610480     -0.493510     -0.892169      0.892169       174.808       175.700    
  44  0.724857     -0.321780     -0.581715      0.581715       175.329       175.910    
  45  0.320963      -1.13643      -2.05444       2.05444       175.715       177.769    
  46  0.287938      -1.24501      -2.25073       2.25073       174.838       177.089    
  47  0.935911     -0.662348E-01 -0.119740      0.119740       173.514       173.634    
  48  0.600810     -0.509476     -0.921032      0.921032       176.714       177.635    
  49  0.200068      -1.60910      -2.90893       2.90893       175.167       178.076    
  50  0.240600E-01  -3.72720      -6.73805       6.73805       177.340       184.078    
  51  0.953574     -0.475383E-01 -0.859399E-01  0.859399E-01   176.040       176.126    
  52  0.605754     -0.501281     -0.906218      0.906218       177.542       178.448    
  53  0.107166      -2.23338      -4.03750       4.03750       177.365       181.402    
  54  0.398218     -0.920755      -1.66454       1.66454       176.450       178.115    
  55  0.471444     -0.751956      -1.35939       1.35939       174.846       176.205    
  56  0.892797E-02  -4.71857      -8.53024       8.53024       174.331       182.861    
  57  0.246368      -1.40093      -2.53260       2.53260       176.998       179.531    
  58  0.900252E-01  -2.40767      -4.35259       4.35259       177.810       182.162    
  59  0.127742      -2.05775      -3.72000       3.72000       178.432       182.152    
  60  0.233391E-01  -3.75763      -6.79305       6.79305       175.444       182.237    
  61  0.109213      -2.21445      -4.00330       4.00330       178.392       182.395    
  62  0.486874E-01  -3.02234      -5.46379       5.46379       178.427       183.891    
  63  0.535603     -0.624363      -1.12873       1.12873       176.135       177.264    
  64  0.444520     -0.810761      -1.46570       1.46570       172.867       174.333    
  65  0.431661     -0.840116      -1.51876       1.51876       181.134       182.653    
  66  0.479331     -0.735363      -1.32939       1.32939       175.068       176.397    
  67  0.931053     -0.714396E-01 -0.129149      0.129149       175.545       175.674    
  68  0.113012      -2.18026      -3.94148       3.94148       182.875       186.816    
  69  0.293479      -1.22595      -2.21628       2.21628       179.665       181.881    
  70  0.908750E-01  -2.39827      -4.33560       4.33560       177.621       181.957    
  71  0.760696E-01  -2.57611      -4.65709       4.65709       181.080       185.737    
  72  0.194194      -1.63890      -2.96281       2.96281       176.272       179.235    
loop,thermsimp(1:2)       48  0.373692       8.30327    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    436        173.00          0.84          1.11         25.11          0.26          0.05         27.37
Just calling func    0   0         27.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       48
neval is:      435
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       49
neval is:      435


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      435     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.900563     -0.104735     -0.189340      0.189340       164.315       164.504    
   2  0.337202      -1.08707      -1.96521       1.96521       168.270       170.235    
   3  0.201324      -1.60284      -2.89761       2.89761       169.081       171.979    
   4  0.305897      -1.18451      -2.14136       2.14136       169.047       171.189    
   5  0.333562      -1.09793      -1.98484       1.98484       170.115       172.100    
   6  0.708340     -0.344831     -0.623387      0.623387       168.307       168.930    
   7  0.929963     -0.726100E-01 -0.131265      0.131265       171.324       171.455    
   8  0.954883     -0.461669E-01 -0.834607E-01  0.834607E-01   171.909       171.992    
   9  0.709141     -0.343701     -0.621343      0.621343       170.984       171.605    
  10  0.904936     -0.998906E-01 -0.180583      0.180583       171.815       171.996    
  11  0.764543     -0.268477     -0.485354      0.485354       172.127       172.613    
  12  0.297182      -1.21341      -2.19361       2.19361       171.506       173.699    
  13  0.472241     -0.750266      -1.35633       1.35633       172.422       173.778    
  14  0.601817     -0.507801     -0.918005      0.918005       173.024       173.942    
  15  0.274906      -1.29132      -2.33446       2.33446       172.689       175.024    
  16  0.979328     -0.208884E-01 -0.377622E-01  0.377622E-01   172.252       172.290    
  17  0.634279     -0.455267     -0.823033      0.823033       171.272       172.095    
  18  0.238460E-01  -3.73614      -6.75420       6.75420       168.424       175.178    
  19  0.302486      -1.19572      -2.16162       2.16162       173.514       175.676    
  20  0.454285     -0.789030      -1.42641       1.42641       173.028       174.454    
  21  0.850435     -0.162007     -0.292877      0.292877       173.042       173.335    
  22  0.562689     -0.575029      -1.03954       1.03954       172.139       173.179    
  23  0.351622      -1.04520      -1.88951       1.88951       173.391       175.281    
  24  0.978081     -0.221628E-01 -0.400660E-01  0.400660E-01   171.708       171.748    
  25  0.284594      -1.25669      -2.27185       2.27185       172.867       175.139    
  26  0.883683E-01  -2.42624      -4.38617       4.38617       173.592       177.978    
  27  0.217395      -1.52604      -2.75877       2.75877       172.730       175.489    
  28  0.405933     -0.901568      -1.62986       1.62986       166.873       168.503    
  29  0.951690     -0.495156E-01 -0.895145E-01  0.895145E-01   174.487       174.576    
  30  0.570178     -0.561806      -1.01563       1.01563       174.168       175.184    
  31  0.326664      -1.11882      -2.02261       2.02261       175.545       177.568    
  32  0.383874E-01  -3.26003      -5.89348       5.89348       174.069       179.962    
  33  0.630130     -0.461829     -0.834897      0.834897       174.808       175.643    
  34  0.902033     -0.103105     -0.186393      0.186393       174.483       174.670    
  35  0.192240      -1.64901      -2.98109       2.98109       175.329       178.310    
  36  0.836744     -0.178237     -0.322217      0.322217       176.040       176.362    
  37  0.481446     -0.730962      -1.32144       1.32144       174.846       176.167    
  38  0.801468     -0.221310     -0.400085      0.400085       175.636       176.036    
  39  0.929206     -0.734244E-01 -0.132737      0.132737       175.068       175.201    
  40  0.366038      -1.00502      -1.81688       1.81688       173.585       175.401    
  41  0.896697     -0.109037     -0.197118      0.197118       176.135       176.332    
  42  0.175481      -1.74022      -3.14598       3.14598       173.636       176.782    
  43  0.444632E-01  -3.11309      -5.62786       5.62786       172.255       177.883    
  44  0.469791     -0.755467      -1.36574       1.36574       175.774       177.140    
  45  0.475427     -0.743541      -1.34418       1.34418       173.455       174.799    
  46  0.568468     -0.564810      -1.02106       1.02106       174.838       175.859    
  47  0.684504     -0.379060     -0.685266      0.685266       176.135       176.820    
  48  0.207720      -1.57157      -2.84108       2.84108       175.475       178.316    
  49  0.332731      -1.10042      -1.98934       1.98934       176.714       178.703    
  50  0.109337E-01  -4.51591      -8.16387       8.16387       175.715       183.879    
  51  0.387975     -0.946815      -1.71166       1.71166       175.167       176.879    
  52  0.583841     -0.538126     -0.972826      0.972826       176.450       177.423    
  53  0.952086     -0.491003E-01 -0.887637E-01  0.887637E-01   177.542       177.631    
  54  0.596262     -0.517074     -0.934769      0.934769       174.449       175.384    
  55  0.767710     -0.264344     -0.477881      0.477881       172.968       173.446    
  56  0.321305E-01  -3.43795      -6.21514       6.21514       176.272       182.487    
  57  0.882163     -0.125378     -0.226659      0.226659       173.561       173.788    
  58  0.688790     -0.372818     -0.673982      0.673982       176.998       177.672    
  59  0.422749     -0.860978      -1.55648       1.55648       176.672       178.229    
  60  0.758230     -0.276768     -0.500343      0.500343       177.365       177.865    
  61  0.393861     -0.931758      -1.68444       1.68444       179.665       181.349    
  62  0.990158E-01  -2.31248      -4.18050       4.18050       177.621       181.802    
  63  0.536294     -0.623073      -1.12639       1.12639       178.432       179.558    
  64  0.287975E-01  -3.54747      -6.41312       6.41312       177.810       184.223    
  65  0.591548     -0.525012     -0.949118      0.949118       175.444       176.393    
  66  0.556437     -0.586201      -1.05974       1.05974       178.392       179.451    
  67  0.768107E-01  -2.56641      -4.63957       4.63957       181.134       185.774    
  68  0.945147E-01  -2.35900      -4.26461       4.26461       174.331       178.595    
  69  0.814945     -0.204635     -0.369940      0.369940       178.427       178.797    
  70  0.581354     -0.542395     -0.980544      0.980544       177.340       178.321    
  71  0.359576      -1.02283      -1.84907       1.84907       181.080       182.929    
  72  0.118552      -2.13240      -3.85497       3.85497       173.003       176.858    
loop,thermsimp(1:2)       49  0.189340       1.96521    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    437        175.68          0.84          1.11         25.44          0.11          0.05         27.55
Just calling func    0   0         27.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       49
neval is:      436
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       50
neval is:      436


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      436     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.326509      -1.11930      -2.02347       2.02347       164.315       166.338    
   2  0.656045     -0.421526     -0.762036      0.762036       166.873       167.635    
   3  0.702016     -0.353799     -0.639599      0.639599       168.307       168.947    
   4  0.659850     -0.415743     -0.751581      0.751581       168.270       169.022    
   5  0.587501     -0.531877     -0.961529      0.961529       169.047       170.009    
   6  0.118734      -2.13087      -3.85219       3.85219       171.324       175.176    
   7  0.484942     -0.723727      -1.30836       1.30836       170.984       172.292    
   8  0.809010     -0.211944     -0.383153      0.383153       171.708       172.092    
   9  0.107401      -2.23119      -4.03355       4.03355       169.081       173.115    
  10  0.912046     -0.920651E-01 -0.166435      0.166435       171.909       172.075    
  11  0.752441     -0.284433     -0.514198      0.514198       171.815       172.330    
  12  0.389912     -0.941833      -1.70265       1.70265       171.272       172.975    
  13  0.805927     -0.215762     -0.390055      0.390055       170.115       170.505    
  14  0.537328     -0.621147      -1.12291       1.12291       172.252       173.375    
  15  0.276300      -1.28627      -2.32532       2.32532       172.127       174.453    
  16  0.618485     -0.480483     -0.868619      0.868619       172.139       173.008    
  17  0.130066      -2.03972      -3.68740       3.68740       173.042       176.729    
  18  0.885305     -0.121824     -0.220233      0.220233       172.968       173.188    
  19  0.513359     -0.666781      -1.20541       1.20541       171.506       172.711    
  20  0.235519      -1.44596      -2.61402       2.61402       172.422       175.036    
  21  0.693842     -0.365511     -0.660772      0.660772       173.561       174.222    
  22  0.445925     -0.807605      -1.45999       1.45999       173.024       174.484    
  23  0.946501     -0.549828E-01 -0.993981E-01  0.993981E-01   173.028       173.127    
  24  0.108015      -2.22549      -4.02324       4.02324       174.487       178.510    
  25  0.988375     -0.116930E-01 -0.211387E-01  0.211387E-01   174.483       174.505    
  26  0.931439     -0.710246E-01 -0.128398      0.128398       173.455       173.584    
  27  0.915176     -0.886393E-01 -0.160242      0.160242       172.689       172.849    
  28  0.670330     -0.399985     -0.723093      0.723093       172.867       173.590    
  29  0.172595      -1.75681      -3.17596       3.17596       168.424       171.600    
  30  0.496295     -0.700585      -1.26652       1.26652       174.168       175.434    
  31  0.627359     -0.466236     -0.842863      0.842863       175.068       175.911    
  32  0.914384     -0.895052E-01 -0.161808      0.161808       173.391       173.553    
  33  0.197109      -1.62400      -2.93587       2.93587       174.449       177.385    
  34  0.830736     -0.185444     -0.335245      0.335245       173.585       173.920    
  35  0.554634     -0.589446      -1.06560       1.06560       172.730       173.796    
  36  0.386467E-01  -3.25329      -5.88131       5.88131       174.808       180.689    
  37  0.259980      -1.34715      -2.43539       2.43539       173.514       175.950    
  38  0.876870     -0.131396     -0.237539      0.237539       174.838       175.075    
  39  0.651025     -0.429207     -0.775922      0.775922       175.636       176.412    
  40  0.171053      -1.76578      -3.19219       3.19219       174.846       178.038    
  41  0.708910     -0.344027     -0.621934      0.621934       176.135       176.757    
  42  0.501487     -0.690177      -1.24770       1.24770       176.040       177.287    
  43  0.766040     -0.266521     -0.481818      0.481818       175.444       175.926    
  44  0.189113      -1.66541      -3.01074       3.01074       173.636       176.647    
  45  0.250338      -1.38494      -2.50371       2.50371       176.135       178.639    
  46  0.830098     -0.186211     -0.336633      0.336633       173.003       173.340    
  47  0.337228      -1.08700      -1.96507       1.96507       175.167       177.132    
  48  0.290155      -1.23734      -2.23687       2.23687       175.774       178.011    
  49  0.382897     -0.959988      -1.73547       1.73547       176.450       178.186    
  50  0.484934     -0.723743      -1.30838       1.30838       175.545       176.854    
  51  0.867083     -0.142620     -0.257830      0.257830       177.542       177.800    
  52  0.151990E-02  -6.48911      -11.7310       11.7310       176.998       188.729    
  53  0.964961     -0.356680E-01 -0.644808E-01  0.644808E-01   177.365       177.429    
  54  0.128257      -2.05372      -3.71272       3.71272       172.255       175.968    
  55  0.846209     -0.166989     -0.301882      0.301882       173.592       173.893    
  56  0.347221      -1.05779      -1.91228       1.91228       176.672       178.584    
  57  0.488187     -0.717056      -1.29630       1.29630       175.329       176.625    
  58  0.321978      -1.13327      -2.04874       2.04874       175.475       177.524    
  59  0.182989E-02  -6.30350      -11.3955       11.3955       177.340       188.736    
  60  0.863080     -0.147248     -0.266196      0.266196       174.331       174.597    
  61  0.606807     -0.499544     -0.903078      0.903078       176.714       177.617    
  62  0.874411     -0.134204     -0.242615      0.242615       178.427       178.670    
  63  0.525999     -0.642455      -1.16143       1.16143       178.392       179.553    
  64  0.455800     -0.785701      -1.42039       1.42039       178.432       179.852    
  65  0.894133E-01  -2.41449      -4.36492       4.36492       174.069       178.434    
  66  0.848019E-01  -2.46744      -4.46064       4.46064       179.665       184.126    
  67  0.234079      -1.45210      -2.62511       2.62511       177.621       180.246    
  68  0.809497     -0.211342     -0.382065      0.382065       176.272       176.654    
  69  0.242770      -1.41564      -2.55920       2.55920       181.080       183.639    
  70  0.307301      -1.17993      -2.13308       2.13308       175.715       177.848    
  71  0.256940      -1.35891      -2.45665       2.45665       177.810       180.266    
  72  0.877432     -0.130756     -0.236381      0.236381       175.683       175.919    
loop,thermsimp(1:2)       50   2.02347      0.762036    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    438        168.97          0.84          1.11         25.14          0.13          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    168.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       50
neval is:      437
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       51
neval is:      437


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      437     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.886088     -0.120938     -0.218633      0.218633       164.315       164.533    
   2  0.953882E-01  -2.34980      -4.24798       4.24798       166.873       171.121    
   3  0.875198     -0.133305     -0.240989      0.240989       168.307       168.548    
   4  0.401319     -0.913000      -1.65052       1.65052       168.270       169.921    
   5  0.288302      -1.24375      -2.24845       2.24845       169.047       171.296    
   6  0.596159E-01  -2.81983      -5.09770       5.09770       170.115       175.213    
   7  0.411979     -0.886782      -1.60313       1.60313       168.424       170.027    
   8  0.157950      -1.84548      -3.33626       3.33626       171.909       175.245    
   9  0.736512     -0.305830     -0.552880      0.552880       171.708       172.261    
  10  0.531935     -0.631235      -1.14115       1.14115       170.984       172.125    
  11  0.557201     -0.584829      -1.05726       1.05726       171.815       172.873    
  12  0.590342     -0.527053     -0.952809      0.952809       171.506       172.458    
  13  0.893645     -0.112447     -0.203281      0.203281       172.689       172.893    
  14  0.899172     -0.106281     -0.192135      0.192135       171.272       171.465    
  15  0.321510      -1.13473      -2.05136       2.05136       172.139       174.191    
  16  0.242259E-01  -3.72033      -6.72563       6.72563       169.081       175.807    
  17  0.646886     -0.435586     -0.787454      0.787454       173.028       173.815    
  18  0.998267     -0.173471E-02 -0.313601E-02  0.313601E-02   172.968       172.971    
  19  0.972297     -0.280942E-01 -0.507888E-01  0.507888E-01   173.003       173.054    
  20  0.309809      -1.17180      -2.11838       2.11838       172.252       174.371    
  21  0.816235     -0.203053     -0.367079      0.367079       173.391       173.758    
  22  0.984764     -0.153535E-01 -0.277562E-01  0.277562E-01   173.455       173.483    
  23  0.881026     -0.126668     -0.228991      0.228991       172.867       173.096    
  24  0.661336E-01  -2.71608      -4.91013       4.91013       172.730       177.640    
  25  0.410325     -0.890806      -1.61040       1.61040       173.592       175.202    
  26  0.104142E-03  -9.16976      -16.5771       16.5771       173.585       190.162    
  27  0.713949     -0.336943     -0.609127      0.609127       173.561       174.170    
  28  0.388242     -0.946126      -1.71041       1.71041       172.127       173.838    
  29  0.684780     -0.378657     -0.684538      0.684538       173.024       173.708    
  30  0.349297      -1.05183      -1.90151       1.90151       174.483       176.385    
  31  0.567533     -0.566456      -1.02404       1.02404       174.331       175.355    
  32  0.157115      -1.85078      -3.34584       3.34584       172.422       175.768    
  33  0.780641     -0.247640     -0.447685      0.447685       174.838       175.285    
  34  0.485397     -0.722789      -1.30666       1.30666       171.324       172.631    
  35  0.682517     -0.381968     -0.690523      0.690523       174.168       174.858    
  36  0.536829     -0.622075      -1.12459       1.12459       175.068       176.193    
  37  0.464187     -0.767467      -1.38743       1.38743       175.683       177.070    
  38  0.519819     -0.654274      -1.18280       1.18280       175.444       176.627    
  39  0.974252     -0.260857E-01 -0.471578E-01  0.471578E-01   173.514       173.562    
  40  0.386009     -0.951894      -1.72084       1.72084       172.255       173.976    
  41  0.217232      -1.52679      -2.76013       2.76013       175.636       178.396    
  42  0.173910      -1.74922      -3.16224       3.16224       175.329       178.491    
  43  0.860958     -0.149709     -0.270645      0.270645       173.636       173.907    
  44  0.893333     -0.112796     -0.203913      0.203913       176.272       176.476    
  45  0.957904     -0.430073E-01 -0.777488E-01  0.777488E-01   173.042       173.120    
  46  0.671164E-01  -2.70133      -4.88347       4.88347       176.135       181.019    
  47  0.133176      -2.01608      -3.64468       3.64468       175.545       179.190    
  48  0.574942     -0.553487      -1.00059       1.00059       175.167       176.168    
  49  0.302503      -1.19566      -2.16152       2.16152       176.040       178.201    
  50  0.325458      -1.12252      -2.02930       2.02930       174.449       176.478    
  51  0.344075      -1.06690      -1.92874       1.92874       177.365       179.294    
  52  0.432303     -0.838628      -1.51607       1.51607       175.475       176.991    
  53  0.855511     -0.156056     -0.282118      0.282118       176.714       176.996    
  54  0.391695     -0.937273      -1.69440       1.69440       177.542       179.236    
  55  0.613683     -0.488277     -0.882709      0.882709       175.715       176.598    
  56  0.694249     -0.364925     -0.659712      0.659712       175.774       176.434    
  57  0.155282      -1.86251      -3.36706       3.36706       174.846       178.213    
  58  0.632564     -0.457973     -0.827926      0.827926       176.450       177.278    
  59  0.519744     -0.654418      -1.18306       1.18306       174.069       175.252    
  60  0.486666     -0.720176      -1.30194       1.30194       174.487       175.789    
  61  0.538449E-01  -2.92165      -5.28176       5.28176       176.672       181.954    
  62  0.278027      -1.28004      -2.31406       2.31406       176.135       178.449    
  63  0.120374      -2.11715      -3.82739       3.82739       178.427       182.255    
  64  0.409455     -0.892928      -1.61424       1.61424       178.392       180.006    
  65  0.620520     -0.477197     -0.862678      0.862678       178.432       179.294    
  66  0.572142     -0.558368      -1.00942       1.00942       177.621       178.631    
  67  0.451293E-01  -3.09822      -5.60098       5.60098       177.810       183.411    
  68  0.631474     -0.459698     -0.831043      0.831043       174.808       175.639    
  69  0.811861     -0.208426     -0.376793      0.376793       181.080       181.456    
  70  0.946135     -0.553696E-01 -0.100097      0.100097       179.665       179.765    
  71  0.456493     -0.784182      -1.41765       1.41765       176.998       178.416    
  72  0.548763     -0.600088      -1.08484       1.08484       168.966       170.051    
loop,thermsimp(1:2)       51  0.218633       4.24798    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    439        170.71          0.84          1.10         25.06          0.16          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    170.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       51
neval is:      438
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       52
neval is:      438


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      438     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.827214E-01  -2.49228      -4.50555       4.50555       164.315       168.820    
   2  0.625679E-01  -2.77150      -5.01033       5.01033       168.307       173.317    
   3  0.254112      -1.36998      -2.47665       2.47665       168.270       170.747    
   4  0.582152     -0.541023     -0.978064      0.978064       168.424       169.402    
   5  0.596882     -0.516035     -0.932890      0.932890       168.966       169.899    
   6  0.149943      -1.89750      -3.43031       3.43031       166.873       170.303    
   7  0.496252     -0.700672      -1.26668       1.26668       169.047       170.314    
   8  0.129782      -2.04190      -3.69135       3.69135       171.272       174.964    
   9  0.740869     -0.299931     -0.542216      0.542216       170.984       171.526    
  10  0.124297      -2.08508      -3.76942       3.76942       171.708       175.478    
  11  0.524903     -0.644542      -1.16521       1.16521       171.506       172.671    
  12  0.852180     -0.159958     -0.289172      0.289172       171.324       171.613    
  13  0.823232     -0.194517     -0.351648      0.351648       171.815       172.167    
  14  0.256230      -1.36168      -2.46165       2.46165       172.689       175.151    
  15  0.258393      -1.35327      -2.44645       2.44645       172.968       175.414    
  16  0.324549      -1.12532      -2.03435       2.03435       173.003       175.038    
  17  0.504546     -0.684097      -1.23671       1.23671       172.867       174.104    
  18  0.774284     -0.255817     -0.462466      0.462466       173.042       173.504    
  19  0.452119E-01  -3.09639      -5.59767       5.59767       173.455       179.053    
  20  0.325288      -1.12305      -2.03025       2.03025       173.514       175.545    
  21  0.156855      -1.85244      -3.34884       3.34884       173.024       176.373    
  22  0.440906     -0.818924      -1.48045       1.48045       173.391       174.872    
  23  0.313753E-02  -5.76432      -10.4208       10.4208       173.028       183.449    
  24  0.252529      -1.37623      -2.48795       2.48795       172.127       174.615    
  25  0.799267     -0.224060     -0.405056      0.405056       173.636       174.041    
  26  0.961010     -0.397708E-01 -0.718978E-01  0.718978E-01   172.255       172.327    
  27  0.843711     -0.169946     -0.307228      0.307228       173.561       173.868    
  28  0.120002      -2.12025      -3.83299       3.83299       172.139       175.972    
  29  0.489889     -0.713576      -1.29000       1.29000       172.252       173.542    
  30  0.317246      -1.14808      -2.07550       2.07550       174.168       176.243    
  31  0.761766     -0.272116     -0.491932      0.491932       173.592       174.084    
  32  0.468167     -0.758930      -1.37200       1.37200       170.115       171.487    
  33  0.634908     -0.454275     -0.821239      0.821239       171.909       172.730    
  34  0.410644     -0.890029      -1.60900       1.60900       174.069       175.678    
  35  0.330962      -1.10575      -1.99898       1.99898       174.838       176.837    
  36  0.275422      -1.28945      -2.33107       2.33107       174.331       176.662    
  37  0.186052      -1.68173      -3.04024       3.04024       174.808       177.848    
  38  0.361178      -1.01838      -1.84104       1.84104       172.422       174.263    
  39  0.850100     -0.162402     -0.293590      0.293590       174.487       174.780    
  40  0.649062     -0.432226     -0.781380      0.781380       169.081       169.862    
  41  0.322988      -1.13014      -2.04307       2.04307       175.167       177.210    
  42  0.284964      -1.25539      -2.26950       2.26950       175.068       177.338    
  43  0.685335     -0.377848     -0.683075      0.683075       174.483       175.166    
  44  0.262422      -1.33780      -2.41848       2.41848       175.774       178.193    
  45  0.767375     -0.264780     -0.478670      0.478670       176.272       176.751    
  46  0.109385      -2.21288      -4.00045       4.00045       174.449       178.450    
  47  0.306599      -1.18221      -2.13721       2.13721       175.715       177.852    
  48  0.406201     -0.900907      -1.62866       1.62866       175.444       177.073    
  49  0.423601     -0.858964      -1.55284       1.55284       175.475       177.028    
  50  0.525023     -0.644313      -1.16479       1.16479       176.714       177.878    
  51  0.947103E-01  -2.35693      -4.26087       4.26087       175.683       179.944    
  52  0.408122     -0.896189      -1.62013       1.62013       176.450       178.070    
  53  0.463749     -0.768411      -1.38914       1.38914       172.730       174.119    
  54  0.985471     -0.146353E-01 -0.264578E-01  0.264578E-01   176.040       176.066    
  55  0.956569E-01  -2.34699      -4.24289       4.24289       174.846       179.088    
  56  0.529007     -0.636753      -1.15112       1.15112       175.636       176.787    
  57  0.648382     -0.433275     -0.783276      0.783276       176.998       177.781    
  58  0.910357     -0.939189E-01 -0.169787      0.169787       176.135       176.305    
  59  0.469822     -0.755402      -1.36562       1.36562       175.329       176.694    
  60  0.254916      -1.36682      -2.47094       2.47094       177.621       180.092    
  61  0.724030E-01  -2.62551      -4.74640       4.74640       175.545       180.292    
  62  0.719606     -0.329052     -0.594861      0.594861       177.542       178.137    
  63  0.354448      -1.03719      -1.87504       1.87504       177.365       179.240    
  64  0.587821     -0.531332     -0.960544      0.960544       178.432       179.392    
  65  0.623489     -0.472425     -0.854051      0.854051       179.665       180.519    
  66  0.379055     -0.970075      -1.75371       1.75371       178.392       180.145    
  67  0.340109      -1.07849      -1.94969       1.94969       176.135       178.085    
  68  0.473068     -0.748517      -1.35317       1.35317       181.080       182.433    
  69  0.865116     -0.144892     -0.261936      0.261936       176.672       176.934    
  70  0.344257      -1.06637      -1.92778       1.92778       178.427       180.355    
  71  0.110417      -2.20349      -3.98348       3.98348       177.810       181.793    
  72  0.116327E-01  -4.45393      -8.05184       8.05184       170.712       178.763    
loop,thermsimp(1:2)       52   4.50555       5.01033    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    440        173.57          0.84          1.11         25.06          0.18          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       52
neval is:      439
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       53
neval is:      439


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      439     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265283      -1.32696      -2.39888       2.39888       164.315       166.713    
   2  0.615112     -0.485951     -0.878504      0.878504       168.424       169.303    
   3  0.424286E-01  -3.15993      -5.71254       5.71254       169.081       174.794    
   4  0.726479     -0.319546     -0.577676      0.577676       168.966       169.544    
   5  0.402368     -0.910388      -1.64580       1.64580       166.873       168.519    
   6  0.958941E-01  -2.34451      -4.23841       4.23841       169.047       173.286    
   7  0.137400      -1.98486      -3.58823       3.58823       168.270       171.858    
   8  0.887138     -0.119755     -0.216494      0.216494       170.115       170.332    
   9  0.655001     -0.423119     -0.764916      0.764916       170.984       171.749    
  10  0.304836      -1.18798      -2.14763       2.14763       171.324       173.472    
  11  0.346250      -1.06059      -1.91735       1.91735       171.815       173.733    
  12  0.608663E-01  -2.79908      -5.06018       5.06018       172.255       177.315    
  13  0.307248      -1.18010      -2.13339       2.13339       171.506       173.639    
  14  0.695201     -0.363555     -0.657235      0.657235       171.909       172.566    
  15  0.628698     -0.464104     -0.839009      0.839009       168.307       169.146    
  16  0.609308     -0.495432     -0.895643      0.895643       173.042       173.938    
  17  0.335400      -1.09243      -1.97490       1.97490       172.252       174.227    
  18  0.910258     -0.940273E-01 -0.169983      0.169983       173.561       173.731    
  19  0.439254E-01  -3.12526      -5.64986       5.64986       173.636       179.286    
  20  0.978338     -0.219001E-01 -0.395911E-01  0.395911E-01   173.592       173.631    
  21  0.282939      -1.26252      -2.28240       2.28240       172.867       175.150    
  22  0.763165     -0.270281     -0.488616      0.488616       172.730       173.219    
  23  0.206330      -1.57828      -2.85322       2.85322       172.422       175.275    
  24  0.228687      -1.47540      -2.66724       2.66724       172.127       174.794    
  25  0.634584E-01  -2.75737      -4.98478       4.98478       174.487       179.472    
  26  0.665745E-01  -2.70943      -4.89812       4.89812       173.391       178.290    
  27  0.761759     -0.272125     -0.491949      0.491949       171.272       171.764    
  28  0.636615     -0.451590     -0.816386      0.816386       173.003       173.820    
  29  0.804468     -0.217574     -0.393331      0.393331       172.689       173.083    
  30  0.508586     -0.676120      -1.22229       1.22229       174.483       175.706    
  31  0.232797      -1.45759      -2.63504       2.63504       172.968       175.603    
  32  0.932655     -0.697196E-01 -0.126039      0.126039       171.708       171.834    
  33  0.970411     -0.300359E-01 -0.542990E-01  0.542990E-01   173.514       173.569    
  34  0.151993      -1.88392      -3.40576       3.40576       174.069       177.475    
  35  0.571421     -0.559629      -1.01170       1.01170       172.139       173.151    
  36  0.673371     -0.395458     -0.714911      0.714911       176.040       176.755    
  37  0.828783     -0.187797     -0.339500      0.339500       174.168       174.507    
  38  0.285628      -1.25307      -2.26530       2.26530       176.135       178.400    
  39  0.127849      -2.05691      -3.71849       3.71849       173.024       176.742    
  40  0.101247      -2.29019      -4.14021       4.14021       174.331       178.471    
  41  0.593355     -0.521962     -0.943605      0.943605       175.329       176.272    
  42  0.362303      -1.01527      -1.83542       1.83542       176.272       178.107    
  43  0.754411     -0.281818     -0.509471      0.509471       175.636       176.145    
  44  0.917727     -0.858556E-01 -0.155210      0.155210       174.838       174.993    
  45  0.281495      -1.26764      -2.29165       2.29165       176.672       178.964    
  46  0.757766     -0.277381     -0.501451      0.501451       175.475       175.977    
  47  0.721843E-01  -2.62853      -4.75187       4.75187       175.444       180.196    
  48  0.995421     -0.458990E-02 -0.829764E-02  0.829764E-02   175.167       175.175    
  49  0.101230      -2.29036      -4.14053       4.14053       175.068       179.209    
  50  0.477194     -0.739832      -1.33747       1.33747       176.998       178.335    
  51  0.414653E-01  -3.18290      -5.75405       5.75405       174.808       180.562    
  52  0.927379     -0.753934E-01 -0.136296      0.136296       175.715       175.851    
  53  0.642274     -0.442741     -0.800388      0.800388       176.714       177.514    
  54  0.510784     -0.671809      -1.21450       1.21450       176.450       177.665    
  55  0.394196     -0.930907      -1.68290       1.68290       176.135       177.818    
  56  0.665507     -0.407206     -0.736149      0.736149       177.542       178.278    
  57  0.444368     -0.811101      -1.46631       1.46631       175.774       177.240    
  58  0.386291     -0.951164      -1.71952       1.71952       174.449       176.169    
  59  0.185997      -1.68202      -3.04077       3.04077       170.712       173.752    
  60  0.430546     -0.842700      -1.52344       1.52344       173.455       174.979    
  61  0.720151     -0.328295     -0.593493      0.593493       174.846       175.439    
  62  0.289744      -1.23876      -2.23943       2.23943       177.365       179.604    
  63  0.678945     -0.387216     -0.700010      0.700010       178.432       179.132    
  64  0.444970     -0.809748      -1.46387       1.46387       175.683       177.147    
  65  0.993971E-01  -2.30863      -4.17355       4.17355       177.621       181.795    
  66  0.417064     -0.874517      -1.58095       1.58095       178.392       179.973    
  67  0.778412E-01  -2.55308      -4.61547       4.61547       175.545       180.161    
  68  0.366030      -1.00504      -1.81691       1.81691       178.427       180.244    
  69  0.603490     -0.505025     -0.912987      0.912987       179.665       180.578    
  70  0.951517     -0.496979E-01 -0.898441E-01  0.898441E-01   177.810       177.900    
  71  0.723579     -0.323545     -0.584906      0.584906       181.080       181.664    
  72  0.504861     -0.683472      -1.23558       1.23558       173.567       174.803    
loop,thermsimp(1:2)       53   2.39888      0.878504    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    441        168.91          0.84          1.11         25.12          0.20          0.05         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  440    168.91       0.9895     -1.417      2.174     -102.6     0.9059    
                      0.3471E-01  1.759     -99.70      3.616     0.4407    
                       2.226     -1.648      2.098      0.000     -40.00    
                      -1.046      0.000      0.000      0.000     -1.221    

                      -2.500     0.3431E+05 0.3179E+05  0.000      0.000    
                     -0.5672     -5.964     -4.531     -7.993      5.204    
                      -14.80     -2.972     -960.8      0.000     -2315.    

                      -6867.      8519.     -3227.     0.1341E+06  1053.    
                       6677.    -0.1827E-01 0.2382E-02  0.000     0.7193E-01
                     -0.1206E-01 0.3224E-01 0.5381E-01 0.3311E-01 0.4138E-01

                     -0.1197    -0.8901      0.000    -0.7373E-01 0.2730E-01
                       0.000    -0.6529E-01-0.7143E-01-0.5670E-01-0.7651E-02
                      0.3194E-01 0.2137E-02-0.2502     -1.170      0.000    

                     -0.1405    -0.5861    -0.6082    -0.4548    -0.9599    
                      0.5938E-01  9.054      8.766     -4852.     -4.000    
                     -0.3267    -0.8496      9.179      8.766     -6164.    

                      -4.000     0.3863    -0.9119      8.967      8.874    
                      -2018.     -7.000    -0.1977    -0.8450      9.117    
                       8.797     -6258.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    168.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       53
neval is:      440
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       54
neval is:      440


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      440     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.551084     -0.595868      -1.07721       1.07721       164.315       165.392    
   2  0.390343     -0.940730      -1.70065       1.70065       166.873       168.573    
   3  0.506127     -0.680968      -1.23106       1.23106       168.307       169.538    
   4  0.964820     -0.358141E-01 -0.647449E-01  0.647449E-01   168.424       168.489    
   5  0.647775     -0.434212     -0.784971      0.784971       168.966       169.751    
   6  0.251459      -1.38048      -2.49563       2.49563       170.115       172.611    
   7  0.908837     -0.955893E-01 -0.172807      0.172807       170.984       171.157    
   8  0.800726     -0.222236     -0.401759      0.401759       171.272       171.674    
   9  0.480867E-01  -3.03475      -5.48623       5.48623       171.708       177.195    
  10  0.859127     -0.151839     -0.274494      0.274494       168.270       168.545    
  11  0.618632     -0.480244     -0.868187      0.868187       171.909       172.777    
  12  0.262118      -1.33896      -2.42057       2.42057       172.689       175.110    
  13  0.373394     -0.985121      -1.78090       1.78090       172.139       173.920    
  14  0.698954     -0.358170     -0.647501      0.647501       172.730       173.377    
  15  0.698639     -0.358621     -0.648317      0.648317       169.047       169.695    
  16  0.683233     -0.380919     -0.688627      0.688627       171.324       172.013    
  17  0.475083     -0.744266      -1.34549       1.34549       173.514       174.860    
  18  0.957666E-01  -2.34584      -4.24082       4.24082       173.592       177.832    
  19  0.767182     -0.265031     -0.479125      0.479125       171.506       171.985    
  20  0.418812     -0.870332      -1.57339       1.57339       173.561       175.135    
  21  0.940661     -0.611725E-01 -0.110588      0.110588       171.815       171.926    
  22  0.827990     -0.188754     -0.341231      0.341231       170.712       171.053    
  23  0.463008     -0.770011      -1.39203       1.39203       173.003       174.395    
  24  0.723352     -0.323860     -0.585474      0.585474       173.042       173.627    
  25  0.330269      -1.10785      -2.00277       2.00277       172.252       174.255    
  26  0.640927E-02  -5.05001      -9.12942       9.12942       174.168       183.297    
  27  0.849682     -0.162893     -0.294479      0.294479       169.081       169.376    
  28  0.457568     -0.781830      -1.41339       1.41339       172.127       173.541    
  29  0.720244     -0.328166     -0.593259      0.593259       173.567       174.160    
  30  0.953392     -0.477287E-01 -0.862842E-01  0.862842E-01   173.455       173.542    
  31  0.322501      -1.13165      -2.04580       2.04580       174.838       176.884    
  32  0.335509      -1.09211      -1.97432       1.97432       172.867       174.842    
  33  0.140389      -1.96334      -3.54933       3.54933       175.167       178.716    
  34  0.429265     -0.845681      -1.52882       1.52882       172.422       173.951    
  35  0.775769E-01  -2.55649      -4.62162       4.62162       174.846       179.467    
  36  0.414811     -0.879933      -1.59075       1.59075       172.968       174.558    
  37  0.183764      -1.69410      -3.06260       3.06260       174.483       177.546    
  38  0.357541      -1.02851      -1.85934       1.85934       175.715       177.574    
  39  0.401419E-02  -5.51792      -9.97531       9.97531       175.475       185.451    
  40  0.399411     -0.917764      -1.65914       1.65914       175.636       177.295    
  41  0.795187     -0.229178     -0.414309      0.414309       174.449       174.863    
  42  0.673332     -0.395517     -0.715017      0.715017       175.329       176.044    
  43  0.898211     -0.107350     -0.194068      0.194068       173.024       173.218    
  44  0.769733     -0.261711     -0.473122      0.473122       176.040       176.513    
  45  0.791938     -0.233272     -0.421709      0.421709       175.683       176.105    
  46  0.537104     -0.621563      -1.12366       1.12366       175.774       176.898    
  47  0.313282      -1.16065      -2.09823       2.09823       172.255       174.353    
  48  0.516025     -0.661601      -1.19604       1.19604       174.069       175.265    
  49  0.119673      -2.12299      -3.83795       3.83795       176.714       180.551    
  50  0.221920      -1.50544      -2.72154       2.72154       176.450       179.172    
  51  0.639805     -0.446592     -0.807350      0.807350       176.135       176.943    
  52  0.947460     -0.539710E-01 -0.975690E-01  0.975690E-01   177.810       177.907    
  53  0.786966     -0.239570     -0.433096      0.433096       176.272       176.705    
  54  0.990455     -0.959131E-02 -0.173392E-01  0.173392E-01   177.542       177.559    
  55  0.959621     -0.412173E-01 -0.745127E-01  0.745127E-01   173.391       173.466    
  56  0.617783     -0.481618     -0.870670      0.870670       176.998       177.869    
  57  0.958668     -0.422110E-01 -0.763091E-01  0.763091E-01   176.135       176.211    
  58  0.723379     -0.323823     -0.585407      0.585407       174.331       174.916    
  59  0.602684     -0.506362     -0.915403      0.915403       176.672       177.587    
  60  0.897895     -0.107702     -0.194704      0.194704       178.432       178.627    
  61  0.849418     -0.163204     -0.295040      0.295040       175.068       175.363    
  62  0.478641     -0.736804      -1.33200       1.33200       173.636       174.968    
  63  0.148154      -1.90950      -3.45201       3.45201       174.487       177.939    
  64  0.600585     -0.509852     -0.921712      0.921712       177.365       178.287    
  65  0.720491     -0.327823     -0.592639      0.592639       178.392       178.984    
  66  0.131895      -2.02575      -3.66215       3.66215       175.545       179.207    
  67  0.877712     -0.130437     -0.235804      0.235804       175.444       175.680    
  68  0.739537     -0.301730     -0.545469      0.545469       178.427       178.973    
  69  0.201243      -1.60324      -2.89834       2.89834       174.808       177.706    
  70  0.710405     -0.341920     -0.618123      0.618123       179.665       180.283    
  71  0.121804      -2.10534      -3.80605       3.80605       181.080       184.886    
  72  0.390710     -0.939789      -1.69895       1.69895       168.913       170.612    
loop,thermsimp(1:2)       54   1.07721       1.70065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    442        178.03          0.84          1.11         24.98          0.25          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    178.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       54
neval is:      441
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       55
neval is:      441


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      441     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.146220      -1.92264      -3.47576       3.47576       164.315       167.790    
   2  0.620947     -0.476510     -0.861436      0.861436       168.424       169.286    
   3  0.177272      -1.73007      -3.12762       3.12762       168.270       171.398    
   4  0.884738     -0.122464     -0.221390      0.221390       166.873       167.094    
   5  0.304829      -1.18800      -2.14768       2.14768       169.081       171.229    
   6  0.555834     -0.587286      -1.06170       1.06170       168.307       169.369    
   7  0.396848     -0.924202      -1.67078       1.67078       169.047       170.718    
   8  0.570840     -0.560646      -1.01354       1.01354       168.966       169.980    
   9  0.726203     -0.319926     -0.578363      0.578363       168.913       169.491    
  10  0.917349E-01  -2.38885      -4.31857       4.31857       170.712       175.030    
  11  0.456603     -0.783941      -1.41721       1.41721       170.984       172.401    
  12  0.602259     -0.507068     -0.916679      0.916679       171.272       172.189    
  13  0.496888E-01  -3.00198      -5.42698       5.42698       171.815       177.242    
  14  0.583997     -0.537860     -0.972345      0.972345       171.506       172.478    
  15  0.200789E-01  -3.90809      -7.06505       7.06505       171.324       178.389    
  16  0.422855     -0.860726      -1.55602       1.55602       170.115       171.671    
  17  0.535645     -0.624284      -1.12858       1.12858       171.909       173.037    
  18  0.413266     -0.883663      -1.59749       1.59749       173.024       174.621    
  19  0.342457      -1.07161      -1.93726       1.93726       172.730       174.667    
  20  0.638345     -0.448876     -0.811480      0.811480       173.391       174.203    
  21  0.655695     -0.422060     -0.763001      0.763001       172.127       172.890    
  22  0.629392     -0.463001     -0.837014      0.837014       173.455       174.292    
  23  0.977606     -0.226486E-01 -0.409442E-01  0.409442E-01   173.042       173.083    
  24  0.752980E-01  -2.58630      -4.67552       4.67552       172.139       176.815    
  25  0.874423     -0.134191     -0.242592      0.242592       172.422       172.665    
  26  0.587202     -0.532387     -0.962450      0.962450       173.567       174.529    
  27  0.880682     -0.127059     -0.229697      0.229697       172.252       172.482    
  28  0.878591E-01  -2.43202      -4.39662       4.39662       172.255       176.651    
  29  0.695678     -0.362869     -0.655996      0.655996       173.003       173.659    
  30  0.124758      -2.08138      -3.76272       3.76272       172.968       176.730    
  31  0.605547     -0.501622     -0.906835      0.906835       172.867       173.774    
  32  0.650291     -0.430335     -0.777961      0.777961       173.514       174.292    
  33  0.639591     -0.446926     -0.807954      0.807954       174.449       175.257    
  34  0.872983     -0.135839     -0.245570      0.245570       174.331       174.576    
  35  0.291503E-01  -3.53529      -6.39111       6.39111       173.636       180.028    
  36  0.290539      -1.23602      -2.23447       2.23447       172.689       174.924    
  37  0.759349     -0.275294     -0.497678      0.497678       173.561       174.059    
  38  0.599537     -0.511597     -0.924866      0.924866       174.069       174.994    
  39  0.948707     -0.526557E-01 -0.951912E-01  0.951912E-01   175.068       175.163    
  40  0.180828      -1.71021      -3.09172       3.09172       175.444       178.536    
  41  0.385708     -0.952674      -1.72225       1.72225       175.329       177.051    
  42  0.299380      -1.20604      -2.18029       2.18029       175.683       177.863    
  43  0.853891     -0.157952     -0.285546      0.285546       176.135       176.421    
  44  0.502000E-01  -2.99174      -5.40848       5.40848       176.040       181.448    
  45  0.510049     -0.673249      -1.21710       1.21710       176.272       177.489    
  46  0.500368     -0.692411      -1.25174       1.25174       174.838       176.090    
  47  0.947833     -0.535774E-01 -0.968573E-01  0.968573E-01   175.774       175.871    
  48  0.147734      -1.91235      -3.45714       3.45714       176.135       179.592    
  49  0.448609     -0.801603      -1.44914       1.44914       171.708       173.158    
  50  0.589816E-01  -2.83053      -5.11704       5.11704       175.636       180.753    
  51  0.914696     -0.891630E-01 -0.161189      0.161189       174.483       174.645    
  52  0.187672E-01  -3.97564      -7.18718       7.18718       177.542       184.729    
  53  0.842801     -0.171024     -0.309178      0.309178       175.715       176.024    
  54  0.394775     -0.929438      -1.68024       1.68024       176.672       178.352    
  55  0.830091E-01  -2.48880      -4.49927       4.49927       174.808       179.307    
  56  0.448195     -0.802527      -1.45081       1.45081       173.592       175.042    
  57  0.685603     -0.377456     -0.682366      0.682366       176.998       177.680    
  58  0.773262     -0.257137     -0.464853      0.464853       177.810       178.275    
  59  0.785103E-01  -2.54453      -4.60000       4.60000       174.487       179.087    
  60  0.163001      -1.81400      -3.27935       3.27935       177.365       180.644    
  61  0.679089     -0.387003     -0.699625      0.699625       178.432       179.131    
  62  0.748996     -0.289022     -0.522494      0.522494       175.167       175.690    
  63  0.856909     -0.154424     -0.279168      0.279168       178.427       178.706    
  64  0.336175      -1.09012      -1.97073       1.97073       178.392       180.362    
  65  0.502408     -0.688342      -1.24439       1.24439       176.450       177.695    
  66  0.372496     -0.987528      -1.78526       1.78526       175.545       177.330    
  67  0.179011      -1.72031      -3.10998       3.10998       174.846       177.956    
  68  0.601874     -0.507708     -0.917836      0.917836       179.665       180.583    
  69  0.559888E-01  -2.88260      -5.21118       5.21118       176.714       181.925    
  70  0.409810     -0.892062      -1.61267       1.61267       174.168       175.781    
  71  0.473934     -0.746688      -1.34986       1.34986       181.080       182.429    
  72  0.426316     -0.852574      -1.54129       1.54129       178.026       179.567    
loop,thermsimp(1:2)       55   3.47576      0.861436    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    443        167.45          0.84          1.11         25.01          0.21          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    167.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       55
neval is:      442
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       56
neval is:      442


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      442     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.500984     -0.691182      -1.24952       1.24952       166.873       168.122    
   2  0.324862      -1.12436      -2.03261       2.03261       164.315       166.347    
   3  0.195419      -1.63261      -2.95144       2.95144       168.424       171.376    
   4  0.203731      -1.59096      -2.87613       2.87613       168.307       171.183    
   5  0.177968      -1.72615      -3.12055       3.12055       168.913       172.033    
   6  0.835197     -0.180088     -0.325563      0.325563       168.966       169.292    
   7  0.302476      -1.19575      -2.16169       2.16169       169.047       171.209    
   8  0.352903E-01  -3.34415      -6.04556       6.04556       169.081       175.127    
   9  0.308671      -1.17548      -2.12504       2.12504       168.270       170.395    
  10  0.409306E-01  -3.19588      -5.77752       5.77752       170.115       175.893    
  11  0.615747     -0.484919     -0.876638      0.876638       171.272       172.149    
  12  0.766359     -0.266105     -0.481066      0.481066       170.984       171.465    
  13  0.625912     -0.468545     -0.847037      0.847037       171.506       172.353    
  14  0.435348     -0.831610      -1.50339       1.50339       172.252       173.756    
  15  0.341014      -1.07583      -1.94489       1.94489       172.422       174.367    
  16  0.434268E-01  -3.13668      -5.67050       5.67050       172.127       177.798    
  17  0.604743     -0.502951     -0.909237      0.909237       171.909       172.818    
  18  0.536278     -0.623102      -1.12645       1.12645       173.042       174.168    
  19  0.207674      -1.57179      -2.84148       2.84148       171.708       174.550    
  20  0.985598E-01  -2.31709      -4.18885       4.18885       173.003       177.192    
  21  0.814506     -0.205174     -0.370913      0.370913       172.867       173.238    
  22  0.447321     -0.804478      -1.45434       1.45434       173.561       175.016    
  23  0.741331     -0.299308     -0.541089      0.541089       173.391       173.932    
  24  0.601378     -0.508531     -0.919324      0.919324       173.455       174.375    
  25  0.421939E-01  -3.16548      -5.72256       5.72256       173.514       179.237    
  26  0.837477     -0.177362     -0.320635      0.320635       173.567       173.888    
  27  0.297606      -1.21198      -2.19103       2.19103       174.331       176.522    
  28  0.383069     -0.959540      -1.73466       1.73466       173.024       174.758    
  29  0.291041      -1.23429      -2.23136       2.23136       174.483       176.715    
  30  0.788773     -0.237276     -0.428949      0.428949       172.730       173.159    
  31  0.471794     -0.751213      -1.35805       1.35805       172.689       174.047    
  32  0.313755      -1.15914      -2.09550       2.09550       174.069       176.164    
  33  0.878815     -0.129181     -0.233533      0.233533       170.712       170.945    
  34  0.442284     -0.815802      -1.47481       1.47481       173.592       175.066    
  35  0.577998     -0.548185     -0.991011      0.991011       175.068       176.059    
  36  0.167851      -1.78468      -3.22635       3.22635       174.449       177.675    
  37  0.317031      -1.14875      -2.07672       2.07672       175.167       177.244    
  38  0.645763     -0.437323     -0.790593      0.790593       174.168       174.959    
  39  0.682139     -0.382522     -0.691524      0.691524       175.774       176.466    
  40  0.116437      -2.15041      -3.88751       3.88751       175.715       179.602    
  41  0.510594     -0.672180      -1.21517       1.21517       174.838       176.053    
  42  0.807696E-02  -4.81874      -8.71133       8.71133       176.135       184.846    
  43  0.367650      -1.00062      -1.80893       1.80893       172.255       174.064    
  44  0.446943     -0.805324      -1.45587       1.45587       172.968       174.424    
  45  0.181490      -1.70655      -3.08511       3.08511       172.139       175.224    
  46  0.912521     -0.915438E-01 -0.165493      0.165493       175.329       175.494    
  47  0.692870     -0.366912     -0.663305      0.663305       171.815       172.479    
  48  0.317456      -1.14742      -2.07430       2.07430       175.545       177.619    
  49  0.776642     -0.252776     -0.456969      0.456969       176.272       176.729    
  50  0.248677      -1.39160      -2.51574       2.51574       176.998       179.514    
  51  0.931207     -0.712734E-01 -0.128848      0.128848       176.450       176.579    
  52  0.127901      -2.05650      -3.71775       3.71775       175.683       179.401    
  53  0.780843     -0.247381     -0.447217      0.447217       174.846       175.293    
  54  0.773205     -0.257211     -0.464987      0.464987       177.810       178.275    
  55  0.764817     -0.268119     -0.484706      0.484706       176.672       177.157    
  56  0.230689      -1.46668      -2.65148       2.65148       171.324       173.976    
  57  0.424204     -0.857541      -1.55026       1.55026       175.444       176.995    
  58  0.281344      -1.26818      -2.29261       2.29261       178.427       180.720    
  59  0.523215     -0.647764      -1.17103       1.17103       174.487       175.658    
  60  0.392415     -0.935434      -1.69108       1.69108       178.432       180.123    
  61  0.351563      -1.04537      -1.88982       1.88982       174.808       176.698    
  62  0.176215      -1.73605      -3.13844       3.13844       178.026       181.164    
  63  0.383277     -0.958998      -1.73368       1.73368       176.135       177.869    
  64  0.855506     -0.156062     -0.282130      0.282130       173.636       173.919    
  65  0.919810     -0.835877E-01 -0.151110      0.151110       178.392       178.543    
  66  0.327423      -1.11650      -2.01842       2.01842       179.665       181.683    
  67  0.688698     -0.372953     -0.674225      0.674225       177.365       178.039    
  68  0.424438     -0.856990      -1.54927       1.54927       175.636       177.185    
  69  0.706226     -0.347820     -0.628791      0.628791       176.040       176.669    
  70  0.806363E-01  -2.51781      -4.55170       4.55170       176.714       181.265    
  71  0.177184E-01  -4.03315      -7.29114       7.29114       181.080       188.371    
  72  0.908444     -0.960219E-01 -0.173589      0.173589       167.454       167.628    
loop,thermsimp(1:2)       56   1.24952       2.03261    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    444        173.92          0.84          1.10         25.18          0.06          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       56
neval is:      443
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       57
neval is:      443


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      443     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842839     -0.170980     -0.309098      0.309098       164.315       164.624    
   2  0.986423     -0.136696E-01 -0.247120E-01  0.247120E-01   167.454       167.479    
   3  0.633540     -0.456433     -0.825141      0.825141       166.873       167.698    
   4  0.518217E-01  -2.95995      -5.35100       5.35100       168.966       174.317    
   5  0.187161      -1.67579      -3.02949       3.02949       168.270       171.300    
   6  0.148298      -1.90853      -3.45025       3.45025       170.712       174.162    
   7  0.438795     -0.823722      -1.48913       1.48913       168.307       169.796    
   8  0.763297     -0.270109     -0.488303      0.488303       169.047       169.535    
   9  0.338275      -1.08390      -1.95947       1.95947       168.424       170.384    
  10  0.918815     -0.846702E-01 -0.153067      0.153067       170.984       171.137    
  11  0.349782      -1.05045      -1.89900       1.89900       168.913       170.812    
  12  0.131188      -2.03112      -3.67187       3.67187       171.272       174.944    
  13  0.961440     -0.393229E-01 -0.710881E-01  0.710881E-01   171.506       171.577    
  14  0.489949     -0.713455      -1.28979       1.28979       171.815       173.105    
  15  0.149956      -1.89742      -3.43015       3.43015       171.909       175.339    
  16  0.684004     -0.379791     -0.686588      0.686588       172.730       173.417    
  17  0.314778      -1.15589      -2.08962       2.08962       172.867       174.957    
  18  0.615260     -0.485711     -0.878069      0.878069       172.252       173.131    
  19  0.432805     -0.837468      -1.51398       1.51398       173.567       175.081    
  20  0.362224      -1.01549      -1.83581       1.83581       173.636       175.472    
  21  0.622697     -0.473696     -0.856349      0.856349       173.391       174.248    
  22  0.486392     -0.720740      -1.30296       1.30296       171.324       172.627    
  23  0.465513     -0.764615      -1.38227       1.38227       172.689       174.071    
  24  0.738251     -0.303471     -0.548615      0.548615       172.255       172.803    
  25  0.384600     -0.955551      -1.72745       1.72745       173.042       174.769    
  26  0.293922      -1.22444      -2.21355       2.21355       172.422       174.636    
  27  0.371803     -0.989390      -1.78862       1.78862       173.455       175.244    
  28  0.237589      -1.43721      -2.59820       2.59820       172.968       175.566    
  29  0.286147      -1.25125      -2.26201       2.26201       171.708       173.970    
  30  0.500459     -0.692230      -1.25142       1.25142       173.024       174.275    
  31  0.134865      -2.00348      -3.62190       3.62190       174.168       177.790    
  32  0.660213     -0.415193     -0.750587      0.750587       173.561       174.312    
  33  0.481817E-01  -3.03278      -5.48266       5.48266       173.592       179.074    
  34  0.683728     -0.380195     -0.687317      0.687317       169.081       169.768    
  35  0.634601     -0.454758     -0.822113      0.822113       172.139       172.961    
  36  0.195153      -1.63397      -2.95390       2.95390       174.846       177.799    
  37  0.176401      -1.73499      -3.13653       3.13653       175.329       178.465    
  38  0.770296     -0.260980     -0.471801      0.471801       174.487       174.959    
  39  0.223005      -1.50056      -2.71272       2.71272       170.115       172.828    
  40  0.530844E-01  -2.93587      -5.30748       5.30748       174.838       180.145    
  41  0.778354     -0.250574     -0.452988      0.452988       175.068       175.521    
  42  0.118362E-02  -6.73917      -12.1831       12.1831       174.069       186.252    
  43  0.658087     -0.418418     -0.756417      0.756417       175.774       176.531    
  44  0.832154E-01  -2.48632      -4.49478       4.49478       174.331       178.825    
  45  0.569178     -0.563562      -1.01881       1.01881       176.450       177.469    
  46  0.511101     -0.671188      -1.21338       1.21338       176.040       177.253    
  47  0.585157     -0.535875     -0.968757      0.968757       174.808       175.777    
  48  0.821991     -0.196026     -0.354377      0.354377       174.483       174.838    
  49  0.433318     -0.836284      -1.51184       1.51184       176.272       177.784    
  50  0.286210      -1.25103      -2.26162       2.26162       175.444       177.706    
  51  0.455679     -0.785966      -1.42087       1.42087       176.672       178.093    
  52  0.729010     -0.316067     -0.571388      0.571388       175.636       176.207    
  53  0.608401     -0.496921     -0.898336      0.898336       173.003       173.902    
  54  0.432221     -0.838819      -1.51642       1.51642       175.167       176.683    
  55  0.772117     -0.258620     -0.467533      0.467533       175.545       176.013    
  56  0.380207     -0.967041      -1.74822       1.74822       174.449       176.197    
  57  0.636340     -0.452023     -0.817168      0.817168       172.127       172.944    
  58  0.327756      -1.11549      -2.01658       2.01658       176.135       178.152    
  59  0.382236     -0.961716      -1.73859       1.73859       177.365       179.104    
  60  0.531883     -0.631332      -1.14132       1.14132       177.810       178.951    
  61  0.607532     -0.498350     -0.900918      0.900918       178.392       179.293    
  62  0.468455E-01  -3.06090      -5.53351       5.53351       173.514       179.048    
  63  0.900653     -0.104635     -0.189160      0.189160       175.683       175.872    
  64  0.590161     -0.527360     -0.953363      0.953363       176.998       177.951    
  65  0.681015     -0.384170     -0.694505      0.694505       175.715       176.409    
  66  0.796345     -0.227723     -0.411679      0.411679       178.432       178.843    
  67  0.510508     -0.672349      -1.21547       1.21547       178.427       179.643    
  68  0.422797     -0.860862      -1.55627       1.55627       178.026       179.582    
  69  0.813242     -0.206727     -0.373721      0.373721       176.714       177.087    
  70  0.338687      -1.08268      -1.95727       1.95727       179.665       181.622    
  71  0.275232      -1.29014      -2.33232       2.33232       176.135       178.467    
  72  0.821298     -0.196870     -0.355902      0.355902       173.924       174.280    
loop,thermsimp(1:2)       57  0.309098      0.247120E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    445        169.70          0.83          1.11         25.05          0.16          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    169.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       57
neval is:      444
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       58
neval is:      444


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      444     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.524788     -0.644761      -1.16560       1.16560       164.315       165.480    
   2  0.210443      -1.55854      -2.81754       2.81754       167.454       170.272    
   3  0.930464     -0.720719E-01 -0.130292      0.130292       166.873       167.003    
   4  0.858664     -0.152378     -0.275469      0.275469       169.047       169.323    
   5  0.285726      -1.25272      -2.26467       2.26467       169.081       171.346    
   6  0.144917      -1.93160      -3.49195       3.49195       168.307       171.799    
   7  0.999977     -0.230243E-04 -0.416234E-04  0.416234E-04   168.424       168.424    
   8  0.985482     -0.146243E-01 -0.264378E-01  0.264378E-01   168.913       168.939    
   9  0.204255      -1.58839      -2.87149       2.87149       170.984       173.855    
  10  0.932647     -0.697284E-01 -0.126055      0.126055       168.270       168.396    
  11  0.916829     -0.868346E-01 -0.156980      0.156980       171.506       171.663    
  12  0.468002     -0.759282      -1.37263       1.37263       171.324       172.697    
  13  0.314730      -1.15604      -2.08989       2.08989       172.255       174.345    
  14  0.641708     -0.443621     -0.801980      0.801980       170.115       170.917    
  15  0.829165     -0.187336     -0.338666      0.338666       172.127       172.466    
  16  0.163052E-01  -4.11627      -7.44141       7.44141       172.139       179.581    
  17  0.795714     -0.228516     -0.413111      0.413111       171.815       172.228    
  18  0.933380     -0.689433E-01 -0.124636      0.124636       172.252       172.377    
  19  0.839430E-01  -2.47762      -4.47905       4.47905       172.730       177.209    
  20  0.684979     -0.378367     -0.684013      0.684013       173.003       173.687    
  21  0.473112     -0.748422      -1.35300       1.35300       171.708       173.061    
  22  0.513710     -0.666097      -1.20417       1.20417       172.689       173.893    
  23  0.360837      -1.01933      -1.84275       1.84275       170.712       172.554    
  24  0.427332E-01  -3.15278      -5.69960       5.69960       173.391       179.091    
  25  0.772426     -0.258219     -0.466810      0.466810       173.024       173.491    
  26  0.514081     -0.665375      -1.20287       1.20287       173.924       175.127    
  27  0.794349     -0.230233     -0.416216      0.416216       173.561       173.977    
  28  0.306573      -1.18230      -2.13736       2.13736       168.966       171.104    
  29  0.542954     -0.610731      -1.10408       1.10408       172.422       173.526    
  30  0.309169      -1.17387      -2.12212       2.12212       173.042       175.164    
  31  0.870005     -0.139256     -0.251748      0.251748       174.483       174.735    
  32  0.559982     -0.579850      -1.04825       1.04825       171.272       172.321    
  33  0.779248     -0.249426     -0.450914      0.450914       172.867       173.318    
  34  0.852492     -0.159591     -0.288509      0.288509       174.487       174.775    
  35  0.513103E-01  -2.96986      -5.36893       5.36893       173.567       178.936    
  36  0.843623     -0.170050     -0.307416      0.307416       173.455       173.763    
  37  0.514962E-01  -2.96625      -5.36239       5.36239       171.909       177.271    
  38  0.509762     -0.673812      -1.21812       1.21812       173.636       174.855    
  39  0.511862E-01  -2.97229      -5.37331       5.37331       175.068       180.441    
  40  0.118788      -2.13041      -3.85137       3.85137       172.968       176.819    
  41  0.156747      -1.85312      -3.35008       3.35008       174.808       178.158    
  42  0.715854     -0.334278     -0.604309      0.604309       175.683       176.287    
  43  0.472923     -0.748824      -1.35373       1.35373       175.545       176.899    
  44  0.105826      -2.24596      -4.06025       4.06025       174.449       178.509    
  45  0.214159      -1.54104      -2.78589       2.78589       175.636       178.422    
  46  0.212749      -1.54764      -2.79784       2.79784       175.715       178.513    
  47  0.173051      -1.75417      -3.17119       3.17119       175.774       178.945    
  48  0.301411      -1.19928      -2.16806       2.16806       175.167       177.335    
  49  0.438447E-01  -3.12710      -5.65318       5.65318       176.714       182.367    
  50  0.480396     -0.733144      -1.32538       1.32538       176.040       177.365    
  51  0.537259     -0.621276      -1.12314       1.12314       176.450       177.573    
  52  0.252945      -1.37458      -2.48497       2.48497       175.444       177.929    
  53  0.273135      -1.29779      -2.34615       2.34615       176.272       178.618    
  54  0.225234      -1.49061      -2.69474       2.69474       174.168       176.863    
  55  0.443550     -0.812944      -1.46964       1.46964       174.846       176.315    
  56  0.592768     -0.522951     -0.945393      0.945393       176.998       177.943    
  57  0.455824     -0.785648      -1.42030       1.42030       176.672       178.092    
  58  0.630261     -0.461621     -0.834519      0.834519       176.135       176.970    
  59  0.901310     -0.103906     -0.187841      0.187841       175.329       175.516    
  60  0.114663      -2.16576      -3.91526       3.91526       176.135       180.050    
  61  0.349469      -1.05134      -1.90062       1.90062       174.331       176.231    
  62  0.316083      -1.15175      -2.08214       2.08214       178.432       180.514    
  63  0.447795     -0.803419      -1.45242       1.45242       177.810       179.262    
  64  0.360287      -1.02086      -1.84550       1.84550       173.514       175.360    
  65  0.874703     -0.133871     -0.242012      0.242012       173.592       173.834    
  66  0.580675     -0.543565     -0.982658      0.982658       177.365       178.348    
  67  0.614367     -0.487163     -0.880694      0.880694       178.392       179.272    
  68  0.993807     -0.621246E-02 -0.112309E-01  0.112309E-01   178.026       178.037    
  69  0.740329E-01  -2.60325      -4.70616       4.70616       178.427       183.133    
  70  0.617323     -0.482363     -0.872017      0.872017       174.838       175.710    
  71  0.919859     -0.835350E-01 -0.151015      0.151015       179.665       179.816    
  72  0.404694     -0.904625      -1.63538       1.63538       169.699       171.334    
loop,thermsimp(1:2)       58   1.16560       2.81754    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    446        178.75          0.84          1.11         25.05          0.19          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    178.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       58
neval is:      445
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       59
neval is:      445


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      445     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810144     -0.210543     -0.380621      0.380621       164.315       164.695    
   2  0.897699     -0.107920     -0.195098      0.195098       166.873       167.068    
   3  0.719626     -0.329023     -0.594810      0.594810       168.270       168.865    
   4  0.415410     -0.878490      -1.58814       1.58814       168.424       170.012    
   5  0.991404     -0.863283E-02 -0.156065E-01  0.156065E-01   168.913       168.928    
   6  0.700708     -0.355664     -0.642970      0.642970       169.047       169.690    
   7  0.358389      -1.02614      -1.85505       1.85505       167.454       169.309    
   8  0.726731     -0.319199     -0.577049      0.577049       170.115       170.692    
   9  0.386831     -0.949769      -1.71699       1.71699       168.966       170.683    
  10  0.294784      -1.22151      -2.20826       2.20826       169.699       171.907    
  11  0.315848      -1.15249      -2.08348       2.08348       169.081       171.165    
  12  0.284632E-01  -3.55914      -6.43423       6.43423       171.506       177.940    
  13  0.316608      -1.15009      -2.07914       2.07914       168.307       170.386    
  14  0.309580      -1.17254      -2.11972       2.11972       171.815       173.935    
  15  0.758095     -0.276946     -0.500664      0.500664       171.272       171.773    
  16  0.132565      -2.02068      -3.65299       3.65299       172.252       175.905    
  17  0.963676     -0.369997E-01 -0.668882E-01  0.668882E-01   172.127       172.194    
  18  0.428996     -0.846309      -1.52996       1.52996       170.712       172.242    
  19  0.975676     -0.246243E-01 -0.445159E-01  0.445159E-01   171.324       171.369    
  20  0.475146     -0.744134      -1.34525       1.34525       171.708       173.054    
  21  0.507593     -0.678075      -1.22583       1.22583       172.867       174.093    
  22  0.275170      -1.29037      -2.33273       2.33273       173.024       175.357    
  23  0.475456     -0.743481      -1.34407       1.34407       172.422       173.766    
  24  0.302172      -1.19676      -2.16350       2.16350       173.003       175.167    
  25  0.243313      -1.41341      -2.55516       2.55516       173.455       176.010    
  26  0.356568      -1.03123      -1.86426       1.86426       173.592       175.456    
  27  0.630291     -0.461573     -0.834434      0.834434       170.984       171.818    
  28  0.642369     -0.442593     -0.800121      0.800121       172.689       173.489    
  29  0.593424     -0.521846     -0.943395      0.943395       173.561       174.505    
  30  0.813415     -0.206514     -0.373336      0.373336       172.255       172.628    
  31  0.623760     -0.471989     -0.853263      0.853263       174.483       175.337    
  32  0.314127      -1.15796      -2.09336       2.09336       174.487       176.580    
  33  0.333295      -1.09873      -1.98628       1.98628       173.636       175.623    
  34  0.974282     -0.260545E-01 -0.471014E-01  0.471014E-01   173.924       173.971    
  35  0.217685      -1.52471      -2.75637       2.75637       173.042       175.798    
  36  0.327903      -1.11504      -2.01577       2.01577       173.514       175.530    
  37  0.336622      -1.08880      -1.96833       1.96833       175.329       177.297    
  38  0.569408     -0.563159      -1.01808       1.01808       174.838       175.856    
  39  0.577250E-01  -2.85206      -5.15597       5.15597       174.331       179.487    
  40  0.237530      -1.43746      -2.59865       2.59865       175.683       178.282    
  41  0.622163     -0.474553     -0.857899      0.857899       174.846       175.703    
  42  0.476244     -0.741825      -1.34107       1.34107       172.968       174.309    
  43  0.914828     -0.890196E-01 -0.160930      0.160930       174.168       174.329    
  44  0.555890     -0.587184      -1.06151       1.06151       175.545       176.607    
  45  0.874902     -0.133644     -0.241602      0.241602       176.135       176.377    
  46  0.637871     -0.449619     -0.812823      0.812823       172.730       173.543    
  47  0.574852     -0.553643      -1.00088       1.00088       171.909       172.910    
  48  0.753498     -0.283029     -0.511661      0.511661       175.167       175.679    
  49  0.678645     -0.387657     -0.700808      0.700808       176.040       176.741    
  50  0.361720      -1.01688      -1.83833       1.83833       176.450       178.289    
  51  0.123381      -2.09248      -3.78279       3.78279       175.444       179.227    
  52  0.350198      -1.04926      -1.89685       1.89685       176.998       178.895    
  53  0.392572     -0.935035      -1.69036       1.69036       178.026       179.716    
  54  0.567106     -0.567208      -1.02540       1.02540       176.672       177.697    
  55  0.583382     -0.538913     -0.974248      0.974248       174.808       175.782    
  56  0.128820      -2.04934      -3.70480       3.70480       177.365       181.070    
  57  0.180317      -1.71304      -3.09683       3.09683       175.636       178.733    
  58  0.447281     -0.804568      -1.45450       1.45450       174.449       175.904    
  59  0.638289E-01  -2.75155      -4.97426       4.97426       175.715       180.689    
  60  0.689733     -0.371451     -0.671510      0.671510       176.272       176.943    
  61  0.997591     -0.241199E-02 -0.436040E-02  0.436040E-02   173.567       173.571    
  62  0.726899     -0.318968     -0.576631      0.576631       175.774       176.351    
  63  0.714747     -0.335826     -0.607108      0.607108       173.391       173.998    
  64  0.792529     -0.232527     -0.420363      0.420363       177.810       178.230    
  65  0.194558      -1.63703      -2.95942       2.95942       178.392       181.351    
  66  0.238549      -1.43318      -2.59091       2.59091       172.139       174.730    
  67  0.358562      -1.02565      -1.85418       1.85418       179.665       181.519    
  68  0.536397     -0.622881      -1.12605       1.12605       176.135       177.261    
  69  0.158207      -1.84385      -3.33332       3.33332       175.068       178.401    
  70  0.957518     -0.434110E-01 -0.784786E-01  0.784786E-01   178.432       178.510    
  71  0.172302      -1.75851      -3.17903       3.17903       176.714       179.893    
  72  0.737268     -0.304804     -0.551027      0.551027       178.746       179.297    
loop,thermsimp(1:2)       59  0.380621      0.195098    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    447        170.45          0.83          1.11         25.19          0.10          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    170.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       59
neval is:      446
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       60
neval is:      446


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      446     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421109     -0.864863      -1.56350       1.56350       164.315       165.878    
   2  0.422022     -0.862697      -1.55959       1.55959       166.873       168.432    
   3  0.295550      -1.21892      -2.20356       2.20356       168.270       170.474    
   4  0.624681     -0.470513     -0.850596      0.850596       168.913       169.763    
   5  0.768652     -0.263117     -0.475664      0.475664       167.454       167.930    
   6  0.888855     -0.117822     -0.212998      0.212998       169.047       169.260    
   7  0.509140     -0.675031      -1.22032       1.22032       168.424       169.645    
   8  0.493628     -0.705973      -1.27626       1.27626       168.307       169.583    
   9  0.781578     -0.246440     -0.445516      0.445516       168.966       169.412    
  10  0.617265     -0.482456     -0.872186      0.872186       170.115       170.987    
  11  0.335801      -1.09124      -1.97274       1.97274       169.081       171.054    
  12  0.570262     -0.561660      -1.01537       1.01537       171.324       172.339    
  13  0.159269      -1.83716      -3.32122       3.32122       171.272       174.594    
  14  0.339767      -1.07950      -1.95152       1.95152       170.984       172.935    
  15  0.493989     -0.705242      -1.27494       1.27494       169.699       170.974    
  16  0.839254     -0.175242     -0.316803      0.316803       172.127       172.444    
  17  0.421889E-01  -3.16560      -5.72278       5.72278       170.712       176.434    
  18  0.278070      -1.27988      -2.31378       2.31378       172.255       174.569    
  19  0.942016E-01  -2.36232      -4.27061       4.27061       171.909       176.179    
  20  0.627802E-01  -2.76812      -5.00421       5.00421       171.708       176.713    
  21  0.228221      -1.47744      -2.67092       2.67092       172.689       175.360    
  22  0.929298     -0.733263E-01 -0.132559      0.132559       172.730       172.862    
  23  0.505346     -0.682512      -1.23385       1.23385       173.567       174.801    
  24  0.181316      -1.70751      -3.08685       3.08685       172.422       175.509    
  25  0.430977     -0.841701      -1.52163       1.52163       171.815       173.337    
  26  0.161604      -1.82261      -3.29491       3.29491       173.924       177.219    
  27  0.428774     -0.846826      -1.53089       1.53089       173.391       174.922    
  28  0.178213      -1.72477      -3.11805       3.11805       172.867       175.985    
  29  0.440884E-01  -3.12156      -5.64316       5.64316       172.968       178.611    
  30  0.224754      -1.49275      -2.69860       2.69860       174.168       176.867    
  31  0.174128      -1.74796      -3.15998       3.15998       173.561       176.721    
  32  0.798091     -0.225532     -0.407718      0.407718       172.139       172.547    
  33  0.303667E-01  -3.49441      -6.31720       6.31720       173.003       179.321    
  34  0.256290      -1.36145      -2.46123       2.46123       174.483       176.945    
  35  0.367468      -1.00112      -1.80983       1.80983       173.024       174.834    
  36  0.455395     -0.786590      -1.42200       1.42200       173.592       175.014    
  37  0.618612     -0.480277     -0.868246      0.868246       173.514       174.383    
  38  0.348147      -1.05513      -1.90747       1.90747       173.636       175.544    
  39  0.930736     -0.717801E-01 -0.129764      0.129764       175.167       175.297    
  40  0.822258     -0.195701     -0.353789      0.353789       174.846       175.199    
  41  0.444031     -0.811860      -1.46768       1.46768       174.808       176.276    
  42  0.599515     -0.511634     -0.924934      0.924934       173.042       173.967    
  43  0.866231     -0.143603     -0.259607      0.259607       174.838       175.097    
  44  0.143678      -1.94018      -3.50747       3.50747       174.449       177.957    
  45  0.280081      -1.27267      -2.30075       2.30075       172.252       174.553    
  46  0.834705E-01  -2.48326      -4.48925       4.48925       173.455       177.945    
  47  0.514478     -0.664603      -1.20147       1.20147       175.774       176.976    
  48  0.358853      -1.02484      -1.85272       1.85272       176.135       177.988    
  49  0.432015     -0.839295      -1.51728       1.51728       174.487       176.004    
  50  0.959030     -0.418333E-01 -0.756263E-01  0.756263E-01   175.545       175.621    
  51  0.236715      -1.44090      -2.60486       2.60486       176.040       178.645    
  52  0.741102     -0.299618     -0.541650      0.541650       176.272       176.814    
  53  0.971037     -0.293910E-01 -0.531332E-01  0.531332E-01   176.135       176.188    
  54  0.362643      -1.01434      -1.83372       1.83372       175.329       177.162    
  55  0.719521     -0.329170     -0.595074      0.595074       176.672       177.267    
  56  0.291024      -1.23435      -2.23146       2.23146       171.506       173.737    
  57  0.138234      -1.97881      -3.57729       3.57729       177.810       181.387    
  58  0.429879E-01  -3.14684      -5.68886       5.68886       175.683       181.372    
  59  0.323316      -1.12913      -2.04124       2.04124       176.450       178.492    
  60  0.590735     -0.526388     -0.951606      0.951606       175.068       176.020    
  61  0.286837      -1.24884      -2.25766       2.25766       178.432       180.689    
  62  0.141252      -1.95721      -3.53825       3.53825       175.636       179.174    
  63  0.500198     -0.692752      -1.25236       1.25236       176.998       178.250    
  64  0.972784     -0.275935E-01 -0.498836E-01  0.498836E-01   175.444       175.494    
  65  0.314123      -1.15797      -2.09338       2.09338       178.746       180.840    
  66  0.812870     -0.207184     -0.374548      0.374548       174.331       174.705    
  67  0.676584     -0.390698     -0.706306      0.706306       178.026       178.732    
  68  0.945984     -0.555301E-01 -0.100388      0.100388       176.714       176.814    
  69  0.133398      -2.01442      -3.64167       3.64167       175.715       179.357    
  70  0.896391     -0.109379     -0.197736      0.197736       177.365       177.563    
  71  0.606016     -0.500848     -0.905435      0.905435       178.392       179.297    
  72  0.966027     -0.345636E-01 -0.624842E-01  0.624842E-01   170.446       170.509    
loop,thermsimp(1:2)       60   1.56350       1.55959    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    448        166.77          0.84          1.11         25.47          0.18          0.05         27.65
Just calling func    0   0         27.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    449        189.12          0.84          1.12         25.10          0.08          0.05         27.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    166.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       60
neval is:      448
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       61
neval is:      448


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      448     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297049      -1.21386      -2.19442       2.19442       164.315       166.509    
   2  0.575341     -0.552793     -0.999341      0.999341       167.454       168.454    
   3  0.202897      -1.59506      -2.88355       2.88355       166.873       169.756    
   4  0.154497      -1.86758      -3.37621       3.37621       169.047       172.423    
   5  0.990348     -0.969851E-02 -0.175330E-01  0.175330E-01   168.966       168.984    
   6  0.189774      -1.66192      -3.00442       3.00442       168.307       171.311    
   7  0.744626     -0.294873     -0.533073      0.533073       168.424       168.957    
   8  0.927855     -0.748799E-01 -0.135368      0.135368       168.913       169.048    
   9  0.730698     -0.313755     -0.567207      0.567207       168.270       168.837    
  10  0.375841     -0.978590      -1.76910       1.76910       170.446       172.215    
  11  0.792754     -0.232243     -0.419849      0.419849       169.699       170.119    
  12  0.232963      -1.45687      -2.63374       2.63374       170.115       172.749    
  13  0.816440     -0.202802     -0.366625      0.366625       169.081       169.448    
  14  0.626790     -0.467144     -0.844504      0.844504       171.324       172.169    
  15  0.943587     -0.580664E-01 -0.104973      0.104973       172.127       172.232    
  16  0.790178     -0.235497     -0.425732      0.425732       172.139       172.565    
  17  0.318791      -1.14322      -2.06671       2.06671       172.730       174.797    
  18  0.982573     -0.175804E-01 -0.317819E-01  0.317819E-01   170.984       171.016    
  19  0.959024     -0.418390E-01 -0.756367E-01  0.756367E-01   171.815       171.891    
  20  0.309588      -1.17251      -2.11967       2.11967       171.506       173.625    
  21  0.255297      -1.36533      -2.46825       2.46825       173.042       175.510    
  22  0.287931      -1.24504      -2.25078       2.25078       173.514       175.765    
  23  0.948191     -0.531995E-01 -0.961743E-01  0.961743E-01   172.252       172.349    
  24  0.231941      -1.46127      -2.64169       2.64169       172.255       174.897    
  25  0.730836E-01  -2.61615      -4.72949       4.72949       171.272       176.002    
  26  0.130964      -2.03283      -3.67496       3.67496       174.331       178.006    
  27  0.199641      -1.61124      -2.91280       2.91280       173.567       176.480    
  28  0.375837     -0.978600      -1.76912       1.76912       173.024       174.793    
  29  0.584992     -0.536158     -0.969268      0.969268       173.391       174.361    
  30  0.505862     -0.681491      -1.23200       1.23200       173.592       174.824    
  31  0.431310     -0.840928      -1.52023       1.52023       174.838       176.358    
  32  0.273049E-01  -3.60069      -6.50934       6.50934       174.846       181.355    
  33  0.865419E-01  -2.44713      -4.42392       4.42392       175.167       179.591    
  34  0.174989      -1.74303      -3.15105       3.15105       172.689       175.840    
  35  0.547517     -0.602362      -1.08895       1.08895       175.444       176.533    
  36  0.562902E-02  -5.17982      -9.36410       9.36410       172.422       181.786    
  37  0.386997     -0.949338      -1.71622       1.71622       173.636       175.353    
  38  0.750107     -0.287539     -0.519814      0.519814       175.545       176.065    
  39  0.218818      -1.51951      -2.74698       2.74698       172.867       175.614    
  40  0.821700     -0.196380     -0.355016      0.355016       174.487       174.842    
  41  0.223897      -1.49657      -2.70550       2.70550       175.068       177.774    
  42  0.744973     -0.294407     -0.532230      0.532230       171.909       172.441    
  43  0.279239      -1.27569      -2.30619       2.30619       176.135       178.441    
  44  0.210659      -1.55751      -2.81568       2.81568       174.808       177.624    
  45  0.998203     -0.179835E-02 -0.325107E-02  0.325107E-02   170.712       170.715    
  46  0.355772      -1.03347      -1.86830       1.86830       171.708       173.577    
  47  0.437893     -0.825781      -1.49285       1.49285       173.561       175.054    
  48  0.897806E-01  -2.41039      -4.35750       4.35750       176.272       180.629    
  49  0.970127     -0.303283E-01 -0.548276E-01  0.548276E-01   176.714       176.768    
  50  0.463485     -0.768981      -1.39017       1.39017       174.168       175.558    
  51  0.605373     -0.501911     -0.907356      0.907356       174.483       175.391    
  52  0.622934     -0.473314     -0.855658      0.855658       175.774       176.630    
  53  0.937920     -0.640902E-01 -0.115862      0.115862       175.329       175.444    
  54  0.130922      -2.03316      -3.67555       3.67555       173.924       177.600    
  55  0.165920      -1.79625      -3.24727       3.24727       176.672       179.919    
  56  0.797155     -0.226707     -0.409841      0.409841       177.365       177.775    
  57  0.172586      -1.75686      -3.17605       3.17605       173.455       176.631    
  58  0.150998E-02  -6.49566      -11.7429       11.7429       174.449       186.192    
  59  0.134911      -2.00314      -3.62129       3.62129       176.135       179.757    
  60  0.358158      -1.02678      -1.85622       1.85622       176.998       178.854    
  61  0.734411     -0.308686     -0.558044      0.558044       176.450       177.008    
  62  0.567422     -0.566653      -1.02440       1.02440       172.968       173.992    
  63  0.454507     -0.788542      -1.42553       1.42553       176.040       177.465    
  64  0.739757     -0.301433     -0.544932      0.544932       178.026       178.571    
  65  0.731555     -0.312583     -0.565089      0.565089       175.636       176.201    
  66  0.577923     -0.548315     -0.991246      0.991246       178.392       179.383    
  67  0.119177      -2.12715      -3.84547       3.84547       173.003       176.849    
  68  0.588098     -0.530862     -0.959694      0.959694       175.715       176.675    
  69  0.683912E-01  -2.68251      -4.84945       4.84945       178.432       183.281    
  70  0.695263     -0.363466     -0.657075      0.657075       178.746       179.404    
  71  0.172496      -1.75738      -3.17700       3.17700       175.683       178.860    
  72  0.703437     -0.351777     -0.635943      0.635943       166.774       167.409    
loop,thermsimp(1:2)       61   2.19442      0.999341    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    450        168.19          0.84          1.11         25.01          0.29          0.04         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    168.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       61
neval is:      449
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       62
neval is:      449


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      449     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.176971      -1.73177      -3.13070       3.13070       164.315       167.445    
   2  0.163120      -1.81327      -3.27803       3.27803       166.774       170.052    
   3  0.828064     -0.188664     -0.341068      0.341068       167.454       167.795    
   4  0.491219     -0.710866      -1.28511       1.28511       168.270       169.555    
   5  0.473397     -0.747822      -1.35191       1.35191       168.424       169.776    
   6  0.737394     -0.304633     -0.550716      0.550716       168.966       169.517    
   7  0.206273      -1.57855      -2.85371       2.85371       168.913       171.766    
   8  0.354259      -1.03773      -1.87601       1.87601       169.081       170.957    
   9  0.233194      -1.45588      -2.63195       2.63195       166.873       169.505    
  10  0.118120E-01  -4.43864      -8.02419       8.02419       169.699       177.723    
  11  0.918073     -0.854782E-01 -0.154528      0.154528       170.712       170.866    
  12  0.845317     -0.168044     -0.303791      0.303791       170.984       171.288    
  13  0.706964     -0.346775     -0.626901      0.626901       168.307       168.934    
  14  0.779001     -0.249743     -0.451485      0.451485       171.815       172.267    
  15  0.455959     -0.785352      -1.41976       1.41976       171.324       172.744    
  16  0.849694     -0.162880     -0.294454      0.294454       170.446       170.741    
  17  0.516839     -0.660024      -1.19319       1.19319       172.127       173.320    
  18  0.892086     -0.114192     -0.206437      0.206437       172.252       172.459    
  19  0.297598      -1.21201      -2.19108       2.19108       169.047       171.238    
  20  0.719255E-01  -2.63213      -4.75836       4.75836       171.909       176.667    
  21  0.722825     -0.324588     -0.586791      0.586791       172.139       172.726    
  22  0.550765     -0.596446      -1.07826       1.07826       170.115       171.193    
  23  0.988777     -0.112866E-01 -0.204040E-01  0.204040E-01   171.708       171.729    
  24  0.706438     -0.347520     -0.628248      0.628248       171.506       172.134    
  25  0.630672     -0.460969     -0.833342      0.833342       172.968       173.801    
  26  0.377261     -0.974818      -1.76228       1.76228       173.391       175.154    
  27  0.149262E-01  -4.20464      -7.60116       7.60116       173.024       180.625    
  28  0.185115      -1.68678      -3.04936       3.04936       172.730       175.779    
  29  0.836458     -0.178579     -0.322835      0.322835       173.592       173.914    
  30  0.778304     -0.250638     -0.453104      0.453104       174.487       174.940    
  31  0.495633     -0.701920      -1.26893       1.26893       172.255       173.524    
  32  0.795767E-01  -2.53103      -4.57561       4.57561       173.561       178.137    
  33  0.361545      -1.01737      -1.83920       1.83920       173.636       175.476    
  34  0.451858     -0.794387      -1.43610       1.43610       174.483       175.919    
  35  0.923485     -0.796009E-01 -0.143903      0.143903       175.329       175.473    
  36  0.189492      -1.66341      -3.00712       3.00712       173.042       176.049    
  37  0.357280      -1.02924      -1.86065       1.86065       174.168       176.029    
  38  0.113039      -2.18002      -3.94105       3.94105       172.867       176.808    
  39  0.418587     -0.870870      -1.57436       1.57436       173.514       175.089    
  40  0.732527E-01  -2.61384      -4.72531       4.72531       172.689       177.415    
  41  0.768904     -0.262790     -0.475072      0.475072       171.272       171.747    
  42  0.323623      -1.12817      -2.03952       2.03952       175.545       177.585    
  43  0.837193     -0.177701     -0.321248      0.321248       175.636       175.957    
  44  0.656230     -0.421244     -0.761527      0.761527       174.838       175.599    
  45  0.778603     -0.250253     -0.452409      0.452409       173.567       174.019    
  46  0.736391     -0.305994     -0.553176      0.553176       175.444       175.997    
  47  0.625820E-01  -2.77128      -5.00992       5.00992       175.774       180.784    
  48  0.480814     -0.732276      -1.32381       1.32381       173.455       174.779    
  49  0.356284      -1.03203      -1.86570       1.86570       175.715       177.581    
  50  0.888471     -0.118254     -0.213779      0.213779       176.714       176.927    
  51  0.670294     -0.400038     -0.723191      0.723191       173.003       173.727    
  52  0.651699     -0.428172     -0.774051      0.774051       176.450       177.224    
  53  0.620073E-01  -2.78050      -5.02660       5.02660       176.040       181.066    
  54  0.114125      -2.17046      -3.92376       3.92376       173.924       177.848    
  55  0.332668      -1.10061      -1.98969       1.98969       174.808       176.798    
  56  0.215526      -1.53467      -2.77438       2.77438       175.068       177.842    
  57  0.491711     -0.709864      -1.28329       1.28329       177.365       178.648    
  58  0.251655      -1.37970      -2.49422       2.49422       174.331       176.825    
  59  0.526604     -0.641306      -1.15936       1.15936       176.135       177.294    
  60  0.981731     -0.184377E-01 -0.333317E-01  0.333317E-01   178.026       178.059    
  61  0.189796      -1.66180      -3.00421       3.00421       176.998       180.002    
  62  0.315522      -1.15353      -2.08535       2.08535       175.683       177.768    
  63  0.637772E-01  -2.75236      -4.97572       4.97572       178.392       183.367    
  64  0.399639     -0.917194      -1.65811       1.65811       178.746       180.405    
  65  0.696521     -0.361657     -0.653804      0.653804       175.167       175.821    
  66  0.576152     -0.551384     -0.996794      0.996794       176.135       177.132    
  67  0.641755     -0.443549     -0.801850      0.801850       176.672       177.474    
  68  0.451268     -0.795694      -1.43846       1.43846       176.272       177.710    
  69  0.948099     -0.532968E-01 -0.963502E-01  0.963502E-01   174.846       174.942    
  70  0.974321     -0.260147E-01 -0.470295E-01  0.470295E-01   172.422       172.469    
  71  0.287349      -1.24706      -2.25444       2.25444       178.432       180.686    
  72  0.651002E-02  -5.03441      -9.10123       9.10123       168.194       177.295    
loop,thermsimp(1:2)       62   3.13070       3.27803    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    451        174.08          0.83          1.11         25.15          0.08          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       62
neval is:      450
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       63
neval is:      450


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      450     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.278876      -1.27699      -2.30854       2.30854       164.315       166.623    
   2  0.603344     -0.505268     -0.913425      0.913425       167.454       168.368    
   3  0.363780      -1.01121      -1.82806       1.82806       168.307       170.135    
   4  0.298736      -1.20820      -2.18418       2.18418       166.873       169.057    
   5  0.992861     -0.716435E-02 -0.129517E-01  0.129517E-01   168.966       168.979    
   6  0.166164      -1.79478      -3.24461       3.24461       168.270       171.515    
   7  0.416382     -0.876153      -1.58391       1.58391       168.424       170.008    
   8  0.770949     -0.260133     -0.470270      0.470270       166.774       167.244    
   9  0.782423     -0.245359     -0.443561      0.443561       170.446       170.890    
  10  0.115501      -2.15847      -3.90209       3.90209       170.712       174.614    
  11  0.348954      -1.05281      -1.90328       1.90328       169.081       170.984    
  12  0.441818     -0.816857      -1.47672       1.47672       170.115       171.592    
  13  0.888072     -0.118703     -0.214592      0.214592       169.047       169.262    
  14  0.808059     -0.213120     -0.385280      0.385280       170.984       171.369    
  15  0.432540E-01  -3.14067      -5.67771       5.67771       171.708       177.386    
  16  0.369483     -0.995652      -1.79994       1.79994       171.272       173.072    
  17  0.262535      -1.33737      -2.41771       2.41771       168.913       171.330    
  18  0.873783     -0.134923     -0.243914      0.243914       171.506       171.750    
  19  0.636654     -0.451528     -0.816274      0.816274       171.815       172.632    
  20  0.534780     -0.625901      -1.13151       1.13151       172.252       173.384    
  21  0.557733     -0.583875      -1.05553       1.05553       172.422       173.478    
  22  0.929598     -0.730032E-01 -0.131975      0.131975       172.139       172.271    
  23  0.350245      -1.04912      -1.89660       1.89660       171.324       173.221    
  24  0.391945     -0.936633      -1.69325       1.69325       172.127       173.821    
  25  0.123996      -2.08751      -3.77380       3.77380       172.255       176.029    
  26  0.609578E-01  -2.79757      -5.05746       5.05746       173.003       178.061    
  27  0.165807      -1.79693      -3.24849       3.24849       172.968       176.216    
  28  0.766484     -0.265941     -0.480770      0.480770       173.592       174.072    
  29  0.629881     -0.462224     -0.835610      0.835610       173.567       174.403    
  30  0.273641      -1.29594      -2.34280       2.34280       173.455       175.798    
  31  0.344034E-01  -3.36960      -6.09157       6.09157       174.487       180.578    
  32  0.747187     -0.291440     -0.526865      0.526865       174.846       175.372    
  33  0.511998     -0.669435      -1.21021       1.21021       173.514       174.725    
  34  0.544406     -0.608061      -1.09925       1.09925       173.391       174.491    
  35  0.272552      -1.29993      -2.35001       2.35001       175.329       177.679    
  36  0.605186     -0.502220     -0.907915      0.907915       173.636       174.544    
  37  0.923323     -0.797758E-01 -0.144219      0.144219       174.838       174.982    
  38  0.373879     -0.983822      -1.77856       1.77856       172.730       174.508    
  39  0.325119      -1.12356      -2.03118       2.03118       175.167       177.198    
  40  0.746995E-01  -2.59428      -4.68995       4.68995       174.483       179.173    
  41  0.465030     -0.765653      -1.38415       1.38415       175.636       177.020    
  42  0.150040      -1.89685      -3.42914       3.42914       175.444       178.873    
  43  0.127827E-01  -4.35967      -7.88142       7.88142       174.168       182.049    
  44  0.667575     -0.404103     -0.730539      0.730539       173.042       173.772    
  45  0.725579     -0.320785     -0.579916      0.579916       171.909       172.489    
  46  0.555976     -0.587030      -1.06123       1.06123       174.808       175.869    
  47  0.834777     -0.180590     -0.326471      0.326471       172.867       173.194    
  48  0.582668     -0.540138     -0.976464      0.976464       174.331       175.307    
  49  0.265288      -1.32694      -2.39885       2.39885       176.714       179.112    
  50  0.935593     -0.665747E-01 -0.120354      0.120354       176.135       176.256    
  51  0.789592     -0.236239     -0.427074      0.427074       176.450       176.877    
  52  0.337907      -1.08498      -1.96144       1.96144       176.135       178.097    
  53  0.359971      -1.02173      -1.84709       1.84709       168.194       170.041    
  54  0.655159     -0.422878     -0.764480      0.764480       172.689       173.454    
  55  0.293383      -1.22628      -2.21687       2.21687       176.672       178.889    
  56  0.647978     -0.433898     -0.784402      0.784402       175.715       176.499    
  57  0.571456     -0.559568      -1.01159       1.01159       175.545       176.557    
  58  0.516522     -0.660637      -1.19430       1.19430       176.272       177.466    
  59  0.930382     -0.721605E-01 -0.130452      0.130452       169.699       169.830    
  60  0.380525     -0.966205      -1.74671       1.74671       175.683       177.430    
  61  0.888107     -0.118663     -0.214519      0.214519       175.068       175.283    
  62  0.191259      -1.65413      -2.99034       2.99034       173.924       176.915    
  63  0.158996      -1.83887      -3.32432       3.32432       178.026       181.350    
  64  0.829121     -0.187389     -0.338763      0.338763       173.561       173.900    
  65  0.510161     -0.673029      -1.21670       1.21670       177.365       178.582    
  66  0.558223     -0.582996      -1.05394       1.05394       176.998       178.052    
  67  0.328311      -1.11379      -2.01352       2.01352       178.746       180.760    
  68  0.346675      -1.05937      -1.91513       1.91513       173.024       174.939    
  69  0.410565E-01  -3.19281      -5.77196       5.77196       178.432       184.204    
  70  0.802652     -0.219834     -0.397417      0.397417       175.774       176.172    
  71  0.230447      -1.46773      -2.65337       2.65337       176.040       178.693    
  72  0.454287     -0.789026      -1.42640       1.42640       174.076       175.503    
loop,thermsimp(1:2)       63   2.30854      0.913425    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    452        169.99          0.84          1.11         25.13          0.28          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    169.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       63
neval is:      451
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       64
neval is:      451


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      451     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379008E-01  -3.27278      -5.91655       5.91655       164.315       170.231    
   2  0.772352     -0.258315     -0.466982      0.466982       166.774       167.241    
   3  0.802807     -0.219640     -0.397067      0.397067       167.454       167.851    
   4  0.514956     -0.663673      -1.19979       1.19979       168.966       170.166    
   5  0.554302     -0.590045      -1.06669       1.06669       166.873       167.939    
   6  0.503754     -0.685667      -1.23955       1.23955       169.047       170.287    
   7  0.400624     -0.914733      -1.65366       1.65366       169.699       171.353    
   8  0.912762     -0.912806E-01 -0.165017      0.165017       168.424       168.589    
   9  0.197841E-01  -3.92288      -7.09179       7.09179       168.194       175.286    
  10  0.657402E-02  -5.02463      -9.08354       9.08354       168.307       177.390    
  11  0.802861     -0.219574     -0.396947      0.396947       170.446       170.843    
  12  0.494750     -0.703703      -1.27216       1.27216       169.081       170.353    
  13  0.533728     -0.627869      -1.13506       1.13506       168.913       170.048    
  14  0.202886      -1.59511      -2.88365       2.88365       170.984       173.868    
  15  0.459498     -0.777620      -1.40578       1.40578       168.270       169.676    
  16  0.476385     -0.741530      -1.34054       1.34054       170.115       171.456    
  17  0.604782     -0.502887     -0.909121      0.909121       171.506       172.415    
  18  0.652452     -0.427018     -0.771965      0.771965       172.139       172.911    
  19  0.611862     -0.491249     -0.888081      0.888081       171.909       172.797    
  20  0.974982     -0.253365E-01 -0.458035E-01  0.458035E-01   171.815       171.861    
  21  0.950238E-01  -2.35363      -4.25490       4.25490       171.272       175.527    
  22  0.322848      -1.13057      -2.04385       2.04385       172.867       174.911    
  23  0.581382     -0.542348     -0.980459      0.980459       171.324       172.304    
  24  0.267652      -1.31807      -2.38281       2.38281       172.252       174.635    
  25  0.232641E-01  -3.76084      -6.79886       6.79886       172.689       179.488    
  26  0.515113E-01  -2.96595      -5.36186       5.36186       172.422       177.784    
  27  0.300440      -1.20251      -2.17390       2.17390       173.042       175.216    
  28  0.760936     -0.273206     -0.493902      0.493902       172.127       172.621    
  29  0.447102     -0.804968      -1.45522       1.45522       173.561       175.016    
  30  0.550831     -0.596328      -1.07804       1.07804       173.592       174.670    
  31  0.314273      -1.15749      -2.09252       2.09252       173.567       175.659    
  32  0.967020     -0.335365E-01 -0.606273E-01  0.606273E-01   173.391       173.452    
  33  0.505250     -0.682701      -1.23419       1.23419       172.730       173.964    
  34  0.416175     -0.876649      -1.58481       1.58481       173.636       175.221    
  35  0.450270     -0.797909      -1.44246       1.44246       170.712       172.154    
  36  0.521734     -0.650597      -1.17615       1.17615       173.514       174.691    
  37  0.135069      -2.00197      -3.61916       3.61916       173.024       176.643    
  38  0.186856      -1.67742      -3.03244       3.03244       174.838       177.870    
  39  0.965761     -0.348385E-01 -0.629811E-01  0.629811E-01   175.068       175.131    
  40  0.419580     -0.868501      -1.57008       1.57008       174.331       175.901    
  41  0.558190     -0.583056      -1.05405       1.05405       174.846       175.900    
  42  0.862407     -0.148028     -0.267605      0.267605       174.076       174.344    
  43  0.507376E-01  -2.98109      -5.38922       5.38922       173.455       178.845    
  44  0.568000     -0.565633      -1.02255       1.02255       174.808       175.831    
  45  0.750571     -0.286921     -0.518697      0.518697       172.255       172.774    
  46  0.873151     -0.135646     -0.245222      0.245222       175.774       176.019    
  47  0.204078      -1.58925      -2.87306       2.87306       172.968       175.841    
  48  0.610815     -0.492961     -0.891177      0.891177       176.135       177.026    
  49  0.666006E-01  -2.70904      -4.89741       4.89741       175.715       180.612    
  50  0.785181E-02  -4.84701      -8.76244       8.76244       175.545       184.308    
  51  0.922541     -0.806234E-01 -0.145751      0.145751       176.450       176.596    
  52  0.576084     -0.551502     -0.997007      0.997007       173.924       174.921    
  53  0.589402     -0.528646     -0.955688      0.955688       175.636       176.591    
  54  0.319085      -1.14230      -2.06505       2.06505       175.167       177.232    
  55  0.120284E-01  -4.42048      -7.99137       7.99137       171.708       179.700    
  56  0.801824     -0.220866     -0.399282      0.399282       175.683       176.082    
  57  0.498185     -0.696784      -1.25965       1.25965       176.272       177.532    
  58  0.190475      -1.65823      -2.99776       2.99776       175.329       178.326    
  59  0.496939     -0.699288      -1.26417       1.26417       176.998       178.262    
  60  0.526028     -0.642401      -1.16134       1.16134       173.003       174.165    
  61  0.176401      -1.73500      -3.13653       3.13653       176.135       179.272    
  62  0.364403      -1.00950      -1.82497       1.82497       177.365       179.190    
  63  0.577716     -0.548673     -0.991893      0.991893       176.040       177.032    
  64  0.906454     -0.982155E-01 -0.177554      0.177554       175.444       175.622    
  65  0.127931      -2.05627      -3.71732       3.71732       176.672       180.389    
  66  0.668059E-01  -2.70596      -4.89185       4.89185       176.714       181.605    
  67  0.891567     -0.114775     -0.207490      0.207490       174.483       174.691    
  68  0.519165     -0.655533      -1.18508       1.18508       174.487       175.672    
  69  0.675016     -0.393019     -0.710501      0.710501       178.746       179.457    
  70  0.266188      -1.32355      -2.39272       2.39272       178.026       180.419    
  71  0.521054     -0.651902      -1.17851       1.17851       174.168       175.346    
  72  0.799198     -0.224146     -0.405212      0.405212       169.989       170.395    
loop,thermsimp(1:2)       64   5.91655      0.466982    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    453        167.73          0.84          1.11         25.13          0.11          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    454        181.84          0.84          1.11         24.99          0.16          0.05         27.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    167.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       64
neval is:      453
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       65
neval is:      453


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      453     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483176     -0.727373      -1.31495       1.31495       166.774       168.088    
   2  0.880011     -0.127821     -0.231075      0.231075       167.454       167.685    
   3  0.163672      -1.80989      -3.27193       3.27193       166.873       170.145    
   4  0.548194     -0.601126      -1.08672       1.08672       168.424       169.511    
   5  0.774171     -0.255963     -0.462731      0.462731       168.270       168.733    
   6  0.815808     -0.203577     -0.368027      0.368027       168.913       169.281    
   7  0.901270     -0.103951     -0.187922      0.187922       168.966       169.154    
   8  0.604998     -0.502529     -0.908474      0.908474       164.315       165.223    
   9  0.583320     -0.539020     -0.974441      0.974441       169.047       170.022    
  10  0.776155     -0.253403     -0.458103      0.458103       169.081       169.539    
  11  0.414399     -0.880925      -1.59254       1.59254       169.989       171.582    
  12  0.321893      -1.13354      -2.04921       2.04921       170.446       172.496    
  13  0.882206     -0.125330     -0.226572      0.226572       169.699       169.926    
  14  0.176926      -1.73202      -3.13115       3.13115       170.115       173.246    
  15  0.143482      -1.94155      -3.50994       3.50994       171.815       175.325    
  16  0.669321     -0.401491     -0.725816      0.725816       170.712       171.437    
  17  0.862244     -0.148216     -0.267946      0.267946       171.324       171.592    
  18  0.897950     -0.107641     -0.194593      0.194593       171.506       171.700    
  19  0.788148     -0.238070     -0.430383      0.430383       172.127       172.558    
  20  0.801563     -0.221191     -0.399870      0.399870       172.255       172.655    
  21  0.284401      -1.25737      -2.27308       2.27308       171.909       174.182    
  22  0.782583     -0.245155     -0.443192      0.443192       172.139       172.583    
  23  0.813976     -0.205825     -0.372091      0.372091       173.391       173.763    
  24  0.528421     -0.637861      -1.15313       1.15313       170.984       172.137    
  25  0.871065     -0.138038     -0.249546      0.249546       172.730       172.979    
  26  0.139992      -1.96617      -3.55445       3.55445       173.003       176.558    
  27  0.549296     -0.599118      -1.08309       1.08309       174.076       175.160    
  28  0.990967     -0.907357E-02 -0.164032E-01  0.164032E-01   172.252       172.269    
  29  0.735762     -0.306848     -0.554722      0.554722       173.592       174.146    
  30  0.647880     -0.434050     -0.784677      0.784677       173.514       174.299    
  31  0.324740      -1.12473      -2.03329       2.03329       174.483       176.517    
  32  0.995457E-01  -2.30714      -4.17085       4.17085       172.867       177.038    
  33  0.953388     -0.477336E-01 -0.862930E-01  0.862930E-01   173.924       174.011    
  34  0.573564     -0.555886      -1.00493       1.00493       173.561       174.566    
  35  0.988045     -0.120272E-01 -0.217429E-01  0.217429E-01   175.068       175.090    
  36  0.499857     -0.693433      -1.25359       1.25359       173.042       174.295    
  37  0.687815E-01  -2.67682      -4.83917       4.83917       173.636       178.476    
  38  0.430407     -0.843024      -1.52402       1.52402       168.194       169.718    
  39  0.204975      -1.58487      -2.86513       2.86513       174.168       177.033    
  40  0.318612      -1.14378      -2.06773       2.06773       171.272       173.340    
  41  0.339792      -1.07942      -1.95138       1.95138       175.444       177.396    
  42  0.609830     -0.494575     -0.894094      0.894094       173.567       174.461    
  43  0.518092     -0.657603      -1.18882       1.18882       174.487       175.676    
  44  0.595099     -0.519028     -0.938300      0.938300       174.808       175.746    
  45  0.658024     -0.418513     -0.756589      0.756589       172.968       173.724    
  46  0.324672      -1.12494      -2.03367       2.03367       174.846       176.879    
  47  0.503769     -0.685637      -1.23950       1.23950       174.331       175.570    
  48  0.690978     -0.369647     -0.668249      0.668249       175.774       176.442    
  49  0.961279     -0.394903E-01 -0.713908E-01  0.713908E-01   175.683       175.754    
  50  0.610537     -0.493416     -0.892000      0.892000       175.636       176.528    
  51  0.458399     -0.780016      -1.41012       1.41012       176.450       177.860    
  52  0.779071     -0.249653     -0.451323      0.451323       173.024       173.475    
  53  0.684652     -0.378844     -0.684876      0.684876       176.135       176.820    
  54  0.997795     -0.220750E-02 -0.399073E-02  0.399073E-02   176.040       176.044    
  55  0.206338      -1.57824      -2.85314       2.85314       175.167       178.020    
  56  0.305969      -1.18427      -2.14093       2.14093       168.307       170.448    
  57  0.270494      -1.30751      -2.36372       2.36372       176.272       178.636    
  58  0.755875     -0.279879     -0.505966      0.505966       172.422       172.928    
  59  0.607325E-01  -2.80128      -5.06416       5.06416       174.838       179.902    
  60  0.238912      -1.43166      -2.58816       2.58816       176.998       179.586    
  61  0.918909     -0.845681E-01 -0.152882      0.152882       175.329       175.481    
  62  0.684642     -0.378859     -0.684902      0.684902       173.455       174.140    
  63  0.954344     -0.467314E-01 -0.844812E-01  0.844812E-01   177.365       177.449    
  64  0.542589E-02  -5.21657      -9.43054       9.43054       176.135       185.566    
  65  0.984909     -0.152056E-01 -0.274887E-01  0.274887E-01   178.746       178.774    
  66  0.228135E-01  -3.78040      -6.83422       6.83422       172.689       179.523    
  67  0.566549     -0.568191      -1.02718       1.02718       171.708       172.736    
  68  0.737034     -0.305122     -0.551600      0.551600       176.672       177.224    
  69  0.820535     -0.197799     -0.357582      0.357582       178.026       178.384    
  70  0.999002     -0.998879E-03 -0.180578E-02  0.180578E-02   175.715       175.717    
  71  0.882535     -0.124957     -0.225898      0.225898       176.714       176.939    
  72  0.876824     -0.131449     -0.237635      0.237635       167.732       167.970    
loop,thermsimp(1:2)       65   1.31495      0.231075    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    455        176.25          0.84          1.11         25.49          0.13          0.05         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       65
neval is:      454
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       66
neval is:      454


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      454     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.606374E-01  -2.80284      -5.06699       5.06699       164.315       169.382    
   2  0.695687     -0.362855     -0.655970      0.655970       167.454       168.110    
   3  0.695570E-01  -2.66561      -4.81890       4.81890       167.732       172.551    
   4  0.320604      -1.13755      -2.05646       2.05646       166.774       168.830    
   5  0.469989     -0.755045      -1.36497       1.36497       168.270       169.635    
   6  0.571075     -0.560235      -1.01279       1.01279       168.966       169.979    
   7  0.881942     -0.125628     -0.227112      0.227112       168.913       169.140    
   8  0.195259      -1.63343      -2.95292       2.95292       168.424       171.377    
   9  0.825869     -0.191319     -0.345868      0.345868       169.081       169.427    
  10  0.213481E-02  -6.14938      -11.1169       11.1169       168.194       179.311    
  11  0.625641     -0.468979     -0.847821      0.847821       169.699       170.547    
  12  0.148805      -1.90512      -3.44408       3.44408       169.047       172.491    
  13  0.194947      -1.63503      -2.95581       2.95581       166.873       169.829    
  14  0.174958      -1.74321      -3.15138       3.15138       168.307       171.458    
  15  0.553792     -0.590967      -1.06835       1.06835       170.712       171.780    
  16  0.342970      -1.07011      -1.93455       1.93455       169.989       171.924    
  17  0.426079E-01  -3.15572      -5.70491       5.70491       171.324       177.029    
  18  0.604850E-01  -2.80536      -5.07154       5.07154       171.506       176.577    
  19  0.206356      -1.57815      -2.85299       2.85299       170.984       173.837    
  20  0.556358     -0.586343      -1.05999       1.05999       172.252       173.312    
  21  0.449978     -0.798557      -1.44363       1.44363       170.446       171.890    
  22  0.392109     -0.936215      -1.69249       1.69249       172.127       173.820    
  23  0.438064     -0.825391      -1.49214       1.49214       172.139       173.632    
  24  0.534146     -0.627086      -1.13365       1.13365       172.255       173.389    
  25  0.936924     -0.651528E-01 -0.117783      0.117783       171.708       171.826    
  26  0.810957     -0.209540     -0.378807      0.378807       172.422       172.801    
  27  0.874065     -0.134601     -0.243332      0.243332       172.730       172.973    
  28  0.370024     -0.994188      -1.79730       1.79730       170.115       171.912    
  29  0.600923     -0.509288     -0.920693      0.920693       171.272       172.193    
  30  0.138113E-01  -4.28227      -7.74150       7.74150       173.024       180.765    
  31  0.979527E-01  -2.32327      -4.20002       4.20002       172.968       177.168    
  32  0.917800     -0.857754E-01 -0.155065      0.155065       173.391       173.546    
  33  0.882941     -0.124497     -0.225066      0.225066       173.924       174.149    
  34  0.608441E-01  -2.79944      -5.06084       5.06084       173.455       178.516    
  35  0.536097E-01  -2.92603      -5.28968       5.28968       173.592       178.881    
  36  0.786939     -0.239605     -0.433158      0.433158       171.909       172.342    
  37  0.540054     -0.616087      -1.11376       1.11376       173.042       174.156    
  38  0.374443     -0.982316      -1.77583       1.77583       173.514       175.290    
  39  0.842126     -0.171825     -0.310626      0.310626       173.567       173.878    
  40  0.534170     -0.627041      -1.13357       1.13357       173.561       174.695    
  41  0.314687      -1.15618      -2.09014       2.09014       175.068       177.158    
  42  0.265277E-01  -3.62957      -6.56154       6.56154       174.076       180.638    
  43  0.357649      -1.02820      -1.85879       1.85879       171.815       173.674    
  44  0.861388E-01  -2.45180      -4.43236       4.43236       175.329       179.761    
  45  0.566899     -0.567573      -1.02606       1.02606       174.331       175.357    
  46  0.111209      -2.19635      -3.97056       3.97056       174.487       178.457    
  47  0.734273     -0.308875     -0.558385      0.558385       175.715       176.273    
  48  0.709398     -0.343338     -0.620688      0.620688       174.808       175.429    
  49  0.250023      -1.38620      -2.50598       2.50598       175.683       178.189    
  50  0.549980     -0.597874      -1.08084       1.08084       176.040       177.121    
  51  0.639508     -0.447057     -0.808190      0.808190       175.774       176.582    
  52  0.175228E-02  -6.34684      -11.4738       11.4738       174.483       185.957    
  53  0.496773     -0.699622      -1.26478       1.26478       175.636       176.901    
  54  0.157058      -1.85114      -3.34650       3.34650       173.003       176.350    
  55  0.696226     -0.362081     -0.654570      0.654570       176.135       176.790    
  56  0.287746      -1.24568      -2.25194       2.25194       174.846       177.097    
  57  0.325977      -1.12093      -2.02642       2.02642       176.714       178.740    
  58  0.455904     -0.785472      -1.41998       1.41998       174.168       175.588    
  59  0.826755     -0.190247     -0.343930      0.343930       172.867       173.211    
  60  0.764404     -0.268658     -0.485682      0.485682       176.672       177.158    
  61  0.519230     -0.655409      -1.18485       1.18485       175.444       176.629    
  62  0.884859     -0.122327     -0.221142      0.221142       177.365       177.586    
  63  0.428132     -0.848324      -1.53360       1.53360       176.450       177.984    
  64  0.863912     -0.146285     -0.264454      0.264454       175.167       175.432    
  65  0.463895     -0.768097      -1.38857       1.38857       178.026       179.414    
  66  0.325451      -1.12254      -2.02934       2.02934       173.636       175.666    
  67  0.539211     -0.617649      -1.11659       1.11659       176.272       177.388    
  68  0.561125     -0.577812      -1.04457       1.04457       178.746       179.791    
  69  0.289426E-01  -3.54244      -6.40403       6.40403       172.689       179.093    
  70  0.754836     -0.281254     -0.508452      0.508452       176.998       177.506    
  71  0.826720     -0.190289     -0.344005      0.344005       174.838       175.182    
  72  0.175150      -1.74211      -3.14940       3.14940       176.253       179.402    
loop,thermsimp(1:2)       66   5.06699      0.655970    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    456        170.27          0.84          1.11         25.19          0.17          0.05         27.36
Just calling func    0   0         27.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    170.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       66
neval is:      455
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       67
neval is:      455


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      455     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497686     -0.697786      -1.26146       1.26146       167.454       168.716    
   2  0.830216     -0.186069     -0.336376      0.336376       166.774       167.110    
   3  0.267818      -1.31745      -2.38169       2.38169       168.913       171.294    
   4  0.400053     -0.916159      -1.65624       1.65624       164.315       165.971    
   5  0.411376     -0.888247      -1.60578       1.60578       169.081       170.687    
   6  0.499480     -0.694187      -1.25495       1.25495       168.270       169.525    
   7  0.739436     -0.301868     -0.545718      0.545718       166.873       167.418    
   8  0.115625      -2.15740      -3.90015       3.90015       168.966       172.866    
   9  0.377594     -0.973934      -1.76068       1.76068       169.699       171.460    
  10  0.661021     -0.413970     -0.748376      0.748376       168.424       169.173    
  11  0.765898     -0.266707     -0.482153      0.482153       168.307       168.789    
  12  0.608440     -0.496856     -0.898218      0.898218       170.712       171.610    
  13  0.366717      -1.00316      -1.81352       1.81352       171.708       173.522    
  14  0.853974     -0.157855     -0.285370      0.285370       170.446       170.732    
  15  0.140386      -1.96336      -3.54937       3.54937       170.115       173.665    
  16  0.882944     -0.124493     -0.225059      0.225059       169.989       170.214    
  17  0.760784E-01  -2.57599      -4.65688       4.65688       171.272       175.929    
  18  0.279297      -1.27548      -2.30582       2.30582       171.909       174.215    
  19  0.142650      -1.94736      -3.52045       3.52045       169.047       172.568    
  20  0.814861E-01  -2.50732      -4.53275       4.53275       167.732       172.265    
  21  0.801810     -0.220884     -0.399315      0.399315       172.422       172.821    
  22  0.611082     -0.492524     -0.890387      0.890387       172.730       173.620    
  23  0.599700E-01  -2.81391      -5.08700       5.08700       172.867       177.954    
  24  0.948704     -0.526589E-01 -0.951969E-01  0.951969E-01   172.252       172.348    
  25  0.992398     -0.763115E-02 -0.137956E-01  0.137956E-01   172.255       172.269    
  26  0.880498     -0.127268     -0.230075      0.230075       173.391       173.621    
  27  0.948340E-01  -2.35563      -4.25851       4.25851       172.139       176.398    
  28  0.982098     -0.180639E-01 -0.326560E-01  0.326560E-01   171.815       171.848    
  29  0.217652      -1.52486      -2.75665       2.75665       172.127       174.884    
  30  0.261545      -1.34115      -2.42453       2.42453       170.984       173.408    
  31  0.834479     -0.180948     -0.327119      0.327119       173.567       173.894    
  32  0.162789      -1.81530      -3.28170       3.28170       173.924       177.206    
  33  0.290203      -1.23718      -2.23657       2.23657       173.042       175.278    
  34  0.102916E-01  -4.57642      -8.27327       8.27327       173.561       181.834    
  35  0.834050     -0.181462     -0.328047      0.328047       174.838       175.166    
  36  0.965796     -0.348022E-01 -0.629155E-01  0.629155E-01   173.514       173.577    
  37  0.141898      -1.95265      -3.53000       3.53000       174.331       177.861    
  38  0.548366     -0.600813      -1.08615       1.08615       174.808       175.894    
  39  0.958993     -0.418714E-01 -0.756953E-01  0.756953E-01   175.167       175.243    
  40  0.241914      -1.41918      -2.56559       2.56559       174.168       176.734    
  41  0.696563     -0.361597     -0.653696      0.653696       173.636       174.290    
  42  0.946714     -0.547579E-01 -0.989916E-01  0.989916E-01   175.715       175.814    
  43  0.690193     -0.370783     -0.670303      0.670303       173.003       173.674    
  44  0.303289      -1.19307      -2.15683       2.15683       171.506       173.663    
  45  0.878282     -0.129787     -0.234630      0.234630       175.774       176.009    
  46  0.712048     -0.339610     -0.613947      0.613947       175.444       176.058    
  47  0.967351     -0.331944E-01 -0.600089E-01  0.600089E-01   176.135       176.195    
  48  0.718486     -0.330609     -0.597676      0.597676       175.636       176.233    
  49  0.805024     -0.216883     -0.392083      0.392083       171.324       171.716    
  50  0.441546     -0.817473      -1.47783       1.47783       174.846       176.323    
  51  0.404968     -0.903946      -1.63416       1.63416       176.040       177.674    
  52  0.240159      -1.42645      -2.57875       2.57875       176.672       179.251    
  53  0.520187     -0.653567      -1.18152       1.18152       175.068       176.250    
  54  0.508825     -0.675651      -1.22144       1.22144       172.968       174.189    
  55  0.408928     -0.894217      -1.61657       1.61657       176.272       177.888    
  56  0.231472      -1.46330      -2.64535       2.64535       176.998       179.643    
  57  0.708505     -0.344598     -0.622966      0.622966       177.365       177.988    
  58  0.620619     -0.477037     -0.862390      0.862390       176.450       177.313    
  59  0.221480      -1.50743      -2.72513       2.72513       175.683       178.408    
  60  0.183538      -1.69533      -3.06483       3.06483       174.487       177.552    
  61  0.576257     -0.551202     -0.996464      0.996464       173.455       174.452    
  62  0.908762     -0.956720E-01 -0.172956      0.172956       176.714       176.886    
  63  0.764794     -0.268149     -0.484760      0.484760       173.592       174.076    
  64  0.642626     -0.442192     -0.799396      0.799396       172.689       173.489    
  65  0.527733     -0.639166      -1.15549       1.15549       168.194       169.349    
  66  0.897425     -0.108226     -0.195650      0.195650       176.253       176.448    
  67  0.610387     -0.493661     -0.892442      0.892442       178.026       178.918    
  68  0.869092E-01  -2.44289      -4.41627       4.41627       175.329       179.745    
  69  0.675294     -0.392607     -0.709757      0.709757       178.746       179.456    
  70  0.276944      -1.28394      -2.32111       2.32111       174.076       176.398    
  71  0.150161      -1.89605      -3.42768       3.42768       173.024       176.451    
  72  0.722865     -0.324533     -0.586692      0.586692       170.267       170.854    
loop,thermsimp(1:2)       67   1.26146      0.336376    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    457        166.46          0.84          1.10         25.18          0.09          0.05         27.27
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    458        170.62          0.84          1.08         25.04          0.19          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    166.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       67
neval is:      457
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       68
neval is:      457


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      457     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.260355      -1.34571      -2.43278       2.43278       164.315       166.747    
   2  0.567351     -0.566778      -1.02462       1.02462       166.774       167.798    
   3  0.212111      -1.55064      -2.80326       2.80326       166.873       169.676    
   4  0.384323     -0.956272      -1.72875       1.72875       167.454       169.183    
   5  0.379704     -0.968364      -1.75061       1.75061       168.307       170.058    
   6  0.221298      -1.50824      -2.72661       2.72661       168.424       171.151    
   7  0.729922     -0.314818     -0.569128      0.569128       168.194       168.763    
   8  0.646542     -0.436117     -0.788413      0.788413       168.270       169.059    
   9  0.839436     -0.175025     -0.316411      0.316411       169.989       170.306    
  10  0.808281     -0.212846     -0.384783      0.384783       169.081       169.466    
  11  0.724296     -0.322555     -0.583116      0.583116       170.446       171.030    
  12  0.161395      -1.82390      -3.29725       3.29725       170.267       173.564    
  13  0.691210     -0.369312     -0.667643      0.667643       168.913       169.580    
  14  0.664974     -0.408007     -0.737596      0.737596       169.699       170.437    
  15  0.835640     -0.179558     -0.324605      0.324605       170.712       171.036    
  16  0.345121      -1.06386      -1.92325       1.92325       171.324       173.247    
  17  0.910776     -0.934579E-01 -0.168954      0.168954       171.815       171.984    
  18  0.482102     -0.729599      -1.31897       1.31897       167.732       169.051    
  19  0.828243     -0.188449     -0.340679      0.340679       172.255       172.596    
  20  0.805680     -0.216069     -0.390609      0.390609       172.252       172.643    
  21  0.694570     -0.364462     -0.658876      0.658876       169.047       169.706    
  22  0.304846      -1.18795      -2.14758       2.14758       172.422       174.570    
  23  0.212327      -1.54963      -2.80142       2.80142       168.966       171.768    
  24  0.670398     -0.399883     -0.722910      0.722910       170.984       171.707    
  25  0.466041     -0.763481      -1.38022       1.38022       172.689       174.069    
  26  0.500338E-01  -2.99506      -5.41447       5.41447       171.708       177.123    
  27  0.367939     -0.999839      -1.80751       1.80751       173.514       175.322    
  28  0.973691     -0.266612E-01 -0.481982E-01  0.481982E-01   172.730       172.778    
  29  0.688056     -0.373885     -0.675910      0.675910       173.391       174.067    
  30  0.219376      -1.51697      -2.74238       2.74238       171.506       174.248    
  31  0.135232      -2.00076      -3.61699       3.61699       170.115       173.732    
  32  0.796052     -0.228090     -0.412343      0.412343       173.003       173.416    
  33  0.596618E-01  -2.81906      -5.09631       5.09631       173.567       178.663    
  34  0.352128      -1.04376      -1.88691       1.88691       173.592       175.478    
  35  0.903448     -0.101537     -0.183559      0.183559       172.968       173.151    
  36  0.782446E-01  -2.54792      -4.60613       4.60613       171.909       176.515    
  37  0.992989     -0.703619E-02 -0.127201E-01  0.127201E-01   173.636       173.649    
  38  0.509863     -0.673613      -1.21776       1.21776       173.455       174.673    
  39  0.285505E-01  -3.55608      -6.42869       6.42869       172.127       178.556    
  40  0.117310      -2.14294      -3.87401       3.87401       174.838       178.712    
  41  0.608089     -0.497434     -0.899263      0.899263       175.167       176.066    
  42  0.516045     -0.661561      -1.19597       1.19597       173.042       174.238    
  43  0.505745     -0.681722      -1.23242       1.23242       175.715       176.947    
  44  0.273977      -1.29471      -2.34058       2.34058       174.808       177.149    
  45  0.776372     -0.253123     -0.457597      0.457597       171.272       171.730    
  46  0.813260     -0.206705     -0.373681      0.373681       175.774       176.148    
  47  0.823722     -0.193922     -0.350574      0.350574       175.444       175.795    
  48  0.690618     -0.370169     -0.669192      0.669192       176.135       176.804    
  49  0.906576     -0.980805E-01 -0.177310      0.177310       175.636       175.813    
  50  0.677790     -0.388918     -0.703088      0.703088       175.068       175.771    
  51  0.179693      -1.71651      -3.10310       3.10310       174.846       177.949    
  52  0.660035     -0.415463     -0.751076      0.751076       174.076       174.828    
  53  0.565851     -0.569425      -1.02941       1.02941       172.139       173.169    
  54  0.973172     -0.271940E-01 -0.491614E-01  0.491614E-01   176.253       176.302    
  55  0.243227      -1.41376      -2.55580       2.55580       173.024       175.580    
  56  0.106189      -2.24253      -4.05405       4.05405       174.168       178.222    
  57  0.360424      -1.02047      -1.84482       1.84482       176.714       178.558    
  58  0.779729     -0.248808     -0.449796      0.449796       173.924       174.374    
  59  0.306299      -1.18319      -2.13898       2.13898       176.450       178.589    
  60  0.209367      -1.56367      -2.82680       2.82680       174.487       177.314    
  61  0.498848     -0.695454      -1.25724       1.25724       176.040       177.297    
  62  0.391394     -0.938040      -1.69579       1.69579       174.331       176.026    
  63  0.435785     -0.830607      -1.50157       1.50157       176.272       177.773    
  64  0.312077      -1.16451      -2.10520       2.10520       172.867       174.972    
  65  0.833372     -0.182275     -0.329517      0.329517       177.365       177.694    
  66  0.272756      -1.29918      -2.34866       2.34866       175.683       178.032    
  67  0.529616     -0.635602      -1.14904       1.14904       178.026       179.175    
  68  0.556568     -0.585966      -1.05931       1.05931       176.672       177.731    
  69  0.373852     -0.983896      -1.77869       1.77869       178.746       180.525    
  70  0.899059E-01  -2.40899      -4.35498       4.35498       176.998       181.353    
  71  0.695034     -0.363794     -0.657668      0.657668       175.329       175.986    
  72  0.379246     -0.969571      -1.75279       1.75279       166.458       168.211    
loop,thermsimp(1:2)       68   2.43278       1.02462    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    459        167.15          0.84          1.11         25.05          0.20          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    460        173.18          0.84          1.11         24.97          0.23          0.05         27.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    167.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       68
neval is:      459
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       69
neval is:      459


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      459     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.427727     -0.849271      -1.53532       1.53532       164.315       165.850    
   2  0.300580      -1.20204      -2.17305       2.17305       166.774       168.947    
   3  0.440777     -0.819215      -1.48098       1.48098       166.458       167.939    
   4  0.119397      -2.12530      -3.84212       3.84212       168.194       172.036    
   5  0.324114      -1.12666      -2.03678       2.03678       167.732       169.769    
   6  0.708589E-01  -2.64706      -4.78537       4.78537       168.270       173.056    
   7  0.234973      -1.44829      -2.61821       2.61821       167.454       170.073    
   8  0.630612     -0.461064     -0.833513      0.833513       169.081       169.915    
   9  0.637778     -0.449765     -0.813086      0.813086       168.913       169.726    
  10  0.952774     -0.483777E-01 -0.874574E-01  0.874574E-01   166.873       166.960    
  11  0.156845      -1.85249      -3.34895       3.34895       169.047       172.396    
  12  0.386146     -0.951540      -1.72020       1.72020       168.307       170.027    
  13  0.233038      -1.45655      -2.63316       2.63316       169.989       172.623    
  14  0.748513     -0.289667     -0.523662      0.523662       169.699       170.223    
  15  0.829626     -0.186780     -0.337662      0.337662       170.446       170.784    
  16  0.108384      -2.22208      -4.01708       4.01708       170.712       174.729    
  17  0.632628     -0.457873     -0.827743      0.827743       168.424       169.252    
  18  0.989524     -0.105314E-01 -0.190387E-01  0.190387E-01   170.984       171.003    
  19  0.151245      -1.88886      -3.41468       3.41468       171.272       174.687    
  20  0.898996E-01  -2.40906      -4.35511       4.35511       168.966       173.321    
  21  0.858841     -0.152172     -0.275096      0.275096       171.815       172.090    
  22  0.849417     -0.163205     -0.295042      0.295042       172.255       172.550    
  23  0.446510     -0.806293      -1.45762       1.45762       172.252       173.710    
  24  0.989123     -0.109366E-01 -0.197712E-01  0.197712E-01   172.730       172.750    
  25  0.898953E-01  -2.40911      -4.35520       4.35520       172.968       177.323    
  26  0.433704     -0.835393      -1.51023       1.51023       172.139       173.650    
  27  0.410713     -0.889861      -1.60869       1.60869       171.324       172.933    
  28  0.310044      -1.17104      -2.11701       2.11701       173.003       175.120    
  29  0.888110     -0.118660     -0.214514      0.214514       170.267       170.481    
  30  0.661223     -0.413664     -0.747823      0.747823       173.636       174.384    
  31  0.519718     -0.654468      -1.18315       1.18315       170.115       171.298    
  32  0.818791     -0.199927     -0.361429      0.361429       173.391       173.753    
  33  0.981929     -0.182366E-01 -0.329681E-01  0.329681E-01   172.689       172.722    
  34  0.308824E-01  -3.47757      -6.28676       6.28676       173.042       179.329    
  35  0.995192E-01  -2.30740      -4.17133       4.17133       171.506       175.677    
  36  0.292141      -1.23052      -2.22454       2.22454       173.924       176.149    
  37  0.546956     -0.603387      -1.09080       1.09080       172.422       173.513    
  38  0.875324     -0.133161     -0.240729      0.240729       173.455       173.696    
  39  0.497859     -0.697439      -1.26083       1.26083       174.076       175.337    
  40  0.808711     -0.212313     -0.383821      0.383821       172.867       173.251    
  41  0.916666     -0.870126E-01 -0.157302      0.157302       173.514       173.672    
  42  0.574110     -0.554933      -1.00321       1.00321       173.592       174.595    
  43  0.908171     -0.963226E-01 -0.174132      0.174132       173.024       173.198    
  44  0.243373      -1.41316      -2.55471       2.55471       175.068       177.623    
  45  0.647413     -0.434771     -0.785981      0.785981       175.444       176.230    
  46  0.309907      -1.17148      -2.11781       2.11781       175.636       177.754    
  47  0.167934      -1.78419      -3.22546       3.22546       175.329       178.554    
  48  0.676784     -0.390402     -0.705771      0.705771       174.331       175.036    
  49  0.769515     -0.261995     -0.473635      0.473635       175.167       175.641    
  50  0.822671     -0.195199     -0.352881      0.352881       175.774       176.127    
  51  0.299010E-01  -3.50986      -6.34514       6.34514       176.253       182.598    
  52  0.803018     -0.219378     -0.396592      0.396592       171.909       172.305    
  53  0.487353E-01  -3.02135      -5.46201       5.46201       176.135       181.597    
  54  0.334246      -1.09588      -1.98113       1.98113       175.715       177.696    
  55  0.263436      -1.33394      -2.41151       2.41151       171.708       174.120    
  56  0.475227     -0.743963      -1.34494       1.34494       174.808       176.153    
  57  0.962498     -0.382236E-01 -0.691008E-01  0.691008E-01   176.040       176.109    
  58  0.517461     -0.658822      -1.19102       1.19102       174.487       175.678    
  59  0.869842     -0.139443     -0.252086      0.252086       177.365       177.617    
  60  0.260881      -1.34369      -2.42913       2.42913       176.672       179.101    
  61  0.784961     -0.242121     -0.437707      0.437707       176.272       176.710    
  62  0.128612      -2.05096      -3.70772       3.70772       174.846       178.553    
  63  0.505442     -0.682322      -1.23350       1.23350       175.683       176.917    
  64  0.195040      -1.63455      -2.95494       2.95494       174.168       177.123    
  65  0.490842     -0.711633      -1.28649       1.28649       172.127       173.414    
  66  0.487658     -0.718141      -1.29826       1.29826       176.714       178.012    
  67  0.453852     -0.789984      -1.42813       1.42813       176.450       177.878    
  68  0.802534     -0.219982     -0.397683      0.397683       173.567       173.965    
  69  0.804022     -0.218128     -0.394333      0.394333       174.838       175.232    
  70  0.826405     -0.190670     -0.344694      0.344694       178.026       178.371    
  71  0.760351     -0.273975     -0.495292      0.495292       178.746       179.242    
  72  0.892488     -0.113742     -0.205624      0.205624       167.155       167.360    
loop,thermsimp(1:2)       69   1.53532       2.17305    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    461        174.90          0.84          1.11         25.06          0.17          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  460    174.90        1.116     -1.536      1.863     -102.6     0.9088    
                      0.2093      1.870     -99.70      6.145     0.2238    
                       2.145     -1.504      2.094      0.000     -40.00    
                      -1.596      0.000      0.000      0.000     -1.221    

                      -2.500     0.3462E+05 0.3876E+05  0.000      0.000    
                     -0.5672     -6.015     -4.232     -7.243      4.367    
                      -14.24     -3.236      1708.      0.000     -1986.    

                     -0.1165E+05  8519.     -2472.     0.1217E+06  214.1    
                       5183.     0.3297E-02 0.9772E-02  0.000     0.4155E-01
                     -0.4346E-01-0.3074E-01-0.1791E-02 0.7001E-01 0.1836E-01

                     -0.1011    -0.9391      0.000    -0.7333E-01 0.3817E-02
                       0.000    -0.1846E-01 0.8116E-02-0.2814E-01-0.1891E-01
                      0.7881E-02 0.4048E-01-0.3148     -1.112      0.000    

                     -0.9025E-01-0.3077    -0.5835    -0.5355    -0.3716E-01
                      0.5419E-01  9.100      8.846     -4750.     -4.000    
                     -0.3981    -0.6965      9.046      8.783     -5688.    

                      -4.000     0.2514    -0.6758      8.991      8.879    
                      -4271.     -7.000    -0.2294    -0.7253      9.061    
                       8.874     -5740.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       69
neval is:      460
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       70
neval is:      460


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      460     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652194     -0.427413     -0.772678      0.772678       164.315       165.087    
   2  0.835191     -0.180095     -0.325577      0.325577       166.873       167.198    
   3  0.914573     -0.892985E-01 -0.161434      0.161434       167.155       167.316    
   4  0.936996     -0.650763E-01 -0.117645      0.117645       166.458       166.576    
   5  0.343704E-01  -3.37056      -6.09331       6.09331       166.774       172.867    
   6  0.993168     -0.685505E-02 -0.123926E-01  0.123926E-01   168.424       168.437    
   7  0.124012      -2.08737      -3.77356       3.77356       168.913       172.686    
   8  0.283107E-01  -3.56451      -6.44394       6.44394       167.732       174.176    
   9  0.626631     -0.467398     -0.844963      0.844963       169.081       169.926    
  10  0.349067      -1.05249      -1.90270       1.90270       168.307       170.210    
  11  0.467982E-01  -3.06191      -5.53533       5.53533       167.454       172.990    
  12  0.682524E-01  -2.68454      -4.85312       4.85312       169.699       174.552    
  13  0.320603      -1.13755      -2.05647       2.05647       170.267       172.323    
  14  0.485411     -0.722759      -1.30661       1.30661       170.446       171.753    
  15  0.174639      -1.74503      -3.15468       3.15468       170.984       174.139    
  16  0.688366     -0.373434     -0.675095      0.675095       170.115       170.790    
  17  0.403792     -0.906856      -1.63942       1.63942       168.194       169.833    
  18  0.237008      -1.43966      -2.60262       2.60262       171.815       174.418    
  19  0.491286     -0.710728      -1.28486       1.28486       171.909       173.194    
  20  0.187095      -1.67614      -3.03013       3.03013       169.047       172.077    
  21  0.365844      -1.00555      -1.81783       1.81783       172.255       174.073    
  22  0.899359     -0.106073     -0.191759      0.191759       169.989       170.181    
  23  0.806501     -0.215051     -0.388769      0.388769       172.689       173.078    
  24  0.538739     -0.618525      -1.11817       1.11817       172.730       173.848    
  25  0.184808      -1.68844      -3.05236       3.05236       171.324       174.376    
  26  0.760157     -0.274230     -0.495754      0.495754       168.270       168.766    
  27  0.920762     -0.825532E-01 -0.149240      0.149240       173.024       173.173    
  28  0.142687      -1.94710      -3.51998       3.51998       172.867       176.387    
  29  0.992793     -0.723301E-02 -0.130759E-01  0.130759E-01   168.966       168.979    
  30  0.898687     -0.106820     -0.193110      0.193110       172.127       172.320    
  31  0.263660      -1.33309      -2.40997       2.40997       172.422       174.832    
  32  0.971768     -0.286379E-01 -0.517718E-01  0.517718E-01   172.139       172.191    
  33  0.387765     -0.947357      -1.71263       1.71263       173.514       175.227    
  34  0.574064     -0.555014      -1.00336       1.00336       173.455       174.459    
  35  0.370709     -0.992338      -1.79395       1.79395       172.252       174.046    
  36  0.483362E-01  -3.02957      -5.47687       5.47687       173.391       178.868    
  37  0.583245     -0.539148     -0.974674      0.974674       173.567       174.542    
  38  0.293950E-01  -3.52693      -6.37599       6.37599       171.708       178.084    
  39  0.961670     -0.390837E-01 -0.706556E-01  0.706556E-01   173.636       173.707    
  40  0.252096      -1.37794      -2.49105       2.49105       173.592       176.083    
  41  0.260270      -1.34604      -2.43337       2.43337       171.272       173.706    
  42  0.449392     -0.799860      -1.44599       1.44599       170.712       172.158    
  43  0.845367     -0.167985     -0.303683      0.303683       174.331       174.634    
  44  0.365557      -1.00633      -1.81925       1.81925       173.003       174.823    
  45  0.374516     -0.982121      -1.77548       1.77548       174.838       176.613    
  46  0.704289     -0.350566     -0.633754      0.633754       174.076       174.710    
  47  0.784654     -0.242512     -0.438414      0.438414       175.167       175.605    
  48  0.566446     -0.568374      -1.02751       1.02751       171.506       172.533    
  49  0.932234     -0.701720E-01 -0.126857      0.126857       174.487       174.614    
  50  0.361623      -1.01715      -1.83881       1.83881       176.040       177.879    
  51  0.289968      -1.23799      -2.23804       2.23804       175.774       178.012    
  52  0.173332      -1.75255      -3.16826       3.16826       173.924       177.093    
  53  0.639885     -0.446466     -0.807123      0.807123       174.808       175.615    
  54  0.960811     -0.399777E-01 -0.722718E-01  0.722718E-01   175.444       175.517    
  55  0.454979     -0.787504      -1.42365       1.42365       176.272       177.696    
  56  0.464001     -0.767868      -1.38815       1.38815       175.683       177.071    
  57  0.910483     -0.937798E-01 -0.169535      0.169535       174.168       174.337    
  58  0.485489     -0.722599      -1.30632       1.30632       172.968       174.274    
  59  0.429778     -0.844485      -1.52666       1.52666       177.365       178.892    
  60  0.119439      -2.12495      -3.84149       3.84149       175.068       178.910    
  61  0.338197      -1.08413      -1.95989       1.95989       175.715       177.675    
  62  0.953953     -0.471406E-01 -0.852209E-01  0.852209E-01   175.636       175.721    
  63  0.844907     -0.168528     -0.304666      0.304666       176.450       176.755    
  64  0.909430E-02  -4.70011      -8.49687       8.49687       176.714       185.210    
  65  0.476196     -0.741925      -1.34125       1.34125       178.026       179.367    
  66  0.562575     -0.575231      -1.03990       1.03990       174.846       175.885    
  67  0.351116      -1.04664      -1.89212       1.89212       175.329       177.221    
  68  0.611024E-01  -2.79520      -5.05318       5.05318       176.672       181.725    
  69  0.507102     -0.679043      -1.22758       1.22758       178.746       179.974    
  70  0.663586     -0.410096     -0.741373      0.741373       173.042       173.783    
  71  0.865347     -0.144625     -0.261453      0.261453       176.135       176.397    
  72  0.652519E-01  -2.72950      -4.93440       4.93440       174.899       179.834    
loop,thermsimp(1:2)       70  0.772678      0.325577    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    462        167.32          0.84          1.11         25.06          0.21          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    167.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       70
neval is:      461
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       71
neval is:      461


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      461     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993388     -0.663381E-02 -0.119926E-01  0.119926E-01   164.315       164.327    
   2  0.170387      -1.76968      -3.19924       3.19924       166.458       169.657    
   3  0.430235     -0.843424      -1.52475       1.52475       166.873       168.397    
   4  0.932962     -0.693906E-01 -0.125445      0.125445       167.155       167.280    
   5  0.723435     -0.323745     -0.585267      0.585267       168.424       169.009    
   6  0.251650E-01  -3.68230      -6.65688       6.65688       168.270       174.927    
   7  0.763909     -0.269307     -0.486854      0.486854       168.966       169.453    
   8  0.754456     -0.281759     -0.509364      0.509364       168.194       168.703    
   9  0.999559     -0.441576E-03 -0.798283E-03  0.798283E-03   169.081       169.082    
  10  0.643558     -0.440744     -0.796778      0.796778       169.989       170.786    
  11  0.629665E-01  -2.76515      -4.99885       4.99885       168.307       173.306    
  12  0.649053     -0.432241     -0.781406      0.781406       170.115       170.897    
  13  0.399773E-01  -3.21944      -5.82012       5.82012       170.446       176.267    
  14  0.849328     -0.163310     -0.295232      0.295232       169.047       169.342    
  15  0.391842E-01  -3.23948      -5.85635       5.85635       170.712       176.568    
  16  0.105710      -2.24706      -4.06224       4.06224       172.139       176.202    
  17  0.660078     -0.415397     -0.750956      0.750956       172.127       172.878    
  18  0.353251      -1.04058      -1.88116       1.88116       170.267       172.148    
  19  0.454778     -0.787946      -1.42445       1.42445       171.506       172.930    
  20  0.572414     -0.557893      -1.00856       1.00856       168.913       169.921    
  21  0.202701      -1.59602      -2.88530       2.88530       166.774       169.659    
  22  0.880730     -0.127005     -0.229599      0.229599       167.454       167.684    
  23  0.390523     -0.940268      -1.69982       1.69982       172.689       174.389    
  24  0.174911      -1.74348      -3.15187       3.15187       173.024       176.176    
  25  0.903407     -0.101582     -0.183640      0.183640       171.909       172.092    
  26  0.776206     -0.253337     -0.457983      0.457983       171.272       171.730    
  27  0.285894      -1.25213      -2.26361       2.26361       173.636       175.900    
  28  0.285213      -1.25452      -2.26792       2.26792       173.042       175.310    
  29  0.412143     -0.886385      -1.60241       1.60241       172.730       174.332    
  30  0.464292     -0.767242      -1.38702       1.38702       172.252       173.639    
  31  0.453886     -0.789909      -1.42800       1.42800       172.255       173.683    
  32  0.870789     -0.138356     -0.250120      0.250120       170.984       171.234    
  33  0.338222      -1.08405      -1.95975       1.95975       167.732       169.692    
  34  0.249181      -1.38958      -2.51208       2.51208       172.968       175.480    
  35  0.524083     -0.646104      -1.16803       1.16803       174.168       175.336    
  36  0.646957     -0.435475     -0.787253      0.787253       171.324       172.111    
  37  0.971194     -0.292293E-01 -0.528408E-01  0.528408E-01   171.815       171.868    
  38  0.775832     -0.253820     -0.458856      0.458856       173.455       173.914    
  39  0.411875     -0.887037      -1.60359       1.60359       173.567       175.171    
  40  0.300823      -1.20123      -2.17159       2.17159       169.699       171.871    
  41  0.535760     -0.624069      -1.12819       1.12819       174.487       175.615    
  42  0.547709     -0.602011      -1.08832       1.08832       174.331       175.419    
  43  0.714758     -0.335812     -0.607082      0.607082       174.076       174.684    
  44  0.610789E-01  -2.79559      -5.05387       5.05387       173.003       178.057    
  45  0.442447     -0.815435      -1.47415       1.47415       172.422       173.896    
  46  0.421127E-01  -3.16741      -5.72605       5.72605       173.514       179.241    
  47  0.218962      -1.51886      -2.74579       2.74579       175.444       178.190    
  48  0.475680     -0.743009      -1.34321       1.34321       175.167       176.510    
  49  0.997535     -0.246821E-02 -0.446203E-02  0.446203E-02   174.808       174.813    
  50  0.367564      -1.00086      -1.80935       1.80935       175.636       177.445    
  51  0.309823E-01  -3.47434      -6.28092       6.28092       174.846       181.126    
  52  0.822588     -0.195300     -0.353064      0.353064       173.592       173.945    
  53  0.443457E-01  -3.11574      -5.63264       5.63264       172.867       178.500    
  54  0.922033     -0.811740E-01 -0.146747      0.146747       176.135       176.282    
  55  0.693266     -0.366342     -0.662274      0.662274       174.838       175.500    
  56  0.234230      -1.45145      -2.62394       2.62394       176.450       179.074    
  57  0.319502      -1.14099      -2.06269       2.06269       175.683       177.746    
  58  0.861372     -0.149229     -0.269777      0.269777       173.924       174.194    
  59  0.314331      -1.15731      -2.09218       2.09218       175.329       177.421    
  60  0.268996      -1.31306      -2.37375       2.37375       175.715       178.089    
  61  0.635481     -0.453373     -0.819609      0.819609       176.272       177.091    
  62  0.602848     -0.506091     -0.914913      0.914913       176.040       176.955    
  63  0.319933      -1.13964      -2.06025       2.06025       175.774       177.834    
  64  0.940236E-01  -2.36421      -4.27403       4.27403       171.708       175.982    
  65  0.505109     -0.682982      -1.23470       1.23470       173.391       174.626    
  66  0.366280      -1.00436      -1.81568       1.81568       177.365       179.181    
  67  0.174849      -1.74383      -3.15251       3.15251       175.068       178.221    
  68  0.903510     -0.101468     -0.183435      0.183435       178.026       178.209    
  69  0.581743E-01  -2.84431      -5.14195       5.14195       174.899       180.041    
  70  0.451632     -0.794888      -1.43700       1.43700       178.746       180.183    
  71  0.314621      -1.15639      -2.09052       2.09052       176.672       178.763    
  72  0.177059E-01  -4.03386      -7.29242       7.29242       167.315       174.608    
loop,thermsimp(1:2)       71  0.119926E-01   3.19924    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    463        171.34          0.84          1.11         25.11          0.19          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    171.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       71
neval is:      462
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       72
neval is:      462


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      462     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244277      -1.40945      -2.54801       2.54801       164.315       166.863    
   2  0.308155      -1.17715      -2.12806       2.12806       167.155       169.283    
   3  0.782683     -0.245028     -0.442962      0.442962       167.454       167.897    
   4  0.760982     -0.273146     -0.493795      0.493795       166.873       167.367    
   5  0.429075     -0.846125      -1.52963       1.52963       168.194       169.724    
   6  0.736261     -0.306171     -0.553496      0.553496       168.424       168.978    
   7  0.460189     -0.776117      -1.40307       1.40307       169.081       170.484    
   8  0.933911     -0.683736E-01 -0.123606      0.123606       169.047       169.171    
   9  0.460375     -0.775713      -1.40234       1.40234       168.966       170.369    
  10  0.939859     -0.620258E-01 -0.112130      0.112130       166.458       166.570    
  11  0.550327     -0.597243      -1.07970       1.07970       166.774       167.853    
  12  0.480638     -0.732640      -1.32447       1.32447       167.732       169.057    
  13  0.252938      -1.37461      -2.48502       2.48502       168.913       171.398    
  14  0.536822     -0.622088      -1.12461       1.12461       169.989       171.114    
  15  0.363695      -1.01144      -1.82848       1.82848       170.115       171.944    
  16  0.279007      -1.27652      -2.30769       2.30769       170.984       173.292    
  17  0.164958      -1.80206      -3.25778       3.25778       171.272       174.530    
  18  0.207862      -1.57088      -2.83985       2.83985       171.815       174.655    
  19  0.926151     -0.767180E-01 -0.138691      0.138691       169.699       169.838    
  20  0.931241     -0.712372E-01 -0.128783      0.128783       171.909       172.038    
  21  0.410184     -0.891148      -1.61102       1.61102       171.324       172.935    
  22  0.180536      -1.71183      -3.09464       3.09464       170.267       173.362    
  23  0.505927     -0.681363      -1.23177       1.23177       172.127       173.359    
  24  0.950800     -0.504520E-01 -0.912073E-01  0.912073E-01   171.506       171.597    
  25  0.530981     -0.633028      -1.14439       1.14439       168.307       169.451    
  26  0.878348     -0.129712     -0.234494      0.234494       172.252       172.487    
  27  0.699104     -0.357956     -0.647114      0.647114       172.255       172.902    
  28  0.795467     -0.228826     -0.413672      0.413672       172.422       172.836    
  29  0.828214     -0.188484     -0.340741      0.340741       173.455       173.796    
  30  0.840484     -0.173777     -0.314154      0.314154       173.592       173.906    
  31  0.916482E-02  -4.69238      -8.48290       8.48290       173.924       182.407    
  32  0.965109     -0.355146E-01 -0.642034E-01  0.642034E-01   172.730       172.794    
  33  0.686270E-01  -2.67907      -4.84323       4.84323       172.689       177.532    
  34  0.777883     -0.251179     -0.454082      0.454082       167.315       167.769    
  35  0.424167     -0.857629      -1.55042       1.55042       173.391       174.942    
  36  0.422618     -0.861287      -1.55704       1.55704       174.076       175.633    
  37  0.202591      -1.59656      -2.88627       2.88627       174.808       177.694    
  38  0.520317     -0.653316      -1.18107       1.18107       168.270       169.451    
  39  0.918512     -0.850003E-01 -0.153664      0.153664       173.567       173.721    
  40  0.516959     -0.659791      -1.19277       1.19277       173.042       174.235    
  41  0.477240     -0.739735      -1.33729       1.33729       174.168       175.505    
  42  0.520540E-01  -2.95547      -5.34292       5.34292       174.331       179.673    
  43  0.304485      -1.18913      -2.14972       2.14972       172.968       175.117    
  44  0.879547     -0.128348     -0.232027      0.232027       174.838       175.070    
  45  0.297327      -1.21292      -2.19273       2.19273       174.487       176.680    
  46  0.320273      -1.13858      -2.05833       2.05833       173.636       175.695    
  47  0.503657E-01  -2.98844      -5.40252       5.40252       171.708       177.111    
  48  0.836881     -0.178074     -0.321922      0.321922       173.024       173.346    
  49  0.550103     -0.597651      -1.08043       1.08043       172.139       173.220    
  50  0.407887E-01  -3.19935      -5.78379       5.78379       170.446       176.230    
  51  0.583045     -0.539491     -0.975293      0.975293       176.135       177.111    
  52  0.696120     -0.362234     -0.654847      0.654847       175.167       175.822    
  53  0.326588      -1.11905      -2.02303       2.02303       170.712       172.735    
  54  0.499766     -0.693615      -1.25392       1.25392       176.040       177.294    
  55  0.858833     -0.152181     -0.275113      0.275113       176.272       176.547    
  56  0.414433     -0.880844      -1.59239       1.59239       175.329       176.921    
  57  0.518336     -0.657132      -1.18797       1.18797       175.636       176.824    
  58  0.948181     -0.532095E-01 -0.961923E-01  0.961923E-01   175.683       175.779    
  59  0.146662E-02  -6.52479      -11.7955       11.7955       175.774       187.570    
  60  0.999623     -0.376691E-03 -0.680984E-03  0.680984E-03   173.003       173.004    
  61  0.559564     -0.580597      -1.04961       1.04961       175.715       176.765    
  62  0.408239     -0.895902      -1.61962       1.61962       175.444       177.064    
  63  0.128262      -2.05368      -3.71265       3.71265       178.026       181.739    
  64  0.501027     -0.691096      -1.24936       1.24936       175.068       176.317    
  65  0.174688      -1.74475      -3.15417       3.15417       172.867       176.021    
  66  0.653032     -0.426130     -0.770358      0.770358       176.672       177.442    
  67  0.649230     -0.431968     -0.780912      0.780912       176.450       177.231    
  68  0.203992      -1.58967      -2.87382       2.87382       177.365       180.239    
  69  0.445553     -0.808440      -1.46150       1.46150       173.514       174.976    
  70  0.438254     -0.824957      -1.49136       1.49136       174.899       176.390    
  71  0.402175     -0.910867      -1.64667       1.64667       178.746       180.393    
  72  0.360849      -1.01930      -1.84269       1.84269       171.345       173.187    
loop,thermsimp(1:2)       72   2.54801       2.12806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    464        172.97          0.84          1.11         25.09          0.11          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       72
neval is:      463
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       73
neval is:      463


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      463     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985694     -0.144094E-01 -0.260494E-01  0.260494E-01   166.458       166.484    
   2  0.404696     -0.904619      -1.63537       1.63537       164.315       165.950    
   3  0.848366     -0.164443     -0.297280      0.297280       166.873       167.170    
   4  0.108805      -2.21820      -4.01007       4.01007       167.315       171.325    
   5  0.428300     -0.847930      -1.53289       1.53289       166.774       168.306    
   6  0.727573     -0.318041     -0.574955      0.574955       167.454       168.029    
   7  0.606234     -0.500489     -0.904786      0.904786       168.424       169.329    
   8  0.938951     -0.629916E-01 -0.113876      0.113876       167.732       167.846    
   9  0.622391     -0.474187     -0.857238      0.857238       169.047       169.904    
  10  0.681292E-01  -2.68635      -4.85639       4.85639       167.155       172.011    
  11  0.802944     -0.219471     -0.396760      0.396760       168.270       168.667    
  12  0.739251     -0.302118     -0.546169      0.546169       168.307       168.853    
  13  0.943417     -0.582465E-01 -0.105298      0.105298       168.194       168.299    
  14  0.865420E-01  -2.44712      -4.42392       4.42392       169.699       174.123    
  15  0.247017      -1.39830      -2.52785       2.52785       168.966       171.494    
  16  0.835884     -0.179266     -0.324078      0.324078       169.081       169.405    
  17  0.632625     -0.457877     -0.827752      0.827752       169.989       170.817    
  18  0.335470      -1.09222      -1.97452       1.97452       168.913       170.887    
  19  0.617355     -0.482312     -0.871924      0.871924       171.506       172.378    
  20  0.966107E-01  -2.33707      -4.22495       4.22495       170.115       174.340    
  21  0.205299      -1.58329      -2.86227       2.86227       171.909       174.771    
  22  0.784372     -0.242871     -0.439064      0.439064       172.252       172.692    
  23  0.507274     -0.678705      -1.22696       1.22696       170.712       171.939    
  24  0.228591      -1.47582      -2.66799       2.66799       172.730       175.398    
  25  0.813037     -0.206978     -0.374176      0.374176       172.422       172.796    
  26  0.660021E-02  -5.02065      -9.07635       9.07635       172.255       181.331    
  27  0.449216     -0.800252      -1.44670       1.44670       171.324       172.771    
  28  0.624836     -0.470267     -0.850150      0.850150       173.003       173.854    
  29  0.124036      -2.08718      -3.77321       3.77321       171.345       175.118    
  30  0.977322     -0.229386E-01 -0.414686E-01  0.414686E-01   172.139       172.181    
  31  0.362007      -1.01609      -1.83690       1.83690       170.984       172.821    
  32  0.433687     -0.835432      -1.51030       1.51030       173.024       174.534    
  33  0.476592     -0.741094      -1.33975       1.33975       172.127       173.467    
  34  0.929976     -0.725968E-01 -0.131241      0.131241       170.267       170.398    
  35  0.363976      -1.01067      -1.82709       1.82709       173.567       175.394    
  36  0.226804      -1.48367      -2.68218       2.68218       173.455       176.137    
  37  0.398930     -0.918968      -1.66131       1.66131       173.592       175.253    
  38  0.303955      -1.19087      -2.15287       2.15287       173.042       175.195    
  39  0.452647     -0.792643      -1.43294       1.43294       171.272       172.705    
  40  0.366024      -1.00506      -1.81694       1.81694       171.815       173.632    
  41  0.995807     -0.420220E-02 -0.759675E-02  0.759675E-02   173.391       173.399    
  42  0.796944     -0.226970     -0.410318      0.410318       173.514       173.925    
  43  0.884128     -0.123153     -0.222636      0.222636       174.838       175.060    
  44  0.710294     -0.342076     -0.618406      0.618406       172.968       173.586    
  45  0.603169     -0.505558     -0.913949      0.913949       174.168       175.082    
  46  0.822382     -0.195551     -0.353517      0.353517       174.076       174.430    
  47  0.741673E-01  -2.60143      -4.70288       4.70288       173.636       178.339    
  48  0.593116     -0.522366     -0.944335      0.944335       175.683       176.627    
  49  0.659441     -0.416363     -0.752702      0.752702       175.167       175.920    
  50  0.179982      -1.71490      -3.10020       3.10020       172.867       175.967    
  51  0.334225      -1.09594      -1.98125       1.98125       170.446       172.428    
  52  0.602331E-01  -2.80953      -5.07908       5.07908       175.068       180.147    
  53  0.895459     -0.110419     -0.199616      0.199616       174.899       175.099    
  54  0.857093     -0.154209     -0.278780      0.278780       176.272       176.551    
  55  0.909112     -0.952871E-01 -0.172260      0.172260       174.487       174.659    
  56  0.474044     -0.746456      -1.34945       1.34945       175.715       177.064    
  57  0.707398     -0.346162     -0.625792      0.625792       175.636       176.262    
  58  0.520137     -0.653664      -1.18170       1.18170       175.329       176.510    
  59  0.723154     -0.324133     -0.585968      0.585968       175.444       176.030    
  60  0.470863     -0.753187      -1.36161       1.36161       176.135       177.497    
  61  0.277955      -1.28030      -2.31452       2.31452       171.708       174.023    
  62  0.598622     -0.513125     -0.927629      0.927629       176.450       177.378    
  63  0.997564     -0.243925E-02 -0.440969E-02  0.440969E-02   176.040       176.044    
  64  0.791941     -0.233269     -0.421704      0.421704       176.672       177.094    
  65  0.650060     -0.430690     -0.778603      0.778603       172.689       173.468    
  66  0.386740     -0.950004      -1.71742       1.71742       174.808       176.526    
  67  0.379980     -0.967637      -1.74930       1.74930       174.331       176.080    
  68  0.458971E-03  -7.68652      -13.8957       13.8957       177.365       191.261    
  69  0.622956     -0.473279     -0.855595      0.855595       178.746       179.602    
  70  0.971720     -0.286875E-01 -0.518613E-01  0.518613E-01   178.026       178.078    
  71  0.404253     -0.905715      -1.63736       1.63736       173.924       175.562    
  72  0.789371     -0.236519     -0.427581      0.427581       172.969       173.397    
loop,thermsimp(1:2)       73  0.260494E-01   1.63537    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    465        174.96          0.83          1.11         25.05          0.16          0.05         27.21
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       73
neval is:      464
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       74
neval is:      464


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      464     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.354251E-01  -3.34033      -6.03867       6.03867       164.315       170.353    
   2  0.121809      -2.10530      -3.80596       3.80596       166.458       170.264    
   3  0.686317E-01  -2.67900      -4.84310       4.84310       166.873       171.716    
   4  0.529445     -0.635926      -1.14963       1.14963       167.732       168.882    
   5  0.829516     -0.186912     -0.337901      0.337901       167.454       167.792    
   6  0.418811     -0.870336      -1.57340       1.57340       168.194       169.767    
   7  0.353353      -1.04029      -1.88064       1.88064       166.774       168.654    
   8  0.720073     -0.328403     -0.593687      0.593687       168.270       168.864    
   9  0.797644     -0.226092     -0.408731      0.408731       168.307       168.716    
  10  0.521803     -0.650466      -1.17591       1.17591       168.424       169.600    
  11  0.900951     -0.104305     -0.188563      0.188563       169.081       169.270    
  12  0.801614     -0.221128     -0.399756      0.399756       169.047       169.447    
  13  0.796757     -0.227205     -0.410742      0.410742       170.267       170.678    
  14  0.716648     -0.333170     -0.602306      0.602306       169.989       170.592    
  15  0.690691     -0.370062     -0.669000      0.669000       168.913       169.582    
  16  0.462468     -0.771178      -1.39414       1.39414       167.315       168.709    
  17  0.896079     -0.109726     -0.198363      0.198363       168.966       169.165    
  18  0.351033E-02  -5.65205      -10.2178       10.2178       170.712       180.929    
  19  0.195795E-01  -3.93327      -7.11058       7.11058       167.155       174.265    
  20  0.285350E-01  -3.55662      -6.42968       6.42968       172.139       178.569    
  21  0.345848E-01  -3.36434      -6.08207       6.08207       171.506       177.588    
  22  0.344304      -1.06623      -1.92753       1.92753       170.446       172.374    
  23  0.251512      -1.38026      -2.49525       2.49525       172.252       174.748    
  24  0.389628E-01  -3.24515      -5.86659       5.86659       171.272       177.139    
  25  0.338848      -1.08220      -1.95641       1.95641       171.324       173.280    
  26  0.383648     -0.958031      -1.73193       1.73193       172.422       174.154    
  27  0.877462     -0.130722     -0.236320      0.236320       170.984       171.220    
  28  0.383552     -0.958280      -1.73238       1.73238       172.969       174.702    
  29  0.835013     -0.180308     -0.325961      0.325961       173.391       173.717    
  30  0.733865     -0.309430     -0.559389      0.559389       172.127       172.687    
  31  0.288449      -1.24324      -2.24753       2.24753       172.689       174.937    
  32  0.927737     -0.750074E-01 -0.135599      0.135599       172.968       173.103    
  33  0.505507     -0.682193      -1.23327       1.23327       171.815       173.049    
  34  0.909677     -0.946660E-01 -0.171138      0.171138       173.003       173.175    
  35  0.786508     -0.240152     -0.434148      0.434148       173.514       173.949    
  36  0.186545      -1.67908      -3.03545       3.03545       171.708       174.744    
  37  0.917771     -0.858077E-01 -0.155123      0.155123       169.699       169.854    
  38  0.223043      -1.50039      -2.71241       2.71241       170.115       172.828    
  39  0.416209     -0.876568      -1.58466       1.58466       174.076       175.661    
  40  0.742048     -0.298341     -0.539342      0.539342       173.024       173.563    
  41  0.916531     -0.871589E-01 -0.157566      0.157566       174.487       174.644    
  42  0.528872     -0.637009      -1.15159       1.15159       171.909       173.060    
  43  0.380167     -0.967145      -1.74841       1.74841       174.838       176.586    
  44  0.147221      -1.91582      -3.46343       3.46343       174.168       177.631    
  45  0.325715      -1.12173      -2.02787       2.02787       174.899       176.927    
  46  0.653191     -0.425886     -0.769919      0.769919       171.345       172.115    
  47  0.734482     -0.308590     -0.557870      0.557870       173.042       173.600    
  48  0.812100E-01  -2.51072      -4.53888       4.53888       173.592       178.130    
  49  0.981448     -0.187266E-01 -0.338540E-01  0.338540E-01   173.567       173.601    
  50  0.194830      -1.63563      -2.95689       2.95689       172.730       175.687    
  51  0.369514     -0.995566      -1.79979       1.79979       173.924       175.724    
  52  0.124069      -2.08692      -3.77274       3.77274       175.167       178.940    
  53  0.537017     -0.621726      -1.12396       1.12396       172.867       173.991    
  54  0.963796     -0.368752E-01 -0.666631E-01  0.666631E-01   175.444       175.511    
  55  0.749360     -0.288536     -0.521617      0.521617       176.040       176.561    
  56  0.525033     -0.644294      -1.16476       1.16476       174.331       175.495    
  57  0.895210     -0.110697     -0.200118      0.200118       173.455       173.655    
  58  0.964986     -0.356416E-01 -0.644329E-01  0.644329E-01   175.636       175.700    
  59  0.497682     -0.697793      -1.26147       1.26147       175.329       176.590    
  60  0.401907     -0.911534      -1.64787       1.64787       174.808       176.456    
  61  0.995284     -0.472736E-02 -0.854613E-02  0.854613E-02   176.272       176.280    
  62  0.838243E-01  -2.47903      -4.48160       4.48160       175.683       180.165    
  63  0.387998     -0.946756      -1.71155       1.71155       175.715       177.427    
  64  0.994229     -0.578737E-02 -0.104624E-01  0.104624E-01   176.672       176.683    
  65  0.584059     -0.537753     -0.972152      0.972152       176.450       177.422    
  66  0.732456     -0.311352     -0.562863      0.562863       176.135       176.698    
  67  0.905237     -0.995585E-01 -0.179982      0.179982       178.026       178.206    
  68  0.690381     -0.370512     -0.669813      0.669813       173.636       174.306    
  69  0.435068     -0.832253      -1.50455       1.50455       178.746       180.251    
  70  0.815503     -0.203951     -0.368703      0.368703       175.068       175.437    
  71  0.160565      -1.82906      -3.30657       3.30657       172.255       175.561    
  72  0.928545     -0.741365E-01 -0.134024      0.134024       174.958       175.092    
loop,thermsimp(1:2)       74   6.03867       3.80596    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    466        171.38          0.84          1.12         25.20          0.15          0.05         27.36
Just calling func    0   0         27.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    171.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       74
neval is:      465
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       75
neval is:      465


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      465     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.825653E-01  -2.49417      -4.50896       4.50896       167.454       171.963    
   2  0.822278     -0.195677     -0.353745      0.353745       166.774       167.127    
   3  0.815014     -0.204550     -0.369786      0.369786       167.315       167.685    
   4  0.207771      -1.57132      -2.84063       2.84063       168.307       171.148    
   5  0.392022E-01  -3.23902      -5.85552       5.85552       168.270       174.126    
   6  0.798009     -0.225635     -0.407903      0.407903       167.732       168.140    
   7  0.946935     -0.545251E-01 -0.985706E-01  0.985706E-01   168.966       169.065    
   8  0.143106      -1.94417      -3.51468       3.51468       169.081       172.596    
   9  0.485966     -0.721616      -1.30454       1.30454       169.047       170.352    
  10  0.789895     -0.235855     -0.426379      0.426379       168.913       169.339    
  11  0.191154      -1.65468      -2.99133       2.99133       168.424       171.416    
  12  0.556941     -0.585297      -1.05810       1.05810       168.194       169.252    
  13  0.354923      -1.03585      -1.87262       1.87262       169.699       171.572    
  14  0.206912      -1.57546      -2.84812       2.84812       166.458       169.306    
  15  0.295054E-01  -3.52318      -6.36922       6.36922       164.315       170.684    
  16  0.531987     -0.631135      -1.14097       1.14097       169.989       171.130    
  17  0.552837     -0.592692      -1.07147       1.07147       170.267       171.338    
  18  0.230971      -1.46546      -2.64927       2.64927       170.984       173.633    
  19  0.879168     -0.128779     -0.232808      0.232808       166.873       167.106    
  20  0.463297     -0.769387      -1.39090       1.39090       171.345       172.736    
  21  0.405031     -0.903792      -1.63388       1.63388       170.446       172.080    
  22  0.297262      -1.21314      -2.19312       2.19312       172.127       174.320    
  23  0.418772     -0.870430      -1.57357       1.57357       170.115       171.689    
  24  0.596068     -0.517401     -0.935358      0.935358       171.815       172.751    
  25  0.720685     -0.327553     -0.592150      0.592150       171.909       172.501    
  26  0.756772     -0.278694     -0.503823      0.503823       172.968       173.471    
  27  0.231133      -1.46476      -2.64800       2.64800       173.003       175.651    
  28  0.783190     -0.244381     -0.441792      0.441792       171.324       171.766    
  29  0.913865     -0.900727E-01 -0.162834      0.162834       173.024       173.187    
  30  0.690716     -0.370027     -0.668936      0.668936       173.042       173.711    
  31  0.187671      -1.67306      -3.02457       3.02457       173.567       176.591    
  32  0.558859     -0.581857      -1.05188       1.05188       173.455       174.507    
  33  0.377344     -0.974598      -1.76188       1.76188       173.391       175.153    
  34  0.800863     -0.222065     -0.401451      0.401451       173.514       173.916    
  35  0.717668     -0.331748     -0.599735      0.599735       172.867       173.467    
  36  0.408710     -0.894749      -1.61753       1.61753       172.422       174.040    
  37  0.744828     -0.294602     -0.532583      0.532583       167.155       167.687    
  38  0.366523      -1.00369      -1.81448       1.81448       173.636       175.451    
  39  0.558103     -0.583212      -1.05433       1.05433       174.487       175.541    
  40  0.993425     -0.659714E-02 -0.119263E-01  0.119263E-01   172.969       172.981    
  41  0.892238     -0.114023     -0.206130      0.206130       171.708       171.915    
  42  0.527869     -0.638907      -1.15502       1.15502       172.252       173.407    
  43  0.805965     -0.215715     -0.389971      0.389971       172.689       173.079    
  44  0.425337     -0.854872      -1.54544       1.54544       174.958       176.504    
  45  0.553214     -0.592011      -1.07024       1.07024       175.068       176.138    
  46  0.961775     -0.389749E-01 -0.704589E-01  0.704589E-01   174.331       174.401    
  47  0.721793     -0.326017     -0.589375      0.589375       175.444       176.034    
  48  0.734528     -0.308527     -0.557756      0.557756       172.255       172.813    
  49  0.838033E-03  -7.08445      -12.8073       12.8073       174.076       186.884    
  50  0.898638E-01  -2.40946      -4.35583       4.35583       172.730       177.086    
  51  0.139620      -1.96883      -3.55926       3.55926       175.636       179.195    
  52  0.360088      -1.02141      -1.84650       1.84650       173.924       175.771    
  53  0.167478E-01  -4.08949      -7.39299       7.39299       176.272       183.665    
  54  0.503231     -0.686706      -1.24143       1.24143       174.808       176.050    
  55  0.896724     -0.109007     -0.197064      0.197064       176.040       176.237    
  56  0.986589E-01  -2.31609      -4.18703       4.18703       174.838       179.025    
  57  0.481539     -0.730769      -1.32109       1.32109       175.329       176.650    
  58  0.300347      -1.20282      -2.17446       2.17446       176.672       178.847    
  59  0.920100     -0.832732E-01 -0.150542      0.150542       176.135       176.286    
  60  0.583092     -0.539410     -0.975147      0.975147       174.899       175.874    
  61  0.637761     -0.449792     -0.813135      0.813135       171.272       172.086    
  62  0.436466     -0.829046      -1.49875       1.49875       176.450       177.949    
  63  0.545950     -0.605228      -1.09413       1.09413       175.715       176.809    
  64  0.349946      -1.04998      -1.89815       1.89815       171.506       173.404    
  65  0.505052     -0.683095      -1.23490       1.23490       174.168       175.403    
  66  0.372807     -0.986695      -1.78375       1.78375       173.592       175.375    
  67  0.500748     -0.691652      -1.25037       1.25037       178.026       179.276    
  68  0.463810     -0.768281      -1.38890       1.38890       172.139       173.528    
  69  0.210900      -1.55637      -2.81361       2.81361       175.167       177.981    
  70  0.975658     -0.246436E-01 -0.445508E-01  0.445508E-01   175.683       175.728    
  71  0.316240      -1.15126      -2.08124       2.08124       178.746       180.828    
  72  0.766086     -0.266461     -0.481709      0.481709       171.377       171.859    
loop,thermsimp(1:2)       75   4.50896      0.353745    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    467        177.86          0.84          1.11         25.03          0.27          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       75
neval is:      466
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       76
neval is:      466


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      466     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316695      -1.14982      -2.07864       2.07864       166.873       168.951    
   2  0.382504     -0.961016      -1.73733       1.73733       166.774       168.511    
   3  0.264614      -1.32948      -2.40344       2.40344       167.315       169.719    
   4  0.803265     -0.219071     -0.396037      0.396037       167.155       167.551    
   5  0.171034      -1.76589      -3.19238       3.19238       167.732       170.924    
   6  0.831601     -0.184402     -0.333363      0.333363       168.966       169.300    
   7  0.435344     -0.831619      -1.50340       1.50340       168.194       169.697    
   8  0.709095     -0.343766     -0.621461      0.621461       166.458       167.080    
   9  0.787618     -0.238742     -0.431599      0.431599       168.913       169.344    
  10  0.848523E-01  -2.46684      -4.45957       4.45957       169.047       173.507    
  11  0.863403     -0.146874     -0.265519      0.265519       164.315       164.580    
  12  0.852899E-04  -9.36945      -16.9381       16.9381       169.989       186.927    
  13  0.221667      -1.50658      -2.72360       2.72360       168.307       171.031    
  14  0.474061E-01  -3.04901      -5.51200       5.51200       170.267       175.779    
  15  0.175322      -1.74113      -3.14762       3.14762       168.424       171.572    
  16  0.154041      -1.87053      -3.38156       3.38156       169.699       173.081    
  17  0.808967     -0.211997     -0.383248      0.383248       170.115       170.498    
  18  0.790119     -0.235572     -0.425867      0.425867       171.324       171.750    
  19  0.996800     -0.320514E-02 -0.579426E-02  0.579426E-02   171.377       171.383    
  20  0.238948      -1.43151      -2.58789       2.58789       171.708       174.296    
  21  0.829852     -0.186508     -0.337170      0.337170       167.454       167.792    
  22  0.582759     -0.539981     -0.976180      0.976180       170.446       171.423    
  23  0.284746      -1.25616      -2.27089       2.27089       171.272       173.543    
  24  0.360633      -1.01989      -1.84377       1.84377       171.909       173.753    
  25  0.941077     -0.607306E-01 -0.109789      0.109789       169.081       169.191    
  26  0.383331     -0.958856      -1.73342       1.73342       171.345       173.078    
  27  0.523735     -0.646770      -1.16923       1.16923       171.815       172.985    
  28  0.481378     -0.731103      -1.32169       1.32169       172.255       173.577    
  29  0.841845     -0.172159     -0.311230      0.311230       172.969       173.281    
  30  0.178872      -1.72108      -3.11138       3.11138       172.689       175.801    
  31  0.873649     -0.135077     -0.244192      0.244192       173.024       173.268    
  32  0.805285     -0.216559     -0.391496      0.391496       171.506       171.897    
  33  0.945892E-01  -2.35821      -4.26318       4.26318       172.252       176.516    
  34  0.976997     -0.232719E-01 -0.420710E-01  0.420710E-01   172.867       172.909    
  35  0.347817      -1.05608      -1.90918       1.90918       172.968       174.877    
  36  0.443928     -0.812092      -1.46810       1.46810       172.139       173.607    
  37  0.818184     -0.200668     -0.362769      0.362769       170.984       171.347    
  38  0.849587     -0.163005     -0.294680      0.294680       173.042       173.337    
  39  0.809085E-01  -2.51444      -4.54561       4.54561       173.514       178.060    
  40  0.808062     -0.213117     -0.385273      0.385273       172.422       172.807    
  41  0.663621     -0.410044     -0.741279      0.741279       168.270       169.011    
  42  0.466900     -0.761639      -1.37689       1.37689       172.127       173.504    
  43  0.948620     -0.527466E-01 -0.953555E-01  0.953555E-01   174.331       174.426    
  44  0.274490      -1.29284      -2.33720       2.33720       173.455       175.792    
  45  0.928375E-01  -2.37690      -4.29698       4.29698       173.391       177.688    
  46  0.983714     -0.164200E-01 -0.296842E-01  0.296842E-01   173.592       173.621    
  47  0.424265     -0.857398      -1.55001       1.55001       174.168       175.718    
  48  0.534428     -0.626558      -1.13269       1.13269       173.636       174.769    
  49  0.511115E-01  -2.97374      -5.37595       5.37595       174.487       179.863    
  50  0.881621     -0.125993     -0.227770      0.227770       173.003       173.231    
  51  0.996483     -0.352291E-02 -0.636873E-02  0.636873E-02   175.683       175.689    
  52  0.379271     -0.969504      -1.75267       1.75267       173.924       175.677    
  53  0.844840     -0.168609     -0.304811      0.304811       174.899       175.204    
  54  0.242994      -1.41472      -2.55753       2.55753       175.444       178.002    
  55  0.875393     -0.133082     -0.240586      0.240586       174.808       175.049    
  56  0.565062     -0.570819      -1.03193       1.03193       175.068       176.100    
  57  0.698179     -0.359279     -0.649506      0.649506       176.040       176.689    
  58  0.676907     -0.390222     -0.705444      0.705444       176.135       176.841    
  59  0.130081      -2.03960      -3.68719       3.68719       174.958       178.645    
  60  0.250203      -1.38548      -2.50468       2.50468       173.567       176.072    
  61  0.366784      -1.00298      -1.81319       1.81319       175.329       177.142    
  62  0.868663     -0.140800     -0.254539      0.254539       175.715       175.969    
  63  0.739900     -0.301240     -0.544583      0.544583       172.730       173.275    
  64  0.717636     -0.331793     -0.599816      0.599816       176.450       177.050    
  65  0.519506     -0.654878      -1.18389       1.18389       175.167       176.351    
  66  0.224685      -1.49305      -2.69915       2.69915       176.672       179.371    
  67  0.848282     -0.164543     -0.297461      0.297461       174.838       175.135    
  68  0.818258     -0.200577     -0.362604      0.362604       175.636       175.998    
  69  0.812276     -0.207915     -0.375870      0.375870       178.026       178.402    
  70  0.597137     -0.515609     -0.932120      0.932120       178.746       179.679    
  71  0.402391     -0.910332      -1.64570       1.64570       176.272       177.918    
  72  0.820747     -0.197540     -0.357114      0.357114       177.864       178.221    
loop,thermsimp(1:2)       76   2.07864       1.73733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    468        177.01          0.83          1.11         25.48          0.25          0.05         27.73
Just calling func    0   0         27.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       76
neval is:      467
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       77
neval is:      467


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      467     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807533     -0.213771     -0.386456      0.386456       164.315       164.701    
   2  0.906511     -0.981526E-01 -0.177440      0.177440       166.458       166.636    
   3  0.121906      -2.10450      -3.80452       3.80452       167.155       170.959    
   4  0.849960     -0.162566     -0.293888      0.293888       167.454       167.748    
   5  0.268960      -1.31319      -2.37400       2.37400       166.774       169.148    
   6  0.475959     -0.742424      -1.34216       1.34216       166.873       168.215    
   7  0.359795      -1.02222      -1.84797       1.84797       168.270       170.118    
   8  0.411175     -0.888736      -1.60666       1.60666       169.081       170.688    
   9  0.381099     -0.964695      -1.74398       1.74398       168.966       170.710    
  10  0.390615     -0.940033      -1.69939       1.69939       168.913       170.612    
  11  0.758954     -0.275815     -0.498619      0.498619       168.194       168.693    
  12  0.476320     -0.741666      -1.34079       1.34079       167.315       168.656    
  13  0.658674     -0.417527     -0.754806      0.754806       170.115       170.870    
  14  0.324645      -1.12502      -2.03382       2.03382       167.732       169.766    
  15  0.388092     -0.946513      -1.71111       1.71111       168.307       170.018    
  16  0.910971     -0.932447E-01 -0.168568      0.168568       170.984       171.152    
  17  0.170451E-01  -4.07189      -7.36118       7.36118       171.377       178.739    
  18  0.361549      -1.01736      -1.83918       1.83918       170.446       172.286    
  19  0.134057      -2.00949      -3.63277       3.63277       168.424       172.057    
  20  0.241841      -1.41948      -2.56613       2.56613       171.324       173.890    
  21  0.933265     -0.690659E-01 -0.124858      0.124858       171.506       171.631    
  22  0.142292      -1.94987      -3.52499       3.52499       172.422       175.947    
  23  0.557913     -0.583552      -1.05495       1.05495       172.867       173.922    
  24  0.606116     -0.500684     -0.905139      0.905139       171.815       172.721    
  25  0.802619     -0.219875     -0.397490      0.397490       171.345       171.742    
  26  0.828050E-02  -4.79385      -8.66634       8.66634       169.699       178.365    
  27  0.736740E-01  -2.60811      -4.71494       4.71494       173.003       177.718    
  28  0.772368     -0.258294     -0.466944      0.466944       173.024       173.491    
  29  0.164353      -1.80574      -3.26442       3.26442       172.730       175.994    
  30  0.305683      -1.18521      -2.14262       2.14262       172.969       175.112    
  31  0.490685     -0.711953      -1.28707       1.28707       173.042       174.329    
  32  0.796715     -0.227258     -0.410838      0.410838       172.127       172.538    
  33  0.416735     -0.875305      -1.58238       1.58238       169.047       170.630    
  34  0.336518      -1.08910      -1.96888       1.96888       171.272       173.241    
  35  0.410249     -0.890990      -1.61073       1.61073       172.255       173.866    
  36  0.765564     -0.267142     -0.482941      0.482941       172.139       172.622    
  37  0.852656     -0.159399     -0.288162      0.288162       173.592       173.880    
  38  0.218548      -1.52075      -2.74921       2.74921       171.909       174.658    
  39  0.859169     -0.151790     -0.274406      0.274406       171.708       171.983    
  40  0.140392      -1.96332      -3.54929       3.54929       174.331       177.880    
  41  0.622846     -0.473456     -0.855915      0.855915       173.636       174.492    
  42  0.410234     -0.891028      -1.61080       1.61080       172.968       174.578    
  43  0.459429     -0.777770      -1.40605       1.40605       174.808       176.214    
  44  0.911803     -0.923309E-01 -0.166916      0.166916       174.838       175.005    
  45  0.120848      -2.11322      -3.82029       3.82029       174.899       178.719    
  46  0.474460     -0.745577      -1.34786       1.34786       173.924       175.272    
  47  0.602073     -0.507376     -0.917236      0.917236       175.683       176.600    
  48  0.204387      -1.58774      -2.87032       2.87032       174.168       177.038    
  49  0.822244     -0.195718     -0.353819      0.353819       170.267       170.621    
  50  0.538202     -0.619522      -1.11997       1.11997       173.455       174.575    
  51  0.770233     -0.261062     -0.471950      0.471950       172.689       173.161    
  52  0.661649     -0.413020     -0.746659      0.746659       175.715       176.462    
  53  0.776910     -0.252431     -0.456345      0.456345       175.636       176.092    
  54  0.671075     -0.398874     -0.721086      0.721086       173.567       174.288    
  55  0.734406E-01  -2.61128      -4.72068       4.72068       175.068       179.789    
  56  0.949566     -0.517501E-01 -0.935539E-01  0.935539E-01   175.167       175.261    
  57  0.150244      -1.89549      -3.42668       3.42668       172.252       175.679    
  58  0.928065     -0.746531E-01 -0.134958      0.134958       176.040       176.175    
  59  0.507161     -0.678926      -1.22736       1.22736       176.135       177.363    
  60  0.381390     -0.963934      -1.74260       1.74260       176.450       178.193    
  61  0.295414      -1.21938      -2.20440       2.20440       175.329       177.533    
  62  0.120313E-01  -4.42024      -7.99093       7.99093       173.391       181.382    
  63  0.286670      -1.24942      -2.25871       2.25871       176.272       178.531    
  64  0.557325     -0.584607      -1.05685       1.05685       175.444       176.501    
  65  0.643641     -0.440614     -0.796544      0.796544       173.514       174.311    
  66  0.260021      -1.34699      -2.43510       2.43510       177.864       180.299    
  67  0.316776      -1.14956      -2.07818       2.07818       178.026       180.104    
  68  0.504876     -0.683442      -1.23553       1.23553       174.958       176.194    
  69  0.385321     -0.953678      -1.72406       1.72406       176.672       178.396    
  70  0.853972     -0.157857     -0.285375      0.285375       178.746       179.032    
  71  0.567771E-01  -2.86862      -5.18591       5.18591       174.487       179.673    
  72  0.905899     -0.988271E-01 -0.178660      0.178660       177.015       177.193    
loop,thermsimp(1:2)       77  0.386456      0.177440    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    469        167.08          0.84          1.11         25.15          0.16          0.05         27.31
Just calling func    0   0         27.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    470        164.31          0.84          1.11         25.20          0.02          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       77
neval is:      469
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       78
neval is:      469


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      469     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.511642     -0.670131      -1.21146       1.21146       164.315       165.526    
   2  0.243468      -1.41277      -2.55401       2.55401       166.458       169.012    
   3  0.259231      -1.35003      -2.44060       2.44060       167.454       169.895    
   4  0.411864     -0.887061      -1.60363       1.60363       166.873       168.476    
   5  0.192374      -1.64831      -2.97983       2.97983       167.315       170.295    
   6  0.504542     -0.684104      -1.23672       1.23672       168.194       169.431    
   7  0.404455E-01  -3.20780      -5.79907       5.79907       166.774       172.573    
   8  0.157113      -1.85079      -3.34587       3.34587       167.732       171.078    
   9  0.833701     -0.181880     -0.328803      0.328803       168.307       168.636    
  10  0.878720     -0.129289     -0.233729      0.233729       168.270       168.504    
  11  0.237147      -1.43908      -2.60157       2.60157       168.913       171.514    
  12  0.936993     -0.650795E-01 -0.117651      0.117651       170.267       170.385    
  13  0.651018     -0.429219     -0.775943      0.775943       169.047       169.823    
  14  0.366374      -1.00410      -1.81522       1.81522       169.081       170.896    
  15  0.484826E-02  -5.32914      -9.63403       9.63403       168.966       178.600    
  16  0.509486     -0.674354      -1.21910       1.21910       170.115       171.334    
  17  0.685690     -0.377329     -0.682137      0.682137       167.155       167.837    
  18  0.321855E-01  -3.43624      -6.21205       6.21205       170.984       177.196    
  19  0.442039     -0.816357      -1.47581       1.47581       171.506       172.981    
  20  0.209598      -1.56256      -2.82481       2.82481       171.345       174.169    
  21  0.378107     -0.972579      -1.75823       1.75823       171.708       173.467    
  22  0.604565     -0.503247     -0.909771      0.909771       168.424       169.334    
  23  0.178047      -1.72571      -3.11974       3.11974       170.446       173.566    
  24  0.784915     -0.242179     -0.437813      0.437813       172.127       172.565    
  25  0.685234     -0.377994     -0.683339      0.683339       172.139       172.823    
  26  0.423928     -0.858193      -1.55144       1.55144       171.815       173.367    
  27  0.413814E-01  -3.18492      -5.75772       5.75772       172.689       178.447    
  28  0.788249     -0.237942     -0.430152      0.430152       171.272       171.703    
  29  0.212924      -1.54682      -2.79635       2.79635       173.024       175.820    
  30  0.934569     -0.676697E-01 -0.122334      0.122334       172.255       172.377    
  31  0.361270      -1.01813      -1.84058       1.84058       173.592       175.432    
  32  0.755006     -0.281030     -0.508047      0.508047       171.324       171.832    
  33  0.454810     -0.787875      -1.42432       1.42432       172.867       174.292    
  34  0.152938      -1.87772      -3.39455       3.39455       173.567       176.961    
  35  0.376573     -0.976642      -1.76558       1.76558       173.514       175.280    
  36  0.571848E-01  -2.86147      -5.17297       5.17297       173.042       178.215    
  37  0.995942     -0.406615E-02 -0.735079E-02  0.735079E-02   173.636       173.644    
  38  0.834052     -0.181460     -0.328043      0.328043       173.455       173.783    
  39  0.481290     -0.731286      -1.32202       1.32202       172.968       174.290    
  40  0.289962E-01  -3.54059      -6.40069       6.40069       171.909       178.309    
  41  0.897798     -0.107810     -0.194900      0.194900       174.838       175.033    
  42  0.721121     -0.326948     -0.591058      0.591058       172.969       173.560    
  43  0.946509     -0.549753E-01 -0.993845E-01  0.993845E-01   175.167       175.266    
  44  0.134166      -2.00868      -3.63129       3.63129       173.924       177.556    
  45  0.747061     -0.291608     -0.527170      0.527170       172.252       172.780    
  46  0.284226      -1.25799      -2.27419       2.27419       172.422       174.696    
  47  0.785305     -0.241683     -0.436916      0.436916       172.730       173.167    
  48  0.240863      -1.42353      -2.57345       2.57345       175.636       178.209    
  49  0.289983      -1.23793      -2.23794       2.23794       176.040       178.278    
  50  0.847789     -0.165124     -0.298512      0.298512       174.958       175.257    
  51  0.981904     -0.182614E-01 -0.330131E-01  0.330131E-01   174.808       174.841    
  52  0.193174      -1.64416      -2.97232       2.97232       175.715       178.687    
  53  0.657957     -0.418616     -0.756775      0.756775       175.444       176.201    
  54  0.477119     -0.739990      -1.33776       1.33776       175.683       177.021    
  55  0.751550     -0.285617     -0.516340      0.516340       174.168       174.684    
  56  0.375761     -0.978801      -1.76948       1.76948       177.015       178.784    
  57  0.896165     -0.109631     -0.198191      0.198191       176.135       176.333    
  58  0.222381      -1.50336      -2.71778       2.71778       175.329       178.046    
  59  0.296050E-01  -3.51981      -6.36313       6.36313       173.003       179.367    
  60  0.433703     -0.835396      -1.51023       1.51023       174.331       175.841    
  61  0.747265     -0.291335     -0.526677      0.526677       176.450       176.977    
  62  0.165490      -1.79885      -3.25196       3.25196       169.699       172.951    
  63  0.717756     -0.331626     -0.599514      0.599514       176.672       177.272    
  64  0.556048     -0.586901      -1.06100       1.06100       176.272       177.333    
  65  0.543566     -0.609604      -1.10204       1.10204       174.899       176.001    
  66  0.260629      -1.34466      -2.43088       2.43088       171.377       173.808    
  67  0.989115     -0.109442E-01 -0.197849E-01  0.197849E-01   178.746       178.766    
  68  0.923701     -0.793666E-01 -0.143479      0.143479       174.487       174.630    
  69  0.205895      -1.58039      -2.85703       2.85703       175.068       177.925    
  70  0.923336     -0.797623E-01 -0.144194      0.144194       178.026       178.170    
  71  0.559233E-01  -2.88377      -5.21330       5.21330       177.864       183.077    
  72  0.798275     -0.225302     -0.407302      0.407302       164.308       164.716    
loop,thermsimp(1:2)       78   1.21146       2.55401    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    471        174.03          0.84          1.11         25.16          0.05          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       78
neval is:      470
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       79
neval is:      470


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      470     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674234     -0.394178     -0.712597      0.712597       164.308       165.021    
   2  0.763241     -0.270181     -0.488434      0.488434       164.315       164.803    
   3  0.181180      -1.70826      -3.08821       3.08821       167.155       170.243    
   4  0.986466     -0.136262E-01 -0.246335E-01  0.246335E-01   166.873       166.897    
   5  0.907914     -0.966062E-01 -0.174645      0.174645       168.270       168.445    
   6  0.686562     -0.376058     -0.679839      0.679839       168.307       168.987    
   7  0.269744E-01  -3.61287      -6.53135       6.53135       166.458       172.990    
   8  0.305757      -1.18497      -2.14218       2.14218       168.424       170.566    
   9  0.678790     -0.387443     -0.700421      0.700421       168.194       168.894    
  10  0.376044     -0.978048      -1.76812       1.76812       169.047       170.815    
  11  0.569163     -0.563589      -1.01886       1.01886       167.454       168.473    
  12  0.700219E-02  -4.96153      -8.96947       8.96947       167.315       176.285    
  13  0.271434      -1.30403      -2.35744       2.35744       170.267       172.624    
  14  0.412709     -0.885014      -1.59993       1.59993       169.081       170.681    
  15  0.230294      -1.46840      -2.65458       2.65458       167.732       170.387    
  16  0.453167     -0.791494      -1.43086       1.43086       170.115       171.546    
  17  0.225846E-01  -3.79049      -6.85246       6.85246       168.913       175.765    
  18  0.295035E-01  -3.52324      -6.36933       6.36933       171.272       177.642    
  19  0.766595     -0.265797     -0.480508      0.480508       171.324       171.805    
  20  0.995962     -0.404634E-02 -0.731498E-02  0.731498E-02   172.255       172.262    
  21  0.816964     -0.202160     -0.365466      0.365466       172.127       172.493    
  22  0.376195     -0.977647      -1.76739       1.76739       166.774       168.541    
  23  0.557992     -0.583410      -1.05469       1.05469       172.252       173.307    
  24  0.643422     -0.440955     -0.797160      0.797160       172.139       172.937    
  25  0.999852     -0.147642E-03 -0.266907E-03  0.266907E-03   169.699       169.699    
  26  0.644170     -0.439793     -0.795059      0.795059       171.506       172.301    
  27  0.216981      -1.52794      -2.76222       2.76222       172.730       175.492    
  28  0.469613     -0.755845      -1.36642       1.36642       171.815       173.182    
  29  0.241394      -1.42133      -2.56948       2.56948       171.708       174.278    
  30  0.598509     -0.513314     -0.927971      0.927971       172.969       173.897    
  31  0.671670     -0.397989     -0.719485      0.719485       170.446       171.166    
  32  0.508456     -0.676377      -1.22276       1.22276       173.636       174.859    
  33  0.142355      -1.94943      -3.52419       3.52419       173.455       176.979    
  34  0.314602      -1.15645      -2.09063       2.09063       171.377       173.468    
  35  0.595792     -0.517863     -0.936194      0.936194       171.345       172.281    
  36  0.980752     -0.194358E-01 -0.351361E-01  0.351361E-01   172.968       173.003    
  37  0.574834     -0.553674      -1.00093       1.00093       172.867       173.868    
  38  0.176457      -1.73468      -3.13596       3.13596       174.487       177.623    
  39  0.972462     -0.279243E-01 -0.504816E-01  0.504816E-01   174.168       174.218    
  40  0.914299     -0.895977E-01 -0.161975      0.161975       172.422       172.584    
  41  0.844829E-01  -2.47121      -4.46745       4.46745       174.808       179.276    
  42  0.173441E-01  -4.05450      -7.32975       7.32975       174.838       182.168    
  43  0.558790     -0.581981      -1.05211       1.05211       174.958       176.010    
  44  0.102972      -2.27330      -4.10968       4.10968       175.167       179.277    
  45  0.479128E-01  -3.03837      -5.49278       5.49278       173.514       179.007    
  46  0.955710     -0.453003E-01 -0.818941E-01  0.818941E-01   173.592       173.673    
  47  0.768826     -0.262891     -0.475255      0.475255       173.024       173.499    
  48  0.634123     -0.455512     -0.823476      0.823476       174.331       175.154    
  49  0.460722     -0.774961      -1.40098       1.40098       174.899       176.300    
  50  0.376372     -0.977178      -1.76655       1.76655       175.444       177.211    
  51  0.784580     -0.242607     -0.438585      0.438585       176.135       176.574    
  52  0.870295     -0.138923     -0.251145      0.251145       173.567       173.818    
  53  0.554002     -0.590587      -1.06767       1.06767       176.450       177.518    
  54  0.186441      -1.67964      -3.03646       3.03646       175.683       178.719    
  55  0.267480      -1.31871      -2.38397       2.38397       170.984       173.368    
  56  0.867677     -0.141936     -0.256592      0.256592       176.672       176.929    
  57  0.172397      -1.75795      -3.17803       3.17803       176.272       179.450    
  58  0.959742     -0.410907E-01 -0.742840E-01  0.742840E-01   173.924       173.999    
  59  0.806336     -0.215255     -0.389138      0.389138       175.068       175.457    
  60  0.605158     -0.502266     -0.907998      0.907998       175.329       176.237    
  61  0.953035     -0.481032E-01 -0.869611E-01  0.869611E-01   178.026       178.113    
  62  0.835597     -0.179609     -0.324697      0.324697       175.636       175.960    
  63  0.116176      -2.15265      -3.89156       3.89156       173.042       176.933    
  64  0.409566     -0.892657      -1.61375       1.61375       176.040       177.654    
  65  0.988477     -0.115901E-01 -0.209527E-01  0.209527E-01   171.909       171.930    
  66  0.872219     -0.136715     -0.247154      0.247154       172.689       172.936    
  67  0.334045      -1.09648      -1.98222       1.98222       168.966       170.948    
  68  0.694069     -0.365184     -0.660180      0.660180       175.715       176.375    
  69  0.802116     -0.220502     -0.398624      0.398624       178.746       179.145    
  70  0.569950     -0.562207      -1.01636       1.01636       177.015       178.031    
  71  0.586288     -0.533944     -0.965265      0.965265       173.003       173.969    
  72  0.849877     -0.162664     -0.294064      0.294064       174.034       174.328    
loop,thermsimp(1:2)       79  0.712597      0.488434    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    472        168.51          0.84          1.11         25.07          0.27          0.05         27.33
Just calling func    0   0         27.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    168.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       79
neval is:      471
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       80
neval is:      471


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      471     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.684247     -0.379436     -0.685945      0.685945       164.315       165.000    
   2  0.345348      -1.06320      -1.92206       1.92206       164.308       166.230    
   3  0.950053     -0.512378E-01 -0.926279E-01  0.926279E-01   166.873       166.965    
   4  0.837893     -0.176865     -0.319738      0.319738       168.270       168.590    
   5  0.333546      -1.09797      -1.98492       1.98492       167.454       169.439    
   6  0.161688      -1.82209      -3.29397       3.29397       166.774       170.068    
   7  0.617647     -0.481838     -0.871069      0.871069       168.194       169.065    
   8  0.401140     -0.913446      -1.65133       1.65133       168.307       169.958    
   9  0.358257E-01  -3.32909      -6.01834       6.01834       169.699       175.717    
  10  0.349088E-01  -3.35502      -6.06521       6.06521       167.155       173.220    
  11  0.152040      -1.88361      -3.40519       3.40519       167.732       171.137    
  12  0.703870     -0.351161     -0.634830      0.634830       168.424       169.059    
  13  0.550338     -0.597222      -1.07966       1.07966       169.081       170.161    
  14  0.320062      -1.13924      -2.05952       2.05952       169.047       171.107    
  15  0.842058     -0.171906     -0.310772      0.310772       168.966       169.277    
  16  0.872615     -0.136260     -0.246332      0.246332       170.446       170.693    
  17  0.687324     -0.374949     -0.677835      0.677835       170.115       170.793    
  18  0.707329     -0.346259     -0.625969      0.625969       171.324       171.950    
  19  0.781599     -0.246413     -0.445466      0.445466       171.909       172.354    
  20  0.257984      -1.35486      -2.44931       2.44931       172.255       174.704    
  21  0.624920     -0.470132     -0.849905      0.849905       171.345       172.195    
  22  0.816734     -0.202441     -0.365974      0.365974       171.506       171.872    
  23  0.740445     -0.300504     -0.543253      0.543253       172.127       172.671    
  24  0.433128     -0.836721      -1.51263       1.51263       172.422       173.935    
  25  0.964932E-01  -2.33828      -4.22715       4.22715       170.267       174.494    
  26  0.336813      -1.08823      -1.96730       1.96730       172.689       174.657    
  27  0.631668     -0.459391     -0.830488      0.830488       172.139       172.970    
  28  0.173511      -1.75152      -3.16640       3.16640       166.458       169.625    
  29  0.714113     -0.336715     -0.608714      0.608714       172.968       173.576    
  30  0.856732     -0.154630     -0.279540      0.279540       171.815       172.095    
  31  0.871530     -0.137505     -0.248581      0.248581       172.252       172.501    
  32  0.524684     -0.644958      -1.16596       1.16596       170.984       172.150    
  33  0.199462      -1.61213      -2.91442       2.91442       171.377       174.292    
  34  0.848275     -0.164551     -0.297476      0.297476       173.024       173.321    
  35  0.836784     -0.178190     -0.322132      0.322132       173.592       173.914    
  36  0.478860E-01  -3.03893      -5.49379       5.49379       173.567       179.061    
  37  0.297469      -1.21245      -2.19186       2.19186       172.867       175.059    
  38  0.649198     -0.432018     -0.781003      0.781003       172.969       173.750    
  39  0.657692     -0.419018     -0.757502      0.757502       173.003       173.761    
  40  0.684263     -0.379413     -0.685904      0.685904       173.924       174.610    
  41  0.249508      -1.38826      -2.50971       2.50971       174.168       176.678    
  42  0.745618     -0.293542     -0.530666      0.530666       171.708       172.239    
  43  0.338359      -1.08365      -1.95902       1.95902       174.034       175.993    
  44  0.472339     -0.750059      -1.35596       1.35596       173.636       174.992    
  45  0.796486     -0.227546     -0.411359      0.411359       174.331       174.742    
  46  0.241988      -1.41887      -2.56503       2.56503       175.068       177.633    
  47  0.162775      -1.81539      -3.28186       3.28186       172.730       176.012    
  48  0.749633     -0.288171     -0.520957      0.520957       168.913       169.434    
  49  0.942194     -0.595438E-01 -0.107643      0.107643       175.636       175.743    
  50  0.823760E-01  -2.49646      -4.51311       4.51311       174.958       179.471    
  51  0.437045     -0.827720      -1.49635       1.49635       175.329       176.825    
  52  0.812234     -0.207967     -0.375963      0.375963       167.315       167.691    
  53  0.690291     -0.370642     -0.670047      0.670047       174.899       175.569    
  54  0.592810     -0.522881     -0.945267      0.945267       175.715       176.660    
  55  0.547326     -0.602712      -1.08958       1.08958       176.135       177.225    
  56  0.132779      -2.01907      -3.65007       3.65007       176.672       180.322    
  57  0.613048     -0.489313     -0.884581      0.884581       173.042       173.926    
  58  0.569441     -0.563101      -1.01798       1.01798       173.455       174.473    
  59  0.927770     -0.749713E-01 -0.135533      0.135533       175.444       175.580    
  60  0.788850E-01  -2.53976      -4.59139       4.59139       176.450       181.042    
  61  0.762671     -0.270929     -0.489786      0.489786       174.487       174.977    
  62  0.128616      -2.05093      -3.70767       3.70767       171.272       174.980    
  63  0.297022E-01  -3.51653      -6.35720       6.35720       176.040       182.397    
  64  0.145152      -1.92997      -3.48901       3.48901       177.015       180.504    
  65  0.154969      -1.86453      -3.37071       3.37071       178.026       181.397    
  66  0.671761     -0.397853     -0.719239      0.719239       175.683       176.402    
  67  0.188347E-02  -6.27464      -11.3433       11.3433       173.514       184.858    
  68  0.645191     -0.438208     -0.792195      0.792195       178.746       179.539    
  69  0.402121     -0.911002      -1.64691       1.64691       174.808       176.455    
  70  0.462446     -0.771225      -1.39422       1.39422       175.167       176.561    
  71  0.406948     -0.899069      -1.62534       1.62534       176.272       177.897    
  72  0.923566     -0.795125E-01 -0.143743      0.143743       168.506       168.649    
loop,thermsimp(1:2)       80  0.685945       1.92206    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    473        170.24          0.84          1.11         25.05          0.21          0.05         27.26
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    170.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       80
neval is:      472
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       81
neval is:      472


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      472     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.212099      -1.55070      -2.80336       2.80336       164.315       167.118    
   2  0.790720E-01  -2.53740      -4.58711       4.58711       164.308       168.895    
   3  0.474562     -0.745363      -1.34747       1.34747       166.873       168.220    
   4  0.898144E-01  -2.41001      -4.35682       4.35682       167.315       171.672    
   5  0.458101     -0.780666      -1.41129       1.41129       168.270       169.681    
   6  0.931196     -0.712852E-01 -0.128870      0.128870       168.506       168.634    
   7  0.205708      -1.58130      -2.85867       2.85867       168.424       171.283    
   8  0.733185     -0.310357     -0.561065      0.561065       168.194       168.755    
   9  0.169450      -1.77520      -3.20921       3.20921       168.966       172.175    
  10  0.474919     -0.744612      -1.34611       1.34611       168.913       170.259    
  11  0.843615     -0.170059     -0.307432      0.307432       167.454       167.762    
  12  0.876719     -0.131569     -0.237850      0.237850       166.458       166.696    
  13  0.190440E-01  -3.96100      -7.16071       7.16071       168.307       175.468    
  14  0.303072      -1.19379      -2.15813       2.15813       166.774       168.932    
  15  0.469764     -0.755525      -1.36584       1.36584       169.081       170.447    
  16  0.571967     -0.558673      -1.00997       1.00997       170.446       171.456    
  17  0.672551E-01  -2.69926      -4.87973       4.87973       170.115       174.995    
  18  0.255734      -1.36362      -2.46515       2.46515       169.047       171.512    
  19  0.984593E-01  -2.31811      -4.19069       4.19069       167.732       171.923    
  20  0.106790      -2.23689      -4.04385       4.04385       171.506       175.550    
  21  0.569872     -0.562343      -1.01661       1.01661       171.324       172.341    
  22  0.535167     -0.625176      -1.13019       1.13019       171.815       172.946    
  23  0.874592     -0.133997     -0.242241      0.242241       170.984       171.226    
  24  0.437299     -0.827137      -1.49530       1.49530       171.345       172.840    
  25  0.859028     -0.151954     -0.274703      0.274703       171.708       171.983    
  26  0.766029     -0.266535     -0.481842      0.481842       171.909       172.391    
  27  0.702099     -0.353680     -0.639385      0.639385       172.252       172.892    
  28  0.161598      -1.82264      -3.29498       3.29498       172.127       175.422    
  29  0.212172      -1.55036      -2.80274       2.80274       172.139       174.942    
  30  0.776087     -0.253491     -0.458261      0.458261       167.155       167.613    
  31  0.346547      -1.05974      -1.91579       1.91579       173.024       174.940    
  32  0.175995      -1.73730      -3.14069       3.14069       172.968       176.108    
  33  0.310769      -1.16870      -2.11279       2.11279       172.969       175.082    
  34  0.716675     -0.333133     -0.602240      0.602240       173.003       173.606    
  35  0.977373E-01  -2.32547      -4.20400       4.20400       173.592       177.796    
  36  0.191888      -1.65084      -2.98440       2.98440       173.042       176.026    
  37  0.323564      -1.12836      -2.03985       2.03985       172.422       174.462    
  38  0.289367      -1.24006      -2.24178       2.24178       171.377       173.619    
  39  0.209149      -1.56471      -2.82869       2.82869       173.455       176.284    
  40  0.879527     -0.128371     -0.232070      0.232070       170.267       170.499    
  41  0.148061      -1.91013      -3.45314       3.45314       173.924       177.377    
  42  0.432943     -0.837149      -1.51340       1.51340       172.689       174.203    
  43  0.558965     -0.581668      -1.05154       1.05154       172.255       173.306    
  44  0.496743     -0.699682      -1.26489       1.26489       174.331       175.595    
  45  0.791585     -0.233718     -0.422516      0.422516       174.487       174.909    
  46  0.394764E-01  -3.23205      -5.84291       5.84291       171.272       177.115    
  47  0.665239E-01  -2.71019      -4.89950       4.89950       173.636       178.536    
  48  0.309823      -1.17176      -2.11830       2.11830       172.867       174.986    
  49  0.121985      -2.10386      -3.80336       3.80336       174.899       178.702    
  50  0.533360     -0.628558      -1.13631       1.13631       175.444       176.581    
  51  0.699667     -0.357151     -0.645658      0.645658       169.699       170.345    
  52  0.824712     -0.192721     -0.348402      0.348402       175.636       175.984    
  53  0.751113     -0.286199     -0.517392      0.517392       174.034       174.551    
  54  0.625810     -0.468709     -0.847333      0.847333       172.730       173.577    
  55  0.340567      -1.07714      -1.94726       1.94726       175.683       177.630    
  56  0.649406     -0.431697     -0.780423      0.780423       174.808       175.589    
  57  0.596679E-01  -2.81896      -5.09613       5.09613       175.167       180.263    
  58  0.104669      -2.25695      -4.08012       4.08012       175.715       179.795    
  59  0.870639     -0.138528     -0.250430      0.250430       174.168       174.418    
  60  0.199273      -1.61308      -2.91613       2.91613       175.329       178.245    
  61  0.714965     -0.335521     -0.606556      0.606556       176.135       176.742    
  62  0.431641     -0.840162      -1.51885       1.51885       175.068       176.587    
  63  0.208886      -1.56597      -2.83096       2.83096       176.272       179.103    
  64  0.859431     -0.151485     -0.273855      0.273855       173.567       173.841    
  65  0.256734      -1.35972      -2.45810       2.45810       174.958       177.416    
  66  0.243508      -1.41261      -2.55371       2.55371       178.746       181.300    
  67  0.628736     -0.464044     -0.838900      0.838900       176.672       177.511    
  68  0.392666     -0.934795      -1.68993       1.68993       177.015       178.704    
  69  0.758215     -0.276788     -0.500378      0.500378       176.450       176.951    
  70  0.868588     -0.140886     -0.254694      0.254694       178.026       178.281    
  71  0.875499E-01  -2.43555      -4.40299       4.40299       176.040       180.443    
  72  0.324605      -1.12515      -2.03404       2.03404       170.242       172.276    
loop,thermsimp(1:2)       81   2.80336       4.58711    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    474        174.47          0.84          1.11         25.11          0.18          0.05         27.29
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       81
neval is:      473
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       82
neval is:      473


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      473     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.879977     -0.127859     -0.231144      0.231144       166.458       166.689    
   2  0.617618     -0.481886     -0.871154      0.871154       164.315       165.186    
   3  0.816358E-01  -2.50549      -4.52943       4.52943       167.155       171.684    
   4  0.265705      -1.32537      -2.39601       2.39601       167.454       169.850    
   5  0.156102      -1.85725      -3.35754       3.35754       166.873       170.230    
   6  0.155187      -1.86313      -3.36816       3.36816       168.506       171.874    
   7  0.650347     -0.430249     -0.777806      0.777806       168.194       168.972    
   8  0.801207     -0.221636     -0.400674      0.400674       164.308       164.709    
   9  0.935908     -0.662378E-01 -0.119745      0.119745       166.774       166.893    
  10  0.764783E-01  -2.57075      -4.64741       4.64741       168.270       172.918    
  11  0.819025     -0.199640     -0.360910      0.360910       168.913       169.274    
  12  0.175545      -1.73986      -3.14533       3.14533       169.699       172.844    
  13  0.945804     -0.557201E-01 -0.100731      0.100731       169.081       169.182    
  14  0.254592      -1.36809      -2.47324       2.47324       170.267       172.740    
  15  0.969942     -0.305188E-01 -0.551719E-01  0.551719E-01   170.984       171.039    
  16  0.751504     -0.285679     -0.516451      0.516451       168.424       168.941    
  17  0.129569E-01  -4.34612      -7.85694       7.85694       170.446       178.303    
  18  0.591393     -0.525275     -0.949593      0.949593       169.047       169.997    
  19  0.994087     -0.593042E-02 -0.107210E-01  0.107210E-01   167.315       167.326    
  20  0.697601     -0.360108     -0.651004      0.651004       167.732       168.383    
  21  0.633469     -0.456544     -0.825341      0.825341       171.708       172.534    
  22  0.391583     -0.937557      -1.69492       1.69492       168.966       170.661    
  23  0.599575     -0.511533     -0.924752      0.924752       170.242       171.167    
  24  0.481571     -0.730701      -1.32096       1.32096       171.324       172.645    
  25  0.420827     -0.865533      -1.56471       1.56471       171.909       173.474    
  26  0.254691      -1.36770      -2.47254       2.47254       171.345       173.817    
  27  0.950472     -0.507971E-01 -0.918311E-01  0.918311E-01   172.252       172.344    
  28  0.113706      -2.17414      -3.93042       3.93042       171.815       175.746    
  29  0.172661      -1.75643      -3.17527       3.17527       172.255       175.430    
  30  0.718739     -0.330257     -0.597040      0.597040       172.730       173.327    
  31  0.564748     -0.571375      -1.03293       1.03293       173.003       174.036    
  32  0.638696     -0.448327     -0.810486      0.810486       171.377       172.188    
  33  0.342849      -1.07047      -1.93519       1.93519       173.567       175.502    
  34  0.401270     -0.913121      -1.65074       1.65074       172.689       174.340    
  35  0.918599     -0.849058E-01 -0.153493      0.153493       174.168       174.321    
  36  0.566118     -0.568953      -1.02856       1.02856       172.422       173.451    
  37  0.187554      -1.67369      -3.02570       3.02570       174.034       177.060    
  38  0.749582E-01  -2.59082      -4.68370       4.68370       174.487       179.171    
  39  0.286085      -1.25147      -2.26241       2.26241       173.024       175.286    
  40  0.412337     -0.885914      -1.60156       1.60156       172.139       173.741    
  41  0.455811     -0.785678      -1.42035       1.42035       172.867       174.288    
  42  0.676067     -0.391462     -0.707687      0.707687       170.115       170.823    
  43  0.452490     -0.792991      -1.43357       1.43357       172.969       174.403    
  44  0.131068E-01  -4.33463      -7.83615       7.83615       172.127       179.963    
  45  0.880822     -0.126900     -0.229410      0.229410       168.307       168.536    
  46  0.381257E-01  -3.26687      -5.90585       5.90585       171.506       177.412    
  47  0.285013      -1.25522      -2.26919       2.26919       174.808       177.077    
  48  0.279597      -1.27441      -2.30388       2.30388       174.331       176.634    
  49  0.652608     -0.426779     -0.771533      0.771533       175.636       176.407    
  50  0.300945      -1.20083      -2.17086       2.17086       173.042       175.213    
  51  0.961982     -0.387594E-01 -0.700694E-01  0.700694E-01   172.968       173.038    
  52  0.729062E-01  -2.61858      -4.73388       4.73388       173.455       178.189    
  53  0.109451      -2.21228      -3.99936       3.99936       175.444       179.444    
  54  0.681950     -0.382798     -0.692024      0.692024       175.068       175.760    
  55  0.897690     -0.107930     -0.195116      0.195116       176.135       176.330    
  56  0.961917     -0.388267E-01 -0.701910E-01  0.701910E-01   176.450       176.520    
  57  0.466988E-01  -3.06404      -5.53917       5.53917       171.272       176.812    
  58  0.196480      -1.62720      -2.94165       2.94165       173.924       176.866    
  59  0.306123      -1.18377      -2.14002       2.14002       174.958       177.098    
  60  0.973839     -0.265094E-01 -0.479238E-01  0.479238E-01   176.672       176.720    
  61  0.149937      -1.89754      -3.43038       3.43038       175.683       179.113    
  62  0.583998     -0.537858     -0.972342      0.972342       173.592       174.564    
  63  0.574190     -0.554795      -1.00296       1.00296       175.329       176.332    
  64  0.974106E-01  -2.32882      -4.21005       4.21005       178.026       182.236    
  65  0.523014     -0.648148      -1.17172       1.17172       173.636       174.808    
  66  0.907528     -0.970313E-01 -0.175413      0.175413       174.899       175.075    
  67  0.525085     -0.644196      -1.16458       1.16458       177.015       178.179    
  68  0.758972     -0.275790     -0.498575      0.498575       176.272       176.770    
  69  0.796588     -0.227418     -0.411127      0.411127       175.715       176.126    
  70  0.124705      -2.08181      -3.76349       3.76349       175.167       178.931    
  71  0.557577E-01  -2.88674      -5.21866       5.21866       176.040       181.258    
  72  0.379458     -0.969011      -1.75178       1.75178       174.467       176.218    
loop,thermsimp(1:2)       82  0.231144      0.871154    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    475        173.93          0.84          1.11         25.04          0.28          0.05         27.32
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       82
neval is:      474
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       83
neval is:      474


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      474     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.552115     -0.593999      -1.07383       1.07383       164.308       165.382    
   2  0.319086      -1.14229      -2.06504       2.06504       164.315       166.380    
   3  0.987809     -0.122656E-01 -0.221738E-01  0.221738E-01   166.458       166.480    
   4  0.730684     -0.313774     -0.567242      0.567242       166.774       167.341    
   5  0.330217      -1.10801      -2.00306       2.00306       167.315       169.318    
   6  0.228208      -1.47750      -2.67102       2.67102       167.732       170.403    
   7  0.531449     -0.632148      -1.14280       1.14280       168.307       169.450    
   8  0.291369      -1.23317      -2.22932       2.22932       168.424       170.654    
   9  0.868373     -0.141133     -0.255142      0.255142       168.194       168.449    
  10  0.750840     -0.286563     -0.518049      0.518049       169.081       169.599    
  11  0.922302     -0.808828E-01 -0.146220      0.146220       168.913       169.059    
  12  0.835004     -0.180318     -0.325980      0.325980       167.454       167.780    
  13  0.839915     -0.174454     -0.315379      0.315379       169.047       169.363    
  14  0.436966     -0.827899      -1.49668       1.49668       166.873       168.369    
  15  0.960108     -0.407096E-01 -0.735949E-01  0.735949E-01   168.966       169.040    
  16  0.651732     -0.428122     -0.773960      0.773960       170.115       170.889    
  17  0.309700      -1.17215      -2.11902       2.11902       170.984       173.103    
  18  0.526921     -0.640704      -1.15827       1.15827       170.242       171.400    
  19  0.853737     -0.158132     -0.285871      0.285871       167.155       167.440    
  20  0.266678      -1.32171      -2.38940       2.38940       168.506       170.895    
  21  0.299571      -1.20541      -2.17914       2.17914       171.377       173.556    
  22  0.846742     -0.166360     -0.300745      0.300745       172.252       172.553    
  23  0.818359     -0.200455     -0.362383      0.362383       171.708       172.071    
  24  0.234883      -1.44867      -2.61891       2.61891       171.324       173.943    
  25  0.986151     -0.139454E-01 -0.252106E-01  0.252106E-01   170.267       170.292    
  26  0.974313     -0.260229E-01 -0.470442E-01  0.470442E-01   169.699       169.746    
  27  0.620281E-01  -2.78017      -5.02600       5.02600       168.270       173.296    
  28  0.368305E-01  -3.30143      -5.96833       5.96833       172.968       178.936    
  29  0.111356      -2.19502      -3.96816       3.96816       172.730       176.698    
  30  0.617410     -0.482223     -0.871764      0.871764       172.422       173.294    
  31  0.275412      -1.28949      -2.33114       2.33114       171.909       174.240    
  32  0.173447      -1.75188      -3.16706       3.16706       172.139       175.306    
  33  0.570479     -0.561280      -1.01468       1.01468       171.345       172.359    
  34  0.359525      -1.02297      -1.84933       1.84933       173.003       174.853    
  35  0.933691     -0.686097E-01 -0.124033      0.124033       172.867       172.991    
  36  0.510279     -0.672797      -1.21628       1.21628       174.168       175.384    
  37  0.347312      -1.05753      -1.91181       1.91181       172.689       174.601    
  38  0.491006E-01  -3.01388      -5.44851       5.44851       172.969       178.418    
  39  0.410429     -0.890552      -1.60994       1.60994       173.592       175.202    
  40  0.344238      -1.06642      -1.92788       1.92788       173.636       175.564    
  41  0.472799     -0.749085      -1.35420       1.35420       174.899       176.253    
  42  0.785791     -0.241064     -0.435796      0.435796       173.042       173.478    
  43  0.925744     -0.771577E-01 -0.139486      0.139486       173.024       173.163    
  44  0.529151     -0.636482      -1.15063       1.15063       172.255       173.406    
  45  0.815207     -0.204313     -0.369358      0.369358       173.567       173.936    
  46  0.825373     -0.191920     -0.346953      0.346953       171.815       172.162    
  47  0.876860     -0.131408     -0.237560      0.237560       175.068       175.306    
  48  0.579930     -0.544847     -0.984977      0.984977       175.715       176.700    
  49  0.593104     -0.522386     -0.944371      0.944371       174.467       175.411    
  50  0.376238     -0.977534      -1.76719       1.76719       176.135       177.902    
  51  0.987748     -0.123280E-01 -0.222865E-01  0.222865E-01   175.329       175.351    
  52  0.985743     -0.143594E-01 -0.259590E-01  0.259590E-01   175.636       175.662    
  53  0.991599     -0.843651E-02 -0.152515E-01  0.152515E-01   176.450       176.466    
  54  0.497863     -0.697430      -1.26082       1.26082       174.331       175.591    
  55  0.787530E-01  -2.54144      -4.59442       4.59442       176.672       181.266    
  56  0.232896      -1.45716      -2.63427       2.63427       176.272       178.906    
  57  0.971733     -0.286747E-01 -0.518382E-01  0.518382E-01   171.272       171.324    
  58  0.434796     -0.832877      -1.50568       1.50568       173.924       175.430    
  59  0.643441     -0.440925     -0.797106      0.797106       174.034       174.831    
  60  0.681166     -0.383949     -0.694105      0.694105       174.808       175.502    
  61  0.579011     -0.546434     -0.987844      0.987844       174.958       175.946    
  62  0.944457     -0.571450E-01 -0.103307      0.103307       171.506       171.609    
  63  0.712041     -0.339620     -0.613966      0.613966       177.015       177.629    
  64  0.352727      -1.04206      -1.88384       1.88384       173.455       175.339    
  65  0.661083     -0.413876     -0.748206      0.748206       170.446       171.195    
  66  0.990747     -0.929653E-02 -0.168063E-01  0.168063E-01   175.167       175.184    
  67  0.900074     -0.105278     -0.190322      0.190322       175.683       175.873    
  68  0.695351     -0.363339     -0.656845      0.656845       174.487       175.144    
  69  0.878231     -0.129846     -0.234735      0.234735       175.444       175.679    
  70  0.120893      -2.11285      -3.81962       3.81962       172.127       175.947    
  71  0.536886     -0.621970      -1.12440       1.12440       176.040       177.164    
  72  0.578968     -0.546509     -0.987980      0.987980       173.929       174.917    
loop,thermsimp(1:2)       83   1.07383       2.06504    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    476        167.59          0.84          1.11         25.04          0.13          0.05         27.17
Just calling func    0   0         27.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    477        185.67          0.84          1.11         25.07          0.11          0.05         27.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    167.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       83
neval is:      476
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       84
neval is:      476


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      476     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379478     -0.968959      -1.75169       1.75169       164.308       166.060    
   2  0.957028     -0.439225E-01 -0.794032E-01  0.794032E-01   164.315       164.394    
   3  0.360821      -1.01937      -1.84283       1.84283       166.458       168.301    
   4  0.115816      -2.15575      -3.89718       3.89718       166.774       170.671    
   5  0.739959E-01  -2.60375      -4.70706       4.70706       167.155       171.862    
   6  0.618280     -0.480813     -0.869216      0.869216       167.454       168.324    
   7  0.885995     -0.121044     -0.218823      0.218823       166.873       167.092    
   8  0.635424     -0.453462     -0.819770      0.819770       168.194       169.014    
   9  0.807967E-01  -2.51582      -4.54811       4.54811       168.966       173.514    
  10  0.741317     -0.299327     -0.541124      0.541124       168.913       169.454    
  11  0.226644      -1.48438      -2.68346       2.68346       167.315       169.999    
  12  0.538747     -0.618510      -1.11814       1.11814       169.047       170.165    
  13  0.161559      -1.82289      -3.29542       3.29542       168.307       171.602    
  14  0.460148     -0.776207      -1.40323       1.40323       169.081       170.484    
  15  0.747711     -0.290739     -0.525598      0.525598       169.699       170.225    
  16  0.780108E-01  -2.55091      -4.61154       4.61154       170.267       174.878    
  17  0.966572     -0.339994E-01 -0.614643E-01  0.614643E-01   167.732       167.794    
  18  0.724118     -0.322802     -0.583562      0.583562       168.424       169.008    
  19  0.558090     -0.583236      -1.05438       1.05438       170.115       171.170    
  20  0.646658     -0.435938     -0.788089      0.788089       168.506       169.294    
  21  0.667537     -0.404161     -0.730643      0.730643       170.446       171.177    
  22  0.526422     -0.641653      -1.15998       1.15998       171.272       172.432    
  23  0.429996     -0.843979      -1.52575       1.52575       170.242       171.768    
  24  0.795573     -0.228692     -0.413431      0.413431       171.506       171.919    
  25  0.102698      -2.27597      -4.11450       4.11450       171.708       175.823    
  26  0.727545     -0.318079     -0.575024      0.575024       171.815       172.390    
  27  0.266601      -1.32200      -2.38992       2.38992       171.345       173.735    
  28  0.867357     -0.142304     -0.257258      0.257258       172.252       172.510    
  29  0.850002     -0.162516     -0.293798      0.293798       172.867       173.161    
  30  0.495621     -0.701943      -1.26897       1.26897       170.984       172.253    
  31  0.321507      -1.13474      -2.05138       2.05138       173.024       175.075    
  32  0.250033E-01  -3.68875      -6.66853       6.66853       172.422       179.091    
  33  0.191559      -1.65256      -2.98750       2.98750       168.270       171.258    
  34  0.256845E-01  -3.66187      -6.61993       6.61993       172.255       178.875    
  35  0.116644E-01  -4.45121      -8.04691       8.04691       173.042       181.089    
  36  0.467566     -0.760214      -1.37432       1.37432       171.377       172.752    
  37  0.267525      -1.31854      -2.38367       2.38367       173.567       175.951    
  38  0.657917     -0.418676     -0.756884      0.756884       171.324       172.081    
  39  0.396760     -0.924425      -1.67118       1.67118       171.909       173.580    
  40  0.296989E-01  -3.51664      -6.35740       6.35740       172.689       179.047    
  41  0.609352     -0.495360     -0.895513      0.895513       174.034       174.929    
  42  0.472240     -0.750268      -1.35634       1.35634       173.003       174.360    
  43  0.537782     -0.620302      -1.12138       1.12138       173.929       175.050    
  44  0.472387     -0.749957      -1.35578       1.35578       174.487       175.843    
  45  0.906366     -0.983121E-01 -0.177729      0.177729       175.167       175.345    
  46  0.541294     -0.613793      -1.10962       1.10962       173.592       174.701    
  47  0.101850      -2.28426      -4.12949       4.12949       175.068       179.198    
  48  0.620195     -0.477721     -0.863626      0.863626       172.139       173.003    
  49  0.130970      -2.03278      -3.67487       3.67487       173.455       177.130    
  50  0.740802E-01  -2.60261      -4.70500       4.70500       175.329       180.034    
  51  0.515656     -0.662314      -1.19733       1.19733       174.168       175.365    
  52  0.280360      -1.27168      -2.29895       2.29895       174.467       176.765    
  53  0.469428E-01  -3.05882      -5.52975       5.52975       173.924       179.454    
  54  0.836383     -0.178668     -0.322997      0.322997       174.808       175.131    
  55  0.635255     -0.453729     -0.820253      0.820253       173.636       174.457    
  56  0.186177E-01  -3.98364      -7.20164       7.20164       174.331       181.532    
  57  0.818627     -0.200127     -0.361790      0.361790       175.636       175.998    
  58  0.426336     -0.852527      -1.54120       1.54120       175.444       176.985    
  59  0.511854     -0.669715      -1.21071       1.21071       175.683       176.894    
  60  0.339186      -1.08121      -1.95461       1.95461       174.958       176.913    
  61  0.524623     -0.645076      -1.16617       1.16617       172.127       173.293    
  62  0.282970      -1.26242      -2.28220       2.28220       174.899       177.181    
  63  0.223049      -1.50036      -2.71236       2.71236       176.450       179.163    
  64  0.916670     -0.870079E-01 -0.157293      0.157293       172.730       172.887    
  65  0.890469     -0.116007     -0.209719      0.209719       175.715       175.925    
  66  0.896449     -0.109314     -0.197619      0.197619       176.040       176.237    
  67  0.919509     -0.839157E-01 -0.151703      0.151703       177.015       177.166    
  68  0.569393     -0.563185      -1.01813       1.01813       176.135       177.153    
  69  0.151053      -1.89012      -3.41697       3.41697       172.969       176.386    
  70  0.437803     -0.825985      -1.49322       1.49322       176.272       177.765    
  71  0.179599      -1.71703      -3.10405       3.10405       172.968       176.072    
  72  0.848049     -0.164816     -0.297956      0.297956       167.592       167.890    
loop,thermsimp(1:2)       84   1.75169      0.794032E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    478        164.41          0.84          1.11         25.21          0.19          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    479        165.41          0.84          1.11         25.06          0.17          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       84
neval is:      478
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       85
neval is:      478


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      478     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.844994     -0.168425     -0.304480      0.304480       164.315       164.619    
   2  0.449571E-01  -3.10205      -5.60789       5.60789       164.308       169.916    
   3  0.479268     -0.735496      -1.32963       1.32963       166.873       168.202    
   4  0.429117     -0.846026      -1.52945       1.52945       167.732       169.262    
   5  0.188230      -1.67009      -3.01919       3.01919       167.592       170.611    
   6  0.299420      -1.20591      -2.18004       2.18004       166.458       168.638    
   7  0.942772     -0.589312E-01 -0.106536      0.106536       167.454       167.561    
   8  0.802892E-01  -2.52212      -4.55950       4.55950       168.424       172.984    
   9  0.356076      -1.03261      -1.86676       1.86676       168.194       170.061    
  10  0.599935     -0.510933     -0.923667      0.923667       168.506       169.429    
  11  0.632404     -0.458227     -0.828384      0.828384       168.913       169.741    
  12  0.707791     -0.345606     -0.624788      0.624788       167.315       167.940    
  13  0.896171     -0.109624     -0.198178      0.198178       169.047       169.245    
  14  0.953459     -0.476587E-01 -0.861575E-01  0.861575E-01   169.699       169.785    
  15  0.875614     -0.132830     -0.240130      0.240130       169.081       169.321    
  16  0.371483     -0.990253      -1.79018       1.79018       166.774       168.564    
  17  0.518071     -0.657644      -1.18889       1.18889       170.115       171.304    
  18  0.643549     -0.440757     -0.796802      0.796802       170.446       171.243    
  19  0.313409      -1.16025      -2.09750       2.09750       168.270       170.368    
  20  0.264619      -1.32946      -2.40341       2.40341       168.307       170.710    
  21  0.259435      -1.34925      -2.43918       2.43918       170.242       172.681    
  22  0.526335     -0.641817      -1.16028       1.16028       167.155       168.315    
  23  0.972976E-01  -2.32998      -4.21215       4.21215       171.506       175.718    
  24  0.511532     -0.670346      -1.21185       1.21185       171.324       172.536    
  25  0.117109      -2.14465      -3.87710       3.87710       170.984       174.861    
  26  0.211716      -1.55251      -2.80663       2.80663       171.815       174.622    
  27  0.747149     -0.291491     -0.526958      0.526958       171.272       171.799    
  28  0.545786     -0.605529      -1.09468       1.09468       172.252       173.347    
  29  0.614707     -0.486610     -0.879696      0.879696       171.377       172.257    
  30  0.614766     -0.486514     -0.879522      0.879522       172.730       173.609    
  31  0.334093      -1.09634      -1.98196       1.98196       172.139       174.121    
  32  0.272402      -1.30048      -2.35100       2.35100       172.867       175.218    
  33  0.777384     -0.251821     -0.455242      0.455242       172.127       172.583    
  34  0.381316     -0.964128      -1.74295       1.74295       168.966       170.709    
  35  0.614497     -0.486952     -0.880313      0.880313       171.909       172.789    
  36  0.537037     -0.621687      -1.12389       1.12389       171.345       172.469    
  37  0.117965      -2.13737      -3.86394       3.86394       173.003       176.867    
  38  0.131038      -2.03226      -3.67393       3.67393       173.636       177.310    
  39  0.750151E-01  -2.59007      -4.68233       4.68233       173.592       178.274    
  40  0.173299      -1.75273      -3.16860       3.16860       170.267       173.435    
  41  0.313111      -1.16120      -2.09921       2.09921       174.034       176.133    
  42  0.867565     -0.142065     -0.256825      0.256825       173.929       174.186    
  43  0.974158E-01  -2.32877      -4.20995       4.20995       173.024       177.234    
  44  0.856967     -0.154356     -0.279046      0.279046       174.808       175.087    
  45  0.210880      -1.55647      -2.81379       2.81379       175.167       177.981    
  46  0.789931     -0.235810     -0.426298      0.426298       174.168       174.594    
  47  0.249169E-01  -3.69221      -6.67479       6.67479       171.708       178.383    
  48  0.721362     -0.326614     -0.590454      0.590454       174.487       175.077    
  49  0.636302     -0.452082     -0.817275      0.817275       175.715       176.532    
  50  0.719367     -0.329384     -0.595461      0.595461       173.567       174.162    
  51  0.838578E-01  -2.47863      -4.48088       4.48088       175.636       180.117    
  52  0.699941     -0.356759     -0.644951      0.644951       172.968       173.613    
  53  0.702066     -0.353728     -0.639471      0.639471       176.040       176.679    
  54  0.635085     -0.453996     -0.820735      0.820735       172.969       173.790    
  55  0.372725     -0.986914      -1.78415       1.78415       174.467       176.251    
  56  0.943328     -0.583412E-01 -0.105469      0.105469       175.683       175.788    
  57  0.479975E-01  -3.03661      -5.48958       5.48958       174.958       180.448    
  58  0.436429     -0.829129      -1.49890       1.49890       175.444       176.943    
  59  0.311463E-01  -3.46906      -6.27138       6.27138       173.455       179.727    
  60  0.455211     -0.786994      -1.42273       1.42273       176.135       177.558    
  61  0.555598     -0.587711      -1.06247       1.06247       177.015       178.077    
  62  0.328767      -1.11240      -2.01101       2.01101       174.899       176.910    
  63  0.863797     -0.146418     -0.264695      0.264695       176.272       176.537    
  64  0.867080     -0.142624     -0.257836      0.257836       172.255       172.513    
  65  0.143634E-01  -4.24307      -7.67063       7.67063       172.689       180.360    
  66  0.965088     -0.355364E-01 -0.642429E-01  0.642429E-01   172.422       172.486    
  67  0.809979     -0.210747     -0.380990      0.380990       176.450       176.831    
  68  0.854006     -0.157817     -0.285301      0.285301       175.068       175.353    
  69  0.130906      -2.03327      -3.67576       3.67576       173.924       177.600    
  70  0.975981     -0.243125E-01 -0.439523E-01  0.439523E-01   175.329       175.373    
  71  0.309440      -1.17299      -2.12053       2.12053       173.042       175.162    
  72  0.730709     -0.313741     -0.567181      0.567181       164.407       164.974    
loop,thermsimp(1:2)       85  0.304480       5.60789    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    480        176.72          0.85          1.11         24.96          0.28          0.04         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       85
neval is:      479
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       86
neval is:      479


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      479     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245460E-01  -3.70721      -6.70190       6.70190       164.315       171.016    
   2  0.230091      -1.46928      -2.65617       2.65617       164.407       167.063    
   3  0.635055     -0.454044     -0.820822      0.820822       167.454       168.275    
   4  0.105077      -2.25307      -4.07310       4.07310       167.315       171.388    
   5  0.191095      -1.65498      -2.99189       2.99189       166.873       169.865    
   6  0.795443     -0.228856     -0.413727      0.413727       167.155       167.568    
   7  0.317275      -1.14799      -2.07533       2.07533       166.774       168.849    
   8  0.532563     -0.630054      -1.13901       1.13901       166.458       167.597    
   9  0.908868E-01  -2.39814      -4.33537       4.33537       169.047       173.383    
  10  0.865077E-01  -2.44752      -4.42464       4.42464       167.732       172.157    
  11  0.857681E-01  -2.45611      -4.44016       4.44016       169.081       173.521    
  12  0.542418     -0.611718      -1.10587       1.10587       168.506       169.611    
  13  0.225242      -1.49058      -2.69467       2.69467       168.913       171.607    
  14  0.855554E-01  -2.45859      -4.44465       4.44465       169.699       174.144    
  15  0.702960E-01  -2.65504      -4.79979       4.79979       164.308       169.108    
  16  0.660623     -0.414572     -0.749465      0.749465       168.194       168.943    
  17  0.564351     -0.572079      -1.03421       1.03421       168.270       169.304    
  18  0.761763     -0.272120     -0.491940      0.491940       167.592       168.084    
  19  0.645184     -0.438219     -0.792214      0.792214       168.966       169.758    
  20  0.398573     -0.919864      -1.66293       1.66293       168.307       169.970    
  21  0.256272E-01  -3.66410      -6.62397       6.62397       170.446       177.070    
  22  0.258189      -1.35406      -2.44788       2.44788       170.115       172.563    
  23  0.797366     -0.226442     -0.409362      0.409362       171.272       171.682    
  24  0.119239E-01  -4.42921      -8.00714       8.00714       171.377       179.384    
  25  0.257284E-01  -3.66016      -6.61685       6.61685       171.345       177.961    
  26  0.746847     -0.291894     -0.527688      0.527688       172.422       172.950    
  27  0.624240     -0.471220     -0.851873      0.851873       172.255       173.107    
  28  0.655139     -0.422908     -0.764534      0.764534       171.324       172.089    
  29  0.281457      -1.26777      -2.29189       2.29189       172.127       174.419    
  30  0.944371     -0.572367E-01 -0.103473      0.103473       170.242       170.345    
  31  0.614735     -0.486563     -0.879611      0.879611       171.909       172.788    
  32  0.455809     -0.785681      -1.42036       1.42036       168.424       169.845    
  33  0.429494     -0.845147      -1.52786       1.52786       172.252       173.780    
  34  0.656424     -0.420948     -0.760991      0.760991       170.267       171.028    
  35  0.551886     -0.594413      -1.07458       1.07458       172.730       173.805    
  36  0.882055     -0.125501     -0.226882      0.226882       172.968       173.195    
  37  0.585710E-01  -2.83752      -5.12967       5.12967       172.969       178.099    
  38  0.196796      -1.62559      -2.93874       2.93874       172.139       175.078    
  39  0.479291     -0.735447      -1.32954       1.32954       173.567       174.896    
  40  0.107404      -2.23116      -4.03349       4.03349       173.929       177.962    
  41  0.360460      -1.02037      -1.84463       1.84463       174.168       176.013    
  42  0.952241     -0.489375E-01 -0.884694E-01  0.884694E-01   171.815       171.904    
  43  0.791501     -0.233824     -0.422707      0.422707       170.984       171.407    
  44  0.253666      -1.37174      -2.47983       2.47983       174.487       176.967    
  45  0.936914     -0.651638E-01 -0.117803      0.117803       174.808       174.926    
  46  0.978059     -0.221850E-01 -0.401061E-01  0.401061E-01   173.042       173.082    
  47  0.226070E-01  -3.78950      -6.85067       6.85067       172.867       179.718    
  48  0.211122      -1.55532      -2.81171       2.81171       175.068       177.880    
  49  0.665051     -0.407891     -0.737387      0.737387       175.329       176.066    
  50  0.600632     -0.509773     -0.921570      0.921570       171.506       172.427    
  51  0.924509     -0.784926E-01 -0.141899      0.141899       175.683       175.825    
  52  0.935977     -0.661649E-01 -0.119613      0.119613       174.034       174.153    
  53  0.166172      -1.79473      -3.24452       3.24452       174.467       177.711    
  54  0.327601      -1.11596      -2.01743       2.01743       175.715       177.732    
  55  0.233359      -1.45518      -2.63067       2.63067       176.272       178.903    
  56  0.322509E-01  -3.43421      -6.20837       6.20837       176.040       182.248    
  57  0.465692     -0.764231      -1.38158       1.38158       176.450       177.832    
  58  0.429929     -0.844135      -1.52603       1.52603       173.003       174.529    
  59  0.632273     -0.458435     -0.828760      0.828760       174.899       175.728    
  60  0.861580     -0.148988     -0.269340      0.269340       175.444       175.714    
  61  0.602536     -0.506607     -0.915846      0.915846       173.024       173.940    
  62  0.947552     -0.538738E-01 -0.973931E-01  0.973931E-01   173.636       173.734    
  63  0.528730     -0.637277      -1.15207       1.15207       176.135       177.287    
  64  0.962649     -0.380659E-01 -0.688157E-01  0.688157E-01   173.924       173.993    
  65  0.390604     -0.940060      -1.69944       1.69944       175.167       176.867    
  66  0.135054      -2.00208      -3.61937       3.61937       177.015       180.634    
  67  0.703716     -0.351381     -0.635227      0.635227       173.592       174.227    
  68  0.107815      -2.22734      -4.02659       4.02659       171.708       175.735    
  69  0.493969     -0.705282      -1.27501       1.27501       173.455       174.730    
  70  0.914499     -0.893788E-01 -0.161579      0.161579       175.636       175.797    
  71  0.693164     -0.366489     -0.662539      0.662539       172.689       173.352    
  72  0.580724E-01  -2.84606      -5.14512       5.14512       176.722       181.867    
loop,thermsimp(1:2)       86   6.70190       2.65617    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    481        178.06          0.84          1.11         25.04          0.26          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  480    178.06        1.008     -1.504      2.246     -102.6     0.8627    
                     -0.1741E-01  1.748     -99.70      3.704     0.4429    
                       2.199     -1.660      2.141      0.000     -40.00    
                     -0.7545      0.000      0.000      0.000     -1.221    

                      -2.500     0.3754E+05 0.3014E+05  0.000      0.000    
                     -0.5672     -5.883     -4.716     -8.214      6.168    
                      -14.97     -2.979     -1553.      0.000     -2219.    

                     -0.1206E+05  8519.     -5292.     0.1350E+06 -544.2    
                       8811.    -0.4316E-02 0.2686E-01  0.000     0.1052    
                     -0.1038     0.1844E-01 0.7342E-01 0.3884E-01 0.3815E-01

                     -0.1023    -0.8855      0.000    -0.1105     0.2088E-01
                       0.000    -0.9795E-01-0.7870E-01-0.8035E-01-0.8479E-02
                      0.2458E-01 0.2458E-01-0.2926     -1.200      0.000    

                     -0.2369    -0.7080    -0.6365    -0.4198     0.4592E-01
                      0.8199E-01  9.126      8.780     -4625.     -4.000    
                     -0.3294    -0.8760      9.278      8.756     -6208.    

                      -4.000     0.3859    -0.9825      8.968      8.595    
                      -1894.     -7.000    -0.9707E-01-0.7748      9.129    
                       8.804     -6347.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    178.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       86
neval is:      480
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       87
neval is:      480


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      480     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.785570     -0.241345     -0.436305      0.436305       164.407       164.843    
   2  0.738730E-02  -4.90799      -8.87268       8.87268       167.155       176.027    
   3  0.167821      -1.78486      -3.22667       3.22667       166.458       169.685    
   4  0.136502      -1.99142      -3.60009       3.60009       167.592       171.192    
   5  0.100366      -2.29893      -4.15601       4.15601       167.454       171.610    
   6  0.439637     -0.821807      -1.48566       1.48566       166.774       168.259    
   7  0.745548     -0.293635     -0.530835      0.530835       168.194       168.725    
   8  0.374855     -0.981216      -1.77385       1.77385       164.308       166.082    
   9  0.144230      -1.93634      -3.50053       3.50053       168.270       171.771    
  10  0.776977     -0.252344     -0.456189      0.456189       168.506       168.962    
  11  0.524160E-01  -2.94854      -5.33039       5.33039       168.966       174.297    
  12  0.454382     -0.788817      -1.42603       1.42603       168.424       169.850    
  13  0.128840      -2.04919      -3.70453       3.70453       166.873       170.577    
  14  0.621729     -0.475251     -0.859161      0.859161       168.307       169.166    
  15  0.974694     -0.256318E-01 -0.463372E-01  0.463372E-01   170.242       170.288    
  16  0.965418     -0.351939E-01 -0.636237E-01  0.636237E-01   164.315       164.378    
  17  0.370644     -0.992512      -1.79427       1.79427       170.267       172.061    
  18  0.246546      -1.40021      -2.53130       2.53130       167.315       169.846    
  19  0.702523E-01  -2.65566      -4.80091       4.80091       170.984       175.785    
  20  0.326197E-01  -3.42284      -6.18782       6.18782       168.913       175.100    
  21  0.419579     -0.868503      -1.57008       1.57008       171.272       172.842    
  22  0.466221     -0.763095      -1.37952       1.37952       171.815       173.195    
  23  0.240579      -1.42471      -2.57559       2.57559       171.324       173.900    
  24  0.901129     -0.104107     -0.188205      0.188205       167.732       167.920    
  25  0.533703     -0.627916      -1.13515       1.13515       171.506       172.641    
  26  0.617116     -0.482699     -0.872624      0.872624       170.115       170.988    
  27  0.431696     -0.840033      -1.51861       1.51861       171.909       173.427    
  28  0.490629     -0.712067      -1.28728       1.28728       172.422       173.709    
  29  0.727929     -0.317551     -0.574070      0.574070       173.042       173.616    
  30  0.751113     -0.286200     -0.517393      0.517393       172.255       172.772    
  31  0.128641      -2.05073      -3.70731       3.70731       172.968       176.675    
  32  0.592334E-01  -2.82627      -5.10934       5.10934       172.689       177.799    
  33  0.692882     -0.366896     -0.663276      0.663276       169.047       169.710    
  34  0.600682     -0.509689     -0.921418      0.921418       169.081       170.002    
  35  0.658975     -0.417069     -0.753979      0.753979       173.636       174.390    
  36  0.696343     -0.361913     -0.654268      0.654268       172.252       172.907    
  37  0.605529     -0.501652     -0.906888      0.906888       172.730       173.637    
  38  0.492956     -0.707335      -1.27872       1.27872       173.024       174.303    
  39  0.561246     -0.577595      -1.04418       1.04418       173.924       174.969    
  40  0.184946E-01  -3.99027      -7.21363       7.21363       169.699       176.913    
  41  0.483815     -0.726052      -1.31256       1.31256       174.034       175.346    
  42  0.358577      -1.02561      -1.85411       1.85411       173.592       175.446    
  43  0.316248E-01  -3.45382      -6.24382       6.24382       172.127       178.371    
  44  0.103277      -2.27034      -4.10432       4.10432       173.003       177.108    
  45  0.216677      -1.52935      -2.76476       2.76476       173.455       176.220    
  46  0.316630      -1.15002      -2.07901       2.07901       173.567       175.646    
  47  0.930307     -0.722406E-01 -0.130597      0.130597       174.808       174.939    
  48  0.668609     -0.402556     -0.727742      0.727742       172.139       172.867    
  49  0.932709     -0.696615E-01 -0.125934      0.125934       175.444       175.570    
  50  0.277669E-01  -3.58391      -6.47900       6.47900       174.899       181.378    
  51  0.541236     -0.613900      -1.10981       1.10981       171.708       172.818    
  52  0.938218     -0.637734E-01 -0.115290      0.115290       175.636       175.751    
  53  0.844137     -0.169440     -0.306314      0.306314       175.683       175.989    
  54  0.416655     -0.875497      -1.58273       1.58273       174.168       175.751    
  55  0.516231     -0.661200      -1.19532       1.19532       175.329       176.524    
  56  0.108139      -2.22434      -4.02117       4.02117       175.167       179.188    
  57  0.211754      -1.55233      -2.80630       2.80630       174.487       177.293    
  58  0.650924     -0.429362     -0.776202      0.776202       170.446       171.223    
  59  0.810258E-01  -2.51299      -4.54299       4.54299       176.135       180.678    
  60  0.129033      -2.04769      -3.70182       3.70182       174.467       178.168    
  61  0.645157     -0.438262     -0.792291      0.792291       175.715       176.507    
  62  0.580611     -0.543675     -0.982857      0.982857       176.450       177.433    
  63  0.905307     -0.994807E-01 -0.179842      0.179842       175.068       175.248    
  64  0.532245     -0.630651      -1.14009       1.14009       171.345       172.485    
  65  0.374654     -0.981751      -1.77481       1.77481       173.929       175.704    
  66  0.843593     -0.170085     -0.307479      0.307479       172.969       173.277    
  67  0.148317      -1.90840      -3.45002       3.45002       176.272       179.722    
  68  0.950497E-01  -2.35336      -4.25440       4.25440       171.377       175.632    
  69  0.730523     -0.313995     -0.567641      0.567641       172.867       173.435    
  70  0.916562     -0.871256E-01 -0.157506      0.157506       177.015       177.172    
  71  0.208174      -1.56938      -2.83713       2.83713       176.722       179.559    
  72  0.461165E-01  -3.07658      -5.56186       5.56186       178.063       183.625    
loop,thermsimp(1:2)       87  0.436305       8.87268    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    482        176.04          0.84          1.11         25.25          0.23          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       87
neval is:      481
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       88
neval is:      481


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      481     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.507680     -0.677903      -1.22552       1.22552       164.315       165.540    
   2  0.790268     -0.235383     -0.425526      0.425526       164.407       164.832    
   3  0.317381      -1.14765      -2.07473       2.07473       164.308       166.383    
   4  0.767166     -0.265051     -0.479161      0.479161       167.732       168.211    
   5  0.313858      -1.15882      -2.09491       2.09491       166.774       168.868    
   6  0.251614      -1.37986      -2.49451       2.49451       168.194       170.689    
   7  0.948204     -0.531858E-01 -0.961494E-01  0.961494E-01   168.506       168.602    
   8  0.747265     -0.291336     -0.526678      0.526678       168.307       168.834    
   9  0.264530      -1.32980      -2.40402       2.40402       166.458       168.862    
  10  0.879562     -0.128331     -0.231997      0.231997       169.047       169.279    
  11  0.158918      -1.83937      -3.32521       3.32521       167.315       170.640    
  12  0.409577E-01  -3.19522      -5.77632       5.77632       168.424       174.201    
  13  0.832422     -0.183416     -0.331580      0.331580       169.081       169.413    
  14  0.930291     -0.722576E-01 -0.130627      0.130627       170.242       170.373    
  15  0.301800      -1.19799      -2.16573       2.16573       166.873       169.038    
  16  0.990785     -0.925803E-02 -0.167367E-01  0.167367E-01   170.115       170.132    
  17  0.328363      -1.11364      -2.01324       2.01324       167.592       169.605    
  18  0.938323     -0.636607E-01 -0.115086      0.115086       170.446       170.561    
  19  0.975952     -0.243418E-01 -0.440053E-01  0.440053E-01   167.454       167.498    
  20  0.459186     -0.778299      -1.40701       1.40701       168.270       169.677    
  21  0.540042     -0.616108      -1.11380       1.11380       170.267       171.381    
  22  0.543006     -0.610635      -1.10391       1.10391       171.345       172.449    
  23  0.733492     -0.309938     -0.560307      0.560307       171.506       172.066    
  24  0.451844     -0.794418      -1.43615       1.43615       172.255       173.691    
  25  0.753205     -0.283418     -0.512363      0.512363       171.708       172.221    
  26  0.701062     -0.355159     -0.642057      0.642057       171.272       171.914    
  27  0.878758     -0.129246     -0.233651      0.233651       172.139       172.373    
  28  0.378850     -0.970616      -1.75468       1.75468       172.252       174.007    
  29  0.963503     -0.371796E-01 -0.672134E-01  0.672134E-01   171.815       171.883    
  30  0.637747     -0.449814     -0.813175      0.813175       172.969       173.783    
  31  0.869781     -0.139514     -0.252214      0.252214       171.909       172.161    
  32  0.753171     -0.283463     -0.512446      0.512446       172.867       173.380    
  33  0.526050E-01  -2.94494      -5.32388       5.32388       173.042       178.366    
  34  0.243477      -1.41273      -2.55394       2.55394       172.730       175.284    
  35  0.519956E-01  -2.95660      -5.34494       5.34494       172.422       177.767    
  36  0.530132E-01  -2.93721      -5.30990       5.30990       171.324       176.634    
  37  0.521011     -0.651985      -1.17866       1.17866       168.966       170.145    
  38  0.536818     -0.622097      -1.12463       1.12463       173.024       174.148    
  39  0.452282     -0.793450      -1.43440       1.43440       173.636       175.071    
  40  0.824064     -0.193508     -0.349824      0.349824       174.808       175.158    
  41  0.432752     -0.837591      -1.51420       1.51420       173.924       175.439    
  42  0.639137     -0.447637     -0.809240      0.809240       168.913       169.722    
  43  0.200933      -1.60478      -2.90113       2.90113       175.068       177.969    
  44  0.195377      -1.63282      -2.95182       2.95182       174.034       176.986    
  45  0.487028     -0.719434      -1.30060       1.30060       173.592       174.892    
  46  0.434536     -0.833476      -1.50676       1.50676       175.444       176.951    
  47  0.779247     -0.249427     -0.450915      0.450915       171.377       171.828    
  48  0.245897      -1.40284      -2.53606       2.53606       173.567       176.103    
  49  0.510235     -0.672884      -1.21644       1.21644       173.929       175.145    
  50  0.681914E-01  -2.68544      -4.85474       4.85474       174.168       179.023    
  51  0.983162     -0.169810E-01 -0.306983E-01  0.306983E-01   175.636       175.666    
  52  0.562832     -0.574775      -1.03908       1.03908       170.984       172.023    
  53  0.578358     -0.547562     -0.989885      0.989885       175.683       176.673    
  54  0.103448      -2.26869      -4.10134       4.10134       167.155       171.256    
  55  0.941795     -0.599673E-01 -0.108409      0.108409       173.455       173.564    
  56  0.246008      -1.40239      -2.53525       2.53525       175.715       178.250    
  57  0.655852     -0.421820     -0.762568      0.762568       175.329       176.091    
  58  0.816413     -0.202835     -0.366687      0.366687       172.968       173.334    
  59  0.248323      -1.39303      -2.51832       2.51832       169.699       172.217    
  60  0.624200     -0.471285     -0.851991      0.851991       173.003       173.855    
  61  0.316748      -1.14965      -2.07834       2.07834       177.015       179.093    
  62  0.696928     -0.361072     -0.652748      0.652748       174.487       175.140    
  63  0.710019     -0.342463     -0.619106      0.619106       176.450       177.069    
  64  0.271509      -1.30376      -2.35694       2.35694       172.689       175.046    
  65  0.710307E-01  -2.64464      -4.78099       4.78099       174.467       179.248    
  66  0.644233     -0.439695     -0.794882      0.794882       172.127       172.922    
  67  0.504062     -0.685056      -1.23845       1.23845       175.167       176.406    
  68  0.220642      -1.51121      -2.73198       2.73198       176.722       179.454    
  69  0.784882     -0.242222     -0.437889      0.437889       176.272       176.710    
  70  0.619516     -0.478817     -0.865607      0.865607       176.135       177.001    
  71  0.819868     -0.198612     -0.359052      0.359052       174.899       175.258    
  72  0.847711     -0.165215     -0.298677      0.298677       176.040       176.338    
loop,thermsimp(1:2)       88   1.22552      0.425526    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    483        174.96          0.84          1.11         25.26          0.12          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       88
neval is:      482
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       89
neval is:      482


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      482     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880944     -0.126761     -0.229159      0.229159       164.407       164.636    
   2  0.678316     -0.388142     -0.701684      0.701684       164.315       165.016    
   3  0.135490      -1.99886      -3.61354       3.61354       164.308       167.922    
   4  0.362841      -1.01379      -1.83273       1.83273       167.454       169.287    
   5  0.288564      -1.24284      -2.24680       2.24680       167.732       169.979    
   6  0.722355     -0.325238     -0.587967      0.587967       168.506       169.094    
   7  0.978389     -0.218479E-01 -0.394968E-01  0.394968E-01   168.307       168.346    
   8  0.883441     -0.123930     -0.224041      0.224041       166.458       166.682    
   9  0.537650     -0.620547      -1.12183       1.12183       166.774       167.895    
  10  0.945156     -0.564053E-01 -0.101970      0.101970       166.873       166.975    
  11  0.902011     -0.103129     -0.186436      0.186436       169.047       169.234    
  12  0.953192     -0.479389E-01 -0.866642E-01  0.866642E-01   169.081       169.168    
  13  0.287473      -1.24663      -2.25366       2.25366       167.592       169.846    
  14  0.403089     -0.908597      -1.64256       1.64256       168.270       169.913    
  15  0.441004     -0.818701      -1.48005       1.48005       168.913       170.393    
  16  0.639526     -0.447028     -0.808139      0.808139       170.115       170.923    
  17  0.380765     -0.965572      -1.74556       1.74556       168.966       170.712    
  18  0.659762     -0.415876     -0.751821      0.751821       170.242       170.994    
  19  0.375709     -0.978939      -1.76973       1.76973       170.446       172.216    
  20  0.963753     -0.369203E-01 -0.667446E-01  0.667446E-01   167.315       167.382    
  21  0.550567E-02  -5.20198      -9.40415       9.40415       168.194       177.598    
  22  0.406012     -0.901372      -1.62950       1.62950       167.155       168.784    
  23  0.718789     -0.330187     -0.596913      0.596913       170.267       170.864    
  24  0.634557     -0.454828     -0.822240      0.822240       171.377       172.200    
  25  0.531123     -0.632761      -1.14391       1.14391       171.815       172.959    
  26  0.839681     -0.174733     -0.315883      0.315883       171.272       171.588    
  27  0.404403     -0.905343      -1.63668       1.63668       170.984       172.621    
  28  0.364094      -1.01034      -1.82650       1.82650       171.506       173.332    
  29  0.195203      -1.63372      -2.95344       2.95344       171.909       174.862    
  30  0.895643     -0.110213     -0.199244      0.199244       169.699       169.898    
  31  0.350505      -1.04838      -1.89526       1.89526       171.708       173.604    
  32  0.246469      -1.40052      -2.53186       2.53186       172.139       174.671    
  33  0.491662     -0.709964      -1.28348       1.28348       171.345       172.628    
  34  0.570678     -0.560930      -1.01405       1.01405       172.127       173.141    
  35  0.127892      -2.05657      -3.71787       3.71787       172.968       176.686    
  36  0.671111     -0.398821     -0.720990      0.720990       172.867       173.588    
  37  0.492283     -0.708702      -1.28119       1.28119       173.455       174.736    
  38  0.784530     -0.242670     -0.438700      0.438700       172.255       172.694    
  39  0.804537     -0.217489     -0.393177      0.393177       172.969       173.363    
  40  0.951874     -0.493229E-01 -0.891661E-01  0.891661E-01   173.003       173.093    
  41  0.860836     -0.149852     -0.270902      0.270902       172.252       172.523    
  42  0.441943E-01  -3.11916      -5.63882       5.63882       173.024       178.663    
  43  0.863376     -0.146905     -0.265575      0.265575       168.424       168.690    
  44  0.717499E-02  -4.93715      -8.92540       8.92540       173.592       182.517    
  45  0.257105      -1.35827      -2.45549       2.45549       172.689       175.145    
  46  0.834736     -0.180640     -0.326561      0.326561       173.636       173.963    
  47  0.406979     -0.898994      -1.62520       1.62520       174.487       176.112    
  48  0.751883     -0.285174     -0.515538      0.515538       173.929       174.444    
  49  0.426180     -0.852893      -1.54186       1.54186       174.808       176.350    
  50  0.780644     -0.247637     -0.447678      0.447678       174.899       175.347    
  51  0.334820      -1.09416      -1.97803       1.97803       172.730       174.708    
  52  0.690618     -0.370169     -0.669192      0.669192       173.924       174.594    
  53  0.786960     -0.239578     -0.433110      0.433110       175.636       176.069    
  54  0.762697     -0.270894     -0.489723      0.489723       175.329       175.818    
  55  0.224832      -1.49240      -2.69797       2.69797       173.567       176.265    
  56  0.159776      -1.83398      -3.31547       3.31547       176.040       179.355    
  57  0.635541     -0.453278     -0.819438      0.819438       175.167       175.987    
  58  0.515119     -0.663357      -1.19922       1.19922       171.324       172.523    
  59  0.486717     -0.720072      -1.30175       1.30175       175.683       176.985    
  60  0.990660     -0.938371E-02 -0.169639E-01  0.169639E-01   176.272       176.289    
  61  0.966524     -0.340495E-01 -0.615548E-01  0.615548E-01   175.444       175.506    
  62  0.659413     -0.416405     -0.752778      0.752778       174.034       174.787    
  63  0.925713     -0.771915E-01 -0.139547      0.139547       176.135       176.275    
  64  0.720969     -0.327159     -0.591439      0.591439       176.450       177.042    
  65  0.866153     -0.143694     -0.259771      0.259771       172.422       172.682    
  66  0.905590     -0.991689E-01 -0.179278      0.179278       175.068       175.247    
  67  0.251055      -1.38208      -2.49853       2.49853       175.715       178.213    
  68  0.891439     -0.114919     -0.207750      0.207750       173.042       173.250    
  69  0.781745     -0.246226     -0.445129      0.445129       174.168       174.613    
  70  0.873268E-01  -2.43810      -4.40760       4.40760       177.015       181.422    
  71  0.683212E-01  -2.68354      -4.85130       4.85130       174.467       179.318    
  72  0.124942      -2.07990      -3.76006       3.76006       174.958       178.718    
loop,thermsimp(1:2)       89  0.229159      0.701684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    484        171.87          0.84          1.12         25.04          0.16          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    171.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       89
neval is:      483
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       90
neval is:      483


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      483     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.519767     -0.654376      -1.18298       1.18298       164.407       165.590    
   2  0.451273E-03  -7.70344      -13.9263       13.9263       164.315       178.241    
   3  0.838605E-01  -2.47860      -4.48082       4.48082       166.458       170.939    
   4  0.268196      -1.31604      -2.37914       2.37914       166.873       169.252    
   5  0.682721     -0.381669     -0.689982      0.689982       167.315       168.005    
   6  0.134603      -2.00542      -3.62541       3.62541       166.774       170.399    
   7  0.809634     -0.211173     -0.381760      0.381760       164.308       164.690    
   8  0.578058     -0.548081     -0.990822      0.990822       168.307       169.298    
   9  0.181348      -1.70734      -3.08653       3.08653       168.424       171.511    
  10  0.893989     -0.112062     -0.202585      0.202585       167.155       167.357    
  11  0.137049      -1.98742      -3.59286       3.59286       168.506       172.098    
  12  0.316319      -1.15100      -2.08079       2.08079       169.081       171.162    
  13  0.458104     -0.780660      -1.41128       1.41128       169.047       170.458    
  14  0.250826      -1.38300      -2.50018       2.50018       167.454       169.955    
  15  0.631289     -0.459992     -0.831574      0.831574       167.592       168.424    
  16  0.815448     -0.204018     -0.368825      0.368825       169.699       170.068    
  17  0.957573     -0.433532E-01 -0.783741E-01  0.783741E-01   168.270       168.349    
  18  0.633470     -0.456542     -0.825338      0.825338       167.732       168.557    
  19  0.660593     -0.414617     -0.749545      0.749545       168.913       169.662    
  20  0.664533     -0.408671     -0.738797      0.738797       168.966       169.705    
  21  0.620837     -0.476686     -0.861755      0.861755       170.267       171.129    
  22  0.195138      -1.63405      -2.95404       2.95404       170.115       173.069    
  23  0.439070     -0.823096      -1.48800       1.48800       170.242       171.730    
  24  0.731595     -0.312528     -0.564989      0.564989       171.272       171.837    
  25  0.176973      -1.73176      -3.13068       3.13068       171.377       174.508    
  26  0.450618     -0.797135      -1.44106       1.44106       170.446       171.887    
  27  0.306042E-01  -3.48662      -6.30312       6.30312       171.324       177.627    
  28  0.737213     -0.304879     -0.551160      0.551160       172.252       172.804    
  29  0.103939      -2.26395      -4.09278       4.09278       170.984       175.077    
  30  0.327275      -1.11695      -2.01923       2.01923       171.345       173.364    
  31  0.384261     -0.956434      -1.72904       1.72904       172.422       174.151    
  32  0.844251E-01  -2.47189      -4.46869       4.46869       172.255       176.724    
  33  0.341620      -1.07406      -1.94168       1.94168       171.815       173.757    
  34  0.590291     -0.527140     -0.952965      0.952965       173.003       173.956    
  35  0.335291      -1.09276      -1.97549       1.97549       172.127       174.103    
  36  0.871923     -0.137055     -0.247768      0.247768       173.042       173.290    
  37  0.216579E-01  -3.83238      -6.92820       6.92820       171.506       178.434    
  38  0.674344     -0.394015     -0.712302      0.712302       172.969       173.682    
  39  0.622707     -0.473679     -0.856318      0.856318       172.867       173.724    
  40  0.805084     -0.216809     -0.391947      0.391947       171.708       172.100    
  41  0.298614      -1.20860      -2.18492       2.18492       173.636       175.821    
  42  0.556750     -0.585639      -1.05872       1.05872       173.929       174.988    
  43  0.239374      -1.42973      -2.58467       2.58467       173.924       176.509    
  44  0.403553     -0.907447      -1.64048       1.64048       174.168       175.808    
  45  0.815210     -0.204309     -0.369351      0.369351       172.139       172.509    
  46  0.701880     -0.353993     -0.639949      0.639949       172.730       173.370    
  47  0.996873     -0.313153E-02 -0.566119E-02  0.566119E-02   173.455       173.461    
  48  0.270799      -1.30638      -2.36168       2.36168       174.034       176.395    
  49  0.129999      -2.04023      -3.68833       3.68833       171.909       175.597    
  50  0.609288     -0.495465     -0.895703      0.895703       172.689       173.585    
  51  0.205179E-01  -3.88646      -7.02595       7.02595       175.068       182.094    
  52  0.178070      -1.72558      -3.11951       3.11951       174.899       178.019    
  53  0.591536     -0.525033     -0.949157      0.949157       175.444       176.393    
  54  0.673211     -0.395696     -0.715341      0.715341       175.329       176.044    
  55  0.641161     -0.444474     -0.803522      0.803522       175.167       175.971    
  56  0.933700     -0.685999E-01 -0.124015      0.124015       175.636       175.760    
  57  0.542010     -0.612470      -1.10723       1.10723       174.487       175.594    
  58  0.364404      -1.00949      -1.82496       1.82496       173.567       175.392    
  59  0.789426     -0.236449     -0.427453      0.427453       176.135       176.563    
  60  0.885418     -0.121696     -0.220002      0.220002       176.272       176.492    
  61  0.431432     -0.840646      -1.51972       1.51972       174.808       176.328    
  62  0.717739     -0.331649     -0.599556      0.599556       172.968       173.567    
  63  0.375354     -0.979886      -1.77144       1.77144       175.683       177.454    
  64  0.844050     -0.169543     -0.306501      0.306501       176.450       176.757    
  65  0.907133     -0.974662E-01 -0.176200      0.176200       168.194       168.370    
  66  0.457061     -0.782938      -1.41540       1.41540       175.715       177.130    
  67  0.249730      -1.38737      -2.50810       2.50810       173.024       175.532    
  68  0.803893E-01  -2.52087      -4.55724       4.55724       174.958       179.516    
  69  0.723742     -0.323320     -0.584498      0.584498       174.467       175.051    
  70  0.208936      -1.56573      -2.83053       2.83053       176.040       178.870    
  71  0.653558E-01  -2.72791      -4.93152       4.93152       177.015       181.946    
  72  0.374155     -0.983084      -1.77722       1.77722       171.873       173.650    
loop,thermsimp(1:2)       90   1.18298       13.9263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    485        172.66          0.84          1.11         25.09          0.14          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       90
neval is:      484
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       91
neval is:      484


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      484     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.525961     -0.642528      -1.16156       1.16156       164.308       165.470    
   2  0.526989E-01  -2.94316      -5.32065       5.32065       164.407       169.728    
   3  0.341680      -1.07388      -1.94137       1.94137       167.155       169.096    
   4  0.405255     -0.903238      -1.63288       1.63288       167.315       168.948    
   5  0.514563     -0.664437      -1.20117       1.20117       168.270       169.471    
   6  0.466000     -0.763569      -1.38038       1.38038       168.194       169.574    
   7  0.342846      -1.07047      -1.93521       1.93521       167.592       169.527    
   8  0.358671      -1.02535      -1.85363       1.85363       167.732       169.586    
   9  0.554031     -0.590534      -1.06757       1.06757       166.873       167.940    
  10  0.778335     -0.250599     -0.453033      0.453033       168.307       168.760    
  11  0.217304      -1.52646      -2.75954       2.75954       168.913       171.672    
  12  0.982801     -0.173486E-01 -0.313628E-01  0.313628E-01   168.966       168.998    
  13  0.298897      -1.20766      -2.18321       2.18321       167.454       169.638    
  14  0.152611      -1.87986      -3.39842       3.39842       169.699       173.097    
  15  0.834186E-01  -2.48388      -4.49037       4.49037       166.774       171.264    
  16  0.691361     -0.369093     -0.667247      0.667247       169.047       169.714    
  17  0.202495E-01  -3.89963      -7.04976       7.04976       166.458       173.508    
  18  0.462938     -0.770162      -1.39230       1.39230       170.267       171.659    
  19  0.893654     -0.112436     -0.203263      0.203263       169.081       169.284    
  20  0.751255     -0.286010     -0.517049      0.517049       168.424       168.941    
  21  0.528256E-02  -5.24334      -9.47894       9.47894       170.242       179.721    
  22  0.661719     -0.412914     -0.746467      0.746467       171.272       172.019    
  23  0.711098     -0.340945     -0.616361      0.616361       170.446       171.063    
  24  0.394814     -0.929342      -1.68007       1.68007       168.506       170.186    
  25  0.529459     -0.635899      -1.14958       1.14958       171.708       172.858    
  26  0.123125      -2.09456      -3.78655       3.78655       172.139       175.926    
  27  0.150045      -1.89682      -3.42907       3.42907       172.252       175.682    
  28  0.847587     -0.165361     -0.298941      0.298941       170.115       170.414    
  29  0.684633     -0.378873     -0.684928      0.684928       173.042       173.727    
  30  0.238386      -1.43386      -2.59214       2.59214       171.345       173.937    
  31  0.260935      -1.34348      -2.42875       2.42875       172.730       175.159    
  32  0.731525E-01  -2.61521      -4.72778       4.72778       173.455       178.183    
  33  0.760028     -0.274400     -0.496061      0.496061       172.968       173.464    
  34  0.748054     -0.290280     -0.524770      0.524770       172.689       173.214    
  35  0.448284     -0.802329      -1.45045       1.45045       171.873       173.323    
  36  0.658970     -0.417078     -0.753994      0.753994       172.969       173.723    
  37  0.101931      -2.28346      -4.12805       4.12805       172.867       176.995    
  38  0.946705     -0.547677E-01 -0.990092E-01  0.990092E-01   171.815       171.914    
  39  0.923584     -0.794931E-01 -0.143708      0.143708       173.003       173.147    
  40  0.632977     -0.457321     -0.826746      0.826746       172.127       172.954    
  41  0.386701     -0.950103      -1.71760       1.71760       172.422       174.140    
  42  0.585154     -0.535880     -0.968765      0.968765       171.377       172.346    
  43  0.538343     -0.619260      -1.11950       1.11950       173.929       175.048    
  44  0.843970     -0.169639     -0.306673      0.306673       174.467       174.773    
  45  0.420066     -0.867344      -1.56799       1.56799       170.984       172.552    
  46  0.826451     -0.190615     -0.344595      0.344595       173.567       173.912    
  47  0.523061     -0.648057      -1.17156       1.17156       173.024       174.195    
  48  0.699280     -0.357703     -0.646657      0.646657       174.487       175.134    
  49  0.662193     -0.412199     -0.745174      0.745174       171.909       172.654    
  50  0.173075E-01  -4.05661      -7.33356       7.33356       175.636       182.969    
  51  0.912691     -0.913577E-01 -0.165157      0.165157       174.168       174.333    
  52  0.962432     -0.382919E-01 -0.692242E-01  0.692242E-01   173.636       173.706    
  53  0.980621E-01  -2.32215      -4.19800       4.19800       175.167       179.365    
  54  0.231566      -1.46289      -2.64461       2.64461       175.329       177.973    
  55  0.141472      -1.95565      -3.53544       3.53544       174.808       178.344    
  56  0.678142     -0.388398     -0.702147      0.702147       175.444       176.146    
  57  0.379107     -0.969937      -1.75345       1.75345       174.034       175.787    
  58  0.304517E-01  -3.49161      -6.31215       6.31215       176.272       182.584    
  59  0.832114     -0.183785     -0.332248      0.332248       173.924       174.257    
  60  0.218962      -1.51886      -2.74579       2.74579       176.135       178.881    
  61  0.593456E-01  -2.82438      -5.10592       5.10592       172.255       177.361    
  62  0.732375     -0.311463     -0.563064      0.563064       176.450       177.013    
  63  0.945228     -0.563291E-01 -0.101832      0.101832       175.715       175.817    
  64  0.917833     -0.857393E-01 -0.155000      0.155000       175.683       175.838    
  65  0.233680      -1.45380      -2.62819       2.62819       171.324       173.952    
  66  0.677061     -0.389995     -0.705033      0.705033       174.899       175.604    
  67  0.324413      -1.12574      -2.03511       2.03511       164.315       166.350    
  68  0.225570      -1.48913      -2.69205       2.69205       171.506       174.198    
  69  0.749764     -0.287996     -0.520641      0.520641       176.040       176.560    
  70  0.990901     -0.914097E-02 -0.165251E-01  0.165251E-01   174.958       174.975    
  71  0.845599     -0.167710     -0.303187      0.303187       177.015       177.318    
  72  0.420728     -0.865769      -1.56514       1.56514       172.658       174.224    
loop,thermsimp(1:2)       91   1.16156       5.32065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    486        177.25          0.84          1.11         25.07          0.18          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    177.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       91
neval is:      485
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       92
neval is:      485


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      485     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179926      -1.71521      -3.10076       3.10076       164.308       167.409    
   2  0.805701     -0.216043     -0.390563      0.390563       164.315       164.705    
   3  0.341067      -1.07568      -1.94461       1.94461       166.873       168.817    
   4  0.596982     -0.515868     -0.932587      0.932587       168.307       169.239    
   5  0.575413E-01  -2.85525      -5.16173       5.16173       168.424       173.586    
   6  0.390921     -0.939249      -1.69798       1.69798       167.315       169.013    
   7  0.437495     -0.826689      -1.49449       1.49449       168.966       170.461    
   8  0.513955     -0.665620      -1.20331       1.20331       167.155       168.358    
   9  0.871599     -0.137426     -0.248439      0.248439       169.081       169.330    
  10  0.196691      -1.62612      -2.93971       2.93971       168.270       171.210    
  11  0.987685E-01  -2.31498      -4.18502       4.18502       167.592       171.777    
  12  0.448984     -0.800769      -1.44763       1.44763       168.194       169.642    
  13  0.869491     -0.139847     -0.252816      0.252816       167.732       167.985    
  14  0.253569      -1.37212      -2.48052       2.48052       167.454       169.935    
  15  0.765994     -0.266581     -0.481926      0.481926       169.047       169.529    
  16  0.269007      -1.31302      -2.37367       2.37367       164.407       166.781    
  17  0.527354     -0.639883      -1.15678       1.15678       168.506       169.662    
  18  0.991870     -0.816303E-02 -0.147572E-01  0.147572E-01   170.115       170.130    
  19  0.834963     -0.180368     -0.326070      0.326070       170.446       170.772    
  20  0.939146E-01  -2.36537      -4.27612       4.27612       166.774       171.050    
  21  0.784991     -0.242082     -0.437637      0.437637       170.267       170.704    
  22  0.164899      -1.80242      -3.25842       3.25842       168.913       172.171    
  23  0.890878     -0.115548     -0.208887      0.208887       171.815       172.024    
  24  0.996288E-01  -2.30630      -4.16934       4.16934       171.272       175.442    
  25  0.367348E-01  -3.30403      -5.97304       5.97304       171.377       177.350    
  26  0.874828     -0.133728     -0.241754      0.241754       170.984       171.226    
  27  0.101428      -2.28841      -4.13699       4.13699       171.909       176.046    
  28  0.583716     -0.538341     -0.973215      0.973215       171.708       172.682    
  29  0.265971      -1.32437      -2.39420       2.39420       172.127       174.521    
  30  0.739852     -0.301305     -0.544700      0.544700       169.699       170.244    
  31  0.974346     -0.259889E-01 -0.469828E-01  0.469828E-01   173.003       173.050    
  32  0.357297      -1.02919      -1.86057       1.86057       172.689       174.550    
  33  0.768033     -0.263923     -0.477120      0.477120       171.873       172.350    
  34  0.236843      -1.44036      -2.60388       2.60388       172.968       175.572    
  35  0.490030E-01  -3.01587      -5.45211       5.45211       166.458       171.910    
  36  0.842269     -0.171656     -0.310319      0.310319       173.636       173.947    
  37  0.292342      -1.22983      -2.22329       2.22329       172.969       175.193    
  38  0.596407     -0.516832     -0.934330      0.934330       173.042       173.976    
  39  0.359551      -1.02290      -1.84920       1.84920       173.567       175.416    
  40  0.461849     -0.772517      -1.39656       1.39656       171.345       172.741    
  41  0.662754     -0.411352     -0.743643      0.743643       171.324       172.068    
  42  0.516002     -0.661645      -1.19612       1.19612       172.422       173.618    
  43  0.619599     -0.478683     -0.865365      0.865365       173.024       173.889    
  44  0.811136     -0.209319     -0.378408      0.378408       171.506       171.884    
  45  0.490033     -0.713282      -1.28947       1.28947       172.658       173.948    
  46  0.976838     -0.234348E-01 -0.423655E-01  0.423655E-01   173.924       173.967    
  47  0.963378E-01  -2.33989      -4.23007       4.23007       174.168       178.398    
  48  0.811272     -0.209152     -0.378105      0.378105       174.467       174.845    
  49  0.401456     -0.912658      -1.64991       1.64991       174.958       176.608    
  50  0.910235E-01  -2.39664      -4.33265       4.33265       173.929       178.262    
  51  0.630523     -0.461206     -0.833770      0.833770       174.487       175.321    
  52  0.141261      -1.95715      -3.53814       3.53814       172.730       176.268    
  53  0.262014      -1.33936      -2.42130       2.42130       174.899       177.320    
  54  0.814315     -0.205408     -0.371337      0.371337       172.252       172.624    
  55  0.510597     -0.672174      -1.21516       1.21516       174.034       175.249    
  56  0.329822E-01  -3.41179      -6.16784       6.16784       175.715       181.883    
  57  0.261292      -1.34212      -2.42628       2.42628       175.683       178.109    
  58  0.984526E-02  -4.62077      -8.35343       8.35343       172.139       180.493    
  59  0.106604      -2.23863      -4.04701       4.04701       175.444       179.491    
  60  0.415734     -0.877709      -1.58672       1.58672       176.040       177.626    
  61  0.805083E-01  -2.51939      -4.55457       4.55457       172.867       177.422    
  62  0.952967     -0.481750E-01 -0.870909E-01  0.870909E-01   176.450       176.537    
  63  0.281678      -1.26699      -2.29047       2.29047       177.015       179.305    
  64  0.817607     -0.201373     -0.364043      0.364043       172.255       172.619    
  65  0.931666     -0.707805E-01 -0.127957      0.127957       175.329       175.457    
  66  0.116448E-01  -4.45290      -8.04997       8.04997       173.455       181.505    
  67  0.128886      -2.04883      -3.70388       3.70388       174.808       178.512    
  68  0.599899     -0.510993     -0.923775      0.923775       176.135       177.059    
  69  0.534928     -0.625623      -1.13100       1.13100       175.167       176.298    
  70  0.876726E-01  -2.43415      -4.40046       4.40046       170.242       174.642    
  71  0.889140     -0.117500     -0.212417      0.212417       176.272       176.484    
  72  0.962371E-01  -2.34094      -4.23196       4.23196       177.249       181.481    
loop,thermsimp(1:2)       92   3.10076      0.390563    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    487        164.10          0.84          1.11         25.01          0.19          0.07         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    488        171.51          0.82          1.11         25.13          0.13          0.05         27.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       92
neval is:      487
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       93
neval is:      487


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      487     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356532      -1.03133      -1.86444       1.86444       164.315       166.179    
   2  0.156780      -1.85291      -3.34970       3.34970       164.407       167.757    
   3  0.871556     -0.137475     -0.248528      0.248528       164.308       164.557    
   4  0.686712     -0.375840     -0.679445      0.679445       167.732       168.412    
   5  0.980206     -0.199924E-01 -0.361424E-01  0.361424E-01   167.155       167.191    
   6  0.864789     -0.145270     -0.262619      0.262619       166.873       167.135    
   7  0.429178     -0.845883      -1.52919       1.52919       167.315       168.844    
   8  0.562262     -0.575787      -1.04091       1.04091       168.307       169.348    
   9  0.239176      -1.43056      -2.58616       2.58616       169.081       171.667    
  10  0.978598     -0.216345E-01 -0.391110E-01  0.391110E-01   169.047       169.086    
  11  0.938327     -0.636569E-01 -0.115079      0.115079       168.194       168.309    
  12  0.452510     -0.792946      -1.43349       1.43349       168.506       169.939    
  13  0.117352      -2.14257      -3.87335       3.87335       167.454       171.328    
  14  0.947736     -0.536798E-01 -0.970425E-01  0.970425E-01   170.115       170.212    
  15  0.990891     -0.915035E-02 -0.165420E-01  0.165420E-01   169.699       169.716    
  16  0.530083     -0.634722      -1.14745       1.14745       168.966       170.114    
  17  0.464385     -0.767041      -1.38666       1.38666       170.267       171.654    
  18  0.328231E-01  -3.41662      -6.17658       6.17658       170.446       176.623    
  19  0.141399E-01  -4.25876      -7.69899       7.69899       166.774       174.473    
  20  0.673551     -0.395192     -0.714429      0.714429       168.270       168.985    
  21  0.386316E-01  -3.25369      -5.88202       5.88202       170.984       176.866    
  22  0.592304     -0.523735     -0.946811      0.946811       167.592       168.539    
  23  0.755966     -0.279758     -0.505748      0.505748       171.506       172.011    
  24  0.397655     -0.922171      -1.66710       1.66710       166.458       168.125    
  25  0.636306     -0.452076     -0.817265      0.817265       171.815       172.633    
  26  0.610031     -0.494246     -0.893500      0.893500       171.324       172.218    
  27  0.424783     -0.856176      -1.54780       1.54780       168.913       170.460    
  28  0.748792     -0.289294     -0.522986      0.522986       171.873       172.396    
  29  0.481989     -0.729833      -1.31939       1.31939       172.255       173.574    
  30  0.711380     -0.340548     -0.615644      0.615644       172.252       172.868    
  31  0.853958     -0.157873     -0.285403      0.285403       171.708       171.994    
  32  0.194550      -1.63706      -2.95949       2.95949       171.345       174.304    
  33  0.972044     -0.283541E-01 -0.512586E-01  0.512586E-01   173.003       173.055    
  34  0.292837      -1.22814      -2.22023       2.22023       168.424       170.644    
  35  0.100865      -2.29397      -4.14704       4.14704       172.422       176.569    
  36  0.768654     -0.263114     -0.475658      0.475658       173.024       173.499    
  37  0.401537     -0.912456      -1.64954       1.64954       173.636       175.286    
  38  0.809292     -0.211595     -0.382522      0.382522       172.658       173.041    
  39  0.427839     -0.849009      -1.53484       1.53484       173.924       175.459    
  40  0.350578      -1.04817      -1.89489       1.89489       173.042       174.937    
  41  0.709565     -0.343104     -0.620264      0.620264       172.127       172.748    
  42  0.925864     -0.770281E-01 -0.139252      0.139252       172.689       172.828    
  43  0.470142     -0.754721      -1.36439       1.36439       170.242       171.606    
  44  0.168112      -1.78312      -3.22354       3.22354       174.467       177.690    
  45  0.858320     -0.152778     -0.276192      0.276192       172.969       173.246    
  46  0.209215      -1.56439      -2.82812       2.82812       174.034       176.862    
  47  0.925371     -0.775610E-01 -0.140215      0.140215       174.487       174.627    
  48  0.226229E-01  -3.78879      -6.84939       6.84939       173.567       180.416    
  49  0.414630     -0.880370      -1.59154       1.59154       171.272       172.864    
  50  0.588747     -0.529758     -0.957698      0.957698       175.329       176.286    
  51  0.190202      -1.65967      -3.00035       3.00035       172.968       175.968    
  52  0.669939     -0.400569     -0.724149      0.724149       171.909       172.633    
  53  0.662360     -0.411945     -0.744716      0.744716       172.730       173.475    
  54  0.491671E-01  -3.01253      -5.44606       5.44606       175.167       180.613    
  55  0.102120      -2.28160      -4.12469       4.12469       176.272       180.397    
  56  0.132651      -2.02004      -3.65183       3.65183       176.450       180.102    
  57  0.260061      -1.34684      -2.43482       2.43482       174.958       177.393    
  58  0.538873     -0.618275      -1.11772       1.11772       176.135       177.253    
  59  0.346643E-01  -3.36205      -6.07792       6.07792       174.899       180.977    
  60  0.282252      -1.26495      -2.28679       2.28679       171.377       173.664    
  61  0.184457      -1.69034      -3.05580       3.05580       172.867       175.923    
  62  0.129436      -2.04457      -3.69617       3.69617       176.040       179.736    
  63  0.803502     -0.218776     -0.395504      0.395504       175.683       176.079    
  64  0.299569      -1.20541      -2.17914       2.17914       173.929       176.108    
  65  0.298055      -1.21048      -2.18831       2.18831       174.168       176.356    
  66  0.174638      -1.74504      -3.15469       3.15469       174.808       177.963    
  67  0.901236     -0.103988     -0.187989      0.187989       177.015       177.203    
  68  0.249101      -1.38990      -2.51266       2.51266       175.444       177.957    
  69  0.118937      -2.12916      -3.84911       3.84911       172.139       175.988    
  70  0.456636     -0.783869      -1.41708       1.41708       177.249       178.666    
  71  0.826930     -0.190036     -0.343547      0.343547       173.455       173.799    
  72  0.268549      -1.31472      -2.37676       2.37676       164.098       166.475    
loop,thermsimp(1:2)       93   1.86444       3.34970    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    489        172.70          0.84          1.11         25.07          0.19          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       93
neval is:      488
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       94
neval is:      488


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      488     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.799794     -0.223401     -0.403866      0.403866       164.308       164.712    
   2  0.812618     -0.207494     -0.375109      0.375109       164.315       164.690    
   3  0.153451      -1.87438      -3.38850       3.38850       164.098       167.487    
   4  0.191065      -1.65514      -2.99217       2.99217       166.873       169.865    
   5  0.619921     -0.478164     -0.864426      0.864426       167.155       168.019    
   6  0.788743     -0.237315     -0.429019      0.429019       164.407       164.836    
   7  0.897459     -0.108188     -0.195582      0.195582       166.458       166.654    
   8  0.153705      -1.87272      -3.38551       3.38551       168.194       171.580    
   9  0.996049     -0.395849E-02 -0.715618E-02  0.715618E-02   167.732       167.739    
  10  0.560813E-01  -2.88095      -5.20820       5.20820       167.592       172.800    
  11  0.188305      -1.66969      -3.01848       3.01848       167.315       170.334    
  12  0.135074      -2.00193      -3.61910       3.61910       168.270       171.889    
  13  0.485175     -0.723245      -1.30749       1.30749       169.047       170.355    
  14  0.690741     -0.369991     -0.668870      0.668870       168.307       168.976    
  15  0.742932     -0.297150     -0.537189      0.537189       169.699       170.236    
  16  0.780541     -0.247768     -0.447917      0.447917       168.506       168.953    
  17  0.518671E-01  -2.95907      -5.34942       5.34942       168.966       174.316    
  18  0.968635     -0.318676E-01 -0.576104E-01  0.576104E-01   170.115       170.173    
  19  0.878004     -0.130104     -0.235202      0.235202       168.913       169.148    
  20  0.868279     -0.141242     -0.255338      0.255338       168.424       168.680    
  21  0.554456     -0.589768      -1.06618       1.06618       167.454       168.521    
  22  0.114030      -2.17129      -3.92527       3.92527       170.242       174.167    
  23  0.397460     -0.922661      -1.66799       1.66799       170.267       171.935    
  24  0.299789      -1.20467      -2.17782       2.17782       169.081       171.259    
  25  0.214585      -1.53905      -2.78230       2.78230       171.708       174.491    
  26  0.583444     -0.538806     -0.974055      0.974055       171.506       172.480    
  27  0.399403     -0.917786      -1.65918       1.65918       171.324       172.983    
  28  0.421825     -0.863165      -1.56043       1.56043       171.873       173.433    
  29  0.102868      -2.27431      -4.11150       4.11150       171.815       175.927    
  30  0.774422     -0.255639     -0.462145      0.462145       171.909       172.371    
  31  0.564329     -0.572118      -1.03428       1.03428       172.127       173.162    
  32  0.206718      -1.57640      -2.84982       2.84982       172.689       175.539    
  33  0.407431     -0.897885      -1.62320       1.62320       171.272       172.896    
  34  0.505624     -0.681961      -1.23285       1.23285       172.252       173.485    
  35  0.451161     -0.795932      -1.43889       1.43889       172.658       174.097    
  36  0.619041     -0.479583     -0.866992      0.866992       173.003       173.870    
  37  0.326941      -1.11798      -2.02108       2.02108       172.969       174.990    
  38  0.750232     -0.287372     -0.519513      0.519513       172.730       173.249    
  39  0.718810     -0.330159     -0.596862      0.596862       173.024       173.621    
  40  0.366798      -1.00294      -1.81312       1.81312       172.255       174.068    
  41  0.467420     -0.760527      -1.37488       1.37488       171.377       172.752    
  42  0.854905     -0.156764     -0.283399      0.283399       173.455       173.739    
  43  0.248161      -1.39368      -2.51950       2.51950       171.345       173.864    
  44  0.201563      -1.60165      -2.89547       2.89547       166.774       169.669    
  45  0.108988      -2.21652      -4.00703       4.00703       174.487       178.494    
  46  0.988176     -0.118946E-01 -0.215030E-01  0.215030E-01   173.042       173.063    
  47  0.639214     -0.447517     -0.809022      0.809022       173.636       174.445    
  48  0.165897E-01  -4.09897      -7.41014       7.41014       173.924       181.334    
  49  0.235415      -1.44641      -2.61482       2.61482       172.867       175.482    
  50  0.140842      -1.96012      -3.54351       3.54351       172.968       176.511    
  51  0.110985      -2.19836      -3.97419       3.97419       172.139       176.114    
  52  0.913750     -0.901977E-01 -0.163060      0.163060       175.683       175.846    
  53  0.841658E-01  -2.47497      -4.47425       4.47425       173.929       178.403    
  54  0.639761     -0.446660     -0.807473      0.807473       175.329       176.136    
  55  0.526985E-01  -2.94317      -5.32067       5.32067       174.168       179.489    
  56  0.523686     -0.646862      -1.16940       1.16940       172.422       173.592    
  57  0.992660     -0.736704E-02 -0.133182E-01  0.133182E-01   170.446       170.460    
  58  0.879505     -0.128396     -0.232115      0.232115       174.034       174.266    
  59  0.535415     -0.624714      -1.12936       1.12936       170.984       172.113    
  60  0.386986     -0.949366      -1.71627       1.71627       177.015       178.731    
  61  0.724451     -0.322341     -0.582728      0.582728       176.135       176.718    
  62  0.461855     -0.772505      -1.39654       1.39654       174.958       176.355    
  63  0.319705      -1.14036      -2.06154       2.06154       174.467       176.528    
  64  0.935782     -0.663723E-01 -0.119988      0.119988       175.444       175.564    
  65  0.461068     -0.774211      -1.39962       1.39962       174.808       176.208    
  66  0.141600      -1.95475      -3.53381       3.53381       177.249       180.783    
  67  0.745515     -0.293681     -0.530917      0.530917       176.040       176.571    
  68  0.902458     -0.102633     -0.185540      0.185540       176.450       176.636    
  69  0.822097     -0.195897     -0.354144      0.354144       176.272       176.626    
  70  0.495466     -0.702257      -1.26954       1.26954       173.567       174.836    
  71  0.401745     -0.911937      -1.64860       1.64860       175.167       176.816    
  72  0.576813E-02  -5.15541      -9.31996       9.31996       172.698       182.018    
loop,thermsimp(1:2)       94  0.403866      0.375109    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    490        174.90          0.84          1.11         25.03          0.18          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       94
neval is:      489
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:       95
neval is:      489


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      489     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.253064      -1.37411      -2.48412       2.48412       164.315       166.799    
   2  0.229389      -1.47233      -2.66169       2.66169       164.308       166.970    
   3  0.571162     -0.560083      -1.01252       1.01252       164.407       165.419    
   4  0.537902     -0.620079      -1.12098       1.12098       166.458       167.579    
   5  0.112268      -2.18686      -3.95342       3.95342       164.098       168.052    
   6  0.988186     -0.118842E-01 -0.214844E-01  0.214844E-01   167.732       167.754    
   7  0.358165      -1.02676      -1.85618       1.85618       167.155       169.011    
   8  0.768403     -0.263441     -0.476249      0.476249       167.454       167.931    
   9  0.493061     -0.707122      -1.27834       1.27834       168.424       169.703    
  10  0.755030     -0.280998     -0.507989      0.507989       168.506       169.014    
  11  0.380853     -0.965342      -1.74515       1.74515       168.307       170.052    
  12  0.131667      -2.02748      -3.66528       3.66528       168.913       172.578    
  13  0.812799     -0.207272     -0.374706      0.374706       166.774       167.148    
  14  0.390991     -0.939070      -1.69765       1.69765       166.873       168.570    
  15  0.782458     -0.245315     -0.443481      0.443481       170.115       170.559    
  16  0.348518E-01  -3.35665      -6.06816       6.06816       169.699       175.767    
  17  0.671068     -0.398885     -0.721106      0.721106       167.315       168.036    
  18  0.848918     -0.163793     -0.296106      0.296106       169.047       169.343    
  19  0.246224      -1.40151      -2.53366       2.53366       170.446       172.980    
  20  0.548254     -0.601017      -1.08652       1.08652       169.081       170.168    
  21  0.496910     -0.699346      -1.26428       1.26428       168.194       169.458    
  22  0.621299     -0.475942     -0.860410      0.860410       168.270       169.131    
  23  0.222686      -1.50199      -2.71531       2.71531       170.267       172.982    
  24  0.541907     -0.612662      -1.10757       1.10757       170.984       172.091    
  25  0.599206     -0.512150     -0.925866      0.925866       171.909       172.835    
  26  0.147915      -1.91112      -3.45492       3.45492       171.506       174.961    
  27  0.952413     -0.487561E-01 -0.881414E-01  0.881414E-01   171.377       171.465    
  28  0.981186     -0.189927E-01 -0.343351E-01  0.343351E-01   167.592       167.626    
  29  0.560306     -0.579272      -1.04721       1.04721       171.272       172.320    
  30  0.892317     -0.113934     -0.205970      0.205970       171.324       171.530    
  31  0.936237E-03  -6.97364      -12.6070       12.6070       173.042       185.649    
  32  0.367075      -1.00219      -1.81176       1.81176       172.127       173.939    
  33  0.440672     -0.819456      -1.48141       1.48141       172.730       174.211    
  34  0.928002     -0.747214E-01 -0.135082      0.135082       171.873       172.008    
  35  0.424766     -0.856216      -1.54787       1.54787       172.252       173.800    
  36  0.846974     -0.166085     -0.300249      0.300249       172.422       172.722    
  37  0.581252     -0.542571     -0.980861      0.980861       173.024       174.005    
  38  0.316247      -1.15123      -2.08120       2.08120       173.455       175.536    
  39  0.211145E-01  -3.85779      -6.97413       6.97413       171.345       178.319    
  40  0.698864     -0.358299     -0.647734      0.647734       173.003       173.651    
  41  0.616376     -0.483899     -0.874794      0.874794       172.255       173.130    
  42  0.744369     -0.295219     -0.533698      0.533698       172.658       173.192    
  43  0.165839      -1.79674      -3.24815       3.24815       170.242       173.490    
  44  0.605775     -0.501246     -0.906155      0.906155       174.034       174.940    
  45  0.594138     -0.520643     -0.941220      0.941220       168.966       169.907    
  46  0.120602      -2.11526      -3.82397       3.82397       173.636       177.460    
  47  0.614289     -0.487290     -0.880925      0.880925       171.708       172.589    
  48  0.128959E-01  -4.35085      -7.86548       7.86548       173.567       181.432    
  49  0.863875     -0.146327     -0.264531      0.264531       172.969       173.234    
  50  0.984175     -0.159514E-01 -0.288371E-01  0.288371E-01   172.867       172.896    
  51  0.193234      -1.64385      -2.97176       2.97176       172.689       175.661    
  52  0.821829     -0.196223     -0.354732      0.354732       175.444       175.799    
  53  0.513646     -0.666220      -1.20439       1.20439       175.683       176.887    
  54  0.572807     -0.557207      -1.00732       1.00732       171.815       172.823    
  55  0.298452      -1.20915      -2.18590       2.18590       172.139       174.325    
  56  0.604405     -0.503511     -0.910248      0.910248       175.329       176.239    
  57  0.786763     -0.239828     -0.433562      0.433562       174.808       175.242    
  58  0.761650     -0.272268     -0.492206      0.492206       174.958       175.451    
  59  0.970170     -0.302843E-01 -0.547481E-01  0.547481E-01   172.968       173.022    
  60  0.823313     -0.194418     -0.351470      0.351470       174.467       174.818    
  61  0.632020     -0.458835     -0.829483      0.829483       176.040       176.869    
  62  0.146333      -1.92187      -3.47437       3.47437       176.272       179.746    
  63  0.626222     -0.468050     -0.846142      0.846142       176.450       177.296    
  64  0.772069     -0.258681     -0.467644      0.467644       176.135       176.603    
  65  0.265373      -1.32662      -2.39826       2.39826       175.167       177.565    
  66  0.165877      -1.79651      -3.24773       3.24773       173.929       177.177    
  67  0.270922      -1.30593      -2.36086       2.36086       174.487       176.848    
  68  0.993960     -0.605821E-02 -0.109521E-01  0.109521E-01   177.015       177.026    
  69  0.270418      -1.30779      -2.36422       2.36422       174.168       176.532    
  70  0.329078E-01  -3.41404      -6.17192       6.17192       177.249       183.421    
  71  0.993879     -0.613984E-02 -0.110996E-01  0.110996E-01   173.924       173.935    
  72  0.998306     -0.169562E-02 -0.306535E-02  0.306535E-02   174.899       174.902    
loop,thermsimp(1:2)       95   2.48412       2.66169    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    491        164.62          0.83          1.11         25.02          0.22          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    492        166.50          0.84          1.12         25.03          0.21          0.05         27.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:       95
neval is:      491
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   3.36027    

hmean,hstd :    171.360       3.36027    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    171.360       3.36027    
h(1),h(best1),h(np1) :    164.407       164.098       164.616    
htherm(1),htherm(best1),htherm(np1) :    165.419       168.052       185.649    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    493        168.64          0.84          1.11         25.30          0.22          0.05         27.52

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
   0.97299      -1.4961       2.0420      -102.61      0.88054      0.19672    
    1.7497      -99.703       3.5770      0.31171       2.1092      -1.5840    
    2.0269       0.0000      -40.000      -1.2435       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       35100.       30787.       0.0000    

    0.0000     -0.56724      -6.0850      -4.5680      -7.8530       5.0870    
   -14.717      -3.0183       136.65       0.0000      -575.67      -5814.9    
    8518.8      -2523.6       97668.       523.58       5923.7     -0.50977E-02
   0.63740E-02   0.0000      0.48821E-01 -0.32778E-01  0.22353E-02  0.43347E-01

   0.18729E-01  0.18627E-01 -0.14078     -0.93868       0.0000     -0.67436E-01
   0.53386E-02   0.0000     -0.53532E-01 -0.38411E-01 -0.41229E-01 -0.73742E-02
   0.10158E-01  0.13102E-01 -0.23693      -1.1367       0.0000     -0.15936    
  -0.53113     -0.62247     -0.50802     -0.91530E-01  0.10492       9.0106    

    8.7913      -4880.4      -4.0000     -0.40044     -0.74770       9.1021    
    8.7641      -5522.9      -4.0000      0.23112     -0.84090       8.9491    
    8.8511      -3704.2      -7.0000     -0.27358     -0.83302       9.0438    
    8.8142      -5749.1      -7.0000    
 Function value at centroid =   168.637    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:        1
neval is:      492


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      492     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.704949     -0.349630     -0.632062      0.632062       164.407       165.039    
   2  0.970994     -0.294346E-01 -0.532119E-01  0.532119E-01   164.315       164.368    
   3  0.665247     -0.407596     -0.736854      0.736854       164.308       165.045    
   4  0.679606     -0.386241     -0.698248      0.698248       166.774       167.472    
   5  0.216334      -1.53093      -2.76762       2.76762       166.458       169.226    
   6  0.920084     -0.832900E-01 -0.150572      0.150572       167.592       167.743    
   7  0.922000     -0.812099E-01 -0.146811      0.146811       167.732       167.879    
   8  0.387073     -0.949143      -1.71586       1.71586       167.454       169.170    
   9  0.392085     -0.936277      -1.69261       1.69261       167.315       169.008    
  10  0.559162     -0.581315      -1.05090       1.05090       164.098       165.149    
  11  0.552599     -0.593124      -1.07225       1.07225       166.873       167.945    
  12  0.657815     -0.418831     -0.757164      0.757164       167.155       167.912    
  13  0.755087     -0.280923     -0.507853      0.507853       168.506       169.013    
  14  0.183724      -1.69432      -3.06300       3.06300       168.270       171.333    
  15  0.889314     -0.117305     -0.212065      0.212065       169.047       169.259    
  16  0.346116      -1.06098      -1.91805       1.91805       168.194       170.112    
  17  0.212120      -1.55060      -2.80319       2.80319       168.424       171.227    
  18  0.409709     -0.892309      -1.61312       1.61312       168.966       170.579    
  19  0.288781      -1.24209      -2.24545       2.24545       168.307       170.552    
  20  0.470431     -0.754106      -1.36327       1.36327       169.081       170.444    
  21  0.335548      -1.09199      -1.97410       1.97410       170.115       172.089    
  22  0.188346      -1.66947      -3.01808       3.01808       171.377       174.395    
  23  0.546572     -0.604090      -1.09208       1.09208       171.324       172.416    
  24  0.258243      -1.35386      -2.44750       2.44750       171.873       174.320    
  25  0.544051     -0.608712      -1.10043       1.10043       170.984       172.084    
  26  0.594635     -0.519807     -0.939709      0.939709       171.272       172.212    
  27  0.342233      -1.07226      -1.93844       1.93844       168.913       170.851    
  28  0.309367      -1.17323      -2.12096       2.12096       171.708       173.829    
  29  0.717331E-01  -2.63480      -4.76321       4.76321       172.422       177.185    
  30  0.443944E-02  -5.41723      -9.79328       9.79328       171.815       181.609    
  31  0.901850     -0.103307     -0.186758      0.186758       171.909       172.096    
  32  0.289566      -1.23937      -2.24054       2.24054       172.867       175.108    
  33  0.824723     -0.192707     -0.348377      0.348377       170.446       170.795    
  34  0.830455     -0.185782     -0.335857      0.335857       170.267       170.603    
  35  0.656263     -0.421194     -0.761435      0.761435       172.968       173.729    
  36  0.170687      -1.76792      -3.19606       3.19606       172.255       175.451    
  37  0.455052     -0.787343      -1.42336       1.42336       172.658       174.082    
  38  0.531062     -0.632876      -1.14411       1.14411       172.969       174.113    
  39  0.958848     -0.420222E-01 -0.759679E-01  0.759679E-01   170.242       170.318    
  40  0.660041     -0.415453     -0.751057      0.751057       173.003       173.755    
  41  0.598625     -0.513120     -0.927620      0.927620       172.252       173.180    
  42  0.303046      -1.19387      -2.15828       2.15828       173.924       176.083    
  43  0.742116     -0.298250     -0.539177      0.539177       172.127       172.666    
  44  0.426280     -0.852660      -1.54144       1.54144       173.024       174.565    
  45  0.891558     -0.114785     -0.207509      0.207509       172.730       172.937    
  46  0.399357     -0.917899      -1.65938       1.65938       172.139       173.799    
  47  0.526711     -0.641104      -1.15899       1.15899       174.467       175.626    
  48  0.616864     -0.483107     -0.873362      0.873362       174.899       175.772    
  49  0.783244E-01  -2.54690      -4.60429       4.60429       174.034       178.638    
  50  0.178515      -1.72308      -3.11499       3.11499       171.506       174.621    
  51  0.699546     -0.357324     -0.645972      0.645972       174.808       175.454    
  52  0.378655     -0.971130      -1.75561       1.75561       174.958       176.714    
  53  0.786873     -0.239688     -0.433309      0.433309       173.455       173.889    
  54  0.516765     -0.660167      -1.19345       1.19345       172.689       173.883    
  55  0.375855     -0.978552      -1.76903       1.76903       169.699       171.468    
  56  0.142236      -1.95026      -3.52569       3.52569       175.444       178.970    
  57  0.318918      -1.14282      -2.06600       2.06600       175.329       177.395    
  58  0.577834E-01  -2.85105      -5.15414       5.15414       174.168       179.322    
  59  0.482567     -0.728635      -1.31723       1.31723       176.135       177.453    
  60  0.990335     -0.971224E-02 -0.175578E-01  0.175578E-01   174.487       174.504    
  61  0.707581     -0.345903     -0.625325      0.625325       176.040       176.665    
  62  0.254289      -1.36928      -2.47540       2.47540       175.683       178.158    
  63  0.457064     -0.782932      -1.41539       1.41539       177.015       178.430    
  64  0.559547     -0.580628      -1.04966       1.04966       173.929       174.979    
  65  0.217313      -1.52641      -2.75946       2.75946       176.450       179.210    
  66  0.260896      -1.34363      -2.42903       2.42903       173.636       176.065    
  67  0.472338     -0.750060      -1.35596       1.35596       175.167       176.523    
  68  0.145085      -1.93043      -3.48984       3.48984       171.345       174.834    
  69  0.417611E-02  -5.47837      -9.90382       9.90382       176.272       186.176    
  70  0.230608E-01  -3.76962      -6.81473       6.81473       173.567       180.382    
  71  0.793921     -0.230771     -0.417188      0.417188       177.249       177.666    
  72  0.850658     -0.161745     -0.292403      0.292403       164.616       164.908    
loop,thermsimp(1:2)        1  0.632062      0.532119E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    494        174.32          0.84          1.11         25.23          0.13          0.05         27.37
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:        1
neval is:      493
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:        2
neval is:      493


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      493     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.934282     -0.679771E-01 -0.122889      0.122889       164.315       164.437    
   2  0.959826     -0.410037E-01 -0.741266E-01  0.741266E-01   164.616       164.690    
   3  0.673594     -0.395128     -0.714313      0.714313       164.407       165.121    
   4  0.779876     -0.248621     -0.449457      0.449457       164.308       164.758    
   5  0.445258     -0.809102      -1.46270       1.46270       164.098       165.561    
   6  0.730020     -0.314684     -0.568887      0.568887       166.774       167.342    
   7  0.373553     -0.984697      -1.78014       1.78014       167.592       169.372    
   8  0.502695     -0.687771      -1.24336       1.24336       167.732       168.975    
   9  0.752227     -0.284717     -0.514712      0.514712       167.155       167.669    
  10  0.496558     -0.700055      -1.26556       1.26556       166.873       168.138    
  11  0.642076     -0.443049     -0.800944      0.800944       167.315       168.116    
  12  0.278090      -1.27981      -2.31364       2.31364       168.506       170.819    
  13  0.306173E-02  -5.78878      -10.4650       10.4650       167.454       177.919    
  14  0.563321     -0.573906      -1.03751       1.03751       166.458       167.496    
  15  0.393175     -0.933500      -1.68758       1.68758       169.047       170.735    
  16  0.122356E-01  -4.40341      -7.96050       7.96050       168.194       176.155    
  17  0.720206     -0.328218     -0.593353      0.593353       170.242       170.835    
  18  0.677984     -0.388632     -0.702571      0.702571       169.081       169.784    
  19  0.690144     -0.370855     -0.670433      0.670433       168.307       168.977    
  20  0.434024     -0.834656      -1.50889       1.50889       168.966       170.475    
  21  0.765725     -0.266932     -0.482560      0.482560       170.267       170.749    
  22  0.225865      -1.48782      -2.68968       2.68968       170.446       173.136    
  23  0.765632     -0.267054     -0.482781      0.482781       168.913       169.395    
  24  0.719977     -0.328536     -0.593928      0.593928       168.424       169.018    
  25  0.670210     -0.400164     -0.723417      0.723417       168.270       168.994    
  26  0.733967     -0.309291     -0.559137      0.559137       169.699       170.258    
  27  0.102650      -2.27643      -4.11533       4.11533       170.984       175.099    
  28  0.943364     -0.583033E-01 -0.105401      0.105401       170.115       170.221    
  29  0.813300     -0.206656     -0.373593      0.373593       171.909       172.282    
  30  0.441171     -0.818323      -1.47937       1.47937       171.272       172.752    
  31  0.986663     -0.134264E-01 -0.242723E-01  0.242723E-01   171.324       171.348    
  32  0.392748     -0.934588      -1.68955       1.68955       172.127       173.817    
  33  0.566634     -0.568042      -1.02691       1.02691       172.730       173.757    
  34  0.256244      -1.36162      -2.46155       2.46155       172.252       174.714    
  35  0.288015      -1.24474      -2.25025       2.25025       172.968       175.218    
  36  0.636551     -0.451691     -0.816569      0.816569       173.003       173.820    
  37  0.283424      -1.26081      -2.27930       2.27930       172.139       174.419    
  38  0.492002     -0.709273      -1.28223       1.28223       171.708       172.991    
  39  0.667434     -0.404315     -0.730922      0.730922       172.689       173.420    
  40  0.418456     -0.871184      -1.57493       1.57493       173.455       175.030    
  41  0.218030      -1.52312      -2.75351       2.75351       172.658       175.412    
  42  0.693223     -0.366404     -0.662387      0.662387       172.969       173.632    
  43  0.261018      -1.34316      -2.42818       2.42818       171.873       174.301    
  44  0.889516     -0.117078     -0.211654      0.211654       171.377       171.589    
  45  0.815048     -0.204509     -0.369712      0.369712       174.487       174.857    
  46  0.916438     -0.872606E-01 -0.157750      0.157750       173.024       173.182    
  47  0.426654     -0.851781      -1.53985       1.53985       171.506       173.046    
  48  0.730475     -0.314060     -0.567758      0.567758       171.345       171.912    
  49  0.145228      -1.92945      -3.48806       3.48806       173.929       177.417    
  50  0.753657     -0.282818     -0.511280      0.511280       172.867       173.379    
  51  0.904814     -0.100026     -0.180827      0.180827       172.255       172.436    
  52  0.452134     -0.793777      -1.43499       1.43499       174.808       176.243    
  53  0.545070     -0.606840      -1.09705       1.09705       174.467       175.564    
  54  0.441322     -0.817979      -1.47875       1.47875       174.899       176.378    
  55  0.769674     -0.261788     -0.473261      0.473261       173.636       174.110    
  56  0.978900     -0.213256E-01 -0.385525E-01  0.385525E-01   173.924       173.963    
  57  0.206303E-01  -3.88099      -7.01607       7.01607       175.167       182.183    
  58  0.898283     -0.107271     -0.193924      0.193924       176.040       176.234    
  59  0.238292      -1.43426      -2.59286       2.59286       174.958       177.551    
  60  0.416889     -0.874935      -1.58171       1.58171       172.422       174.004    
  61  0.549100     -0.599475      -1.08373       1.08373       175.329       176.412    
  62  0.368445     -0.998464      -1.80503       1.80503       176.135       177.940    
  63  0.313833E-01  -3.46148      -6.25767       6.25767       177.249       183.507    
  64  0.868875     -0.140556     -0.254098      0.254098       175.683       175.937    
  65  0.174335      -1.74678      -3.15783       3.15783       177.015       180.172    
  66  0.399251     -0.918166      -1.65986       1.65986       174.034       175.694    
  67  0.786788     -0.239797     -0.433505      0.433505       175.444       175.878    
  68  0.542903     -0.610824      -1.10425       1.10425       176.450       177.555    
  69  0.864063     -0.146110     -0.264138      0.264138       174.168       174.432    
  70  0.323872      -1.12741      -2.03813       2.03813       173.567       175.605    
  71  0.712436     -0.339065     -0.612962      0.612962       171.815       172.428    
  72  0.516965     -0.659781      -1.19275       1.19275       174.318       175.511    
loop,thermsimp(1:2)        2  0.122889      0.741266E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    495        175.36          0.84          1.11         25.02          0.20          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:        2
neval is:      494
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:        3
neval is:      494


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      494     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.672644     -0.396539     -0.716865      0.716865       164.315       165.031    
   2  0.422499     -0.861569      -1.55755       1.55755       164.616       166.173    
   3  0.983039     -0.171063E-01 -0.309247E-01  0.309247E-01   164.308       164.339    
   4  0.823694     -0.193957     -0.350635      0.350635       164.407       164.758    
   5  0.410952E-01  -3.19186      -5.77026       5.77026       164.098       169.869    
   6  0.982524     -0.176301E-01 -0.318718E-01  0.318718E-01   166.774       166.805    
   7  0.133811      -2.01132      -3.63608       3.63608       166.458       170.094    
   8  0.737716     -0.304197     -0.549928      0.549928       167.155       167.704    
   9  0.551985     -0.594234      -1.07426       1.07426       167.315       168.389    
  10  0.506707     -0.679823      -1.22899       1.22899       166.873       168.102    
  11  0.513830     -0.665862      -1.20375       1.20375       167.732       168.936    
  12  0.888541     -0.118174     -0.213636      0.213636       168.307       168.521    
  13  0.127317      -2.06108      -3.72602       3.72602       168.270       171.996    
  14  0.196115      -1.62905      -2.94501       2.94501       168.424       171.369    
  15  0.332258      -1.10184      -1.99192       1.99192       167.592       169.584    
  16  0.809198     -0.211711     -0.382732      0.382732       168.913       169.295    
  17  0.238368      -1.43394      -2.59228       2.59228       169.081       171.673    
  18  0.275854      -1.28788      -2.32824       2.32824       170.115       172.443    
  19  0.977786     -0.224645E-01 -0.406115E-01  0.406115E-01   169.699       169.740    
  20  0.941455     -0.603283E-01 -0.109062      0.109062       168.966       169.075    
  21  0.197399      -1.62253      -2.93321       2.93321       169.047       171.980    
  22  0.410731     -0.889818      -1.60862       1.60862       170.267       171.875    
  23  0.756764     -0.278703     -0.503841      0.503841       168.506       169.009    
  24  0.250649      -1.38370      -2.50146       2.50146       170.242       172.743    
  25  0.519688E-01  -2.95711      -5.34587       5.34587       171.324       176.670    
  26  0.112052      -2.18879      -3.95691       3.95691       171.377       175.334    
  27  0.941464     -0.603191E-01 -0.109045      0.109045       171.345       171.454    
  28  0.394389     -0.930418      -1.68201       1.68201       171.909       173.591    
  29  0.215768      -1.53355      -2.77236       2.77236       171.815       174.588    
  30  0.956538     -0.444349E-01 -0.803295E-01  0.803295E-01   172.255       172.335    
  31  0.956019     -0.449770E-01 -0.813096E-01  0.813096E-01   171.272       171.354    
  32  0.475944     -0.742456      -1.34221       1.34221       171.708       173.051    
  33  0.891330     -0.115041     -0.207971      0.207971       171.506       171.714    
  34  0.535773     -0.624045      -1.12815       1.12815       170.446       171.575    
  35  0.254937      -1.36674      -2.47079       2.47079       173.024       175.495    
  36  0.973803     -0.265463E-01 -0.479905E-01  0.479905E-01   172.867       172.915    
  37  0.562546     -0.575283      -1.04000       1.04000       172.689       173.729    
  38  0.753728     -0.282724     -0.511109      0.511109       172.969       173.480    
  39  0.958046     -0.428600E-01 -0.774824E-01  0.774824E-01   172.730       172.807    
  40  0.362330      -1.01520      -1.83528       1.83528       172.127       173.963    
  41  0.752266     -0.284666     -0.514619      0.514619       173.003       173.518    
  42  0.330315      -1.10771      -2.00252       2.00252       173.924       175.927    
  43  0.637582     -0.450073     -0.813642      0.813642       172.422       173.236    
  44  0.690082E-01  -2.67353      -4.83322       4.83322       173.636       178.470    
  45  0.613234     -0.489009     -0.884032      0.884032       171.873       172.757    
  46  0.127887      -2.05661      -3.71794       3.71794       172.139       175.857    
  47  0.487824     -0.717801      -1.29764       1.29764       174.168       175.466    
  48  0.569313     -0.563325      -1.01838       1.01838       172.252       173.271    
  49  0.508604     -0.676086      -1.22223       1.22223       174.487       175.709    
  50  0.977129     -0.231365E-01 -0.418263E-01  0.418263E-01   173.455       173.497    
  51  0.755495     -0.280382     -0.506876      0.506876       170.984       171.491    
  52  0.459287     -0.778079      -1.40661       1.40661       172.968       174.374    
  53  0.588474     -0.530223     -0.958539      0.958539       172.658       173.617    
  54  0.976970     -0.232993E-01 -0.421206E-01  0.421206E-01   174.318       174.360    
  55  0.468748     -0.757689      -1.36975       1.36975       174.467       175.836    
  56  0.892888     -0.113294     -0.204814      0.204814       173.567       173.772    
  57  0.560330     -0.579229      -1.04713       1.04713       174.034       175.081    
  58  0.155479      -1.86125      -3.36476       3.36476       175.444       178.809    
  59  0.924656     -0.783331E-01 -0.141611      0.141611       175.683       175.825    
  60  0.200443      -1.60723      -2.90555       2.90555       168.194       171.100    
  61  0.482314     -0.729159      -1.31818       1.31818       176.040       177.358    
  62  0.504878     -0.683438      -1.23552       1.23552       174.808       176.044    
  63  0.941371     -0.604184E-01 -0.109225      0.109225       174.899       175.008    
  64  0.765712     -0.266949     -0.482591      0.482591       175.329       175.811    
  65  0.424415     -0.857044      -1.54937       1.54937       173.929       175.478    
  66  0.917599     -0.859950E-01 -0.155462      0.155462       174.958       175.114    
  67  0.912239     -0.918533E-01 -0.166053      0.166053       176.450       176.616    
  68  0.263592      -1.33335      -2.41044       2.41044       167.454       169.865    
  69  0.658953     -0.417103     -0.754041      0.754041       176.135       176.889    
  70  0.122045      -2.10337      -3.80247       3.80247       177.015       180.817    
  71  0.538098     -0.619715      -1.12032       1.12032       175.167       176.287    
  72  0.877616     -0.130546     -0.236001      0.236001       175.358       175.594    
loop,thermsimp(1:2)        3  0.716865       1.55755    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    496        169.67          0.84          1.11         25.09          0.19          0.04         27.26
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    169.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:        3
neval is:      495
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:        4
neval is:      495


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      495     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.798513     -0.225003     -0.406762      0.406762       164.308       164.715    
   2  0.638408     -0.448778     -0.811301      0.811301       164.407       165.218    
   3  0.680643     -0.384717     -0.695492      0.695492       164.315       165.010    
   4  0.961577     -0.391809E-01 -0.708314E-01  0.708314E-01   164.616       164.686    
   5  0.847986     -0.164892     -0.298092      0.298092       166.774       167.072    
   6  0.272167      -1.30134      -2.35256       2.35256       167.155       169.507    
   7  0.617328     -0.482354     -0.872002      0.872002       166.873       167.745    
   8  0.988374     -0.116944E-01 -0.211412E-01  0.211412E-01   167.315       167.336    
   9  0.542264     -0.612001      -1.10638       1.10638       168.307       169.413    
  10  0.415814     -0.877516      -1.58638       1.58638       167.732       169.318    
  11  0.267384      -1.31907      -2.38462       2.38462       168.506       170.890    
  12  0.457473     -0.782037      -1.41377       1.41377       168.966       170.380    
  13  0.652976     -0.426215     -0.770513      0.770513       168.913       169.683    
  14  0.358056      -1.02707      -1.85673       1.85673       167.592       169.449    
  15  0.872742     -0.136115     -0.246069      0.246069       169.699       169.945    
  16  0.903157     -0.101859     -0.184141      0.184141       167.454       167.639    
  17  0.177047      -1.73134      -3.12992       3.12992       164.098       167.228    
  18  0.302956      -1.19417      -2.15882       2.15882       166.458       168.617    
  19  0.948694     -0.526688E-01 -0.952148E-01  0.952148E-01   168.194       168.289    
  20  0.692226     -0.367843     -0.664988      0.664988       171.272       171.937    
  21  0.466535     -0.762421      -1.37831       1.37831       168.424       169.802    
  22  0.159230      -1.83741      -3.32167       3.32167       171.345       174.666    
  23  0.573784     -0.555503      -1.00424       1.00424       170.984       171.988    
  24  0.294604      -1.22212      -2.20936       2.20936       170.446       172.656    
  25  0.619338     -0.479105     -0.866127      0.866127       169.081       169.947    
  26  0.357513      -1.02858      -1.85948       1.85948       171.506       173.365    
  27  0.135435      -1.99926      -3.61428       3.61428       170.267       173.881    
  28  0.490167     -0.713010      -1.28898       1.28898       169.047       170.336    
  29  0.409560     -0.892671      -1.61377       1.61377       168.270       169.884    
  30  0.657018     -0.420044     -0.759358      0.759358       172.255       173.014    
  31  0.410122     -0.891301      -1.61130       1.61130       170.115       171.726    
  32  0.407218     -0.898406      -1.62414       1.62414       170.242       171.866    
  33  0.932850     -0.695113E-01 -0.125663      0.125663       171.873       171.998    
  34  0.139206      -1.97180      -3.56463       3.56463       172.730       176.295    
  35  0.416824     -0.875091      -1.58199       1.58199       172.867       174.449    
  36  0.665493     -0.407227     -0.736186      0.736186       171.708       172.445    
  37  0.948852     -0.525019E-01 -0.949132E-01  0.949132E-01   172.422       172.517    
  38  0.110908      -2.19906      -3.97546       3.97546       172.252       176.228    
  39  0.116497      -2.14989      -3.88657       3.88657       172.969       176.856    
  40  0.835798     -0.179369     -0.324264      0.324264       173.455       173.780    
  41  0.389785     -0.942161      -1.70324       1.70324       173.003       174.707    
  42  0.689009     -0.372500     -0.673407      0.673407       171.909       172.582    
  43  0.599122     -0.512291     -0.926121      0.926121       172.658       173.584    
  44  0.977477E-01  -2.32537      -4.20380       4.20380       172.689       176.893    
  45  0.394232     -0.930817      -1.68273       1.68273       173.567       175.250    
  46  0.785039E-01  -2.54461      -4.60015       4.60015       172.127       176.727    
  47  0.983301     -0.168402E-01 -0.304437E-01  0.304437E-01   174.318       174.349    
  48  0.997277     -0.272636E-02 -0.492872E-02  0.492872E-02   172.968       172.973    
  49  0.846943     -0.166122     -0.300316      0.300316       171.815       172.116    
  50  0.410104     -0.891345      -1.61138       1.61138       174.899       176.511    
  51  0.149186      -1.90256      -3.43945       3.43945       174.034       177.473    
  52  0.721509     -0.326411     -0.590086      0.590086       174.958       175.548    
  53  0.181367      -1.70723      -3.08634       3.08634       171.377       174.464    
  54  0.110612      -2.20172      -3.98028       3.98028       174.168       178.148    
  55  0.418270     -0.871629      -1.57573       1.57573       173.929       175.505    
  56  0.477704     -0.738764      -1.33554       1.33554       173.024       174.359    
  57  0.698619     -0.358649     -0.648367      0.648367       175.358       176.007    
  58  0.887281     -0.119593     -0.216201      0.216201       174.487       174.703    
  59  0.988592     -0.114738E-01 -0.207424E-01  0.207424E-01   175.329       175.349    
  60  0.144318      -1.93573      -3.49943       3.49943       175.683       179.182    
  61  0.225110      -1.49117      -2.69574       2.69574       174.467       177.162    
  62  0.625266     -0.469578     -0.848905      0.848905       172.139       172.988    
  63  0.380625E-01  -3.26853      -5.90885       5.90885       173.924       179.833    
  64  0.411656     -0.887567      -1.60455       1.60455       174.808       176.413    
  65  0.278026E-01  -3.58263      -6.47668       6.47668       175.167       181.644    
  66  0.233945      -1.45267      -2.62614       2.62614       176.450       179.076    
  67  0.674798     -0.393342     -0.711085      0.711085       171.324       172.035    
  68  0.196388      -1.62766      -2.94249       2.94249       176.135       179.078    
  69  0.622519     -0.473981     -0.856864      0.856864       176.040       176.897    
  70  0.247008      -1.39833      -2.52791       2.52791       173.636       176.164    
  71  0.443062     -0.814045      -1.47163       1.47163       175.444       176.916    
  72  0.989088     -0.109720E-01 -0.198352E-01  0.198352E-01   169.673       169.692    
loop,thermsimp(1:2)        4  0.406762      0.811301    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    497        164.38          0.84          1.11         25.03          0.26          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    498        181.32          0.84          1.12         25.01          0.15          0.05         27.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:        4
neval is:      497
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:        5
neval is:      497


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      497     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.811489     -0.208884     -0.377621      0.377621       164.616       164.993    
   2  0.731551     -0.312588     -0.565098      0.565098       164.308       164.873    
   3  0.757108     -0.278250     -0.503021      0.503021       164.315       164.818    
   4  0.684238     -0.379449     -0.685969      0.685969       164.407       165.093    
   5  0.371195     -0.991029      -1.79159       1.79159       166.774       168.565    
   6  0.302280      -1.19640      -2.16286       2.16286       164.098       166.261    
   7  0.927809     -0.749297E-01 -0.135458      0.135458       167.315       167.451    
   8  0.535678     -0.624221      -1.12847       1.12847       167.454       168.583    
   9  0.724827     -0.321822     -0.581790      0.581790       166.873       167.455    
  10  0.660067     -0.415415     -0.750988      0.750988       168.194       168.945    
  11  0.907930E-01  -2.39917      -4.33723       4.33723       166.458       170.795    
  12  0.664112E-01  -2.71189      -4.90256       4.90256       167.732       172.635    
  13  0.502773     -0.687617      -1.24308       1.24308       168.307       169.550    
  14  0.361422      -1.01771      -1.83982       1.83982       167.592       169.432    
  15  0.308497E-01  -3.47863      -6.28868       6.28868       167.155       173.443    
  16  0.174600      -1.74526      -3.15508       3.15508       168.913       172.068    
  17  0.162978      -1.81414      -3.27961       3.27961       169.673       172.952    
  18  0.427923     -0.848811      -1.53448       1.53448       168.424       169.959    
  19  0.534694     -0.626061      -1.13179       1.13179       168.270       169.402    
  20  0.647569     -0.434529     -0.785544      0.785544       169.699       170.485    
  21  0.373550     -0.984702      -1.78015       1.78015       169.081       170.861    
  22  0.804103     -0.218028     -0.394152      0.394152       169.047       169.441    
  23  0.505198     -0.682806      -1.23438       1.23438       168.966       170.201    
  24  0.105841      -2.24582      -4.06000       4.06000       168.506       172.566    
  25  0.624957     -0.470072     -0.849797      0.849797       170.115       170.965    
  26  0.224577      -1.49354      -2.70002       2.70002       170.242       172.942    
  27  0.766222     -0.266284     -0.481389      0.481389       171.272       171.754    
  28  0.645296E-01  -2.74063      -4.95452       4.95452       170.984       175.938    
  29  0.469840     -0.755362      -1.36555       1.36555       171.873       173.238    
  30  0.618430     -0.480571     -0.868779      0.868779       171.324       172.193    
  31  0.609945     -0.494386     -0.893752      0.893752       171.815       172.709    
  32  0.838697E-01  -2.47849      -4.48062       4.48062       171.708       176.189    
  33  0.341460      -1.07453      -1.94253       1.94253       172.422       174.365    
  34  0.834322     -0.181136     -0.327458      0.327458       171.909       172.236    
  35  0.538769     -0.618468      -1.11807       1.11807       170.446       171.564    
  36  0.762709     -0.270879     -0.489696      0.489696       172.968       173.457    
  37  0.490122     -0.713101      -1.28915       1.28915       172.139       173.429    
  38  0.515825     -0.661987      -1.19674       1.19674       172.255       173.452    
  39  0.512184     -0.669072      -1.20955       1.20955       171.506       172.715    
  40  0.634134     -0.455495     -0.823446      0.823446       172.658       173.482    
  41  0.816569     -0.202643     -0.366339      0.366339       173.455       173.822    
  42  0.669400     -0.401374     -0.725605      0.725605       170.267       170.992    
  43  0.288427      -1.24331      -2.24767       2.24767       174.318       176.566    
  44  0.270539      -1.30734      -2.36341       2.36341       173.024       175.387    
  45  0.542986     -0.610673      -1.10398       1.10398       172.867       173.971    
  46  0.576168E-01  -2.85394      -5.15936       5.15936       171.377       176.537    
  47  0.236528      -1.44169      -2.60629       2.60629       171.345       173.951    
  48  0.238062      -1.43523      -2.59461       2.59461       174.487       177.081    
  49  0.363391      -1.01228      -1.83000       1.83000       173.003       174.833    
  50  0.981261     -0.189165E-01 -0.341974E-01  0.341974E-01   173.567       173.601    
  51  0.854045     -0.157772     -0.285220      0.285220       175.329       175.614    
  52  0.898703     -0.106803     -0.193079      0.193079       173.929       174.122    
  53  0.708949     -0.343971     -0.621833      0.621833       174.958       175.580    
  54  0.256844      -1.35929      -2.45733       2.45733       175.358       177.816    
  55  0.566741     -0.567853      -1.02657       1.02657       173.636       174.663    
  56  0.806938E-01  -2.51709      -4.55041       4.55041       172.252       176.803    
  57  0.155475      -1.86127      -3.36481       3.36481       172.730       176.095    
  58  0.825063     -0.192296     -0.347633      0.347633       174.808       175.156    
  59  0.990624     -0.942005E-02 -0.170296E-01  0.170296E-01   174.899       174.916    
  60  0.282655      -1.26353      -2.28421       2.28421       172.127       174.411    
  61  0.157271      -1.84978      -3.34404       3.34404       172.969       176.313    
  62  0.162524      -1.81693      -3.28465       3.28465       172.689       175.974    
  63  0.144464      -1.93473      -3.49760       3.49760       176.040       179.537    
  64  0.953298     -0.478280E-01 -0.864636E-01  0.864636E-01   175.444       175.531    
  65  0.944940     -0.566339E-01 -0.102383      0.102383       174.467       174.569    
  66  0.573983     -0.555155      -1.00361       1.00361       174.034       175.037    
  67  0.623224     -0.472850     -0.854819      0.854819       174.168       175.023    
  68  0.360393      -1.02056      -1.84497       1.84497       176.450       178.295    
  69  0.789609     -0.236218     -0.427035      0.427035       176.135       176.562    
  70  0.223724      -1.49734      -2.70690       2.70690       175.683       178.390    
  71  0.961213     -0.395591E-01 -0.715151E-01  0.715151E-01   173.924       173.996    
  72  0.290041      -1.23773      -2.23758       2.23758       164.381       166.619    
loop,thermsimp(1:2)        5  0.377621      0.565098    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    499        176.32          0.84          1.11         25.06          0.21          0.04         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:        5
neval is:      498
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:        6
neval is:      498


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      498
neval,tstepnext:      498     498

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.116004      -2.15413      -3.89424       3.89424       164.315       168.209    
   2  0.920667     -0.826568E-01 -0.149427      0.149427       164.308       164.458    
   3  0.337815      -1.08526      -1.96193       1.96193       164.616       166.577    
   4  0.862304     -0.148147     -0.267821      0.267821       164.407       164.675    
   5  0.162138      -1.81931      -3.28895       3.28895       164.098       167.387    
   6  0.207583E-01  -3.87481      -7.00489       7.00489       164.381       171.386    
   7  0.878541     -0.129492     -0.234096      0.234096       167.315       167.549    
   8  0.907223E-01  -2.39995      -4.33864       4.33864       166.873       171.211    
   9  0.174924      -1.74340      -3.15173       3.15173       166.774       169.925    
  10  0.488034     -0.717371      -1.29687       1.29687       167.454       168.751    
  11  0.204702      -1.58620      -2.86754       2.86754       168.194       171.062    
  12  0.710103     -0.342345     -0.618893      0.618893       168.270       168.889    
  13  0.211817      -1.55203      -2.80577       2.80577       167.592       170.398    
  14  0.935943     -0.662008E-01 -0.119678      0.119678       169.047       169.167    
  15  0.806563     -0.214973     -0.388628      0.388628       168.307       168.696    
  16  0.851420     -0.160850     -0.290786      0.290786       168.424       168.715    
  17  0.907489     -0.970743E-01 -0.175491      0.175491       168.966       169.142    
  18  0.147948      -1.91089      -3.45452       3.45452       169.699       173.154    
  19  0.989899     -0.101525E-01 -0.183537E-01  0.183537E-01   166.458       166.477    
  20  0.948348     -0.530338E-01 -0.958746E-01  0.958746E-01   169.081       169.177    
  21  0.856160     -0.155298     -0.280748      0.280748       170.115       170.396    
  22  0.879524     -0.128375     -0.232077      0.232077       170.267       170.499    
  23  0.796764     -0.227197     -0.410727      0.410727       170.446       170.857    
  24  0.957780     -0.431369E-01 -0.779831E-01  0.779831E-01   171.272       171.350    
  25  0.331827      -1.10314      -1.99426       1.99426       168.913       170.907    
  26  0.822007     -0.196007     -0.354341      0.354341       171.324       171.678    
  27  0.357574      -1.02841      -1.85917       1.85917       171.909       173.768    
  28  0.457030     -0.783007      -1.41552       1.41552       168.506       169.921    
  29  0.241929      -1.41911      -2.56547       2.56547       167.732       170.298    
  30  0.159420      -1.83622      -3.31952       3.31952       171.815       175.135    
  31  0.871392     -0.137663     -0.248868      0.248868       171.506       171.755    
  32  0.736579     -0.305739     -0.552717      0.552717       170.242       170.795    
  33  0.531818E-01  -2.93404      -5.30416       5.30416       169.673       174.977    
  34  0.959148     -0.417102E-01 -0.754038E-01  0.754038E-01   171.873       171.948    
  35  0.443867E-01  -3.11482      -5.63097       5.63097       172.139       177.770    
  36  0.318432      -1.14435      -2.06876       2.06876       167.155       169.223    
  37  0.235807E-01  -3.74733      -6.77443       6.77443       172.255       179.029    
  38  0.624487     -0.470824     -0.851157      0.851157       172.968       173.819    
  39  0.258614      -1.35242      -2.44490       2.44490       172.658       175.103    
  40  0.950845     -0.504045E-01 -0.911214E-01  0.911214E-01   173.567       173.658    
  41  0.169965      -1.77216      -3.20372       3.20372       173.455       176.659    
  42  0.207476      -1.57274      -2.84320       2.84320       171.345       174.188    
  43  0.704531     -0.350224     -0.633135      0.633135       172.867       173.500    
  44  0.620530     -0.477181     -0.862649      0.862649       173.924       174.787    
  45  0.749647     -0.288152     -0.520923      0.520923       173.929       174.450    
  46  0.855503     -0.156065     -0.282136      0.282136       172.422       172.704    
  47  0.860063     -0.150749     -0.272525      0.272525       172.127       172.400    
  48  0.161316      -1.82439      -3.29813       3.29813       174.467       177.765    
  49  0.388396     -0.945731      -1.70969       1.70969       173.636       175.346    
  50  0.708828     -0.344142     -0.622141      0.622141       173.003       173.626    
  51  0.157417      -1.84886      -3.34237       3.34237       174.899       178.241    
  52  0.897032     -0.108663     -0.196442      0.196442       174.168       174.364    
  53  0.199511      -1.61189      -2.91398       2.91398       174.034       176.948    
  54  0.147419      -1.91448      -3.46100       3.46100       174.808       178.269    
  55  0.226766E-01  -3.78642      -6.84510       6.84510       173.024       179.869    
  56  0.698824     -0.358357     -0.647839      0.647839       175.444       176.092    
  57  0.330302      -1.10775      -2.00259       2.00259       174.958       176.961    
  58  0.277084      -1.28343      -2.32019       2.32019       175.329       177.649    
  59  0.956947E-01  -2.34659      -4.24218       4.24218       170.984       175.226    
  60  0.694044     -0.365220     -0.660246      0.660246       172.689       173.349    
  61  0.454817     -0.787861      -1.42430       1.42430       172.730       174.154    
  62  0.114970      -2.16308      -3.91043       3.91043       171.708       175.619    
  63  0.995686     -0.432330E-02 -0.781568E-02  0.781568E-02   172.969       172.977    
  64  0.589106     -0.529149     -0.956598      0.956598       171.377       172.334    
  65  0.347938      -1.05573      -1.90855       1.90855       176.135       178.044    
  66  0.850647     -0.161758     -0.292428      0.292428       174.318       174.611    
  67  0.353119      -1.04095      -1.88183       1.88183       172.252       174.134    
  68  0.766329     -0.266144     -0.481135      0.481135       174.487       174.968    
  69  0.250978      -1.38239      -2.49909       2.49909       175.358       177.857    
  70  0.566724     -0.567883      -1.02662       1.02662       176.450       177.477    
  71  0.745826     -0.293262     -0.530160      0.530160       175.683       176.213    
  72  0.184923      -1.68782      -3.05124       3.05124       176.315       179.366    
loop,thermsimp(1:2)        6   3.89424      0.149427    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    500        165.46          0.84          1.11         25.00          0.20          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    501        168.96          0.84          1.11         25.10          0.15          0.05         27.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  500    168.96       0.8924     -1.338      2.423     -102.6     0.8504    
                     -0.6028E-01  1.670     -99.70      3.548     0.7369    
                       2.259     -1.835      2.036      0.000     -40.00    
                     -0.2991      0.000      0.000      0.000     -1.221    

                      -2.500     0.4663E+05 0.2956E+05  0.000      0.000    
                     -0.5672     -5.777     -4.719     -8.084      7.142    
                      -15.31     -2.977     -1966.      0.000     -4299.    

                     -0.4320E+05  8519.     -6873.     0.2437E+06 -5348.    
                       9689.     0.1135E-01-0.5968E-01  0.000     0.1089    
                     -0.2048     0.4892E-01 0.6889E-01 0.1636E-01-0.3542E-02

                     -0.2578    -0.8227      0.000    -0.1220    -0.3836E-01
                       0.000    -0.2336    -0.8141E-01 0.7260    -0.2313E-01
                     -0.2785E-01 0.6074E-01-0.6889     -1.227      0.000    

                     -0.5841     -1.117    -0.8496    -0.4831    -0.1474    
                     -0.1352      9.167      8.808     -3429.     -4.000    
                     -0.4463    -0.8350      9.358      8.688     -6259.    

                      -4.000     0.4650     -1.195      8.936      8.835    
                      -3281.     -7.000     0.3578E-01-0.9672      9.214    
                       8.819     -7054.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    165.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.80780               498
loop is:        6
neval is:      500
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:    1.80780               498
loop is:        7
neval is:      500


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.903902               569

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      500     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932199     -0.702091E-01 -0.634621E-01  0.634621E-01   164.308       164.372    
   2  0.510325     -0.672708     -0.608061      0.608061       164.407       165.015    
   3  0.863839     -0.146369     -0.132303      0.132303       166.458       166.590    
   4  0.707053     -0.346650     -0.313338      0.313338       164.616       164.929    
   5  0.808834     -0.212161     -0.191773      0.191773       164.098       164.290    
   6  0.684501     -0.379065     -0.342637      0.342637       167.315       167.658    
   7  0.386513     -0.950589     -0.859238      0.859238       164.315       165.174    
   8  0.480058     -0.733848     -0.663326      0.663326       168.307       168.970    
   9  0.697801     -0.359821     -0.325243      0.325243       168.424       168.749    
  10  0.806131     -0.215509     -0.194799      0.194799       167.454       167.649    
  11  0.529485     -0.635851     -0.574747      0.574747       168.270       168.845    
  12  0.547496     -0.602400     -0.544510      0.544510       168.966       169.511    
  13  0.502177     -0.688802     -0.622609      0.622609       169.047       169.670    
  14  0.714156E-01  -2.63924      -2.38561       2.38561       169.081       171.467    
  15  0.676238     -0.391210     -0.353615      0.353615       167.155       167.508    
  16  0.225230      -1.49063      -1.34739       1.34739       168.506       169.853    
  17  0.587852     -0.531281     -0.480225      0.480225       166.774       167.254    
  18  0.156670      -1.85361      -1.67549       1.67549       167.732       169.408    
  19  0.116250      -2.15201      -1.94521       1.94521       170.115       172.060    
  20  0.549251     -0.599199     -0.541617      0.541617       167.592       168.134    
  21  0.926231     -0.766317E-01 -0.692675E-01  0.692675E-01   170.267       170.336    
  22  0.269854      -1.30987      -1.18400       1.18400       170.242       171.426    
  23  0.388677E-01  -3.24759      -2.93550       2.93550       170.446       173.382    
  24  0.497689     -0.697780     -0.630725      0.630725       168.913       169.543    
  25  0.125376      -2.07644      -1.87690       1.87690       168.194       170.071    
  26  0.957877E-01  -2.34562      -2.12021       2.12021       166.873       168.993    
  27  0.739546     -0.301719     -0.272724      0.272724       171.272       171.545    
  28  0.300448      -1.20248      -1.08692       1.08692       164.381       165.468    
  29  0.356596      -1.03115     -0.932059      0.932059       171.324       172.256    
  30  0.600947     -0.509248     -0.460310      0.460310       171.506       171.966    
  31  0.521938     -0.650206     -0.587722      0.587722       171.873       172.460    
  32  0.535283     -0.624959     -0.564902      0.564902       171.377       171.942    
  33  0.770626     -0.260551     -0.235513      0.235513       172.127       172.363    
  34  0.773107     -0.257338     -0.232608      0.232608       172.422       172.655    
  35  0.353741      -1.03919     -0.939325      0.939325       172.969       173.909    
  36  0.309044      -1.17427      -1.06142       1.06142       169.699       170.760    
  37  0.263408      -1.33405      -1.20585       1.20585       172.689       173.895    
  38  0.583467     -0.538767     -0.486993      0.486993       172.867       173.354    
  39  0.219559      -1.51613      -1.37044       1.37044       173.003       174.374    
  40  0.949123E-01  -2.35480      -2.12851       2.12851       173.567       175.695    
  41  0.926379     -0.764713E-01 -0.691226E-01  0.691226E-01   171.909       171.978    
  42  0.146628      -1.91986      -1.73536       1.73536       172.968       174.703    
  43  0.998118     -0.188389E-02 -0.170286E-02  0.170286E-02   172.252       172.254    
  44  0.241713      -1.42000      -1.28354       1.28354       172.730       174.013    
  45  0.550303     -0.597286     -0.539888      0.539888       171.345       171.885    
  46  0.878320     -0.129744     -0.117276      0.117276       174.168       174.285    
  47  0.679811     -0.385940     -0.348852      0.348852       173.929       174.278    
  48  0.137778E-01  -4.28470      -3.87295       3.87295       174.318       178.191    
  49  0.752812     -0.283939     -0.256653      0.256653       173.924       174.181    
  50  0.842182     -0.171759     -0.155253      0.155253       174.487       174.642    
  51  0.917316     -0.863036E-01 -0.780100E-01  0.780100E-01   169.673       169.751    
  52  0.418000     -0.872273     -0.788449      0.788449       172.658       173.447    
  53  0.203470      -1.59224      -1.43923       1.43923       171.815       173.255    
  54  0.278353      -1.27887      -1.15597       1.15597       170.984       172.140    
  55  0.968942E-01  -2.33414      -2.10983       2.10983       173.636       175.746    
  56  0.361840      -1.01655     -0.918863      0.918863       171.708       172.627    
  57  0.188339      -1.66951      -1.50908       1.50908       175.444       176.953    
  58  0.417222     -0.874136     -0.790133      0.790133       175.683       176.473    
  59  0.618753     -0.480049     -0.433917      0.433917       173.455       173.889    
  60  0.769831E-01  -2.56417      -2.31776       2.31776       174.034       176.352    
  61  0.364358      -1.00962     -0.912596      0.912596       174.958       175.871    
  62  0.975478     -0.248274E-01 -0.224415E-01  0.224415E-01   176.450       176.473    
  63  0.406960     -0.899041     -0.812645      0.812645       175.329       176.141    
  64  0.609252     -0.495524     -0.447905      0.447905       174.467       174.914    
  65  0.871556E-01  -2.44006      -2.20557       2.20557       172.139       174.345    
  66  0.420727     -0.865772     -0.782572      0.782572       175.358       176.141    
  67  0.903007     -0.102025     -0.922203E-01  0.922203E-01   176.135       176.228    
  68  0.859221     -0.151729     -0.137148      0.137148       174.899       175.036    
  69  0.150339      -1.89487      -1.71277       1.71277       174.808       176.521    
  70  0.547535E-01  -2.90491      -2.62576       2.62576       172.255       174.881    
  71  0.875657     -0.132781     -0.120021      0.120021       176.315       176.435    
  72  0.705689     -0.348580     -0.315082      0.315082       165.463       165.778    
loop,thermsimp(1:2)        7  0.634621E-01  0.608061    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    502        176.22          0.84          1.11         25.10          0.19          0.05         27.29
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:        7
neval is:      501
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:        8
neval is:      501


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      501     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534728     -0.625997     -0.565840      0.565840       164.098       164.664    
   2  0.891304     -0.115069     -0.104011      0.104011       164.308       164.412    
   3  0.710791     -0.341377     -0.308571      0.308571       164.616       164.924    
   4  0.574149     -0.554867     -0.501545      0.501545       164.407       164.908    
   5  0.220647      -1.51119      -1.36597       1.36597       164.315       165.681    
   6  0.774887     -0.255038     -0.230529      0.230529       164.381       164.612    
   7  0.941732     -0.600346E-01 -0.542653E-01  0.542653E-01   165.463       165.517    
   8  0.564338E-01  -2.87469      -2.59843       2.59843       166.458       169.057    
   9  0.573286     -0.556371     -0.502905      0.502905       166.774       167.276    
  10  0.807834     -0.213399     -0.192892      0.192892       167.155       167.347    
  11  0.431082     -0.841457     -0.760595      0.760595       167.454       168.215    
  12  0.936870     -0.652112E-01 -0.589445E-01  0.589445E-01   167.315       167.374    
  13  0.524698E-02  -5.25010      -4.74558       4.74558       167.592       172.338    
  14  0.480494     -0.732942     -0.662507      0.662507       168.424       169.087    
  15  0.736344     -0.306057     -0.276646      0.276646       168.270       168.547    
  16  0.143769      -1.93955      -1.75316       1.75316       168.307       170.060    
  17  0.926564     -0.762723E-01 -0.689426E-01  0.689426E-01   166.873       166.942    
  18  0.760744     -0.273459     -0.247180      0.247180       167.732       167.979    
  19  0.210096      -1.56019      -1.41026       1.41026       168.966       170.376    
  20  0.453206     -0.791409     -0.715356      0.715356       168.913       169.628    
  21  0.371949     -0.988999     -0.893958      0.893958       169.047       169.941    
  22  0.629021     -0.463590     -0.419040      0.419040       169.673       170.092    
  23  0.165410      -1.79933      -1.62642       1.62642       168.506       170.132    
  24  0.265757      -1.32517      -1.19783       1.19783       168.194       169.392    
  25  0.506597     -0.680040     -0.614689      0.614689       170.267       170.882    
  26  0.271669      -1.30317      -1.17794       1.17794       169.699       170.877    
  27  0.789188     -0.236751     -0.214000      0.214000       170.242       170.456    
  28  0.422940E-01  -3.16311      -2.85914       2.85914       169.081       171.940    
  29  0.226854      -1.48345      -1.34089       1.34089       171.272       172.613    
  30  0.320198      -1.13882      -1.02938       1.02938       171.345       172.374    
  31  0.998414     -0.158710E-02 -0.143458E-02  0.143458E-02   171.377       171.379    
  32  0.943114E-01  -2.36115      -2.13425       2.13425       171.506       173.640    
  33  0.107960      -2.22599      -2.01208       2.01208       171.909       173.921    
  34  0.864949     -0.145085     -0.131142      0.131142       170.115       170.246    
  35  0.182814      -1.69928      -1.53599       1.53599       170.984       172.520    
  36  0.763255     -0.270163     -0.244201      0.244201       172.252       172.497    
  37  0.866088E-01  -2.44635      -2.21126       2.21126       171.324       173.535    
  38  0.927332     -0.754437E-01 -0.681936E-01  0.681936E-01   172.127       172.195    
  39  0.693333     -0.366245     -0.331049      0.331049       171.873       172.204    
  40  0.671439     -0.398332     -0.360053      0.360053       171.708       172.068    
  41  0.173693      -1.75047      -1.58225       1.58225       172.422       174.004    
  42  0.574066     -0.555010     -0.501675      0.501675       171.815       172.317    
  43  0.216158E-02  -6.13691      -5.54717       5.54717       172.867       178.414    
  44  0.611545     -0.491767     -0.444509      0.444509       170.446       170.891    
  45  0.318370      -1.14454      -1.03455       1.03455       172.658       173.693    
  46  0.110781      -2.20020      -1.98876       1.98876       173.455       175.444    
  47  0.442761     -0.814726     -0.736432      0.736432       172.689       173.426    
  48  0.953176     -0.479560E-01 -0.433475E-01  0.433475E-01   172.969       173.013    
  49  0.836181     -0.178910     -0.161717      0.161717       172.730       172.892    
  50  0.625055     -0.469916     -0.424757      0.424757       173.924       174.349    
  51  0.570036     -0.562055     -0.508043      0.508043       173.929       174.437    
  52  0.637150     -0.450750     -0.407434      0.407434       174.168       174.575    
  53  0.268370E-01  -3.61797      -3.27029       3.27029       172.139       175.410    
  54  0.915544     -0.882373E-01 -0.797579E-01  0.797579E-01   173.003       173.083    
  55  0.146054      -1.92378      -1.73891       1.73891       174.487       176.226    
  56  0.844097     -0.169488     -0.153200      0.153200       172.968       173.121    
  57  0.946047     -0.554635E-01 -0.501336E-01  0.501336E-01   172.255       172.305    
  58  0.822911     -0.194907     -0.176177      0.176177       174.467       174.643    
  59  0.871430     -0.137620     -0.124395      0.124395       174.899       175.024    
  60  0.259187      -1.35021      -1.22045       1.22045       173.567       174.787    
  61  0.622875     -0.473409     -0.427916      0.427916       173.636       174.064    
  62  0.499738     -0.693671     -0.627010      0.627010       174.958       175.585    
  63  0.825394     -0.191894     -0.173454      0.173454       175.358       175.532    
  64  0.157196E-01  -4.15285      -3.75376       3.75376       175.329       179.082    
  65  0.346229E-01  -3.36324      -3.04004       3.04004       176.135       179.175    
  66  0.313724      -1.15924      -1.04784       1.04784       174.034       175.082    
  67  0.681350     -0.383679     -0.346808      0.346808       176.315       176.662    
  68  0.729342     -0.315613     -0.285283      0.285283       176.450       176.736    
  69  0.670731     -0.399387     -0.361007      0.361007       175.683       176.044    
  70  0.400486     -0.915076     -0.827139      0.827139       174.808       175.635    
  71  0.876903     -0.131359     -0.118736      0.118736       175.444       175.563    
  72  0.293293      -1.22658      -1.10871       1.10871       176.218       177.327    
loop,thermsimp(1:2)        8  0.565840      0.104011    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    503        166.99          0.84          1.11         25.29          0.11          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    166.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:        8
neval is:      502
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:        9
neval is:      502


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      502     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581292     -0.542503     -0.490369      0.490369       164.308       164.799    
   2  0.331354      -1.10457     -0.998421      0.998421       164.381       165.380    
   3  0.336751      -1.08841     -0.983816      0.983816       164.098       165.082    
   4  0.782784     -0.244898     -0.221364      0.221364       164.407       164.628    
   5  0.710059     -0.342408     -0.309503      0.309503       164.616       164.925    
   6  0.439315     -0.822538     -0.743494      0.743494       165.463       166.206    
   7  0.560088     -0.579662     -0.523957      0.523957       164.315       164.838    
   8  0.865331     -0.144643     -0.130743      0.130743       166.873       167.003    
   9  0.488379     -0.716663     -0.647793      0.647793       166.774       167.421    
  10  0.200096      -1.60896      -1.45434       1.45434       167.155       168.609    
  11  0.337191      -1.08710     -0.982636      0.982636       167.315       168.298    
  12  0.483996E-01  -3.02826      -2.73725       2.73725       167.732       170.469    
  13  0.159942      -1.83295      -1.65680       1.65680       167.454       169.111    
  14  0.789831     -0.235936     -0.213263      0.213263       168.270       168.483    
  15  0.381325     -0.964105     -0.871456      0.871456       166.458       167.330    
  16  0.368149     -0.999267     -0.903239      0.903239       168.424       169.327    
  17  0.762585     -0.271042     -0.244995      0.244995       168.194       168.439    
  18  0.790018     -0.235700     -0.213050      0.213050       168.913       169.126    
  19  0.156980      -1.85163      -1.67370       1.67370       169.047       170.721    
  20  0.579774     -0.545116     -0.492731      0.492731       168.307       168.800    
  21  0.906727     -0.979137E-01 -0.885044E-01  0.885044E-01   169.673       169.761    
  22  0.210301      -1.55922      -1.40938       1.40938       168.506       169.915    
  23  0.752685     -0.284108     -0.256806      0.256806       170.115       170.372    
  24  0.162798E-01  -4.11783      -3.72211       3.72211       168.966       172.688    
  25  0.451422     -0.795354     -0.718922      0.718922       170.242       170.961    
  26  0.545943     -0.605240     -0.547078      0.547078       169.699       170.246    
  27  0.264638      -1.32939      -1.20164       1.20164       170.267       171.468    
  28  0.763507     -0.269833     -0.243903      0.243903       170.446       170.690    
  29  0.325754      -1.12161      -1.01383       1.01383       171.377       172.391    
  30  0.166837      -1.79074      -1.61865       1.61865       169.081       170.700    
  31  0.316780      -1.14955      -1.03908       1.03908       171.708       172.747    
  32  0.837666     -0.177136     -0.160113      0.160113       172.127       172.287    
  33  0.524790     -0.644757     -0.582797      0.582797       171.873       172.455    
  34  0.857916     -0.153249     -0.138522      0.138522       172.255       172.393    
  35  0.326689      -1.11875      -1.01124       1.01124       171.815       172.827    
  36  0.822390E-01  -2.49813      -2.25806       2.25806       167.592       169.850    
  37  0.686804     -0.375706     -0.339601      0.339601       171.345       171.684    
  38  0.964837     -0.357963E-01 -0.323563E-01  0.323563E-01   172.252       172.285    
  39  0.403522     -0.907524     -0.820312      0.820312       170.984       171.804    
  40  0.907874     -0.966498E-01 -0.873619E-01  0.873619E-01   171.272       171.360    
  41  0.112705      -2.18298      -1.97320       1.97320       172.730       174.703    
  42  0.820851     -0.197414     -0.178443      0.178443       172.969       173.148    
  43  0.858032     -0.153114     -0.138400      0.138400       173.003       173.142    
  44  0.276820      -1.28439      -1.16096       1.16096       172.968       174.129    
  45  0.449277     -0.800116     -0.723226      0.723226       172.689       173.412    
  46  0.320311      -1.13846      -1.02906       1.02906       171.324       172.353    
  47  0.972239     -0.281531E-01 -0.254477E-01  0.254477E-01   171.506       171.531    
  48  0.188436      -1.66899      -1.50861       1.50861       172.658       174.167    
  49  0.909331E-01  -2.39763      -2.16722       2.16722       171.909       174.076    
  50  0.807786     -0.213458     -0.192945      0.192945       172.422       172.615    
  51  0.646184     -0.436671     -0.394707      0.394707       173.636       174.031    
  52  0.202485      -1.59709      -1.44361       1.44361       173.924       175.368    
  53  0.394970     -0.928945     -0.839674      0.839674       173.929       174.769    
  54  0.375932     -0.978347     -0.884329      0.884329       174.168       175.052    
  55  0.166898      -1.79037      -1.61832       1.61832       174.467       176.085    
  56  0.337985      -1.08475     -0.980512      0.980512       173.567       174.547    
  57  0.121225      -2.11011      -1.90733       1.90733       174.899       176.806    
  58  0.133255      -2.01549      -1.82180       1.82180       174.034       175.856    
  59  0.479950     -0.734073     -0.663530      0.663530       172.139       172.803    
  60  0.803784     -0.218424     -0.197434      0.197434       173.455       173.653    
  61  0.368545     -0.998193     -0.902268      0.902268       175.358       176.261    
  62  0.425620     -0.854209     -0.772121      0.772121       175.444       176.216    
  63  0.295623      -1.21867      -1.10156       1.10156       174.958       176.060    
  64  0.877735     -0.130411     -0.117879      0.117879       174.808       174.926    
  65  0.839576     -0.174859     -0.158055      0.158055       175.683       175.841    
  66  0.905443     -0.993314E-01 -0.897858E-01  0.897858E-01   174.487       174.577    
  67  0.483660     -0.726373     -0.656570      0.656570       176.315       176.972    
  68  0.865627     -0.144301     -0.130434      0.130434       176.450       176.581    
  69  0.574343E-01  -2.85711      -2.58255       2.58255       176.218       178.801    
  70  0.997541     -0.246163E-02 -0.222507E-02  0.222507E-02   172.867       172.869    
  71  0.554688     -0.589349     -0.532714      0.532714       175.329       175.861    
  72  0.978640     -0.215918E-01 -0.195168E-01  0.195168E-01   166.987       167.006    
loop,thermsimp(1:2)        9  0.490369      0.998421    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    504        173.50          0.85          1.11         25.18          0.22          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:        9
neval is:      503
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       10
neval is:      503


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      503     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822534     -0.195365     -0.176591      0.176591       164.407       164.584    
   2  0.782240     -0.245594     -0.221993      0.221993       164.308       164.530    
   3  0.322553      -1.13149      -1.02275       1.02275       164.315       165.337    
   4  0.467356     -0.760663     -0.687565      0.687565       164.616       165.303    
   5  0.147968      -1.91076      -1.72714       1.72714       164.098       165.826    
   6  0.159889E-01  -4.13586      -3.73841       3.73841       164.381       168.120    
   7  0.562204     -0.575890     -0.520548      0.520548       165.463       165.983    
   8  0.299682      -1.20503      -1.08923       1.08923       166.873       167.962    
   9  0.859889     -0.150952     -0.136446      0.136446       166.987       167.123    
  10  0.587202     -0.532386     -0.481224      0.481224       166.458       166.939    
  11  0.815775     -0.203617     -0.184049      0.184049       166.774       166.958    
  12  0.480689     -0.732535     -0.662140      0.662140       167.315       167.977    
  13  0.183971      -1.69298      -1.53028       1.53028       168.194       169.724    
  14  0.541519     -0.613376     -0.554432      0.554432       168.270       168.825    
  15  0.731234     -0.313022     -0.282941      0.282941       167.155       167.437    
  16  0.174833      -1.74393      -1.57634       1.57634       168.307       169.883    
  17  0.922070     -0.811342E-01 -0.733373E-01  0.733373E-01   167.454       167.528    
  18  0.599606     -0.511483     -0.462330      0.462330       168.913       169.375    
  19  0.215130      -1.53651      -1.38886       1.38886       168.424       169.813    
  20  0.810923     -0.209582     -0.189442      0.189442       169.673       169.862    
  21  0.210280E-01  -3.86190      -3.49078       3.49078       167.592       171.083    
  22  0.346591      -1.05961     -0.957783      0.957783       168.506       169.463    
  23  0.110159      -2.20583      -1.99385       1.99385       169.699       171.693    
  24  0.987995     -0.120772E-01 -0.109166E-01  0.109166E-01   170.115       170.126    
  25  0.195218      -1.63364      -1.47665       1.47665       167.732       169.209    
  26  0.863860     -0.146344     -0.132281      0.132281       170.446       170.579    
  27  0.326895      -1.11811      -1.01067       1.01067       169.081       170.092    
  28  0.285040E-01  -3.55771      -3.21582       3.21582       169.047       172.263    
  29  0.203591      -1.59164      -1.43869       1.43869       170.242       171.681    
  30  0.371555     -0.990059     -0.894916      0.894916       171.272       172.167    
  31  0.478997     -0.736061     -0.665326      0.665326       170.267       170.932    
  32  0.619653     -0.478595     -0.432603      0.432603       171.506       171.938    
  33  0.196259      -1.62832      -1.47184       1.47184       171.345       172.816    
  34  0.983500     -0.166377E-01 -0.150388E-01  0.150388E-01   170.984       170.999    
  35  0.694342     -0.364791     -0.329735      0.329735       172.252       172.582    
  36  0.901452     -0.103749     -0.937789E-01  0.937789E-01   172.127       172.221    
  37  0.850762     -0.161623     -0.146091      0.146091       171.324       171.470    
  38  0.837702     -0.177093     -0.160074      0.160074       171.377       171.537    
  39  0.632938     -0.457383     -0.413429      0.413429       172.255       172.668    
  40  0.320271      -1.13859      -1.02917       1.02917       171.873       172.902    
  41  0.851600     -0.160638     -0.145201      0.145201       172.422       172.567    
  42  0.238024      -1.43538      -1.29744       1.29744       168.966       170.264    
  43  0.987040     -0.130443E-01 -0.117907E-01  0.117907E-01   171.708       171.720    
  44  0.901910     -0.103240     -0.933191E-01  0.933191E-01   172.139       172.233    
  45  0.124783      -2.08118      -1.88118       1.88118       171.815       173.697    
  46  0.564722     -0.571423     -0.516510      0.516510       172.867       173.384    
  47  0.106695E-01  -4.54036      -4.10404       4.10404       173.003       177.108    
  48  0.517678     -0.658402     -0.595130      0.595130       172.969       173.564    
  49  0.791575     -0.233731     -0.211270      0.211270       172.689       172.900    
  50  0.340717      -1.07670     -0.973235      0.973235       173.455       174.429    
  51  0.250573      -1.38401      -1.25101       1.25101       173.636       174.887    
  52  0.433347     -0.836218     -0.755858      0.755858       171.909       172.665    
  53  0.246778      -1.39927      -1.26480       1.26480       172.968       174.232    
  54  0.946572     -0.549078E-01 -0.496313E-01  0.496313E-01   172.658       172.708    
  55  0.628651     -0.464180     -0.419573      0.419573       173.567       173.986    
  56  0.182475      -1.70114      -1.53767       1.53767       174.487       176.025    
  57  0.477874     -0.738408     -0.667448      0.667448       172.730       173.397    
  58  0.806439     -0.215128     -0.194454      0.194454       173.929       174.123    
  59  0.821508     -0.196614     -0.177720      0.177720       174.808       174.986    
  60  0.610226     -0.493926     -0.446461      0.446461       174.168       174.614    
  61  0.749839     -0.287897     -0.260231      0.260231       173.924       174.185    
  62  0.475139     -0.744148     -0.672637      0.672637       175.683       176.356    
  63  0.190368      -1.65880      -1.49939       1.49939       174.034       175.533    
  64  0.122179      -2.10227      -1.90024       1.90024       175.329       177.229    
  65  0.980528E-01  -2.32225      -2.09908       2.09908       174.958       177.057    
  66  0.276451      -1.28572      -1.16217       1.16217       174.467       175.629    
  67  0.668680     -0.402450     -0.363775      0.363775       175.444       175.808    
  68  0.469530E-01  -3.05861      -2.76468       2.76468       175.358       178.123    
  69  0.172413      -1.75786      -1.58894       1.58894       176.450       178.039    
  70  0.655569     -0.422252     -0.381674      0.381674       174.899       175.281    
  71  0.977823     -0.224261E-01 -0.202710E-01  0.202710E-01   176.315       176.335    
  72  0.907167     -0.974283E-01 -0.880656E-01  0.880656E-01   173.495       173.583    
loop,thermsimp(1:2)       10  0.176591      0.221993    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    505        176.33          0.84          1.11         25.45          0.19          0.05         27.64
Just calling func    0   0         27.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       10
neval is:      504
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       11
neval is:      504


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      504     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371518     -0.990158     -0.895006      0.895006       164.308       165.203    
   2  0.421352     -0.864286     -0.781229      0.781229       164.407       165.188    
   3  0.733796     -0.309524     -0.279779      0.279779       164.616       164.895    
   4  0.371282     -0.990794     -0.895580      0.895580       164.315       165.210    
   5  0.134163      -2.00870      -1.81567       1.81567       164.098       165.914    
   6  0.449085     -0.800544     -0.723613      0.723613       165.463       166.186    
   7  0.149770      -1.89865      -1.71619       1.71619       166.458       168.174    
   8  0.193351      -1.64325      -1.48533       1.48533       166.774       168.259    
   9  0.484872     -0.723871     -0.654308      0.654308       166.987       167.641    
  10  0.880665E-01  -2.42966      -2.19618       2.19618       167.155       169.351    
  11  0.744885     -0.294526     -0.266222      0.266222       167.454       167.721    
  12  0.342439      -1.07166     -0.968677      0.968677       166.873       167.841    
  13  0.422063     -0.862602     -0.779707      0.779707       167.315       168.095    
  14  0.509795     -0.673746     -0.609000      0.609000       164.381       164.990    
  15  0.968021     -0.325017E-01 -0.293783E-01  0.293783E-01   168.270       168.300    
  16  0.799941     -0.223218     -0.201767      0.201767       167.732       167.934    
  17  0.498769     -0.695612     -0.628765      0.628765       168.913       169.541    
  18  0.142481      -1.94855      -1.76130       1.76130       168.506       170.267    
  19  0.887657     -0.119170     -0.107718      0.107718       168.194       168.302    
  20  0.955972     -0.450263E-01 -0.406994E-01  0.406994E-01   168.424       168.465    
  21  0.226776      -1.48379      -1.34120       1.34120       169.673       171.014    
  22  0.300982      -1.20070      -1.08532       1.08532       168.307       169.392    
  23  0.161728      -1.82184      -1.64676       1.64676       169.081       170.728    
  24  0.650156     -0.430542     -0.389168      0.389168       170.115       170.504    
  25  0.310921E-01  -3.47080      -3.13726       3.13726       168.966       172.103    
  26  0.820549     -0.197781     -0.178775      0.178775       170.446       170.625    
  27  0.949162     -0.521757E-01 -0.471617E-01  0.471617E-01   170.267       170.314    
  28  0.461471     -0.773336     -0.699020      0.699020       170.984       171.683    
  29  0.325925      -1.12109      -1.01335       1.01335       167.592       168.605    
  30  0.251186      -1.38156      -1.24880       1.24880       171.324       172.573    
  31  0.520836     -0.652320     -0.589633      0.589633       171.377       171.967    
  32  0.339093      -1.08148     -0.977552      0.977552       170.242       171.219    
  33  0.876178     -0.132186     -0.119483      0.119483       169.699       169.819    
  34  0.664406     -0.408862     -0.369571      0.369571       171.708       172.078    
  35  0.415159     -0.879094     -0.794614      0.794614       171.506       172.300    
  36  0.733952     -0.309312     -0.279588      0.279588       171.272       171.552    
  37  0.475133     -0.744161     -0.672648      0.672648       172.127       172.800    
  38  0.361789      -1.01670     -0.918992      0.918992       172.139       173.058    
  39  0.111891      -2.19023      -1.97975       1.97975       169.047       171.027    
  40  0.123346      -2.09276      -1.89165       1.89165       172.422       174.314    
  41  0.282401      -1.26443      -1.14292       1.14292       172.252       173.395    
  42  0.397590     -0.922334     -0.833699      0.833699       171.909       172.743    
  43  0.123972      -2.08770      -1.88707       1.88707       172.255       174.142    
  44  0.830800     -0.185367     -0.167553      0.167553       172.658       172.826    
  45  0.743291     -0.296668     -0.268159      0.268159       171.345       171.613    
  46  0.569177     -0.563564     -0.509406      0.509406       172.689       173.199    
  47  0.333222      -1.09895     -0.993339      0.993339       171.873       172.866    
  48  0.748913     -0.289132     -0.261347      0.261347       172.867       173.129    
  49  0.552776E-01  -2.89539      -2.61714       2.61714       172.730       175.347    
  50  0.204981      -1.58484      -1.43254       1.43254       172.969       174.402    
  51  0.317642      -1.14683      -1.03662       1.03662       173.495       174.532    
  52  0.194743      -1.63607      -1.47885       1.47885       171.815       173.294    
  53  0.796100     -0.228030     -0.206117      0.206117       173.567       173.773    
  54  0.331225      -1.10496     -0.998773      0.998773       173.929       174.928    
  55  0.441129     -0.818417     -0.739768      0.739768       173.924       174.664    
  56  0.492658     -0.707940     -0.639908      0.639908       172.968       173.608    
  57  0.111182      -2.19659      -1.98550       1.98550       173.455       175.441    
  58  0.375486     -0.979534     -0.885402      0.885402       174.168       175.053    
  59  0.618801     -0.479971     -0.433846      0.433846       173.636       174.070    
  60  0.353960E-01  -3.34116      -3.02008       3.02008       174.808       177.828    
  61  0.613837     -0.488027     -0.441128      0.441128       174.899       175.340    
  62  0.502104     -0.688948     -0.622741      0.622741       174.034       174.657    
  63  0.708340     -0.344831     -0.311693      0.311693       174.467       174.778    
  64  0.761556     -0.272392     -0.246215      0.246215       175.444       175.690    
  65  0.182566      -1.70064      -1.53721       1.53721       174.487       176.024    
  66  0.705224     -0.349240     -0.315679      0.315679       176.315       176.631    
  67  0.273796      -1.29537      -1.17089       1.17089       175.683       176.854    
  68  0.969215     -0.312689E-01 -0.282640E-01  0.282640E-01   174.958       174.987    
  69  0.443865     -0.812235     -0.734180      0.734180       173.003       173.738    
  70  0.465573     -0.764487     -0.691021      0.691021       175.329       176.020    
  71  0.657736     -0.418951     -0.378690      0.378690       176.450       176.829    
  72  0.270199      -1.30860      -1.18284       1.18284       176.327       177.510    
loop,thermsimp(1:2)       11  0.895006      0.781229    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    506        164.86          0.85          1.11         25.16          0.11          0.05         27.28
Just calling func    0   0         27.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    507        177.97          0.84          1.12         25.05          0.16          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       11
neval is:      506
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       12
neval is:      506


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      506     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932268     -0.701345E-01 -0.633946E-01  0.633946E-01   164.616       164.679    
   2  0.331032      -1.10554     -0.999299      0.999299       164.381       165.380    
   3  0.694616     -0.364396     -0.329378      0.329378       164.407       164.736    
   4  0.993646     -0.637431E-02 -0.576175E-02  0.576175E-02   164.308       164.314    
   5  0.400856E-01  -3.21674      -2.90762       2.90762       164.315       167.222    
   6  0.633880     -0.455896     -0.412085      0.412085       164.098       164.511    
   7  0.601200E-01  -2.81141      -2.54124       2.54124       165.463       168.004    
   8  0.649180     -0.432045     -0.390526      0.390526       166.987       167.377    
   9  0.870844E-01  -2.44088      -2.20631       2.20631       167.454       169.661    
  10  0.735510     -0.307191     -0.277670      0.277670       166.873       167.150    
  11  0.359321      -1.02354     -0.925179      0.925179       167.732       168.657    
  12  0.497555     -0.698048     -0.630967      0.630967       167.315       167.946    
  13  0.686901E-01  -2.67815      -2.42078       2.42078       166.458       168.879    
  14  0.906387     -0.982893E-01 -0.888439E-01  0.888439E-01   166.774       166.862    
  15  0.380970     -0.965035     -0.872296      0.872296       168.270       169.142    
  16  0.604774     -0.502900     -0.454572      0.454572       168.194       168.649    
  17  0.377061     -0.975348     -0.881619      0.881619       168.424       169.306    
  18  0.788907     -0.237107     -0.214321      0.214321       167.592       167.806    
  19  0.741706     -0.298802     -0.270088      0.270088       167.155       167.425    
  20  0.395286     -0.928145     -0.838952      0.838952       168.307       169.146    
  21  0.553847     -0.590867     -0.534086      0.534086       168.913       169.447    
  22  0.592268E-01  -2.82638      -2.55477       2.55477       169.699       172.254    
  23  0.667112     -0.404798     -0.365897      0.365897       168.506       168.871    
  24  0.544627     -0.607655     -0.549260      0.549260       170.267       170.816    
  25  0.438918     -0.823442     -0.744311      0.744311       170.115       170.859    
  26  0.748682     -0.289441     -0.261626      0.261626       170.446       170.708    
  27  0.457742     -0.781450     -0.706354      0.706354       169.081       169.787    
  28  0.917499     -0.861039E-01 -0.778294E-01  0.778294E-01   169.673       169.750    
  29  0.711098     -0.340945     -0.308180      0.308180       169.047       169.355    
  30  0.936268     -0.658531E-01 -0.595247E-01  0.595247E-01   170.242       170.301    
  31  0.677691     -0.389064     -0.351676      0.351676       171.272       171.624    
  32  0.154144      -1.86987      -1.69018       1.69018       171.345       173.035    
  33  0.375603     -0.979224     -0.885122      0.885122       170.984       171.869    
  34  0.470785     -0.753353     -0.680957      0.680957       171.377       172.058    
  35  0.306223E-01  -3.48603      -3.15102       3.15102       171.708       174.859    
  36  0.320903      -1.13662      -1.02739       1.02739       168.966       169.994    
  37  0.721169     -0.326882     -0.295469      0.295469       171.506       171.801    
  38  0.235217      -1.44725      -1.30817       1.30817       171.324       172.632    
  39  0.172480      -1.75747      -1.58858       1.58858       171.909       173.497    
  40  0.617596     -0.481920     -0.435609      0.435609       172.127       172.563    
  41  0.661285     -0.413571     -0.373827      0.373827       172.658       173.032    
  42  0.298445      -1.20917      -1.09297       1.09297       171.873       172.966    
  43  0.569437     -0.563107     -0.508993      0.508993       172.139       172.648    
  44  0.394309     -0.930621     -0.841190      0.841190       172.867       173.708    
  45  0.350094      -1.04955     -0.948692      0.948692       172.689       173.638    
  46  0.231248      -1.46427      -1.32355       1.32355       171.815       173.139    
  47  0.866839     -0.142902     -0.129169      0.129169       172.252       172.382    
  48  0.867322     -0.142344     -0.128665      0.128665       172.968       173.096    
  49  0.116953      -2.14598      -1.93976       1.93976       173.003       174.943    
  50  0.773417E-01  -2.55952      -2.31356       2.31356       173.567       175.880    
  51  0.200416      -1.60736      -1.45290       1.45290       173.636       175.089    
  52  0.354953      -1.03577     -0.936234      0.936234       172.255       173.191    
  53  0.294228      -1.22340      -1.10583       1.10583       172.422       173.528    
  54  0.763773     -0.269485     -0.243588      0.243588       172.969       173.213    
  55  0.206070      -1.57954      -1.42775       1.42775       173.495       174.923    
  56  0.565032     -0.570873     -0.516013      0.516013       174.034       174.550    
  57  0.422490     -0.861588     -0.778791      0.778791       173.924       174.703    
  58  0.651799     -0.428019     -0.386887      0.386887       174.467       174.853    
  59  0.551665     -0.594815     -0.537654      0.537654       173.929       174.467    
  60  0.936970     -0.651037E-01 -0.588473E-01  0.588473E-01   174.958       175.017    
  61  0.682795     -0.381560     -0.344893      0.344893       174.168       174.513    
  62  0.291507      -1.23269      -1.11423       1.11423       174.899       176.013    
  63  0.269021      -1.31297      -1.18679       1.18679       172.730       173.917    
  64  0.521423     -0.651194     -0.588615      0.588615       173.455       174.044    
  65  0.865856     -0.144037     -0.130195      0.130195       175.444       175.574    
  66  0.441855     -0.816773     -0.738283      0.738283       175.329       176.067    
  67  0.498726     -0.695698     -0.628843      0.628843       174.487       175.116    
  68  0.396737     -0.924481     -0.835640      0.835640       176.315       177.151    
  69  0.923580     -0.794979E-01 -0.718583E-01  0.718583E-01   176.450       176.522    
  70  0.971974     -0.284264E-01 -0.256947E-01  0.256947E-01   175.683       175.709    
  71  0.983337E-01  -2.31939      -2.09650       2.09650       176.327       178.424    
  72  0.102316E-01  -4.58227      -4.14192       4.14192       164.864       169.006    
loop,thermsimp(1:2)       12  0.633946E-01  0.999299    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    508        175.40          0.84          1.11         25.12          0.09          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       12
neval is:      507
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       13
neval is:      507


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      507     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.922982E-01  -2.38273      -2.15375       2.15375       164.308       166.462    
   2  0.398313     -0.920518     -0.832058      0.832058       164.098       164.930    
   3  0.966781     -0.337829E-01 -0.305365E-01  0.305365E-01   164.616       164.646    
   4  0.834786     -0.180580     -0.163226      0.163226       164.407       164.570    
   5  0.897933     -0.107659     -0.973136E-01  0.973136E-01   164.381       164.479    
   6  0.754433     -0.281789     -0.254710      0.254710       166.774       167.028    
   7  0.365110      -1.00756     -0.910732      0.910732       166.873       167.783    
   8  0.153021      -1.87718      -1.69678       1.69678       164.315       166.011    
   9  0.269185      -1.31236      -1.18624       1.18624       166.987       168.173    
  10  0.343604      -1.06826     -0.965606      0.965606       167.155       168.120    
  11  0.834195E-01  -2.48387      -2.24518       2.24518       167.592       169.837    
  12  0.868931     -0.140491     -0.126990      0.126990       167.315       167.442    
  13  0.939794     -0.620944E-01 -0.561272E-01  0.561272E-01   165.463       165.519    
  14  0.618916     -0.479786     -0.433680      0.433680       168.194       168.628    
  15  0.486928     -0.719639     -0.650482      0.650482       167.732       168.383    
  16  0.573604     -0.555816     -0.502403      0.502403       168.506       169.008    
  17  0.172906      -1.75501      -1.58636       1.58636       166.458       168.045    
  18  0.100972      -2.29292      -2.07257       2.07257       164.864       166.937    
  19  0.152456      -1.88088      -1.70013       1.70013       168.270       169.970    
  20  0.663894     -0.409632     -0.370267      0.370267       168.307       168.677    
  21  0.529041     -0.636690     -0.575505      0.575505       168.424       169.000    
  22  0.388461     -0.945563     -0.854696      0.854696       169.047       169.902    
  23  0.785741     -0.241128     -0.217956      0.217956       168.913       169.131    
  24  0.620307     -0.477541     -0.431650      0.431650       167.454       167.886    
  25  0.948673     -0.526914E-01 -0.476279E-01  0.476279E-01   169.673       169.720    
  26  0.173123      -1.75375      -1.58522       1.58522       169.081       170.666    
  27  0.663060     -0.410890     -0.371404      0.371404       168.966       169.338    
  28  0.552682     -0.592972     -0.535988      0.535988       170.242       170.778    
  29  0.911932     -0.921901E-01 -0.833307E-01  0.833307E-01   170.446       170.530    
  30  0.587146     -0.532481     -0.481311      0.481311       170.267       170.748    
  31  0.620861     -0.476649     -0.430844      0.430844       170.115       170.546    
  32  0.757598     -0.277603     -0.250925      0.250925       171.272       171.523    
  33  0.970125     -0.303301E-01 -0.274154E-01  0.274154E-01   171.506       171.533    
  34  0.934482     -0.677634E-01 -0.612514E-01  0.612514E-01   170.984       171.045    
  35  0.455429     -0.786516     -0.710933      0.710933       171.377       172.088    
  36  0.489437     -0.714499     -0.645836      0.645836       169.699       170.345    
  37  0.462744E-01  -3.07317      -2.77784       2.77784       172.252       175.030    
  38  0.343684      -1.06803     -0.965397      0.965397       172.127       173.093    
  39  0.263559      -1.33348      -1.20533       1.20533       171.324       172.529    
  40  0.195654      -1.63141      -1.47463       1.47463       172.139       173.614    
  41  0.762134     -0.271632     -0.245529      0.245529       171.873       172.118    
  42  0.385726     -0.952629     -0.861082      0.861082       172.658       173.519    
  43  0.970876     -0.295568E-01 -0.267164E-01  0.267164E-01   171.345       171.371    
  44  0.517601     -0.658550     -0.595264      0.595264       172.968       173.563    
  45  0.587593E-01  -2.83431      -2.56193       2.56193       171.815       174.377    
  46  0.465074     -0.765558     -0.691989      0.691989       172.255       172.947    
  47  0.609046     -0.495862     -0.448211      0.448211       172.969       173.418    
  48  0.251442      -1.38054      -1.24787       1.24787       171.909       173.157    
  49  0.555227     -0.588378     -0.531836      0.531836       172.422       172.954    
  50  0.811667     -0.208665     -0.188613      0.188613       172.689       172.878    
  51  0.193982      -1.63999      -1.48239       1.48239       172.867       174.350    
  52  0.590323     -0.527086     -0.476434      0.476434       172.730       173.206    
  53  0.169066      -1.77747      -1.60665       1.60665       173.455       175.062    
  54  0.637698     -0.449890     -0.406656      0.406656       173.929       174.336    
  55  0.675306     -0.392589     -0.354862      0.354862       174.168       174.523    
  56  0.433825     -0.835114     -0.754861      0.754861       174.034       174.789    
  57  0.464562     -0.766661     -0.692986      0.692986       173.924       174.617    
  58  0.199196      -1.61347      -1.45842       1.45842       174.467       175.925    
  59  0.700862     -0.355444     -0.321287      0.321287       171.708       172.030    
  60  0.941210     -0.605890E-01 -0.547665E-01  0.547665E-01   173.495       173.550    
  61  0.576048     -0.551564     -0.498560      0.498560       173.003       173.502    
  62  0.160958      -1.82661      -1.65108       1.65108       174.958       176.609    
  63  0.380701     -0.965741     -0.872934      0.872934       173.636       174.509    
  64  0.979990     -0.202132E-01 -0.182708E-01  0.182708E-01   174.487       174.505    
  65  0.451929     -0.794230     -0.717906      0.717906       175.444       176.162    
  66  0.244569      -1.40826      -1.27293       1.27293       175.683       176.956    
  67  0.425903     -0.853543     -0.771519      0.771519       173.567       174.338    
  68  0.518112     -0.657564     -0.594373      0.594373       174.899       175.493    
  69  0.173710      -1.75037      -1.58216       1.58216       175.329       176.911    
  70  0.882969     -0.124465     -0.112504      0.112504       176.450       176.563    
  71  0.341819      -1.07347     -0.970315      0.970315       176.315       177.286    
  72  0.279391      -1.27514      -1.15260       1.15260       175.405       176.557    
loop,thermsimp(1:2)       13   2.15375      0.832058    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    509        176.01          0.83          1.11         25.04          0.24          0.05         27.28
Just calling func    0   0         27.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       13
neval is:      508
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       14
neval is:      508


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      508     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.599112     -0.512306     -0.463074      0.463074       164.381       164.844    
   2  0.185288      -1.68584      -1.52384       1.52384       164.407       165.931    
   3  0.279580      -1.27447      -1.15199       1.15199       164.616       165.768    
   4  0.475871     -0.742608     -0.671244      0.671244       164.098       164.770    
   5  0.983460     -0.166786E-01 -0.150758E-01  0.150758E-01   165.463       165.478    
   6  0.969959     -0.305019E-01 -0.275707E-01  0.275707E-01   164.315       164.342    
   7  0.415873     -0.877376     -0.793061      0.793061       164.308       165.101    
   8  0.843097     -0.170673     -0.154272      0.154272       164.864       165.019    
   9  0.103621      -2.26701      -2.04916       2.04916       166.774       168.823    
  10  0.827012     -0.189936     -0.171684      0.171684       167.315       167.487    
  11  0.713709     -0.337280     -0.304868      0.304868       166.873       167.178    
  12  0.757171     -0.278166     -0.251435      0.251435       167.454       167.706    
  13  0.682415     -0.382118     -0.345397      0.345397       166.458       166.804    
  14  0.169850      -1.77284      -1.60247       1.60247       167.155       168.757    
  15  0.137912      -1.98114      -1.79076       1.79076       166.987       168.778    
  16  0.119797      -2.12195      -1.91804       1.91804       167.732       169.650    
  17  0.922340     -0.808412E-01 -0.730725E-01  0.730725E-01   168.194       168.267    
  18  0.840095     -0.174240     -0.157496      0.157496       168.307       168.464    
  19  0.676264     -0.391172     -0.353581      0.353581       168.424       168.778    
  20  0.191981      -1.65036      -1.49176       1.49176       168.506       169.997    
  21  0.528247     -0.638192     -0.576862      0.576862       168.913       169.490    
  22  0.450794     -0.796745     -0.720179      0.720179       168.966       169.686    
  23  0.808149     -0.213009     -0.192539      0.192539       169.673       169.865    
  24  0.179092      -1.71986      -1.55458       1.55458       167.592       169.147    
  25  0.728727     -0.316456     -0.286045      0.286045       169.047       169.333    
  26  0.719748     -0.328854     -0.297251      0.297251       168.270       168.567    
  27  0.357902      -1.02750     -0.928755      0.928755       169.699       170.628    
  28  0.665239     -0.407609     -0.368439      0.368439       170.446       170.815    
  29  0.338401      -1.08352     -0.979399      0.979399       170.115       171.095    
  30  0.455504     -0.786351     -0.710784      0.710784       169.081       169.792    
  31  0.422358E-01  -3.16449      -2.86039       2.86039       170.267       173.127    
  32  0.162108      -1.81949      -1.64464       1.64464       170.242       171.887    
  33  0.896138     -0.109661     -0.991229E-01  0.991229E-01   170.984       171.083    
  34  0.980701E-01  -2.32207      -2.09892       2.09892       171.345       173.444    
  35  0.950264     -0.510154E-01 -0.461129E-01  0.461129E-01   171.272       171.319    
  36  0.122991      -2.09565      -1.89426       1.89426       171.506       173.400    
  37  0.718373     -0.330767     -0.298981      0.298981       171.708       172.007    
  38  0.296907      -1.21434      -1.09764       1.09764       171.377       172.475    
  39  0.708585     -0.344486     -0.311381      0.311381       171.873       172.184    
  40  0.261253      -1.34227      -1.21328       1.21328       171.324       172.537    
  41  0.305559      -1.18561      -1.07168       1.07168       172.689       173.761    
  42  0.617226     -0.482519     -0.436150      0.436150       172.255       172.691    
  43  0.493544E-01  -3.00873      -2.71959       2.71959       172.422       175.142    
  44  0.225264      -1.49048      -1.34725       1.34725       172.127       173.475    
  45  0.131490      -2.02883      -1.83386       1.83386       171.909       173.743    
  46  0.850946     -0.161406     -0.145896      0.145896       172.730       172.876    
  47  0.237517      -1.43751      -1.29937       1.29937       172.969       174.269    
  48  0.302781      -1.19475      -1.07993       1.07993       173.003       174.083    
  49  0.205804      -1.58083      -1.42892       1.42892       172.658       174.087    
  50  0.420670     -0.865907     -0.782694      0.782694       173.495       174.278    
  51  0.494045     -0.705128     -0.637366      0.637366       172.968       173.605    
  52  0.874250     -0.134389     -0.121474      0.121474       172.139       172.261    
  53  0.596327     -0.516965     -0.467286      0.467286       173.929       174.396    
  54  0.536687     -0.622341     -0.562535      0.562535       173.567       174.129    
  55  0.517547     -0.658655     -0.595360      0.595360       172.867       173.463    
  56  0.381486     -0.963681     -0.871073      0.871073       171.815       172.686    
  57  0.298557      -1.20879      -1.09263       1.09263       174.487       175.580    
  58  0.842903     -0.170904     -0.154480      0.154480       173.636       173.791    
  59  0.722129     -0.325551     -0.294266      0.294266       174.168       174.462    
  60  0.506448     -0.680334     -0.614955      0.614955       173.924       174.539    
  61  0.180643      -1.71123      -1.54679       1.54679       174.034       175.581    
  62  0.497794     -0.697568     -0.630533      0.630533       172.252       172.883    
  63  0.486227     -0.721080     -0.651785      0.651785       173.455       174.107    
  64  0.967082E-01  -2.33606      -2.11157       2.11157       174.899       177.011    
  65  0.479909     -0.734158     -0.663607      0.663607       174.467       175.130    
  66  0.553878     -0.590812     -0.534036      0.534036       175.444       175.978    
  67  0.665142     -0.407755     -0.368570      0.368570       175.405       175.773    
  68  0.436611     -0.828713     -0.749075      0.749075       176.450       177.199    
  69  0.877615E-01  -2.43313      -2.19931       2.19931       174.958       177.158    
  70  0.270284E-01  -3.61087      -3.26387       3.26387       175.329       178.592    
  71  0.835351     -0.179903     -0.162614      0.162614       175.683       175.846    
  72  0.241788      -1.41969      -1.28326       1.28326       176.015       177.298    
loop,thermsimp(1:2)       14  0.463074       1.52384    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    510        169.16          0.84          1.11         25.19          0.14          0.05         27.34
Just calling func    0   0         27.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    169.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       14
neval is:      509
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       15
neval is:      509


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      509     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.420890     -0.865383     -0.782221      0.782221       164.315       165.097    
   2  0.285132      -1.25480      -1.13422       1.13422       164.098       165.233    
   3  0.460665E-01  -3.07767      -2.78191       2.78191       164.381       167.163    
   4  0.971233     -0.291885E-01 -0.263835E-01  0.263835E-01   164.864       164.891    
   5  0.600439E-01  -2.81268      -2.54239       2.54239       164.308       166.851    
   6  0.952970     -0.481718E-01 -0.435426E-01  0.435426E-01   165.463       165.506    
   7  0.416605     -0.875617     -0.791472      0.791472       164.616       165.407    
   8  0.350276      -1.04903     -0.948223      0.948223       164.407       165.355    
   9  0.211258      -1.55467      -1.40527       1.40527       166.458       167.863    
  10  0.268913E-01  -3.61595      -3.26846       3.26846       166.873       170.141    
  11  0.246487      -1.40045      -1.26587       1.26587       167.315       168.581    
  12  0.837295     -0.177579     -0.160514      0.160514       167.454       167.615    
  13  0.343497      -1.06858     -0.965887      0.965887       168.194       169.160    
  14  0.976296     -0.239900E-01 -0.216846E-01  0.216846E-01   168.307       168.329    
  15  0.617570     -0.481963     -0.435647      0.435647       168.270       168.706    
  16  0.599441     -0.511758     -0.462579      0.462579       167.155       167.617    
  17  0.556766     -0.585610     -0.529334      0.529334       166.987       167.516    
  18  0.474984     -0.744475     -0.672932      0.672932       168.424       169.097    
  19  0.608207     -0.497240     -0.449456      0.449456       166.774       167.223    
  20  0.699514     -0.357370     -0.323027      0.323027       167.592       167.915    
  21  0.315591      -1.15331      -1.04248       1.04248       169.047       170.090    
  22  0.626925     -0.466928     -0.422057      0.422057       168.913       169.335    
  23  0.736823     -0.305408     -0.276059      0.276059       167.732       168.008    
  24  0.801749     -0.220960     -0.199726      0.199726       168.966       169.166    
  25  0.128079      -2.05510      -1.85761       1.85761       169.081       170.939    
  26  0.120118      -2.11928      -1.91562       1.91562       169.673       171.588    
  27  0.893214     -0.112929     -0.102077      0.102077       168.506       168.608    
  28  0.522618     -0.648904     -0.586545      0.586545       169.699       170.286    
  29  0.204056      -1.58936      -1.43663       1.43663       170.446       171.883    
  30  0.391878     -0.936804     -0.846778      0.846778       170.984       171.831    
  31  0.627452     -0.466089     -0.421298      0.421298       170.115       170.536    
  32  0.240488      -1.42509      -1.28814       1.28814       171.272       172.561    
  33  0.705929     -0.348241     -0.314775      0.314775       170.242       170.557    
  34  0.491002     -0.711306     -0.642951      0.642951       171.708       172.351    
  35  0.538395     -0.619162     -0.559662      0.559662       171.873       172.432    
  36  0.220833      -1.51035      -1.36521       1.36521       172.139       173.505    
  37  0.133511      -2.01357      -1.82007       1.82007       171.377       173.197    
  38  0.310483      -1.16963      -1.05723       1.05723       171.324       172.381    
  39  0.871017     -0.138093     -0.124823      0.124823       171.815       171.940    
  40  0.802109     -0.220510     -0.199320      0.199320       172.255       172.454    
  41  0.662318     -0.412009     -0.372416      0.372416       172.730       173.102    
  42  0.214000      -1.54178      -1.39362       1.39362       172.252       173.646    
  43  0.514688     -0.664194     -0.600366      0.600366       170.267       170.867    
  44  0.900118     -0.105230     -0.951173E-01  0.951173E-01   171.506       171.601    
  45  0.808205     -0.212939     -0.192476      0.192476       171.345       171.537    
  46  0.354487      -1.03708     -0.937422      0.937422       172.867       173.805    
  47  0.472469     -0.749783     -0.677730      0.677730       172.127       172.805    
  48  0.643540     -0.440770     -0.398413      0.398413       172.968       173.366    
  49  0.276975      -1.28383      -1.16045       1.16045       171.909       173.069    
  50  0.507013     -0.679219     -0.613947      0.613947       172.689       173.303    
  51  0.265033      -1.32790      -1.20029       1.20029       173.636       174.837    
  52  0.713646     -0.337368     -0.304947      0.304947       173.003       173.308    
  53  0.876167     -0.132198     -0.119494      0.119494       172.658       172.778    
  54  0.611182     -0.492360     -0.445045      0.445045       173.455       173.900    
  55  0.842471     -0.171417     -0.154944      0.154944       173.567       173.722    
  56  0.214798      -1.53806      -1.39025       1.39025       172.969       174.360    
  57  0.118222      -2.13519      -1.93000       1.93000       173.495       175.425    
  58  0.707852     -0.345520     -0.312316      0.312316       173.929       174.241    
  59  0.884670     -0.122540     -0.110764      0.110764       174.168       174.279    
  60  0.249760      -1.38725      -1.25394       1.25394       173.924       175.178    
  61  0.638047E-01  -2.75193      -2.48747       2.48747       174.467       176.954    
  62  0.273268      -1.29730      -1.17263       1.17263       172.422       173.595    
  63  0.524194     -0.645893     -0.583824      0.583824       174.487       175.071    
  64  0.520556     -0.652858     -0.590119      0.590119       174.034       174.624    
  65  0.605168     -0.502250     -0.453984      0.453984       175.405       175.859    
  66  0.905087     -0.997237E-01 -0.901404E-01  0.901404E-01   175.683       175.773    
  67  0.958675     -0.422036E-01 -0.381479E-01  0.381479E-01   175.444       175.482    
  68  0.314224      -1.15765      -1.04640       1.04640       174.899       175.946    
  69  0.163462      -1.81117      -1.63712       1.63712       174.958       176.595    
  70  0.812097     -0.208136     -0.188134      0.188134       176.450       176.638    
  71  0.561581     -0.577000     -0.521551      0.521551       176.015       176.536    
  72  0.569949     -0.562209     -0.508182      0.508182       169.155       169.663    
loop,thermsimp(1:2)       15  0.782221       1.13422    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    511        176.63          0.84          1.11         25.23          0.26          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       15
neval is:      510
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       16
neval is:      510


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      510     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.351711      -1.04494     -0.944527      0.944527       164.864       165.809    
   2  0.446554     -0.806196     -0.728722      0.728722       164.315       165.043    
   3  0.499035     -0.695080     -0.628284      0.628284       164.098       164.727    
   4  0.912667     -0.913840E-01 -0.826022E-01  0.826022E-01   164.407       164.490    
   5  0.190815      -1.65645      -1.49727       1.49727       164.616       166.113    
   6  0.580538E-01  -2.84638      -2.57285       2.57285       165.463       168.035    
   7  0.379811     -0.968081     -0.875050      0.875050       164.308       165.183    
   8  0.413317E-01  -3.18613      -2.87994       2.87994       164.381       167.261    
   9  0.656412E-01  -2.72355      -2.46182       2.46182       166.774       169.235    
  10  0.327977      -1.11481      -1.00768       1.00768       166.987       167.995    
  11  0.289775E-01  -3.54124      -3.20093       3.20093       167.454       170.655    
  12  0.906603     -0.980504E-01 -0.886279E-01  0.886279E-01   167.155       167.243    
  13  0.672845     -0.396240     -0.358162      0.358162       166.458       166.816    
  14  0.770685     -0.260476     -0.235445      0.235445       167.592       167.828    
  15  0.858998     -0.151989     -0.137383      0.137383       167.732       167.869    
  16  0.928076     -0.746418E-01 -0.674689E-01  0.674689E-01   168.307       168.374    
  17  0.759965     -0.274484     -0.248106      0.248106       167.315       167.563    
  18  0.370372     -0.993247     -0.897797      0.897797       168.506       169.403    
  19  0.924580     -0.784161E-01 -0.708805E-01  0.708805E-01   168.270       168.341    
  20  0.986760     -0.133287E-01 -0.120479E-01  0.120479E-01   168.424       168.436    
  21  0.391274     -0.938348     -0.848174      0.848174       168.194       169.042    
  22  0.225004      -1.49164      -1.34829       1.34829       168.966       170.314    
  23  0.111834      -2.19074      -1.98021       1.98021       168.913       170.893    
  24  0.772679     -0.257892     -0.233109      0.233109       169.155       169.388    
  25  0.823786     -0.193845     -0.175217      0.175217       169.047       169.222    
  26  0.260636      -1.34463      -1.21541       1.21541       166.873       168.088    
  27  0.231902      -1.46144      -1.32100       1.32100       169.699       171.020    
  28  0.476798     -0.740663     -0.669487      0.669487       170.115       170.785    
  29  0.529578     -0.635676     -0.574588      0.574588       170.242       170.817    
  30  0.502254     -0.688650     -0.622472      0.622472       170.267       170.889    
  31  0.960912     -0.398724E-01 -0.360407E-01  0.360407E-01   169.081       169.117    
  32  0.824704     -0.192731     -0.174210      0.174210       171.345       171.519    
  33  0.947114     -0.543359E-01 -0.491143E-01  0.491143E-01   169.673       169.722    
  34  0.838762     -0.175829     -0.158932      0.158932       171.506       171.665    
  35  0.117179      -2.14405      -1.93801       1.93801       170.984       172.922    
  36  0.124953      -2.07981      -1.87995       1.87995       170.446       172.326    
  37  0.180085E-01  -4.01691      -3.63089       3.63089       171.815       175.446    
  38  0.417258     -0.874050     -0.790055      0.790055       171.708       172.498    
  39  0.658693     -0.417497     -0.377376      0.377376       171.324       171.701    
  40  0.836351     -0.178707     -0.161534      0.161534       171.873       172.034    
  41  0.674746     -0.393418     -0.355612      0.355612       172.255       172.610    
  42  0.600998     -0.509164     -0.460234      0.460234       171.272       171.733    
  43  0.696617     -0.361519     -0.326778      0.326778       172.658       172.985    
  44  0.978384     -0.218530E-01 -0.197529E-01  0.197529E-01   172.127       172.147    
  45  0.210888      -1.55643      -1.40686       1.40686       171.909       173.316    
  46  0.632852E-01  -2.76010      -2.49486       2.49486       172.730       175.225    
  47  0.512852     -0.667767     -0.603596      0.603596       171.377       171.981    
  48  0.611085     -0.492520     -0.445189      0.445189       172.689       173.134    
  49  0.711944     -0.339756     -0.307106      0.307106       173.003       173.311    
  50  0.979549     -0.206627E-01 -0.186771E-01  0.186771E-01   172.968       172.986    
  51  0.779633     -0.248932     -0.225010      0.225010       172.139       172.364    
  52  0.178175      -1.72499      -1.55922       1.55922       172.422       173.981    
  53  0.982869     -0.172793E-01 -0.156188E-01  0.156188E-01   172.252       172.268    
  54  0.688584     -0.373118     -0.337262      0.337262       173.567       173.904    
  55  0.176989      -1.73167      -1.56526       1.56526       172.867       174.433    
  56  0.417020     -0.874622     -0.790572      0.790572       173.455       174.246    
  57  0.479439     -0.735138     -0.664493      0.664493       173.929       174.593    
  58  0.372078     -0.988653     -0.893645      0.893645       174.168       175.062    
  59  0.185194E-01  -3.98894      -3.60561       3.60561       172.969       176.575    
  60  0.519177     -0.655511     -0.592518      0.592518       174.034       174.626    
  61  0.658703     -0.417482     -0.377363      0.377363       173.636       174.014    
  62  0.741984     -0.298428     -0.269749      0.269749       174.487       174.757    
  63  0.419599     -0.868456     -0.784998      0.784998       173.924       174.709    
  64  0.197091      -1.62409      -1.46802       1.46802       173.495       174.963    
  65  0.243426      -1.41294      -1.27716       1.27716       175.444       176.721    
  66  0.929368     -0.732503E-01 -0.662110E-01  0.662110E-01   175.683       175.749    
  67  0.790154     -0.235528     -0.212894      0.212894       175.405       175.617    
  68  0.606161     -0.500610     -0.452502      0.452502       174.899       175.352    
  69  0.812976     -0.207054     -0.187156      0.187156       176.015       176.202    
  70  0.161244      -1.82484      -1.64947       1.64947       174.958       176.608    
  71  0.810035     -0.210677     -0.190432      0.190432       176.450       176.641    
  72  0.794303     -0.230290     -0.208160      0.208160       176.634       176.842    
loop,thermsimp(1:2)       16  0.944527      0.728722    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    512        174.47          0.84          1.11         25.15          0.10          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       16
neval is:      511
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       17
neval is:      511


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      511     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.868687     -0.140773     -0.127245      0.127245       164.407       164.534    
   2  0.622683     -0.473718     -0.428195      0.428195       164.098       164.527    
   3  0.651914     -0.427842     -0.386727      0.386727       164.315       164.701    
   4  0.553842     -0.590876     -0.534094      0.534094       164.308       164.842    
   5  0.337973      -1.08479     -0.980543      0.980543       164.864       165.845    
   6  0.242640      -1.41618      -1.28008       1.28008       164.616       165.896    
   7  0.609172     -0.495655     -0.448023      0.448023       166.458       166.906    
   8  0.338499      -1.08323     -0.979137      0.979137       167.155       168.134    
   9  0.118472      -2.13308      -1.92809       1.92809       164.381       166.309    
  10  0.605491     -0.501716     -0.453502      0.453502       167.315       167.769    
  11  0.497482E-01  -3.00078      -2.71241       2.71241       167.592       170.304    
  12  0.347530      -1.05691     -0.955339      0.955339       167.732       168.687    
  13  0.414309E-01  -3.18373      -2.87778       2.87778       166.987       169.865    
  14  0.110553      -2.20226      -1.99062       1.99062       165.463       167.453    
  15  0.307437      -1.17948      -1.06614       1.06614       166.873       167.939    
  16  0.281641      -1.26712      -1.14535       1.14535       168.270       169.415    
  17  0.427972     -0.848697     -0.767138      0.767138       168.307       169.074    
  18  0.496057     -0.701064     -0.633692      0.633692       168.424       169.058    
  19  0.907084     -0.975199E-01 -0.881484E-01  0.881484E-01   168.194       168.282    
  20  0.592111     -0.524061     -0.473699      0.473699       169.081       169.555    
  21  0.826994     -0.189958     -0.171703      0.171703       169.047       169.219    
  22  0.279030      -1.27644      -1.15377       1.15377       166.774       167.927    
  23  0.654717     -0.423553     -0.382850      0.382850       169.155       169.538    
  24  0.796995     -0.226907     -0.205102      0.205102       168.506       168.711    
  25  0.654627E-01  -2.72627      -2.46428       2.46428       169.673       172.137    
  26  0.924427     -0.785809E-01 -0.710294E-01  0.710294E-01   168.966       169.037    
  27  0.298307      -1.20963      -1.09339       1.09339       167.454       168.548    
  28  0.944398     -0.572079E-01 -0.517103E-01  0.517103E-01   170.115       170.167    
  29  0.798146     -0.225464     -0.203797      0.203797       170.242       170.446    
  30  0.304773      -1.18819      -1.07401       1.07401       170.267       171.341    
  31  0.938512E-01  -2.36604      -2.13867       2.13867       168.913       171.051    
  32  0.483033     -0.727670     -0.657742      0.657742       169.699       170.357    
  33  0.761373     -0.272632     -0.246433      0.246433       171.345       171.591    
  34  0.122125      -2.10271      -1.90065       1.90065       171.506       173.406    
  35  0.704283     -0.350575     -0.316886      0.316886       171.324       171.641    
  36  0.907284     -0.972998E-01 -0.879495E-01  0.879495E-01   171.272       171.360    
  37  0.314579      -1.15652      -1.04538       1.04538       171.377       172.423    
  38  0.909859     -0.944657E-01 -0.853877E-01  0.853877E-01   171.873       171.958    
  39  0.386535     -0.950533     -0.859188      0.859188       172.127       172.986    
  40  0.891371     -0.114994     -0.103943      0.103943       172.252       172.356    
  41  0.144567      -1.93401      -1.74815       1.74815       170.446       172.195    
  42  0.344336E-01  -3.36872      -3.04499       3.04499       172.139       175.184    
  43  0.881575     -0.126045     -0.113932      0.113932       171.708       171.822    
  44  0.739451     -0.301847     -0.272840      0.272840       172.255       172.528    
  45  0.928626     -0.740488E-01 -0.669328E-01  0.669328E-01   170.984       171.051    
  46  0.382928     -0.959908     -0.867662      0.867662       172.658       173.526    
  47  0.556888     -0.585391     -0.529136      0.529136       172.968       173.497    
  48  0.479341     -0.735343     -0.664678      0.664678       172.689       173.354    
  49  0.592914     -0.522706     -0.472474      0.472474       173.003       173.476    
  50  0.647965     -0.433919     -0.392220      0.392220       171.909       172.301    
  51  0.178104      -1.72539      -1.55958       1.55958       173.567       175.127    
  52  0.357680      -1.02812     -0.929316      0.929316       172.422       173.351    
  53  0.685413     -0.377734     -0.341434      0.341434       173.636       173.978    
  54  0.955579     -0.454379E-01 -0.410714E-01  0.410714E-01   173.455       173.496    
  55  0.924596     -0.783987E-01 -0.708647E-01  0.708647E-01   172.867       172.938    
  56  0.370610     -0.992604     -0.897217      0.897217       173.929       174.826    
  57  0.243342      -1.41329      -1.27747       1.27747       174.034       175.311    
  58  0.639259     -0.447445     -0.404446      0.404446       173.924       174.329    
  59  0.615535     -0.485264     -0.438631      0.438631       174.487       174.926    
  60  0.550510     -0.596910     -0.539548      0.539548       173.495       174.035    
  61  0.137118      -1.98691      -1.79597       1.79597       174.168       175.964    
  62  0.496584     -0.700002     -0.632733      0.632733       172.730       173.363    
  63  0.273355E-02  -5.90215      -5.33497       5.33497       174.899       180.234    
  64  0.702384     -0.353275     -0.319326      0.319326       171.815       172.135    
  65  0.858552     -0.152508     -0.137852      0.137852       175.405       175.542    
  66  0.479923     -0.734129     -0.663580      0.663580       175.683       176.347    
  67  0.625864     -0.468622     -0.423588      0.423588       176.015       176.438    
  68  0.348131      -1.05518     -0.953775      0.953775       172.969       173.923    
  69  0.691334     -0.369132     -0.333659      0.333659       174.958       175.292    
  70  0.875875     -0.132532     -0.119795      0.119795       176.450       176.570    
  71  0.623109     -0.473034     -0.427576      0.427576       175.444       175.872    
  72  0.890433     -0.116048     -0.104896      0.104896       174.467       174.571    
loop,thermsimp(1:2)       17  0.127245      0.428195    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    513        172.12          0.83          1.11         25.11          0.10          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       17
neval is:      512
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       18
neval is:      512


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      512     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.472884     -0.748904     -0.676936      0.676936       164.098       164.775    
   2  0.675464     -0.392355     -0.354651      0.354651       164.407       164.762    
   3  0.958431     -0.424575E-01 -0.383774E-01  0.383774E-01   164.315       164.353    
   4  0.721093     -0.326988     -0.295565      0.295565       164.308       164.604    
   5  0.635520     -0.453311     -0.409749      0.409749       164.864       165.274    
   6  0.738192     -0.303552     -0.274381      0.274381       164.616       164.890    
   7  0.504943     -0.683310     -0.617645      0.617645       164.381       164.999    
   8  0.559948     -0.579911     -0.524182      0.524182       166.458       166.982    
   9  0.561469     -0.577199     -0.521731      0.521731       165.463       165.984    
  10  0.467828     -0.759655     -0.686654      0.686654       167.315       168.002    
  11  0.288239      -1.24397      -1.12442       1.12442       166.774       167.898    
  12  0.410214     -0.891075     -0.805444      0.805444       166.873       167.678    
  13  0.527762     -0.639111     -0.577693      0.577693       167.155       167.732    
  14  0.186329      -1.68024      -1.51877       1.51877       168.194       169.713    
  15  0.924113     -0.789212E-01 -0.713370E-01  0.713370E-01   167.454       167.526    
  16  0.852662     -0.159392     -0.144075      0.144075       167.732       167.876    
  17  0.903782     -0.101167     -0.914447E-01  0.914447E-01   168.506       168.597    
  18  0.575891     -0.551837     -0.498807      0.498807       168.966       169.465    
  19  0.214801      -1.53804      -1.39024       1.39024       168.424       169.814    
  20  0.564777E-01  -2.87391      -2.59773       2.59773       168.307       170.905    
  21  0.621987     -0.474836     -0.429205      0.429205       169.047       169.476    
  22  0.785316     -0.241669     -0.218445      0.218445       168.270       168.489    
  23  0.910092     -0.942094E-01 -0.851560E-01  0.851560E-01   169.155       169.240    
  24  0.302832      -1.19458      -1.07978       1.07978       169.081       170.161    
  25  0.182175      -1.70279      -1.53915       1.53915       166.987       168.526    
  26  0.112568      -2.18420      -1.97430       1.97430       170.115       172.089    
  27  0.912404     -0.916724E-01 -0.828628E-01  0.828628E-01   167.592       167.675    
  28  0.503463     -0.686245     -0.620298      0.620298       169.699       170.319    
  29  0.454725     -0.788063     -0.712331      0.712331       170.242       170.954    
  30  0.173768      -1.75003      -1.58186       1.58186       170.984       172.566    
  31  0.415873     -0.877376     -0.793062      0.793062       168.913       169.706    
  32  0.766054     -0.266502     -0.240892      0.240892       170.267       170.508    
  33  0.129655      -2.04288      -1.84656       1.84656       171.272       173.119    
  34  0.985651     -0.144527E-01 -0.130638E-01  0.130638E-01   171.345       171.358    
  35  0.418861     -0.870217     -0.786590      0.786590       171.324       172.111    
  36  0.311313      -1.16696      -1.05481       1.05481       171.708       172.763    
  37  0.434284     -0.834057     -0.753905      0.753905       171.873       172.627    
  38  0.548842     -0.599944     -0.542290      0.542290       171.815       172.358    
  39  0.878632     -0.129389     -0.116955      0.116955       169.673       169.790    
  40  0.582787     -0.539934     -0.488047      0.488047       170.446       170.934    
  41  0.976868     -0.234034E-01 -0.211544E-01  0.211544E-01   171.909       171.930    
  42  0.751254     -0.286012     -0.258527      0.258527       172.252       172.511    
  43  0.674066     -0.394427     -0.356523      0.356523       171.377       171.734    
  44  0.854180     -0.157614     -0.142467      0.142467       172.255       172.397    
  45  0.670037E-01  -2.70301      -2.44325       2.44325       172.867       175.311    
  46  0.569693     -0.562658     -0.508588      0.508588       172.127       172.636    
  47  0.571975     -0.558661     -0.504974      0.504974       172.422       172.927    
  48  0.691289     -0.369198     -0.333718      0.333718       172.689       173.023    
  49  0.489152     -0.715083     -0.646364      0.646364       172.730       173.376    
  50  0.230932      -1.46563      -1.32479       1.32479       171.506       172.830    
  51  0.288520      -1.24299      -1.12354       1.12354       173.003       174.127    
  52  0.195194      -1.63376      -1.47676       1.47676       173.455       174.932    
  53  0.196058      -1.62934      -1.47277       1.47277       172.968       174.440    
  54  0.868795     -0.140648     -0.127132      0.127132       172.658       172.786    
  55  0.828359     -0.188309     -0.170213      0.170213       172.969       173.140    
  56  0.516436     -0.660803     -0.597301      0.597301       173.636       174.234    
  57  0.609051     -0.495853     -0.448202      0.448202       173.495       173.944    
  58  0.258145      -1.35423      -1.22409       1.22409       173.924       175.148    
  59  0.574299     -0.554605     -0.501308      0.501308       174.467       174.968    
  60  0.614196     -0.487441     -0.440599      0.440599       173.929       174.369    
  61  0.670293     -0.400041     -0.361598      0.361598       174.487       174.848    
  62  0.694693     -0.364285     -0.329278      0.329278       173.567       173.896    
  63  0.777866     -0.251201     -0.227061      0.227061       172.139       172.366    
  64  0.579296E-02  -5.15111      -4.65610       4.65610       174.958       179.614    
  65  0.199648E-01  -3.91379      -3.53768       3.53768       174.034       177.571    
  66  0.255935      -1.36283      -1.23187       1.23187       175.405       176.636    
  67  0.979898     -0.203063E-01 -0.183549E-01  0.183549E-01   175.444       175.463    
  68  0.646854     -0.435634     -0.393770      0.393770       174.168       174.562    
  69  0.901174     -0.104056     -0.940568E-01  0.940568E-01   175.683       175.777    
  70  0.624564     -0.470702     -0.425468      0.425468       176.015       176.440    
  71  0.352316      -1.04323     -0.942975      0.942975       176.450       177.393    
  72  0.756031E-01  -2.58226      -2.33411       2.33411       172.116       174.450    
loop,thermsimp(1:2)       18  0.676936      0.354651    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    514        175.14          0.84          1.11         25.09          0.15          0.05         27.23
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       18
neval is:      513
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       19
neval is:      513


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      513     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933067     -0.692784E-01 -0.626208E-01  0.626208E-01   164.315       164.377    
   2  0.145621      -1.92675      -1.74159       1.74159       164.308       166.050    
   3  0.824080     -0.193487     -0.174894      0.174894       164.407       164.582    
   4  0.495241     -0.702711     -0.635182      0.635182       164.098       164.734    
   5  0.239042      -1.43112      -1.29359       1.29359       164.616       165.909    
   6  0.167453      -1.78705      -1.61532       1.61532       164.381       165.997    
   7  0.409279     -0.893358     -0.807508      0.807508       164.864       165.672    
   8  0.536324     -0.623017     -0.563146      0.563146       165.463       166.026    
   9  0.697150     -0.360755     -0.326087      0.326087       166.458       166.784    
  10  0.141562      -1.95502      -1.76714       1.76714       167.454       169.222    
  11  0.225624      -1.48889      -1.34581       1.34581       167.592       168.938    
  12  0.153144      -1.87638      -1.69606       1.69606       166.873       168.569    
  13  0.561596     -0.576973     -0.521527      0.521527       167.155       167.676    
  14  0.430163     -0.843592     -0.762524      0.762524       167.732       168.495    
  15  0.905216     -0.995811E-01 -0.900116E-01  0.900116E-01   166.774       166.864    
  16  0.568360     -0.565000     -0.510705      0.510705       167.315       167.826    
  17  0.378285     -0.972108     -0.878690      0.878690       168.270       169.149    
  18  0.164072      -1.80745      -1.63376       1.63376       166.987       168.621    
  19  0.158717      -1.84063      -1.66375       1.66375       168.506       170.169    
  20  0.664145     -0.409255     -0.369926      0.369926       169.155       169.525    
  21  0.325635      -1.12198      -1.01416       1.01416       168.966       169.980    
  22  0.148489      -1.90725      -1.72396       1.72396       169.047       170.771    
  23  0.367680      -1.00054     -0.904391      0.904391       168.913       169.817    
  24  0.417596     -0.873242     -0.789325      0.789325       168.194       168.983    
  25  0.401862     -0.911646     -0.824038      0.824038       169.673       170.497    
  26  0.105239E-01  -4.55411      -4.11646       4.11646       168.424       172.541    
  27  0.587188     -0.532410     -0.481246      0.481246       169.081       169.562    
  28  0.284127      -1.25833      -1.13741       1.13741       169.699       170.836    
  29  0.869365     -0.139992     -0.126539      0.126539       170.267       170.393    
  30  0.736143E-01  -2.60892      -2.35820       2.35820       168.307       170.665    
  31  0.494320E-01  -3.00716      -2.71817       2.71817       170.446       173.165    
  32  0.633016     -0.457260     -0.413318      0.413318       170.242       170.655    
  33  0.499988     -0.693171     -0.626558      0.626558       171.345       171.971    
  34  0.552781     -0.592793     -0.535826      0.535826       171.377       171.913    
  35  0.854618E-01  -2.45969      -2.22331       2.22331       171.909       174.132    
  36  0.816312     -0.202959     -0.183455      0.183455       170.115       170.299    
  37  0.632597     -0.457921     -0.413915      0.413915       171.324       171.738    
  38  0.433466     -0.835942     -0.755609      0.755609       171.815       172.571    
  39  0.230856      -1.46596      -1.32508       1.32508       172.139       173.464    
  40  0.190541      -1.65789      -1.49857       1.49857       172.255       173.753    
  41  0.178324      -1.72416      -1.55847       1.55847       172.252       173.811    
  42  0.227176      -1.48203      -1.33961       1.33961       170.984       172.324    
  43  0.152649      -1.87961      -1.69899       1.69899       171.873       173.572    
  44  0.496683     -0.699804     -0.632554      0.632554       172.127       172.760    
  45  0.274448      -1.29300      -1.16874       1.16874       171.708       172.877    
  46  0.172783      -1.75572      -1.58700       1.58700       172.658       174.245    
  47  0.708684     -0.344346     -0.311254      0.311254       171.506       171.817    
  48  0.157838      -1.84618      -1.66877       1.66877       172.422       174.091    
  49  0.724663     -0.322049     -0.291101      0.291101       172.689       172.980    
  50  0.427231     -0.850431     -0.768706      0.768706       171.272       172.041    
  51  0.742432     -0.297824     -0.269203      0.269203       172.969       173.239    
  52  0.902586     -0.102491     -0.926417E-01  0.926417E-01   172.730       172.823    
  53  0.803636     -0.218609     -0.197601      0.197601       173.567       173.765    
  54  0.222881      -1.50112      -1.35686       1.35686       173.495       174.852    
  55  0.544102     -0.608618     -0.550131      0.550131       173.003       173.554    
  56  0.419264E-01  -3.17184      -2.86703       2.86703       173.636       176.503    
  57  0.114380      -2.16823      -1.95987       1.95987       173.929       175.889    
  58  0.885187     -0.121957     -0.110237      0.110237       172.968       173.078    
  59  0.738427     -0.303234     -0.274093      0.274093       172.116       172.390    
  60  0.904391     -0.100494     -0.908364E-01  0.908364E-01   174.168       174.259    
  61  0.720250     -0.328158     -0.296622      0.296622       174.487       174.783    
  62  0.953889     -0.472084E-01 -0.426717E-01  0.426717E-01   173.455       173.498    
  63  0.471136E-01  -3.05519      -2.76159       2.76159       174.467       177.228    
  64  0.269026      -1.31295      -1.18678       1.18678       173.924       175.111    
  65  0.958879     -0.419906E-01 -0.379554E-01  0.379554E-01   172.867       172.905    
  66  0.286970      -1.24838      -1.12841       1.12841       175.444       176.573    
  67  0.535133     -0.625240     -0.565155      0.565155       175.683       176.248    
  68  0.297467      -1.21245      -1.09594       1.09594       176.015       177.111    
  69  0.757661     -0.277519     -0.250850      0.250850       175.405       175.655    
  70  0.107257      -2.23253      -2.01798       2.01798       176.450       178.468    
  71  0.261070      -1.34296      -1.21391       1.21391       174.034       175.248    
  72  0.464047     -0.767770     -0.693988      0.693988       175.137       175.831    
loop,thermsimp(1:2)       19  0.626208E-01   1.74159    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    515        165.13          0.83          1.11         25.09          0.12          0.06         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    165.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       19
neval is:      514
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       20
neval is:      514


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      514     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.203517      -1.59201      -1.43902       1.43902       164.315       165.754    
   2  0.880178     -0.127631     -0.115366      0.115366       164.407       164.522    
   3  0.253527      -1.37229      -1.24041       1.24041       164.098       165.339    
   4  0.546502E-01  -2.90680      -2.62746       2.62746       164.864       167.492    
   5  0.489477     -0.714418     -0.645764      0.645764       164.616       165.261    
   6  0.178572      -1.72276      -1.55721       1.55721       164.381       165.938    
   7  0.948413     -0.529648E-01 -0.478750E-01  0.478750E-01   165.463       165.510    
   8  0.572919E-01  -2.85960      -2.58479       2.58479       164.308       166.893    
   9  0.615738     -0.484933     -0.438332      0.438332       166.458       166.896    
  10  0.885735     -0.121338     -0.109677      0.109677       166.774       166.883    
  11  0.997446     -0.255722E-02 -0.231148E-02  0.231148E-02   167.155       167.157    
  12  0.349545      -1.05112     -0.950113      0.950113       167.315       168.265    
  13  0.988454     -0.116130E-01 -0.104970E-01  0.104970E-01   167.732       167.743    
  14  0.809478     -0.211366     -0.191054      0.191054       166.873       167.064    
  15  0.978310     -0.219291E-01 -0.198218E-01  0.198218E-01   166.987       167.007    
  16  0.808711     -0.212313     -0.191910      0.191910       167.592       167.784    
  17  0.447445     -0.804202     -0.726919      0.726919       168.194       168.921    
  18  0.495992     -0.701195     -0.633811      0.633811       168.270       168.904    
  19  0.208359      -1.56849      -1.41776       1.41776       167.454       168.872    
  20  0.707030     -0.346682     -0.313367      0.313367       169.155       169.469    
  21  0.991175     -0.886425E-02 -0.801241E-02  0.801241E-02   169.081       169.089    
  22  0.744436     -0.295129     -0.266768      0.266768       168.913       169.179    
  23  0.475151     -0.744124     -0.672614      0.672614       168.966       169.639    
  24  0.403355     -0.907939     -0.820687      0.820687       168.506       169.326    
  25  0.182881      -1.69892      -1.53566       1.53566       170.115       171.651    
  26  0.862815     -0.147554     -0.133375      0.133375       170.267       170.400    
  27  0.771181     -0.259832     -0.234862      0.234862       169.673       169.907    
  28  0.139364      -1.97067      -1.78129       1.78129       170.242       172.023    
  29  0.563421     -0.573729     -0.518594      0.518594       168.307       168.826    
  30  0.308851      -1.17490      -1.06199       1.06199       169.047       170.109    
  31  0.785605     -0.241301     -0.218112      0.218112       169.699       169.917    
  32  0.233686      -1.45378      -1.31407       1.31407       171.324       172.638    
  33  0.145397      -1.92829      -1.74298       1.74298       171.506       173.249    
  34  0.620323     -0.477515     -0.431626      0.431626       171.377       171.809    
  35  0.454958     -0.787550     -0.711868      0.711868       171.345       172.057    
  36  0.362353      -1.01514     -0.917583      0.917583       171.272       172.190    
  37  0.368968     -0.997045     -0.901230      0.901230       170.984       171.885    
  38  0.623077E-01  -2.77567      -2.50893       2.50893       172.116       174.625    
  39  0.764087     -0.269074     -0.243216      0.243216       168.424       168.667    
  40  0.326593      -1.11904      -1.01150       1.01150       171.815       172.827    
  41  0.665656     -0.406982     -0.367871      0.367871       172.127       172.495    
  42  0.518212     -0.657371     -0.594199      0.594199       172.730       173.324    
  43  0.416207     -0.876573     -0.792336      0.792336       171.708       172.501    
  44  0.704568     -0.350170     -0.316519      0.316519       172.867       173.184    
  45  0.391395     -0.938039     -0.847895      0.847895       172.689       173.537    
  46  0.253982      -1.37049      -1.23879       1.23879       172.968       174.206    
  47  0.373757     -0.984150     -0.889575      0.889575       170.446       171.336    
  48  0.866113     -0.143740     -0.129927      0.129927       172.969       173.099    
  49  0.938299     -0.636861E-01 -0.575660E-01  0.575660E-01   172.139       172.197    
  50  0.292880E-02  -5.83316      -5.27260       5.27260       173.455       178.728    
  51  0.669895     -0.400634     -0.362134      0.362134       173.003       173.366    
  52  0.147486      -1.91402      -1.73009       1.73009       171.873       173.603    
  53  0.992726     -0.730080E-02 -0.659920E-02  0.659920E-02   172.255       172.261    
  54  0.989713E-01  -2.31292      -2.09066       2.09066       173.567       175.658    
  55  0.908903     -0.955172E-01 -0.863382E-01  0.863382E-01   172.252       172.339    
  56  0.768944E-01  -2.56532      -2.31880       2.31880       172.422       174.741    
  57  0.314167      -1.15783      -1.04657       1.04657       171.909       172.955    
  58  0.745232     -0.294060     -0.265802      0.265802       172.658       172.924    
  59  0.176066      -1.73690      -1.56998       1.56998       174.168       175.738    
  60  0.556771     -0.585601     -0.529326      0.529326       174.487       175.016    
  61  0.747217E-02  -4.89657      -4.42602       4.42602       173.495       177.921    
  62  0.898124     -0.107447     -0.971219E-01  0.971219E-01   173.924       174.021    
  63  0.501028     -0.691094     -0.624681      0.624681       174.034       174.658    
  64  0.127210      -2.06191      -1.86377       1.86377       175.405       177.268    
  65  0.876572     -0.131737     -0.119077      0.119077       175.137       175.256    
  66  0.845667     -0.167630     -0.151521      0.151521       173.929       174.080    
  67  0.693387     -0.366167     -0.330979      0.330979       175.683       176.014    
  68  0.303698      -1.19172      -1.07720       1.07720       173.636       174.714    
  69  0.881095     -0.126590     -0.114425      0.114425       175.444       175.559    
  70  0.940587     -0.612510E-01 -0.553649E-01  0.553649E-01   176.015       176.070    
  71  0.739414     -0.301897     -0.272885      0.272885       174.467       174.739    
  72  0.918892     -0.845870E-01 -0.764583E-01  0.764583E-01   165.135       165.211    
loop,thermsimp(1:2)       20   1.43902      0.115366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    516        163.68          0.84          1.11         25.11          0.25          0.07         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    517        158.27          0.81          1.11         25.05          0.12          0.05         27.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       20
neval is:      516
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       21
neval is:      516


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      516     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.689627     -0.371605     -0.335894      0.335894       164.407       164.743    
   2  0.933435     -0.688844E-01 -0.622647E-01  0.622647E-01   165.135       165.197    
   3  0.416629     -0.875559     -0.791420      0.791420       164.616       165.407    
   4  0.562207     -0.575885     -0.520543      0.520543       164.098       164.619    
   5  0.966630     -0.339391E-01 -0.306776E-01  0.306776E-01   165.463       165.493    
   6  0.202933      -1.59488      -1.44162       1.44162       164.315       165.756    
   7  0.288024E-01  -3.54730      -3.20641       3.20641       164.381       167.588    
   8  0.585249     -0.535717     -0.484236      0.484236       166.774       167.258    
   9  0.210785      -1.55692      -1.40730       1.40730       164.308       165.716    
  10  0.672731     -0.396410     -0.358315      0.358315       166.458       166.816    
  11  0.313600      -1.15964      -1.04820       1.04820       166.987       168.035    
  12  0.429692     -0.844687     -0.763514      0.763514       166.873       167.636    
  13  0.714979     -0.335502     -0.303261      0.303261       167.155       167.458    
  14  0.806283     -0.215320     -0.194629      0.194629       164.864       165.059    
  15  0.105187      -2.25202      -2.03560       2.03560       167.732       169.768    
  16  0.397355     -0.922926     -0.834234      0.834234       167.592       168.426    
  17  0.452880     -0.792128     -0.716006      0.716006       167.315       168.031    
  18  0.272764      -1.29915      -1.17430       1.17430       168.424       169.598    
  19  0.696828     -0.361217     -0.326505      0.326505       168.307       168.633    
  20  0.667523     -0.404182     -0.365341      0.365341       167.454       167.820    
  21  0.137545      -1.98380      -1.79316       1.79316       168.270       170.063    
  22  0.486889     -0.719719     -0.650555      0.650555       168.194       168.845    
  23  0.973404     -0.269564E-01 -0.243660E-01  0.243660E-01   169.081       169.105    
  24  0.210453      -1.55849      -1.40872       1.40872       168.913       170.321    
  25  0.459577     -0.777448     -0.702736      0.702736       168.506       169.208    
  26  0.278675      -1.27771      -1.15492       1.15492       169.155       170.310    
  27  0.280962      -1.26954      -1.14753       1.14753       168.966       170.114    
  28  0.105764      -2.24655      -2.03066       2.03066       169.673       171.703    
  29  0.500220     -0.692707     -0.626139      0.626139       169.699       170.325    
  30  0.791031     -0.234418     -0.211891      0.211891       169.047       169.259    
  31  0.856506     -0.154894     -0.140009      0.140009       170.267       170.407    
  32  0.904280     -0.100617     -0.909474E-01  0.909474E-01   170.446       170.537    
  33  0.332181      -1.10207     -0.996166      0.996166       170.115       171.111    
  34  0.904309     -0.100585     -0.909186E-01  0.909186E-01   171.377       171.468    
  35  0.763590E-01  -2.57231      -2.32511       2.32511       170.984       173.309    
  36  0.703213     -0.352095     -0.318259      0.318259       170.242       170.560    
  37  0.332441      -1.10129     -0.995460      0.995460       171.345       172.340    
  38  0.445914     -0.807629     -0.730017      0.730017       171.272       172.002    
  39  0.154208      -1.86946      -1.68980       1.68980       172.139       173.829    
  40  0.815735     -0.203666     -0.184094      0.184094       172.255       172.439    
  41  0.210583      -1.55788      -1.40817       1.40817       172.252       173.661    
  42  0.839155     -0.175360     -0.158508      0.158508       172.127       172.286    
  43  0.930787     -0.717244E-01 -0.648318E-01  0.648318E-01   171.708       171.773    
  44  0.754433     -0.281789     -0.254710      0.254710       171.324       171.579    
  45  0.708066     -0.345218     -0.312043      0.312043       171.815       172.127    
  46  0.488874     -0.715650     -0.646877      0.646877       172.658       173.305    
  47  0.646527     -0.436140     -0.394227      0.394227       171.909       172.303    
  48  0.446057E-01  -3.10989      -2.81104       2.81104       172.969       175.780    
  49  0.337164      -1.08719     -0.982710      0.982710       172.867       173.850    
  50  0.830356     -0.185900     -0.168036      0.168036       171.506       171.674    
  51  0.412872E-01  -3.18720      -2.88092       2.88092       172.730       175.611    
  52  0.666096     -0.406321     -0.367275      0.367275       173.003       173.371    
  53  0.304717      -1.18837      -1.07417       1.07417       172.689       173.763    
  54  0.374525E-01  -3.28468      -2.96903       2.96903       171.873       174.842    
  55  0.646813     -0.435698     -0.393828      0.393828       173.924       174.318    
  56  0.514613     -0.664340     -0.600498      0.600498       173.929       174.529    
  57  0.988540E-01  -2.31411      -2.09173       2.09173       172.968       175.059    
  58  0.569908E-01  -2.86487      -2.58956       2.58956       172.116       174.706    
  59  0.905297     -0.994917E-01 -0.899307E-01  0.899307E-01   174.034       174.124    
  60  0.491180     -0.710945     -0.642624      0.642624       173.636       174.279    
  61  0.954569     -0.464958E-01 -0.420276E-01  0.420276E-01   174.467       174.509    
  62  0.922129     -0.810699E-01 -0.732792E-01  0.732792E-01   172.422       172.495    
  63  0.494244     -0.704725     -0.637002      0.637002       174.487       175.124    
  64  0.270200      -1.30859      -1.18284       1.18284       175.137       176.320    
  65  0.707622     -0.345845     -0.312609      0.312609       175.444       175.757    
  66  0.577969     -0.548236     -0.495551      0.495551       173.567       174.062    
  67  0.599678     -0.511362     -0.462221      0.462221       174.168       174.630    
  68  0.683548     -0.380458     -0.343897      0.343897       175.683       176.027    
  69  0.131541      -2.02844      -1.83351       1.83351       176.015       177.848    
  70  0.657942     -0.418639     -0.378408      0.378408       175.405       175.783    
  71  0.624919     -0.470134     -0.424955      0.424955       173.495       173.920    
  72  0.471083     -0.752721     -0.680386      0.680386       158.266       158.946    
loop,thermsimp(1:2)       21  0.335894      0.622647E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    518        176.98          0.83          1.11         25.16          0.26          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    519        169.69          0.84          1.11         25.00          0.18          0.05         27.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    169.69
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       21
neval is:      518
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       22
neval is:      518


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      518     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.564979     -0.570967     -0.516098      0.516098       158.266       158.782    
   2  0.649914     -0.430915     -0.389505      0.389505       164.098       164.488    
   3  0.234494      -1.45033      -1.31095       1.31095       164.407       165.718    
   4  0.250059      -1.38606      -1.25286       1.25286       164.864       166.117    
   5  0.396140     -0.925987     -0.837001      0.837001       165.135       165.972    
   6  0.587608     -0.531696     -0.480600      0.480600       164.616       165.096    
   7  0.216174      -1.53167      -1.38448       1.38448       165.463       166.847    
   8  0.344171      -1.06662     -0.964117      0.964117       164.308       165.272    
   9  0.898582     -0.106937     -0.966609E-01  0.966609E-01   164.315       164.411    
  10  0.269335      -1.31180      -1.18574       1.18574       166.458       167.644    
  11  0.506240     -0.680744     -0.615326      0.615326       166.774       167.389    
  12  0.469054     -0.757038     -0.684288      0.684288       167.155       167.839    
  13  0.599330     -0.511942     -0.462745      0.462745       164.381       164.844    
  14  0.850776     -0.161606     -0.146076      0.146076       166.873       167.019    
  15  0.411587     -0.887735     -0.802425      0.802425       167.454       168.257    
  16  0.690925     -0.369723     -0.334193      0.334193       167.315       167.649    
  17  0.539174     -0.617717     -0.558355      0.558355       166.987       167.545    
  18  0.268467      -1.31503      -1.18865       1.18865       167.592       168.781    
  19  0.413033     -0.884227     -0.799255      0.799255       168.307       169.106    
  20  0.535238     -0.625044     -0.564979      0.564979       168.194       168.759    
  21  0.407229     -0.898380     -0.812047      0.812047       169.081       169.893    
  22  0.486369E-01  -3.02337      -2.73283       2.73283       168.506       171.238    
  23  0.176950      -1.73189      -1.56546       1.56546       169.047       170.613    
  24  0.891669     -0.114660     -0.103641      0.103641       168.424       168.528    
  25  0.985364     -0.147443E-01 -0.133274E-01  0.133274E-01   167.732       167.745    
  26  0.779121E-01  -2.55217      -2.30691       2.30691       168.270       170.577    
  27  0.198695      -1.61599      -1.46069       1.46069       168.966       170.427    
  28  0.966734     -0.338319E-01 -0.305807E-01  0.305807E-01   169.155       169.186    
  29  0.230243      -1.46862      -1.32749       1.32749       168.913       170.240    
  30  0.996515     -0.349094E-02 -0.315547E-02  0.315547E-02   169.699       169.702    
  31  0.299142      -1.20684      -1.09086       1.09086       170.267       171.358    
  32  0.204924      -1.58512      -1.43279       1.43279       170.446       171.879    
  33  0.229288      -1.47278      -1.33124       1.33124       170.242       171.573    
  34  0.263068      -1.33534      -1.20702       1.20702       170.115       171.322    
  35  0.535099     -0.625303     -0.565212      0.565212       171.377       171.943    
  36  0.461620     -0.773013     -0.698727      0.698727       171.324       172.023    
  37  0.110748      -2.20050      -1.98903       1.98903       171.506       173.495    
  38  0.972332     -0.280583E-01 -0.253619E-01  0.253619E-01   169.673       169.698    
  39  0.273306      -1.29716      -1.17251       1.17251       171.708       172.881    
  40  0.197973      -1.61962      -1.46398       1.46398       171.272       172.736    
  41  0.541456     -0.613494     -0.554538      0.554538       171.815       172.370    
  42  0.740418     -0.300540     -0.271659      0.271659       172.127       172.399    
  43  0.818704     -0.200033     -0.180810      0.180810       171.909       172.090    
  44  0.639833     -0.446547     -0.403635      0.403635       171.345       171.748    
  45  0.883244E-01  -2.42674      -2.19353       2.19353       172.255       174.448    
  46  0.379012     -0.970189     -0.876955      0.876955       172.422       173.299    
  47  0.629399     -0.462989     -0.418497      0.418497       172.658       173.077    
  48  0.447172     -0.804811     -0.727470      0.727470       170.984       171.711    
  49  0.639763     -0.446657     -0.403734      0.403734       173.003       173.407    
  50  0.890417E-01  -2.41865      -2.18622       2.18622       172.252       174.439    
  51  0.129636      -2.04302      -1.84669       1.84669       172.689       174.536    
  52  0.397860     -0.921655     -0.833085      0.833085       172.139       172.972    
  53  0.396503     -0.925073     -0.836175      0.836175       172.867       173.703    
  54  0.896543     -0.109209     -0.987139E-01  0.987139E-01   173.495       173.594    
  55  0.558316     -0.582830     -0.526821      0.526821       173.567       174.094    
  56  0.258142      -1.35425      -1.22411       1.22411       174.034       175.258    
  57  0.290113      -1.23749      -1.11856       1.11856       173.636       174.755    
  58  0.162781      -1.81535      -1.64090       1.64090       173.924       175.565    
  59  0.435698     -0.830806     -0.750967      0.750967       174.467       175.218    
  60  0.631392     -0.459829     -0.415640      0.415640       173.929       174.345    
  61  0.237479E-02  -6.04284      -5.46214       5.46214       174.168       179.630    
  62  0.659496     -0.416280     -0.376276      0.376276       172.116       172.492    
  63  0.607468     -0.498456     -0.450555      0.450555       171.873       172.323    
  64  0.313177      -1.16099      -1.04942       1.04942       172.968       174.017    
  65  0.867421     -0.142231     -0.128563      0.128563       174.487       174.615    
  66  0.841136     -0.173002     -0.156377      0.156377       172.730       172.886    
  67  0.913103     -0.909069E-01 -0.821709E-01  0.821709E-01   175.444       175.526    
  68  0.520038     -0.653854     -0.591020      0.591020       172.969       173.560    
  69  0.128778      -2.04966      -1.85270       1.85270       175.405       177.257    
  70  0.541292     -0.613796     -0.554811      0.554811       175.683       176.238    
  71  0.652380     -0.427129     -0.386082      0.386082       175.137       175.523    
  72  0.891558     -0.114785     -0.103754      0.103754       169.690       169.794    
loop,thermsimp(1:2)       22  0.516098      0.389505    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    520        168.51          0.84          1.11         25.11          0.06          0.05         27.17
Just calling func    0   0         27.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    168.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       22
neval is:      519
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       23
neval is:      519


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      519     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.856405     -0.155012     -0.140115      0.140115       158.266       158.406    
   2  0.202381      -1.59760      -1.44407       1.44407       164.315       165.759    
   3  0.468782E-01  -3.06020      -2.76612       2.76612       164.098       166.865    
   4  0.881899     -0.125678     -0.113600      0.113600       164.381       164.495    
   5  0.651671     -0.428215     -0.387064      0.387064       164.616       165.003    
   6  0.568610     -0.564561     -0.510308      0.510308       164.308       164.819    
   7  0.897617     -0.108012     -0.976319E-01  0.976319E-01   164.407       164.505    
   8  0.679451     -0.386471     -0.349331      0.349331       165.135       165.484    
   9  0.134747      -2.00436      -1.81174       1.81174       164.864       166.676    
  10  0.196368      -1.62776      -1.47134       1.47134       165.463       166.934    
  11  0.530475     -0.633983     -0.573058      0.573058       166.873       167.446    
  12  0.109926      -2.20794      -1.99576       1.99576       166.774       168.769    
  13  0.329932      -1.10887      -1.00231       1.00231       166.987       167.989    
  14  0.315682E-01  -3.45560      -3.12353       3.12353       166.458       169.582    
  15  0.398644     -0.919687     -0.831306      0.831306       167.315       168.146    
  16  0.735606E-01  -2.60965      -2.35886       2.35886       167.732       170.091    
  17  0.926864     -0.759486E-01 -0.686501E-01  0.686501E-01   167.155       167.223    
  18  0.951427E-01  -2.35238      -2.12632       2.12632       167.454       169.581    
  19  0.649794     -0.431100     -0.389672      0.389672       168.424       168.814    
  20  0.753721     -0.282733     -0.255563      0.255563       168.194       168.450    
  21  0.481624     -0.730591     -0.660382      0.660382       167.592       168.252    
  22  0.767971E-01  -2.56659      -2.31994       2.31994       168.307       170.627    
  23  0.138368      -1.97784      -1.78777       1.78777       169.155       170.943    
  24  0.989715     -0.103379E-01 -0.934444E-02  0.934444E-02   169.673       169.682    
  25  0.641675     -0.443673     -0.401037      0.401037       169.699       170.100    
  26  0.200623      -1.60633      -1.45196       1.45196       169.690       171.142    
  27  0.938705     -0.632541E-01 -0.571755E-01  0.571755E-01   169.081       169.138    
  28  0.749560     -0.288270     -0.260567      0.260567       168.913       169.173    
  29  0.889204     -0.117428     -0.106144      0.106144       168.966       169.072    
  30  0.534697     -0.626056     -0.565893      0.565893       168.270       168.836    
  31  0.899645E-01  -2.40834      -2.17690       2.17690       169.047       171.224    
  32  0.982602     -0.175515E-01 -0.158648E-01  0.158648E-01   168.506       168.521    
  33  0.662698     -0.411436     -0.371897      0.371897       170.115       170.487    
  34  0.275577      -1.28889      -1.16503       1.16503       170.267       171.432    
  35  0.585503     -0.535284     -0.483844      0.483844       170.242       170.726    
  36  0.394027     -0.931335     -0.841835      0.841835       170.984       171.826    
  37  0.333190      -1.09904     -0.993426      0.993426       171.345       172.338    
  38  0.789561     -0.236278     -0.213572      0.213572       170.446       170.660    
  39  0.772800     -0.257734     -0.232966      0.232966       171.377       171.610    
  40  0.752121     -0.284858     -0.257483      0.257483       171.324       171.582    
  41  0.757220     -0.278101     -0.251376      0.251376       171.909       172.160    
  42  0.715721     -0.334464     -0.302323      0.302323       171.873       172.175    
  43  0.494872     -0.703457     -0.635856      0.635856       171.815       172.451    
  44  0.100481      -2.29779      -2.07697       2.07697       172.127       174.204    
  45  0.791863     -0.233367     -0.210941      0.210941       172.116       172.327    
  46  0.947382     -0.540532E-01 -0.488588E-01  0.488588E-01   171.272       171.321    
  47  0.150069      -1.89666      -1.71440       1.71440       171.708       173.423    
  48  0.183117      -1.69763      -1.53449       1.53449       172.730       174.264    
  49  0.501919     -0.689317     -0.623075      0.623075       172.139       172.762    
  50  0.825224E-01  -2.49469      -2.25495       2.25495       172.658       174.913    
  51  0.315756      -1.15279      -1.04201       1.04201       172.422       173.464    
  52  0.421132E-01  -3.16739      -2.86301       2.86301       173.003       175.866    
  53  0.277967      -1.28025      -1.15722       1.15722       171.506       172.663    
  54  0.474814     -0.744831     -0.673254      0.673254       172.969       173.643    
  55  0.611196     -0.492338     -0.445025      0.445025       173.495       173.940    
  56  0.750301     -0.287280     -0.259673      0.259673       172.867       173.127    
  57  0.549986     -0.597862     -0.540408      0.540408       172.968       173.508    
  58  0.330429E-01  -3.40995      -3.08226       3.08226       173.567       176.649    
  59  0.216965      -1.52802      -1.38118       1.38118       173.929       175.310    
  60  0.218254      -1.52210      -1.37583       1.37583       172.252       173.628    
  61  0.297843      -1.21119      -1.09480       1.09480       172.255       173.350    
  62  0.990576E-01  -2.31205      -2.08987       2.08987       172.689       174.779    
  63  0.293649      -1.22537      -1.10762       1.10762       174.487       175.594    
  64  0.417131     -0.874355     -0.790331      0.790331       173.636       174.427    
  65  0.966386     -0.341924E-01 -0.309066E-01  0.309066E-01   174.467       174.497    
  66  0.275486      -1.28922      -1.16533       1.16533       174.034       175.199    
  67  0.215787      -1.53346      -1.38610       1.38610       175.137       176.523    
  68  0.480814     -0.732275     -0.661905      0.661905       175.444       176.106    
  69  0.327812      -1.11532      -1.00814       1.00814       173.924       174.932    
  70  0.517062     -0.659593     -0.596208      0.596208       175.683       176.279    
  71  0.186162      -1.68114      -1.51958       1.51958       175.405       176.924    
  72  0.302751      -1.19485      -1.08002       1.08002       168.511       169.591    
loop,thermsimp(1:2)       23  0.140115       1.44407    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    521        173.40          0.84          1.11         25.35          0.17          0.05         27.52
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  520    173.40        1.067     -1.437      2.187     -102.6     0.8174    
                      0.2832      1.672     -99.70      3.384     0.3244    
                       1.974     -1.606      2.048      0.000     -40.00    
                     -0.9680      0.000      0.000      0.000     -1.221    

                      -2.500     0.4759E+05 0.3094E+05  0.000      0.000    
                     -0.5672     -6.209     -4.784     -7.947      5.744    
                      -14.71     -3.205     -700.6      0.000     -5472.    

                     -0.1690E+05  8519.     -4209.     0.1445E+06 -3940.    
                       5409.    -0.2174E-01-0.1644E-01  0.000     0.2521E-01
                     -0.4658E-01-0.3589E-01 0.1156     0.3576E-01-0.4157E-01

                     -0.2108    -0.9963      0.000    -0.6360E-01-0.3839E-01
                       0.000    -0.9072E-01-0.2703E-01-0.6133E-01-0.4090E-01
                     -0.5705E-01 0.3843E-01 0.4545     -1.191      0.000    

                     -0.3814    -0.6545    -0.7784    -0.6527    -0.2183    
                     -0.5818E-01  9.096      8.795     -3999.     -4.000    
                     -0.5888    -0.6261      9.174      8.744     -5275.    

                      -4.000     0.1192    -0.8463      8.956      8.854    
                      -5313.     -7.000    -0.3660    -0.6995      9.034    
                       8.848     -4932.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       23
neval is:      520
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       24
neval is:      520


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      520     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265794      -1.32503      -1.19770       1.19770       158.266       159.463    
   2  0.873295     -0.135482     -0.122463      0.122463       164.381       164.504    
   3  0.876467E-01  -2.43444      -2.20050       2.20050       164.407       166.607    
   4  0.629921     -0.462161     -0.417748      0.417748       164.308       164.726    
   5  0.434473     -0.833621     -0.753511      0.753511       164.616       165.369    
   6  0.346377      -1.06023     -0.958342      0.958342       165.135       166.093    
   7  0.140231      -1.96447      -1.77568       1.77568       164.315       166.090    
   8  0.162246      -1.81864      -1.64387       1.64387       164.864       166.508    
   9  0.944643     -0.569479E-01 -0.514753E-01  0.514753E-01   164.098       164.150    
  10  0.612757     -0.489786     -0.442719      0.442719       165.463       165.905    
  11  0.154744      -1.86598      -1.68667       1.68667       167.155       168.841    
  12  0.357361      -1.02901     -0.930123      0.930123       166.873       167.803    
  13  0.370792     -0.992115     -0.896775      0.896775       166.987       167.884    
  14  0.309247      -1.17361      -1.06083       1.06083       167.315       168.376    
  15  0.779381E-01  -2.55184      -2.30661       2.30661       167.592       169.899    
  16  0.364445      -1.00938     -0.912381      0.912381       168.194       169.106    
  17  0.952507     -0.486574E-01 -0.439815E-01  0.439815E-01   168.506       168.550    
  18  0.449458     -0.799713     -0.722862      0.722862       166.774       167.496    
  19  0.561996     -0.576261     -0.520883      0.520883       168.424       168.945    
  20  0.143909      -1.93857      -1.75228       1.75228       168.270       170.022    
  21  0.433671     -0.835469     -0.755182      0.755182       168.966       169.721    
  22  0.774330     -0.255758     -0.231180      0.231180       169.081       169.312    
  23  0.671881     -0.397673     -0.359458      0.359458       168.913       169.272    
  24  0.233384      -1.45507      -1.31524       1.31524       167.454       168.770    
  25  0.715887     -0.334233     -0.302113      0.302113       166.458       166.760    
  26  0.279781      -1.27375      -1.15134       1.15134       168.511       169.662    
  27  0.139405      -1.97037      -1.78102       1.78102       169.673       171.454    
  28  0.869999     -0.139263     -0.125880      0.125880       167.732       167.858    
  29  0.890395     -0.116090     -0.104934      0.104934       169.699       169.804    
  30  0.453873     -0.789939     -0.714027      0.714027       170.115       170.829    
  31  0.688263     -0.373584     -0.337683      0.337683       168.307       168.645    
  32  0.349244      -1.05198     -0.950890      0.950890       170.446       171.397    
  33  0.508404     -0.676478     -0.611470      0.611470       170.242       170.853    
  34  0.235381      -1.44655      -1.30754       1.30754       169.155       170.463    
  35  0.487606     -0.718247     -0.649224      0.649224       169.690       170.339    
  36  0.275193      -1.29028      -1.16629       1.16629       169.047       170.213    
  37  0.844440E-01  -2.47167      -2.23414       2.23414       171.272       173.507    
  38  0.788178     -0.238031     -0.215157      0.215157       170.267       170.482    
  39  0.517452     -0.658838     -0.595524      0.595524       171.324       171.920    
  40  0.970281     -0.301699E-01 -0.272706E-01  0.272706E-01   171.377       171.405    
  41  0.298448      -1.20916      -1.09296       1.09296       170.984       172.077    
  42  0.269978      -1.30941      -1.18358       1.18358       171.909       173.092    
  43  0.368791     -0.997524     -0.901663      0.901663       171.873       172.774    
  44  0.613443     -0.488668     -0.441708      0.441708       172.116       172.558    
  45  0.227206      -1.48190      -1.33949       1.33949       171.345       172.684    
  46  0.232743      -1.45782      -1.31773       1.31773       171.815       173.133    
  47  0.350471      -1.04848     -0.947721      0.947721       171.506       172.453    
  48  0.546200     -0.604770     -0.546652      0.546652       172.139       172.686    
  49  0.427816     -0.849063     -0.767469      0.767469       172.867       173.635    
  50  0.457333     -0.782344     -0.707162      0.707162       172.255       172.962    
  51  0.228747      -1.47514      -1.33338       1.33338       171.708       173.042    
  52  0.679692E-01  -2.68870      -2.43032       2.43032       172.422       174.852    
  53  0.241139      -1.42238      -1.28569       1.28569       172.968       174.253    
  54  0.282829      -1.26291      -1.14155       1.14155       172.252       173.394    
  55  0.958824E-01  -2.34463      -2.11932       2.11932       172.969       175.089    
  56  0.551664     -0.594816     -0.537655      0.537655       173.495       174.033    
  57  0.211140      -1.55523      -1.40578       1.40578       172.127       173.533    
  58  0.666421     -0.405834     -0.366834      0.366834       172.730       173.097    
  59  0.225751      -1.48832      -1.34530       1.34530       173.636       174.982    
  60  0.398134     -0.920966     -0.832463      0.832463       174.467       175.299    
  61  0.879750     -0.128118     -0.115806      0.115806       172.689       172.805    
  62  0.238918      -1.43164      -1.29406       1.29406       172.658       173.952    
  63  0.275285      -1.28995      -1.16599       1.16599       173.924       175.090    
  64  0.157988      -1.84524      -1.66791       1.66791       174.034       175.702    
  65  0.203161      -1.59376      -1.44060       1.44060       173.929       175.369    
  66  0.620254     -0.477626     -0.431726      0.431726       174.487       174.919    
  67  0.668967     -0.402021     -0.363387      0.363387       173.003       173.367    
  68  0.158996      -1.83887      -1.66216       1.66216       175.444       177.106    
  69  0.397924E-01  -3.22408      -2.91425       2.91425       175.683       178.597    
  70  0.298973E-01  -3.50999      -3.17268       3.17268       175.137       178.309    
  71  0.474508E-01  -3.04806      -2.75515       2.75515       173.567       176.322    
  72  0.644952     -0.438579     -0.396432      0.396432       173.404       173.801    
loop,thermsimp(1:2)       24   1.19770      0.122463    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    522        174.59          0.84          1.11         25.15          0.19          0.05         27.35
Just calling func    0   0         27.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       24
neval is:      521
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       25
neval is:      521


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      521     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.959463E-01  -2.34397      -2.11872       2.11872       158.266       160.384    
   2  0.865442     -0.144515     -0.130627      0.130627       164.098       164.229    
   3  0.429385     -0.845402     -0.764160      0.764160       164.381       165.145    
   4  0.880624     -0.127125     -0.114909      0.114909       164.308       164.423    
   5  0.364430      -1.00942     -0.912418      0.912418       164.616       165.528    
   6  0.546634     -0.603976     -0.545934      0.545934       165.463       166.009    
   7  0.822212     -0.195757     -0.176945      0.176945       164.315       164.491    
   8  0.269693      -1.31047      -1.18454       1.18454       165.135       166.319    
   9  0.956342     -0.446399E-01 -0.403501E-01  0.403501E-01   164.864       164.905    
  10  0.428299     -0.847933     -0.766448      0.766448       164.407       165.173    
  11  0.284104      -1.25841      -1.13748       1.13748       166.458       167.596    
  12  0.901656     -0.103523     -0.935741E-01  0.935741E-01   166.774       166.867    
  13  0.650355     -0.430237     -0.388892      0.388892       166.873       167.262    
  14  0.247865E-01  -3.69745      -3.34214       3.34214       167.732       171.074    
  15  0.830009     -0.186319     -0.168414      0.168414       166.987       167.155    
  16  0.997155     -0.284877E-02 -0.257500E-02  0.257500E-02   167.315       167.318    
  17  0.377729     -0.973578     -0.880018      0.880018       168.506       169.386    
  18  0.767426     -0.264713     -0.239274      0.239274       168.307       168.546    
  19  0.472642     -0.749418     -0.677400      0.677400       167.454       168.132    
  20  0.984438     -0.156839E-01 -0.141767E-01  0.141767E-01   167.155       167.169    
  21  0.785656     -0.241236     -0.218053      0.218053       168.424       168.642    
  22  0.886488     -0.120488     -0.108909      0.108909       168.194       168.303    
  23  0.514796     -0.663984     -0.600176      0.600176       168.913       169.513    
  24  0.414154     -0.881517     -0.796805      0.796805       169.081       169.878    
  25  0.335573      -1.09192     -0.986985      0.986985       168.511       169.498    
  26  0.479386     -0.735249     -0.664593      0.664593       168.966       169.631    
  27  0.422990     -0.860406     -0.777722      0.777722       169.699       170.477    
  28  0.300375      -1.20272      -1.08714       1.08714       167.592       168.679    
  29  0.485328     -0.722931     -0.653458      0.653458       168.270       168.924    
  30  0.430750     -0.842227     -0.761290      0.761290       169.047       169.808    
  31  0.798866     -0.224562     -0.202982      0.202982       169.690       169.893    
  32  0.775112     -0.254747     -0.230267      0.230267       169.155       169.385    
  33  0.356073      -1.03262     -0.933386      0.933386       170.267       171.200    
  34  0.129729      -2.04230      -1.84604       1.84604       170.115       171.961    
  35  0.910417     -0.938521E-01 -0.848331E-01  0.848331E-01   170.242       170.327    
  36  0.563102     -0.574294     -0.519105      0.519105       170.446       170.966    
  37  0.210518      -1.55819      -1.40845       1.40845       171.377       172.786    
  38  0.284252      -1.25789      -1.13701       1.13701       169.673       170.810    
  39  0.472723     -0.749246     -0.677244      0.677244       171.324       172.001    
  40  0.499442     -0.694264     -0.627547      0.627547       170.984       171.611    
  41  0.324329      -1.12600      -1.01779       1.01779       171.506       172.523    
  42  0.470185     -0.754630     -0.682111      0.682111       172.116       172.798    
  43  0.957455     -0.434769E-01 -0.392988E-01  0.392988E-01   171.345       171.384    
  44  0.452290     -0.793433     -0.717185      0.717185       172.139       172.857    
  45  0.941069     -0.607383E-01 -0.549015E-01  0.549015E-01   171.873       171.928    
  46  0.566208     -0.568794     -0.514133      0.514133       172.689       173.203    
  47  0.537483E-01  -2.92344      -2.64250       2.64250       172.255       174.897    
  48  0.105024E-01  -4.55615      -4.11831       4.11831       171.708       175.827    
  49  0.963769     -0.369035E-01 -0.333572E-01  0.333572E-01   171.909       171.942    
  50  0.537803     -0.620264     -0.560657      0.560657       172.730       173.291    
  51  0.613670E-01  -2.79088      -2.52268       2.52268       171.815       174.338    
  52  0.150908      -1.89109      -1.70936       1.70936       173.003       174.713    
  53  0.737833     -0.304037     -0.274820      0.274820       172.252       172.527    
  54  0.739752     -0.301440     -0.272472      0.272472       171.272       171.545    
  55  0.500563     -0.692021     -0.625519      0.625519       172.127       172.753    
  56  0.508897     -0.675510     -0.610595      0.610595       172.867       173.478    
  57  0.270287      -1.30827      -1.18255       1.18255       173.404       174.587    
  58  0.382623     -0.960705     -0.868382      0.868382       172.658       173.527    
  59  0.282048      -1.26568      -1.14405       1.14405       173.495       174.639    
  60  0.412578     -0.885330     -0.800251      0.800251       172.968       173.768    
  61  0.622527     -0.473969     -0.428421      0.428421       172.422       172.851    
  62  0.849059     -0.163626     -0.147902      0.147902       174.487       174.635    
  63  0.391723     -0.937200     -0.847137      0.847137       173.636       174.484    
  64  0.956558     -0.444138E-01 -0.401457E-01  0.401457E-01   172.969       173.010    
  65  0.364793      -1.00843     -0.911517      0.911517       173.924       174.836    
  66  0.975279     -0.250321E-01 -0.226266E-01  0.226266E-01   174.467       174.489    
  67  0.957387     -0.435480E-01 -0.393631E-01  0.393631E-01   173.929       173.968    
  68  0.799949     -0.223207     -0.201757      0.201757       174.034       174.236    
  69  0.234319E-01  -3.75365      -3.39293       3.39293       173.567       176.960    
  70  0.120937      -2.11248      -1.90948       1.90948       175.444       177.354    
  71  0.187989      -1.67137      -1.51076       1.51076       175.137       176.647    
  72  0.207409      -1.57306      -1.42189       1.42189       174.590       176.012    
loop,thermsimp(1:2)       25   2.11872      0.130627    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    523        164.05          0.84          1.11         25.06          0.19          0.05         27.24
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    164.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       25
neval is:      522
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       26
neval is:      522


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      522     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.554230     -0.590175     -0.533460      0.533460       158.266       158.799    
   2  0.579741     -0.545174     -0.492783      0.492783       164.098       164.591    
   3  0.824455E-01  -2.49562      -2.25579       2.25579       164.308       166.564    
   4  0.315100      -1.15486      -1.04388       1.04388       164.315       165.358    
   5  0.275555      -1.28897      -1.16510       1.16510       164.864       166.029    
   6  0.634682     -0.454632     -0.410942      0.410942       164.381       164.792    
   7  0.671828E-01  -2.70034      -2.44084       2.44084       164.407       166.848    
   8  0.843963     -0.169647     -0.153344      0.153344       164.616       164.769    
   9  0.801288     -0.221535     -0.200245      0.200245       165.463       165.663    
  10  0.386583     -0.950409     -0.859077      0.859077       165.135       165.994    
  11  0.436986     -0.827854     -0.748299      0.748299       166.774       167.522    
  12  0.469599     -0.755876     -0.683237      0.683237       166.987       167.670    
  13  0.104412E-02  -6.86458      -6.20490       6.20490       167.155       173.359    
  14  0.615471     -0.485368     -0.438725      0.438725       166.873       167.311    
  15  0.819025     -0.199640     -0.180455      0.180455       167.315       167.496    
  16  0.448367     -0.802144     -0.725059      0.725059       166.458       167.183    
  17  0.810334E-01  -2.51289      -2.27141       2.27141       167.454       169.726    
  18  0.589831     -0.527920     -0.477187      0.477187       168.194       168.671    
  19  0.772888E-01  -2.56021      -2.31417       2.31417       168.307       170.621    
  20  0.929898E-01  -2.37527      -2.14701       2.14701       168.424       170.571    
  21  0.772792     -0.257745     -0.232976      0.232976       167.592       167.825    
  22  0.471913     -0.750961     -0.678795      0.678795       168.270       168.949    
  23  0.797459     -0.226325     -0.204576      0.204576       169.155       169.360    
  24  0.457939     -0.781019     -0.705965      0.705965       168.506       169.212    
  25  0.578405     -0.547481     -0.494869      0.494869       168.511       169.005    
  26  0.359256      -1.02372     -0.925343      0.925343       168.913       169.838    
  27  0.125054      -2.07901      -1.87922       1.87922       168.966       170.845    
  28  0.348647      -1.05370     -0.952437      0.952437       169.047       170.000    
  29  0.103177      -2.27131      -2.05304       2.05304       169.081       171.134    
  30  0.429994     -0.843983     -0.762878      0.762878       169.690       170.453    
  31  0.872975     -0.135849     -0.122794      0.122794       170.242       170.365    
  32  0.968061     -0.324600E-01 -0.293406E-01  0.293406E-01   169.699       169.728    
  33  0.876099     -0.132276     -0.119565      0.119565       169.673       169.792    
  34  0.935178     -0.670183E-01 -0.605780E-01  0.605780E-01   170.446       170.507    
  35  0.111536      -2.19340      -1.98262       1.98262       167.732       169.715    
  36  0.119639      -2.12328      -1.91923       1.91923       170.267       172.186    
  37  0.598442     -0.513426     -0.464087      0.464087       171.345       171.809    
  38  0.711442     -0.340462     -0.307744      0.307744       171.272       171.580    
  39  0.747494     -0.291029     -0.263062      0.263062       170.984       171.247    
  40  0.262451      -1.33769      -1.20914       1.20914       171.873       173.082    
  41  0.845864     -0.167397     -0.151310      0.151310       171.909       172.060    
  42  0.544636     -0.607637     -0.549244      0.549244       170.115       170.664    
  43  0.538840     -0.618336     -0.558915      0.558915       171.324       171.883    
  44  0.408773     -0.894595     -0.808626      0.808626       171.506       172.314    
  45  0.251694      -1.37954      -1.24697       1.24697       172.252       173.499    
  46  0.157458      -1.84860      -1.67095       1.67095       172.127       173.798    
  47  0.342548      -1.07134     -0.968389      0.968389       171.377       172.346    
  48  0.869179     -0.140207     -0.126733      0.126733       172.116       172.243    
  49  0.922210     -0.809826E-01 -0.732003E-01  0.732003E-01   172.422       172.495    
  50  0.302494      -1.19569      -1.08079       1.08079       172.139       173.220    
  51  0.819127     -0.199516     -0.180343      0.180343       172.969       173.150    
  52  0.116539      -2.14953      -1.94297       1.94297       172.689       174.632    
  53  0.174517      -1.74574      -1.57797       1.57797       172.730       174.308    
  54  0.654478     -0.423917     -0.383179      0.383179       172.867       173.250    
  55  0.766932     -0.265357     -0.239856      0.239856       172.658       172.898    
  56  0.450925     -0.796455     -0.719917      0.719917       172.968       173.688    
  57  0.305246      -1.18664      -1.07260       1.07260       173.929       175.001    
  58  0.557991     -0.583413     -0.527348      0.527348       174.034       174.561    
  59  0.500421     -0.692306     -0.625776      0.625776       171.815       172.441    
  60  0.168591      -1.78028      -1.60920       1.60920       173.636       175.246    
  61  0.785828     -0.241017     -0.217856      0.217856       174.467       174.684    
  62  0.902493     -0.102594     -0.927353E-01  0.927353E-01   173.404       173.497    
  63  0.349189      -1.05214     -0.951032      0.951032       174.487       175.438    
  64  0.888892     -0.117779     -0.106461      0.106461       173.495       173.602    
  65  0.292198      -1.23032      -1.11209       1.11209       173.003       174.116    
  66  0.526362     -0.641766     -0.580093      0.580093       173.924       174.504    
  67  0.903227     -0.101782     -0.920006E-01  0.920006E-01   172.255       172.347    
  68  0.202224      -1.59838      -1.44478       1.44478       171.708       173.153    
  69  0.201387      -1.60253      -1.44853       1.44853       174.590       176.039    
  70  0.723246     -0.324007     -0.292870      0.292870       175.137       175.430    
  71  0.667869     -0.403663     -0.364871      0.364871       173.567       173.932    
  72  0.518465     -0.656884     -0.593758      0.593758       164.052       164.646    
loop,thermsimp(1:2)       26  0.533460      0.492783    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    524        175.08          0.83          1.11         25.03          0.18          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       26
neval is:      523
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       27
neval is:      523


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      523     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813982     -0.205818     -0.186039      0.186039       158.266       158.452    
   2  0.422453     -0.861677     -0.778872      0.778872       164.098       164.877    
   3  0.267874      -1.31724      -1.19065       1.19065       164.052       165.242    
   4  0.997565     -0.243750E-02 -0.220326E-02  0.220326E-02   164.616       164.618    
   5  0.514426     -0.664704     -0.600827      0.600827       164.381       164.982    
   6  0.171371      -1.76393      -1.59442       1.59442       164.315       165.909    
   7  0.704975     -0.349593     -0.315998      0.315998       165.463       165.779    
   8  0.499351     -0.694446     -0.627711      0.627711       165.135       165.762    
   9  0.736092     -0.306400     -0.276955      0.276955       164.864       165.141    
  10  0.696210     -0.362104     -0.327306      0.327306       164.308       164.636    
  11  0.273943      -1.29484      -1.17040       1.17040       164.407       165.577    
  12  0.656583     -0.420706     -0.380276      0.380276       166.458       166.838    
  13  0.817424     -0.201597     -0.182224      0.182224       166.873       167.055    
  14  0.504203     -0.684776     -0.618970      0.618970       167.315       167.934    
  15  0.342344E-02  -5.67711      -5.13155       5.13155       166.774       171.905    
  16  0.471380     -0.752090     -0.679815      0.679815       166.987       167.667    
  17  0.232484      -1.45893      -1.31873       1.31873       167.592       168.911    
  18  0.529795     -0.635264     -0.574216      0.574216       168.194       168.768    
  19  0.548384E-01  -2.90336      -2.62436       2.62436       168.270       170.894    
  20  0.759160     -0.275543     -0.249064      0.249064       168.511       168.760    
  21  0.658961     -0.417090     -0.377009      0.377009       168.506       168.883    
  22  0.955072E-01  -2.34855      -2.12286       2.12286       169.155       171.278    
  23  0.762274     -0.271449     -0.245363      0.245363       167.732       167.977    
  24  0.595126     -0.518983     -0.469109      0.469109       167.454       167.924    
  25  0.994859     -0.515414E-02 -0.465883E-02  0.465883E-02   169.699       169.704    
  26  0.547413     -0.602551     -0.544647      0.544647       169.673       170.217    
  27  0.206450      -1.57770      -1.42608       1.42608       168.913       170.339    
  28  0.889164     -0.117473     -0.106184      0.106184       169.047       169.153    
  29  0.882620     -0.124861     -0.112862      0.112862       170.242       170.355    
  30  0.273437      -1.29668      -1.17207       1.17207       169.690       170.862    
  31  0.239281      -1.43012      -1.29269       1.29269       170.446       171.739    
  32  0.465716     -0.764179     -0.690742      0.690742       168.424       169.115    
  33  0.624834     -0.470270     -0.425078      0.425078       168.307       168.732    
  34  0.124872      -2.08047      -1.88054       1.88054       170.115       171.996    
  35  0.583860E-01  -2.84068      -2.56769       2.56769       168.966       171.534    
  36  0.605356     -0.501938     -0.453703      0.453703       169.081       169.535    
  37  0.842898     -0.170909     -0.154485      0.154485       170.984       171.138    
  38  0.170482      -1.76913      -1.59912       1.59912       171.272       172.872    
  39  0.631284     -0.460000     -0.415795      0.415795       171.345       171.760    
  40  0.914443     -0.894405E-01 -0.808454E-01  0.808454E-01   171.324       171.405    
  41  0.237545      -1.43740      -1.29927       1.29927       171.909       173.208    
  42  0.128470      -2.05206      -1.85486       1.85486       170.267       172.122    
  43  0.672502E-01  -2.69933      -2.43993       2.43993       172.116       174.556    
  44  0.625851     -0.468643     -0.423608      0.423608       171.506       171.929    
  45  0.289455      -1.23976      -1.12062       1.12062       171.377       172.498    
  46  0.426490     -0.852166     -0.770274      0.770274       172.255       173.025    
  47  0.639309     -0.447367     -0.404376      0.404376       171.815       172.220    
  48  0.930228     -0.723259E-01 -0.653755E-01  0.653755E-01   172.422       172.488    
  49  0.487433     -0.718603     -0.649546      0.649546       172.658       173.308    
  50  0.197582E-01  -3.92419      -3.54708       3.54708       171.873       175.420    
  51  0.391784     -0.937045     -0.846997      0.846997       172.969       173.816    
  52  0.408977E-01  -3.19668      -2.88949       2.88949       171.708       174.598    
  53  0.954108     -0.469781E-01 -0.424636E-01  0.424636E-01   172.139       172.182    
  54  0.422567     -0.861406     -0.778626      0.778626       172.867       173.646    
  55  0.114072      -2.17092      -1.96230       1.96230       167.155       169.117    
  56  0.656945     -0.420155     -0.379778      0.379778       173.404       173.784    
  57  0.181296      -1.70763      -1.54353       1.54353       172.252       173.796    
  58  0.358624      -1.02548     -0.926934      0.926934       173.495       174.422    
  59  0.462004E-02  -5.37735      -4.86060       4.86060       172.968       177.828    
  60  0.951796     -0.494047E-01 -0.446570E-01  0.446570E-01   172.127       172.172    
  61  0.997030     -0.297465E-02 -0.268879E-02  0.268879E-02   173.567       173.570    
  62  0.586399     -0.533754     -0.482461      0.482461       173.003       173.486    
  63  0.775517     -0.254226     -0.229795      0.229795       172.730       172.960    
  64  0.884075     -0.123213     -0.111373      0.111373       173.924       174.036    
  65  0.199282      -1.61303      -1.45802       1.45802       174.034       175.492    
  66  0.633785     -0.456045     -0.412220      0.412220       172.689       173.101    
  67  0.128352      -2.05298      -1.85569       1.85569       174.467       176.322    
  68  0.867045     -0.142665     -0.128955      0.128955       173.929       174.058    
  69  0.665946     -0.406547     -0.367479      0.367479       173.636       174.004    
  70  0.593378     -0.521924     -0.471768      0.471768       175.137       175.608    
  71  0.223353      -1.49900      -1.35495       1.35495       174.487       175.842    
  72  0.432457E-01  -3.14086      -2.83903       2.83903       175.079       177.918    
loop,thermsimp(1:2)       27  0.186039      0.778872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    525        174.59          0.84          1.11         25.31          0.11          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       27
neval is:      524
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       28
neval is:      524


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      524     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.852012     -0.160155     -0.144764      0.144764       158.266       158.410    
   2  0.209759      -1.56179      -1.41171       1.41171       164.616       166.027    
   3  0.231672      -1.46243      -1.32189       1.32189       164.308       165.630    
   4  0.552784     -0.592788     -0.535822      0.535822       164.098       164.634    
   5  0.298066      -1.21044      -1.09412       1.09412       164.381       165.475    
   6  0.982229E-01  -2.32052      -2.09752       2.09752       164.864       166.962    
   7  0.513244     -0.667004     -0.602906      0.602906       164.052       164.655    
   8  0.506896     -0.679450     -0.614156      0.614156       164.407       165.021    
   9  0.253686      -1.37166      -1.23984       1.23984       165.135       166.374    
  10  0.464337     -0.767145     -0.693423      0.693423       165.463       166.156    
  11  0.620988     -0.476443     -0.430658      0.430658       164.315       164.745    
  12  0.833370     -0.182278     -0.164761      0.164761       166.458       166.623    
  13  0.536169     -0.623305     -0.563407      0.563407       166.873       167.436    
  14  0.686501E-01  -2.67873      -2.42131       2.42131       166.987       169.408    
  15  0.623564     -0.472305     -0.426917      0.426917       167.454       167.881    
  16  0.329641      -1.10975      -1.00311       1.00311       167.315       168.318    
  17  0.779151     -0.249551     -0.225569      0.225569       167.732       167.958    
  18  0.104603      -2.25758      -2.04063       2.04063       168.307       170.348    
  19  0.483984     -0.725704     -0.655965      0.655965       168.511       169.167    
  20  0.466377E-02  -5.36793      -4.85208       4.85208       168.194       173.046    
  21  0.172152      -1.75938      -1.59030       1.59030       168.506       170.096    
  22  0.178201      -1.72484      -1.55909       1.55909       167.592       169.151    
  23  0.151142      -1.88954      -1.70796       1.70796       168.424       170.132    
  24  0.784508     -0.242699     -0.219376      0.219376       167.155       167.374    
  25  0.821620E-01  -2.49906      -2.25891       2.25891       169.047       171.306    
  26  0.647136     -0.435199     -0.393377      0.393377       169.081       169.474    
  27  0.971377     -0.290411E-01 -0.262503E-01  0.262503E-01   169.699       169.725    
  28  0.461755     -0.772720     -0.698463      0.698463       169.673       170.371    
  29  0.485420     -0.722742     -0.653287      0.653287       168.913       169.566    
  30  0.674473     -0.393823     -0.355977      0.355977       170.242       170.598    
  31  0.166592      -1.79221      -1.61998       1.61998       169.690       171.310    
  32  0.829538     -0.186886     -0.168927      0.168927       168.270       168.439    
  33  0.489716     -0.713930     -0.645323      0.645323       170.984       171.629    
  34  0.604698     -0.503025     -0.454685      0.454685       169.155       169.610    
  35  0.113505      -2.17591      -1.96681       1.96681       171.324       173.291    
  36  0.148871      -1.90468      -1.72164       1.72164       168.966       170.688    
  37  0.882645     -0.124832     -0.112836      0.112836       170.446       170.559    
  38  0.987071     -0.130131E-01 -0.117626E-01  0.117626E-01   171.345       171.356    
  39  0.170536      -1.76881      -1.59883       1.59883       166.774       168.372    
  40  0.390345     -0.940725     -0.850323      0.850323       171.506       172.356    
  41  0.386025     -0.951852     -0.860381      0.860381       170.115       170.976    
  42  0.727498     -0.318144     -0.287571      0.287571       170.267       170.554    
  43  0.953502     -0.476138E-01 -0.430382E-01  0.430382E-01   172.127       172.170    
  44  0.586364     -0.533814     -0.482515      0.482515       172.139       172.622    
  45  0.127618      -2.05871      -1.86087       1.86087       171.815       173.676    
  46  0.949787     -0.515174E-01 -0.465666E-01  0.465666E-01   172.422       172.469    
  47  0.565431E-01  -2.87275      -2.59669       2.59669       171.377       173.974    
  48  0.163563      -1.81056      -1.63657       1.63657       171.272       172.909    
  49  0.698306     -0.359097     -0.324589      0.324589       172.730       173.055    
  50  0.347632      -1.05661     -0.955072      0.955072       172.255       173.210    
  51  0.674462     -0.393840     -0.355992      0.355992       172.689       173.045    
  52  0.207751      -1.57142      -1.42041       1.42041       171.909       173.329    
  53  0.155363      -1.86199      -1.68306       1.68306       172.658       174.341    
  54  0.919929     -0.834587E-01 -0.754384E-01  0.754384E-01   173.003       173.079    
  55  0.138094      -1.97982      -1.78957       1.78957       173.567       175.356    
  56  0.384974     -0.954579     -0.862845      0.862845       172.867       173.730    
  57  0.493523     -0.706185     -0.638322      0.638322       173.404       174.042    
  58  0.528360     -0.637976     -0.576668      0.576668       172.252       172.829    
  59  0.181286      -1.70768      -1.54357       1.54357       172.969       174.513    
  60  0.830089     -0.186222     -0.168326      0.168326       173.636       173.805    
  61  0.647482     -0.434665     -0.392894      0.392894       173.924       174.317    
  62  0.791002     -0.234455     -0.211924      0.211924       173.929       174.141    
  63  0.986772     -0.133161E-01 -0.120364E-01  0.120364E-01   173.495       173.507    
  64  0.211458      -1.55373      -1.40442       1.40442       172.116       173.520    
  65  0.923238     -0.798684E-01 -0.721932E-01  0.721932E-01   171.708       171.781    
  66  0.746567E-01  -2.59485      -2.34549       2.34549       171.873       174.218    
  67  0.753619     -0.282869     -0.255685      0.255685       174.034       174.290    
  68  0.913070E-01  -2.39353      -2.16351       2.16351       175.137       177.300    
  69  0.934461     -0.677851E-01 -0.612710E-01  0.612710E-01   174.487       174.548    
  70  0.931484     -0.709760E-01 -0.641553E-01  0.641553E-01   174.467       174.531    
  71  0.229892      -1.47015      -1.32887       1.32887       172.968       174.297    
  72  0.997193     -0.281107E-02 -0.254093E-02  0.254093E-02   174.590       174.593    
loop,thermsimp(1:2)       28  0.144764       1.41171    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    526        172.81          0.84          1.11         25.07          0.17          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       28
neval is:      525
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       29
neval is:      525


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      525     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.135635      -1.99779      -1.80580       1.80580       158.266       160.071    
   2  0.466467     -0.762568     -0.689286      0.689286       164.098       164.788    
   3  0.996991     -0.301356E-02 -0.272397E-02  0.272397E-02   164.052       164.054    
   4  0.987682     -0.123943E-01 -0.112032E-01  0.112032E-01   164.315       164.326    
   5  0.890927     -0.115493     -0.104394      0.104394       164.407       164.511    
   6  0.103802      -2.26527      -2.04758       2.04758       164.381       166.429    
   7  0.139960      -1.96640      -1.77743       1.77743       164.308       166.086    
   8  0.695795     -0.362701     -0.327846      0.327846       164.616       164.943    
   9  0.916952     -0.867001E-01 -0.783683E-01  0.783683E-01   165.463       165.541    
  10  0.581368     -0.542371     -0.490250      0.490250       165.135       165.625    
  11  0.187466      -1.67416      -1.51328       1.51328       166.458       167.971    
  12  0.623424E-01  -2.77511      -2.50843       2.50843       164.864       167.373    
  13  0.493048     -0.707150     -0.639194      0.639194       167.155       167.794    
  14  0.713995     -0.336879     -0.304506      0.304506       166.873       167.177    
  15  0.891065     -0.115338     -0.104254      0.104254       167.454       167.559    
  16  0.993625     -0.639581E-02 -0.578118E-02  0.578118E-02   167.732       167.738    
  17  0.783715     -0.243710     -0.220289      0.220289       167.315       167.535    
  18  0.419875     -0.867798     -0.784404      0.784404       166.774       167.558    
  19  0.551915E-01  -2.89695      -2.61855       2.61855       168.270       170.889    
  20  0.119723E-01  -4.42516      -3.99991       3.99991       167.592       171.592    
  21  0.814729E-01  -2.50749      -2.26652       2.26652       168.511       170.777    
  22  0.493283E-01  -3.00926      -2.72007       2.72007       166.987       169.707    
  23  0.292111      -1.23062      -1.11236       1.11236       169.081       170.193    
  24  0.274028      -1.29452      -1.17012       1.17012       168.913       170.083    
  25  0.890535     -0.115933     -0.104792      0.104792       169.155       169.260    
  26  0.533395     -0.628494     -0.568097      0.568097       169.699       170.267    
  27  0.584910     -0.536297     -0.484760      0.484760       168.506       168.990    
  28  0.120755      -2.11400      -1.91084       1.91084       168.424       170.335    
  29  0.129784      -2.04188      -1.84566       1.84566       168.307       170.153    
  30  0.847769     -0.165147     -0.149276      0.149276       169.673       169.822    
  31  0.507636E-02  -5.28316      -4.77546       4.77546       170.267       175.042    
  32  0.616094     -0.484356     -0.437810      0.437810       170.446       170.884    
  33  0.845796     -0.167477     -0.151383      0.151383       170.242       170.393    
  34  0.597816     -0.514471     -0.465032      0.465032       168.966       169.431    
  35  0.857431     -0.153814     -0.139033      0.139033       170.115       170.254    
  36  0.236721      -1.44087      -1.30241       1.30241       169.047       170.350    
  37  0.136539      -1.99114      -1.79980       1.79980       169.690       171.490    
  38  0.221208      -1.50865      -1.36367       1.36367       171.345       172.708    
  39  0.886558     -0.120409     -0.108838      0.108838       170.984       171.093    
  40  0.751951     -0.285084     -0.257687      0.257687       171.708       171.966    
  41  0.753705     -0.282754     -0.255582      0.255582       172.127       172.383    
  42  0.164791      -1.80308      -1.62981       1.62981       171.506       173.135    
  43  0.953278     -0.478482E-01 -0.432501E-01  0.432501E-01   172.422       172.465    
  44  0.331556E-01  -3.40654      -3.07918       3.07918       172.139       175.219    
  45  0.255217      -1.36564      -1.23440       1.23440       172.252       173.487    
  46  0.526999     -0.640556     -0.578999      0.578999       171.272       171.851    
  47  0.395268     -0.928192     -0.838994      0.838994       172.689       173.528    
  48  0.962043     -0.386965E-01 -0.349778E-01  0.349778E-01   168.194       168.229    
  49  0.679414     -0.386524     -0.349380      0.349380       172.730       173.079    
  50  0.170337      -1.76998      -1.59988       1.59988       173.003       174.603    
  51  0.261051      -1.34304      -1.21398       1.21398       172.255       173.469    
  52  0.959147     -0.417113E-01 -0.377029E-01  0.377029E-01   171.324       171.362    
  53  0.811956     -0.208309     -0.188291      0.188291       171.909       172.097    
  54  0.751361     -0.285869     -0.258397      0.258397       173.495       173.754    
  55  0.365259      -1.00715     -0.910364      0.910364       172.116       173.026    
  56  0.828616     -0.187998     -0.169932      0.169932       171.815       171.985    
  57  0.301965      -1.19744      -1.08237       1.08237       172.867       173.950    
  58  0.800135     -0.222974     -0.201547      0.201547       173.636       173.838    
  59  0.144674      -1.93327      -1.74749       1.74749       171.377       173.125    
  60  0.540870     -0.614575     -0.555516      0.555516       173.404       173.960    
  61  0.946134     -0.553715E-01 -0.500504E-01  0.500504E-01   173.929       173.979    
  62  0.601135E-01  -2.81152      -2.54134       2.54134       171.873       174.414    
  63  0.865566     -0.144372     -0.130498      0.130498       174.034       174.164    
  64  0.146294      -1.92214      -1.73742       1.73742       172.968       174.705    
  65  0.758092     -0.276950     -0.250336      0.250336       173.924       174.175    
  66  0.301910E-01  -3.50021      -3.16385       3.16385       172.658       175.822    
  67  0.602285     -0.507025     -0.458300      0.458300       172.969       173.428    
  68  0.143478      -1.94157      -1.75499       1.75499       174.467       176.222    
  69  0.929393     -0.732231E-01 -0.661865E-01  0.661865E-01   174.487       174.553    
  70  0.308402E-01  -3.47893      -3.14461       3.14461       174.590       177.735    
  71  0.940169     -0.616955E-01 -0.557666E-01  0.557666E-01   173.567       173.623    
  72  0.406582     -0.899970     -0.813484      0.813484       172.814       173.628    
loop,thermsimp(1:2)       29   1.80580      0.689286    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    527        175.22          0.84          1.11         25.17          0.08          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       29
neval is:      526
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       30
neval is:      526


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      526     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.893826     -0.112244     -0.101458      0.101458       158.266       158.367    
   2  0.789139     -0.236813     -0.214056      0.214056       164.052       164.266    
   3  0.113205      -2.17856      -1.96920       1.96920       164.315       166.284    
   4  0.932851     -0.695093E-01 -0.628295E-01  0.628295E-01   164.407       164.470    
   5  0.580843     -0.543275     -0.491067      0.491067       164.098       164.590    
   6  0.477157     -0.739910     -0.668806      0.668806       164.616       165.284    
   7  0.813629     -0.206251     -0.186431      0.186431       165.463       165.649    
   8  0.727881     -0.317617     -0.287095      0.287095       165.135       165.422    
   9  0.169642      -1.77406      -1.60358       1.60358       164.308       165.912    
  10  0.563630     -0.573357     -0.518258      0.518258       164.381       164.899    
  11  0.317079      -1.14861      -1.03823       1.03823       166.873       167.911    
  12  0.902994E-01  -2.40462      -2.17354       2.17354       164.864       167.038    
  13  0.611698     -0.491517     -0.444283      0.444283       167.315       167.759    
  14  0.131317E-01  -4.33273      -3.91636       3.91636       166.774       170.690    
  15  0.626257     -0.467994     -0.423021      0.423021       167.454       167.877    
  16  0.158325      -1.84311      -1.66599       1.66599       167.732       169.398    
  17  0.138715E-01  -4.27792      -3.86682       3.86682       167.155       171.021    
  18  0.294347      -1.22299      -1.10547       1.10547       166.458       167.564    
  19  0.419766E-02  -5.47323      -4.94726       4.94726       168.194       173.141    
  20  0.674961     -0.393101     -0.355324      0.355324       168.506       168.861    
  21  0.440021     -0.820933     -0.742042      0.742042       169.155       169.897    
  22  0.224595      -1.49346      -1.34994       1.34994       168.966       170.316    
  23  0.406007     -0.901384     -0.814763      0.814763       166.987       167.802    
  24  0.839997     -0.174357     -0.157601      0.157601       169.673       169.830    
  25  0.633085     -0.457151     -0.413219      0.413219       168.913       169.326    
  26  0.931306     -0.711679E-01 -0.643288E-01  0.643288E-01   168.307       168.371    
  27  0.844161E-01  -2.47200      -2.23444       2.23444       169.081       171.316    
  28  0.206778      -1.57611      -1.42465       1.42465       170.115       171.540    
  29  0.883296     -0.124095     -0.112170      0.112170       169.699       169.811    
  30  0.365391      -1.00679     -0.910037      0.910037       168.424       169.334    
  31  0.708566     -0.344513     -0.311405      0.311405       169.047       169.359    
  32  0.955974     -0.450251E-01 -0.406982E-01  0.406982E-01   170.242       170.283    
  33  0.726164     -0.319980     -0.289230      0.289230       168.511       168.800    
  34  0.318762      -1.14331      -1.03344       1.03344       170.446       171.480    
  35  0.622782     -0.473559     -0.428050      0.428050       168.270       168.698    
  36  0.869570E-01  -2.44234      -2.20764       2.20764       170.984       173.192    
  37  0.281748E-01  -3.56933      -3.22632       3.22632       171.324       174.550    
  38  0.238758      -1.43231      -1.29466       1.29466       169.690       170.985    
  39  0.655045     -0.423052     -0.382397      0.382397       167.592       167.974    
  40  0.337836      -1.08519     -0.980909      0.980909       171.272       172.253    
  41  0.625010     -0.469988     -0.424823      0.424823       171.708       172.133    
  42  0.346197E-01  -3.36333      -3.04012       3.04012       171.815       174.856    
  43  0.378697     -0.971019     -0.877705      0.877705       171.909       172.787    
  44  0.714474     -0.336208     -0.303899      0.303899       172.127       172.431    
  45  0.729924     -0.314815     -0.284562      0.284562       172.422       172.707    
  46  0.184188      -1.69180      -1.52922       1.52922       171.345       172.874    
  47  0.909154     -0.952407E-01 -0.860882E-01  0.860882E-01   172.116       172.202    
  48  0.270892E-01  -3.60862      -3.26184       3.26184       172.730       175.992    
  49  0.746152     -0.292826     -0.264686      0.264686       171.377       171.642    
  50  0.495962     -0.701256     -0.633866      0.633866       171.506       172.140    
  51  0.308769      -1.17516      -1.06223       1.06223       172.969       174.032    
  52  0.684500     -0.379067     -0.342639      0.342639       172.255       172.598    
  53  0.695013     -0.363825     -0.328862      0.328862       172.252       172.581    
  54  0.443613     -0.812804     -0.734694      0.734694       172.689       173.424    
  55  0.930167     -0.723907E-01 -0.654341E-01  0.654341E-01   173.567       173.632    
  56  0.688367     -0.373433     -0.337547      0.337547       172.814       173.152    
  57  0.328237      -1.11402      -1.00696       1.00696       173.495       174.502    
  58  0.665088E-01  -2.71042      -2.44995       2.44995       173.636       176.086    
  59  0.227119E-01  -3.78486      -3.42114       3.42114       172.867       176.288    
  60  0.662765E-01  -2.71392      -2.45312       2.45312       173.404       175.857    
  61  0.220187      -1.51328      -1.36785       1.36785       173.929       175.297    
  62  0.619193     -0.479338     -0.433274      0.433274       174.034       174.467    
  63  0.211357      -1.55420      -1.40485       1.40485       173.924       175.329    
  64  0.431645     -0.840152     -0.759415      0.759415       171.873       172.632    
  65  0.156625      -1.85390      -1.67574       1.67574       174.487       176.163    
  66  0.388275     -0.946042     -0.855129      0.855129       173.003       173.859    
  67  0.724477     -0.322305     -0.291332      0.291332       172.968       173.259    
  68  0.815191     -0.204333     -0.184697      0.184697       170.267       170.452    
  69  0.223082      -1.50022      -1.35605       1.35605       172.139       173.495    
  70  0.829777     -0.186599     -0.168667      0.168667       172.658       172.827    
  71  0.660992     -0.414013     -0.374227      0.374227       174.467       174.841    
  72  0.946891     -0.545709E-01 -0.493267E-01  0.493267E-01   175.224       175.274    
loop,thermsimp(1:2)       30  0.101458      0.214056    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    528        170.69          0.84          1.11         25.00          0.20          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    170.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       30
neval is:      527
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       31
neval is:      527


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      527     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.456164E-01  -3.08749      -2.79079       2.79079       158.266       161.056    
   2  0.550510     -0.596911     -0.539549      0.539549       164.052       164.591    
   3  0.599183     -0.512188     -0.462967      0.462967       164.407       164.870    
   4  0.463354     -0.769263     -0.695338      0.695338       164.098       164.794    
   5  0.455992     -0.785279     -0.709815      0.709815       164.381       165.091    
   6  0.198149      -1.61873      -1.46318       1.46318       164.616       166.079    
   7  0.955046     -0.459959E-01 -0.415757E-01  0.415757E-01   165.135       165.176    
   8  0.743730     -0.296077     -0.267624      0.267624       165.463       165.730    
   9  0.633042     -0.457219     -0.413281      0.413281       164.308       164.722    
  10  0.870677     -0.138485     -0.125176      0.125176       164.315       164.440    
  11  0.546582     -0.604070     -0.546020      0.546020       164.864       165.410    
  12  0.292723      -1.22853      -1.11047       1.11047       166.458       167.569    
  13  0.805221E-01  -2.51922      -2.27713       2.27713       167.315       169.592    
  14  0.658185     -0.418269     -0.378074      0.378074       166.987       167.365    
  15  0.974478     -0.258538E-01 -0.233693E-01  0.233693E-01   167.454       167.478    
  16  0.268855      -1.31358      -1.18735       1.18735       166.873       168.060    
  17  0.494484     -0.704241     -0.636564      0.636564       167.592       168.229    
  18  0.982953     -0.171941E-01 -0.155418E-01  0.155418E-01   168.307       168.322    
  19  0.703308     -0.351960     -0.318137      0.318137       168.270       168.588    
  20  0.671580     -0.398123     -0.359864      0.359864       168.511       168.870    
  21  0.210384      -1.55882      -1.40902       1.40902       168.506       169.915    
  22  0.837290     -0.177585     -0.160519      0.160519       168.913       169.073    
  23  0.180021      -1.71468      -1.54990       1.54990       168.424       169.974    
  24  0.617844     -0.481519     -0.435246      0.435246       169.047       169.482    
  25  0.524065     -0.646139     -0.584046      0.584046       167.732       168.316    
  26  0.854055     -0.157759     -0.142599      0.142599       169.699       169.842    
  27  0.411337     -0.888343     -0.802975      0.802975       169.673       170.476    
  28  0.981489     -0.186841E-01 -0.168886E-01  0.168886E-01   169.155       169.172    
  29  0.646949     -0.435488     -0.393638      0.393638       170.242       170.636    
  30  0.350244      -1.04912     -0.948306      0.948306       168.966       169.914    
  31  0.655455     -0.422425     -0.381831      0.381831       170.267       170.649    
  32  0.577459     -0.549117     -0.496348      0.496348       166.774       167.270    
  33  0.790874     -0.234617     -0.212071      0.212071       169.690       169.902    
  34  0.654199     -0.424344     -0.383565      0.383565       167.155       167.538    
  35  0.571446     -0.559585     -0.505809      0.505809       169.081       169.587    
  36  0.324671      -1.12494      -1.01684       1.01684       170.446       171.463    
  37  0.310261E-01  -3.47293      -3.13918       3.13918       170.115       173.254    
  38  0.113505      -2.17591      -1.96681       1.96681       171.377       173.344    
  39  0.690688     -0.370066     -0.334504      0.334504       171.708       172.043    
  40  0.336841      -1.08814     -0.983574      0.983574       171.506       172.489    
  41  0.157762E-01  -4.14925      -3.75052       3.75052       172.116       175.867    
  42  0.692953     -0.366793     -0.331545      0.331545       171.272       171.604    
  43  0.917810     -0.857647E-01 -0.775228E-01  0.775228E-01   172.127       172.205    
  44  0.930239     -0.723139E-01 -0.653647E-01  0.653647E-01   172.252       172.318    
  45  0.213939      -1.54206      -1.39387       1.39387       172.255       173.649    
  46  0.191222      -1.65432      -1.49534       1.49534       171.873       173.368    
  47  0.509241     -0.674835     -0.609984      0.609984       172.422       173.032    
  48  0.482746     -0.728264     -0.658279      0.658279       171.909       172.567    
  49  0.558324E-01  -2.88540      -2.60812       2.60812       172.658       175.266    
  50  0.805385     -0.216435     -0.195635      0.195635       171.345       171.540    
  51  0.427474E-01  -3.15245      -2.84950       2.84950       168.194       171.044    
  52  0.202566      -1.59669      -1.44325       1.44325       172.814       174.258    
  53  0.426255     -0.852718     -0.770774      0.770774       170.984       171.755    
  54  0.838523     -0.176113     -0.159189      0.159189       172.968       173.127    
  55  0.758218     -0.276785     -0.250186      0.250186       172.689       172.939    
  56  0.667220     -0.404635     -0.365750      0.365750       172.139       172.505    
  57  0.232530      -1.45874      -1.31855       1.31855       173.567       174.885    
  58  0.878357     -0.129702     -0.117238      0.117238       173.003       173.121    
  59  0.996822     -0.318328E-02 -0.287737E-02  0.287737E-02   172.969       172.972    
  60  0.337382      -1.08654     -0.982124      0.982124       174.034       175.016    
  61  0.107960      -2.22600      -2.01208       2.01208       173.495       175.507    
  62  0.791449     -0.233889     -0.211413      0.211413       171.324       171.535    
  63  0.517438E-01  -2.96145      -2.67686       2.67686       174.467       177.143    
  64  0.491710     -0.709867     -0.641650      0.641650       171.815       172.457    
  65  0.490670     -0.711983     -0.643562      0.643562       175.224       175.868    
  66  0.531659     -0.631753     -0.571042      0.571042       173.929       174.500    
  67  0.960199     -0.406143E-01 -0.367114E-01  0.367114E-01   173.924       173.961    
  68  0.438697     -0.823947     -0.744767      0.744767       173.404       174.149    
  69  0.540600     -0.615077     -0.555969      0.555969       172.730       173.286    
  70  0.613439     -0.488675     -0.441714      0.441714       173.636       174.078    
  71  0.685948     -0.376953     -0.340729      0.340729       174.487       174.828    
  72  0.788910     -0.237103     -0.214318      0.214318       170.691       170.906    
loop,thermsimp(1:2)       31   2.79079      0.539549    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    529        175.66          0.84          1.11         25.03          0.18          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       31
neval is:      528
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       32
neval is:      528


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      528     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195290      -1.63327      -1.47631       1.47631       158.266       159.742    
   2  0.163951      -1.80819      -1.63442       1.63442       164.315       165.949    
   3  0.419868     -0.867814     -0.784418      0.784418       164.052       164.836    
   4  0.734040     -0.309192     -0.279479      0.279479       164.308       164.588    
   5  0.606079     -0.500745     -0.452624      0.452624       164.098       164.551    
   6  0.535424     -0.624696     -0.564663      0.564663       164.407       164.972    
   7  0.280299      -1.27190      -1.14967       1.14967       164.381       165.531    
   8  0.113078      -2.17968      -1.97021       1.97021       165.135       167.105    
   9  0.793508     -0.231291     -0.209064      0.209064       164.864       165.073    
  10  0.310674      -1.16901      -1.05667       1.05667       165.463       166.519    
  11  0.727780     -0.317757     -0.287221      0.287221       164.616       164.903    
  12  0.785018     -0.242049     -0.218788      0.218788       166.774       166.992    
  13  0.544769     -0.607394     -0.549024      0.549024       166.987       167.536    
  14  0.956533     -0.444404E-01 -0.401697E-01  0.401697E-01   167.454       167.495    
  15  0.429201E-01  -3.14842      -2.84586       2.84586       167.155       170.000    
  16  0.521359     -0.651317     -0.588727      0.588727       166.458       167.047    
  17  0.721055     -0.327040     -0.295612      0.295612       166.873       167.168    
  18  0.211580E-01  -3.85574      -3.48521       3.48521       167.592       171.077    
  19  0.481395     -0.731068     -0.660813      0.660813       167.732       168.393    
  20  0.570335     -0.561531     -0.507568      0.507568       168.307       168.814    
  21  0.870915     -0.138211     -0.124929      0.124929       168.270       168.395    
  22  0.233853      -1.45306      -1.31343       1.31343       168.511       169.824    
  23  0.307270      -1.18003      -1.06663       1.06663       168.913       169.979    
  24  0.394628     -0.929811     -0.840457      0.840457       169.155       169.996    
  25  0.104262      -2.26085      -2.04358       2.04358       169.047       171.091    
  26  0.473629     -0.747330     -0.675513      0.675513       169.081       169.757    
  27  0.376754     -0.976162     -0.882355      0.882355       167.315       168.198    
  28  0.940665     -0.611679E-01 -0.552897E-01  0.552897E-01   169.699       169.754    
  29  0.541404     -0.613589     -0.554624      0.554624       169.690       170.245    
  30  0.294748      -1.22163      -1.10424       1.10424       168.966       170.070    
  31  0.910904     -0.933181E-01 -0.843503E-01  0.843503E-01   168.506       168.590    
  32  0.498988     -0.695173     -0.628368      0.628368       168.424       169.053    
  33  0.791968     -0.233234     -0.210821      0.210821       169.673       169.883    
  34  0.699447     -0.357465     -0.323113      0.323113       170.242       170.565    
  35  0.755221E-01  -2.58333      -2.33508       2.33508       170.267       172.602    
  36  0.855130E-01  -2.45909      -2.22277       2.22277       170.691       172.914    
  37  0.657852     -0.418775     -0.378531      0.378531       168.194       168.573    
  38  0.967250     -0.332985E-01 -0.300986E-01  0.300986E-01   170.446       170.476    
  39  0.628707     -0.464089     -0.419491      0.419491       171.324       171.744    
  40  0.646567E-01  -2.73866      -2.47548       2.47548       171.345       173.820    
  41  0.607154     -0.498973     -0.451022      0.451022       171.272       171.723    
  42  0.666321     -0.405983     -0.366969      0.366969       170.984       171.351    
  43  0.749880     -0.287841     -0.260180      0.260180       171.708       171.969    
  44  0.683383     -0.380700     -0.344115      0.344115       172.127       172.471    
  45  0.658232     -0.418198     -0.378010      0.378010       172.252       172.630    
  46  0.345395      -1.06307     -0.960908      0.960908       171.815       172.776    
  47  0.220689      -1.51100      -1.36580       1.36580       171.506       172.871    
  48  0.428774     -0.846826     -0.765447      0.765447       172.139       172.905    
  49  0.660075     -0.415402     -0.375483      0.375483       171.909       172.284    
  50  0.795680E-01  -2.53114      -2.28790       2.28790       172.689       174.977    
  51  0.589123     -0.529120     -0.478273      0.478273       172.969       173.448    
  52  0.721133     -0.326932     -0.295514      0.295514       172.422       172.718    
  53  0.818337     -0.200482     -0.181216      0.181216       173.003       173.185    
  54  0.825511     -0.191753     -0.173326      0.173326       172.968       173.141    
  55  0.828614     -0.188001     -0.169935      0.169935       170.115       170.285    
  56  0.214019      -1.54169      -1.39354       1.39354       172.730       174.123    
  57  0.303444      -1.19256      -1.07796       1.07796       171.377       172.455    
  58  0.635557     -0.453254     -0.409697      0.409697       171.873       172.282    
  59  0.609922     -0.494425     -0.446911      0.446911       172.255       172.702    
  60  0.755661     -0.280163     -0.253240      0.253240       173.924       174.178    
  61  0.325082      -1.12368      -1.01569       1.01569       173.636       174.652    
  62  0.953975     -0.471174E-01 -0.425895E-01  0.425895E-01   173.404       173.447    
  63  0.164378E-01  -4.10817      -3.71338       3.71338       172.814       176.528    
  64  0.878216     -0.129863     -0.117383      0.117383       173.929       174.046    
  65  0.364444      -1.00938     -0.912382      0.912382       174.487       175.399    
  66  0.167034      -1.78956      -1.61758       1.61758       173.567       175.185    
  67  0.665415     -0.407345     -0.368200      0.368200       174.034       174.402    
  68  0.873444E-01  -2.43790      -2.20362       2.20362       172.658       174.862    
  69  0.995476     -0.453457E-02 -0.409881E-02  0.409881E-02   173.495       173.499    
  70  0.130351      -2.03752      -1.84172       1.84172       172.116       173.958    
  71  0.947672     -0.537468E-01 -0.485818E-01  0.485818E-01   175.224       175.273    
  72  0.410982     -0.889206     -0.803755      0.803755       175.661       176.465    
loop,thermsimp(1:2)       32   1.47631       1.63442    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    530        175.05          0.84          1.11         25.04          0.21          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       32
neval is:      529
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       33
neval is:      529


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      529     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.819000E-01  -2.50226      -2.26179       2.26179       158.266       160.527    
   2  0.451517     -0.795142     -0.718731      0.718731       164.098       164.817    
   3  0.994192E-01  -2.30841      -2.08658       2.08658       164.308       166.395    
   4  0.746841     -0.291903     -0.263852      0.263852       164.052       164.316    
   5  0.611746     -0.491439     -0.444212      0.444212       164.616       165.060    
   6  0.270477      -1.30757      -1.18191       1.18191       164.407       165.589    
   7  0.910534     -0.937242E-01 -0.847174E-01  0.847174E-01   164.864       164.949    
   8  0.942878     -0.588187E-01 -0.531663E-01  0.531663E-01   164.381       164.434    
   9  0.485061     -0.723481     -0.653955      0.653955       164.315       164.968    
  10  0.680127     -0.385476     -0.348432      0.348432       165.463       165.811    
  11  0.568210     -0.565264     -0.510943      0.510943       166.774       167.284    
  12  0.290478      -1.23623      -1.11743       1.11743       166.458       167.576    
  13  0.759168E-01  -2.57812      -2.33036       2.33036       165.135       167.465    
  14  0.724808     -0.321849     -0.290920      0.290920       166.873       167.164    
  15  0.896740     -0.108989     -0.985157E-01  0.985157E-01   167.454       167.553    
  16  0.484129     -0.725403     -0.655693      0.655693       166.987       167.643    
  17  0.841169     -0.172963     -0.156341      0.156341       167.315       167.472    
  18  0.124231      -2.08561      -1.88519       1.88519       167.732       169.617    
  19  0.512837     -0.667798     -0.603624      0.603624       168.270       168.874    
  20  0.659640     -0.416061     -0.376079      0.376079       168.194       168.570    
  21  0.775478     -0.254276     -0.229840      0.229840       168.506       168.735    
  22  0.514721     -0.664130     -0.600308      0.600308       168.307       168.907    
  23  0.642501     -0.442387     -0.399874      0.399874       168.424       168.824    
  24  0.372010     -0.988836     -0.893810      0.893810       169.699       170.593    
  25  0.630365     -0.461456     -0.417111      0.417111       169.081       169.498    
  26  0.697349     -0.360469     -0.325828      0.325828       168.511       168.836    
  27  0.702368     -0.353297     -0.319346      0.319346       169.673       169.992    
  28  0.904702     -0.100150     -0.905255E-01  0.905255E-01   168.913       169.003    
  29  0.613508     -0.488561     -0.441611      0.441611       169.155       169.597    
  30  0.399820     -0.916740     -0.828643      0.828643       167.155       167.983    
  31  0.450706     -0.796939     -0.720354      0.720354       168.966       169.687    
  32  0.491730     -0.709826     -0.641613      0.641613       169.690       170.332    
  33  0.859232     -0.151717     -0.137137      0.137137       170.115       170.252    
  34  0.500784     -0.691581     -0.625121      0.625121       170.446       171.072    
  35  0.423737     -0.858643     -0.776128      0.776128       170.242       171.018    
  36  0.120442      -2.11658      -1.91318       1.91318       167.592       169.505    
  37  0.954439     -0.466313E-01 -0.421501E-01  0.421501E-01   169.047       169.089    
  38  0.798812     -0.224629     -0.203043      0.203043       170.984       171.187    
  39  0.430786     -0.842144     -0.761215      0.761215       171.272       172.034    
  40  0.414903     -0.879710     -0.795171      0.795171       171.324       172.119    
  41  0.508906     -0.675492     -0.610578      0.610578       171.708       172.319    
  42  0.201745      -1.60075      -1.44692       1.44692       171.873       173.320    
  43  0.789439E-01  -2.53902      -2.29502       2.29502       171.909       174.204    
  44  0.300237      -1.20318      -1.08756       1.08756       171.377       172.465    
  45  0.325303      -1.12300      -1.01508       1.01508       172.127       173.142    
  46  0.237964      -1.43564      -1.29767       1.29767       170.267       171.565    
  47  0.453987     -0.789687     -0.713799      0.713799       172.252       172.966    
  48  0.984013E-01  -2.31870      -2.09588       2.09588       172.255       174.351    
  49  0.477956     -0.738237     -0.667294      0.667294       172.422       173.089    
  50  0.604552     -0.503268     -0.454905      0.454905       171.815       172.270    
  51  0.660239     -0.415153     -0.375257      0.375257       171.506       171.881    
  52  0.549986     -0.597862     -0.540408      0.540408       172.139       172.680    
  53  0.243566      -1.41237      -1.27664       1.27664       170.691       171.968    
  54  0.336725      -1.08849     -0.983887      0.983887       172.968       173.952    
  55  0.897543     -0.108094     -0.977061E-01  0.977061E-01   173.003       173.101    
  56  0.922315     -0.808690E-01 -0.730976E-01  0.730976E-01   173.404       173.477    
  57  0.155313      -1.86231      -1.68335       1.68335       172.969       174.653    
  58  0.722353     -0.325241     -0.293986      0.293986       173.495       173.789    
  59  0.274886      -1.29140      -1.16730       1.16730       171.345       172.512    
  60  0.640508     -0.445493     -0.402682      0.402682       172.116       172.519    
  61  0.782502     -0.245259     -0.221690      0.221690       173.929       174.151    
  62  0.971647     -0.287629E-01 -0.259989E-01  0.259989E-01   172.730       172.756    
  63  0.712225     -0.339361     -0.306749      0.306749       173.924       174.231    
  64  0.928850     -0.738077E-01 -0.667149E-01  0.667149E-01   174.034       174.101    
  65  0.325060      -1.12375      -1.01576       1.01576       173.636       174.652    
  66  0.303259      -1.19317      -1.07851       1.07851       172.658       173.737    
  67  0.918855     -0.846266E-01 -0.764941E-01  0.764941E-01   172.689       172.766    
  68  0.501362     -0.690426     -0.624077      0.624077       173.567       174.191    
  69  0.570762E-01  -2.86337      -2.58820       2.58820       175.224       177.812    
  70  0.592985     -0.522586     -0.472367      0.472367       174.487       174.959    
  71  0.764501     -0.268532     -0.242727      0.242727       175.661       175.904    
  72  0.741084     -0.299641     -0.270846      0.270846       175.046       175.317    
loop,thermsimp(1:2)       33   2.26179      0.718731    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    531        176.02          0.84          1.11         25.03          0.19          0.05         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       33
neval is:      530
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       34
neval is:      530


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      530     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.981444     -0.187299E-01 -0.169300E-01  0.169300E-01   158.266       158.282    
   2  0.357031      -1.02993     -0.930957      0.930957       164.052       164.983    
   3  0.350447      -1.04855     -0.947782      0.947782       164.381       165.329    
   4  0.189989      -1.66079      -1.50119       1.50119       164.098       165.600    
   5  0.587578     -0.531746     -0.480646      0.480646       164.864       165.345    
   6  0.114991      -2.16291      -1.95505       1.95505       164.315       166.270    
   7  0.657381     -0.419492     -0.379179      0.379179       164.616       164.995    
   8  0.641189E-02  -5.04960      -4.56434       4.56434       164.407       168.971    
   9  0.968794     -0.317033E-01 -0.286566E-01  0.286566E-01   165.463       165.491    
  10  0.503328E-02  -5.29168      -4.78316       4.78316       164.308       169.091    
  11  0.829431     -0.187016     -0.169044      0.169044       166.873       167.042    
  12  0.191311      -1.65386      -1.49492       1.49492       166.774       168.268    
  13  0.196005      -1.62961      -1.47301       1.47301       165.135       166.608    
  14  0.336490      -1.08919     -0.984517      0.984517       167.315       168.300    
  15  0.149023E-01  -4.20624      -3.80203       3.80203       167.454       171.256    
  16  0.125271E-01  -4.37986      -3.95897       3.95897       166.458       170.417    
  17  0.414930     -0.879646     -0.795114      0.795114       166.987       167.782    
  18  0.262487      -1.33755      -1.20902       1.20902       167.155       168.364    
  19  0.195281      -1.63332      -1.47636       1.47636       168.194       169.670    
  20  0.143722      -1.93988      -1.75346       1.75346       168.506       170.259    
  21  0.438997     -0.823262     -0.744148      0.744148       168.424       169.168    
  22  0.824417     -0.193079     -0.174524      0.174524       168.511       168.685    
  23  0.549781     -0.598236     -0.540746      0.540746       168.270       168.811    
  24  0.551873E-01  -2.89702      -2.61862       2.61862       168.307       170.926    
  25  0.934834     -0.673864E-01 -0.609107E-01  0.609107E-01   168.913       168.974    
  26  0.928568     -0.741115E-01 -0.669895E-01  0.669895E-01   169.047       169.114    
  27  0.941294     -0.604999E-01 -0.546859E-01  0.546859E-01   169.081       169.136    
  28  0.322815      -1.13067      -1.02202       1.02202       167.592       168.614    
  29  0.298431      -1.20922      -1.09301       1.09301       169.155       170.248    
  30  0.977329     -0.229318E-01 -0.207281E-01  0.207281E-01   167.732       167.753    
  31  0.513921     -0.665686     -0.601715      0.601715       168.966       169.568    
  32  0.235108      -1.44771      -1.30859       1.30859       169.673       170.981    
  33  0.779842     -0.248665     -0.224768      0.224768       170.115       170.340    
  34  0.297000E-01  -3.51661      -3.17867       3.17867       169.690       172.869    
  35  0.779190E-02  -4.85467      -4.38814       4.38814       169.699       174.087    
  36  0.559158     -0.581323     -0.525459      0.525459       170.242       170.767    
  37  0.125647      -2.07428      -1.87494       1.87494       170.446       172.321    
  38  0.142977      -1.94507      -1.75815       1.75815       170.984       172.742    
  39  0.923378E-01  -2.38230      -2.15337       2.15337       170.267       172.420    
  40  0.813591     -0.206297     -0.186472      0.186472       171.506       171.692    
  41  0.206767      -1.57616      -1.42469       1.42469       170.691       172.116    
  42  0.955262     -0.457693E-01 -0.413709E-01  0.413709E-01   171.272       171.314    
  43  0.178167      -1.72503      -1.55926       1.55926       171.324       172.883    
  44  0.246986      -1.39843      -1.26404       1.26404       171.815       173.079    
  45  0.568163     -0.565348     -0.511019      0.511019       171.708       172.219    
  46  0.742294     -0.298010     -0.269371      0.269371       171.377       171.647    
  47  0.888804E-01  -2.42046      -2.18786       2.18786       171.345       173.533    
  48  0.276498      -1.28555      -1.16201       1.16201       172.116       173.278    
  49  0.284239      -1.25794      -1.13706       1.13706       172.139       173.276    
  50  0.585524E-01  -2.83783      -2.56512       2.56512       172.730       175.295    
  51  0.223819      -1.49692      -1.35307       1.35307       172.689       174.042    
  52  0.910722     -0.935177E-01 -0.845308E-01  0.845308E-01   172.252       172.337    
  53  0.930723     -0.717934E-01 -0.648942E-01  0.648942E-01   172.422       172.487    
  54  0.605897E-01  -2.80363      -2.53421       2.53421       173.003       175.538    
  55  0.537138     -0.621501     -0.561775      0.561775       172.127       172.689    
  56  0.731457     -0.312717     -0.282666      0.282666       171.873       172.155    
  57  0.333283      -1.09876     -0.993175      0.993175       173.404       174.397    
  58  0.943934     -0.576988E-01 -0.521540E-01  0.521540E-01   172.658       172.711    
  59  0.959947E-01  -2.34346      -2.11826       2.11826       173.495       175.614    
  60  0.683918     -0.379917     -0.343408      0.343408       172.968       173.311    
  61  0.456067     -0.785115     -0.709667      0.709667       174.034       174.743    
  62  0.625009     -0.469989     -0.424824      0.424824       173.929       174.354    
  63  0.938257     -0.637315E-01 -0.576070E-01  0.576070E-01   173.567       173.625    
  64  0.202957      -1.59476      -1.44151       1.44151       171.909       173.350    
  65  0.778235     -0.250726     -0.226632      0.226632       173.924       174.151    
  66  0.293526      -1.22579      -1.10799       1.10799       172.255       173.363    
  67  0.813173     -0.206811     -0.186937      0.186937       173.636       173.823    
  68  0.131764      -2.02674      -1.83197       1.83197       172.969       174.801    
  69  0.535932     -0.623749     -0.563807      0.563807       174.487       175.051    
  70  0.593063     -0.522455     -0.472248      0.472248       175.046       175.518    
  71  0.795332     -0.228996     -0.206990      0.206990       175.661       175.868    
  72  0.872343     -0.136573     -0.123448      0.123448       176.015       176.139    
loop,thermsimp(1:2)       34  0.169300E-01  0.930957    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    532        175.22          0.84          1.11         25.10          0.15          0.05         27.25
Just calling func    0   0         27.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       34
neval is:      531
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       35
neval is:      531


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      531     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946856E-01  -2.35719      -2.13067       2.13067       158.266       160.396    
   2  0.756296E-01  -2.58191      -2.33379       2.33379       164.052       166.386    
   3  0.561067     -0.577915     -0.522379      0.522379       164.616       165.138    
   4  0.216838      -1.52860      -1.38171       1.38171       164.381       165.763    
   5  0.314923      -1.15543      -1.04439       1.04439       164.864       165.909    
   6  0.142515      -1.94831      -1.76108       1.76108       165.463       167.224    
   7  0.847169E-01  -2.46844      -2.23123       2.23123       164.098       166.330    
   8  0.526542     -0.641424     -0.579784      0.579784       164.315       164.894    
   9  0.732157     -0.311761     -0.281801      0.281801       165.135       165.416    
  10  0.916925     -0.867295E-01 -0.783950E-01  0.783950E-01   166.873       166.951    
  11  0.212460      -1.54900      -1.40015       1.40015       167.732       169.132    
  12  0.536257     -0.623142     -0.563259      0.563259       166.987       167.550    
  13  0.366591      -1.00351     -0.907073      0.907073       166.774       167.681    
  14  0.880705     -0.127033     -0.114825      0.114825       167.315       167.430    
  15  0.217460      -1.52574      -1.37912       1.37912       167.155       168.534    
  16  0.382542     -0.960916     -0.868573      0.868573       167.592       168.461    
  17  0.322523      -1.13158      -1.02284       1.02284       168.511       169.533    
  18  0.621048     -0.476347     -0.430571      0.430571       168.270       168.701    
  19  0.968083     -0.324370E-01 -0.293199E-01  0.293199E-01   164.407       164.436    
  20  0.834423     -0.181015     -0.163620      0.163620       168.913       169.076    
  21  0.822993     -0.194808     -0.176087      0.176087       164.308       164.484    
  22  0.269825      -1.30998      -1.18409       1.18409       169.047       170.231    
  23  0.752085     -0.284906     -0.257527      0.257527       169.081       169.339    
  24  0.562833     -0.574772     -0.519538      0.519538       168.424       168.944    
  25  0.816806     -0.202354     -0.182908      0.182908       168.966       169.149    
  26  0.912682     -0.913679E-01 -0.825876E-01  0.825876E-01   168.194       168.277    
  27  0.318966      -1.14267      -1.03286       1.03286       169.155       170.188    
  28  0.974130E-01  -2.32880      -2.10500       2.10500       168.506       170.611    
  29  0.989500     -0.105555E-01 -0.954111E-02  0.954111E-02   170.115       170.125    
  30  0.632994     -0.457295     -0.413349      0.413349       166.458       166.872    
  31  0.490860     -0.711597     -0.643214      0.643214       170.242       170.885    
  32  0.855011     -0.156641     -0.141588      0.141588       168.307       168.448    
  33  0.208926E-01  -3.86836      -3.49662       3.49662       169.673       173.169    
  34  0.629123     -0.463428     -0.418893      0.418893       167.454       167.873    
  35  0.520337     -0.653278     -0.590499      0.590499       171.272       171.863    
  36  0.860508     -0.150232     -0.135795      0.135795       171.377       171.513    
  37  0.703334     -0.351923     -0.318104      0.318104       171.506       171.824    
  38  0.982718     -0.174329E-01 -0.157576E-01  0.157576E-01   170.691       170.707    
  39  0.170183      -1.77088      -1.60070       1.60070       171.873       173.473    
  40  0.687538     -0.374638     -0.338636      0.338636       171.708       172.047    
  41  0.469943E-01  -3.05773      -2.76389       2.76389       170.446       173.210    
  42  0.436271     -0.829491     -0.749778      0.749778       172.252       173.002    
  43  0.739146     -0.302260     -0.273213      0.273213       170.267       170.540    
  44  0.986288     -0.138071E-01 -0.124802E-01  0.124802E-01   172.422       172.435    
  45  0.670480     -0.399761     -0.361345      0.361345       172.127       172.489    
  46  0.280759      -1.27026      -1.14819       1.14819       172.658       173.807    
  47  0.680423     -0.385041     -0.348039      0.348039       170.984       171.332    
  48  0.424121     -0.857736     -0.775309      0.775309       169.690       170.465    
  49  0.640263     -0.445876     -0.403028      0.403028       171.324       171.727    
  50  0.399483     -0.917585     -0.829407      0.829407       171.815       172.645    
  51  0.645429E-01  -2.74043      -2.47708       2.47708       172.139       174.616    
  52  0.337576      -1.08597     -0.981605      0.981605       172.116       173.098    
  53  0.197916      -1.61991      -1.46424       1.46424       172.968       174.432    
  54  0.270509      -1.30745      -1.18181       1.18181       171.909       173.091    
  55  0.825088     -0.192265     -0.173789      0.173789       172.255       172.429    
  56  0.514320     -0.664909     -0.601013      0.601013       171.345       171.946    
  57  0.505882     -0.681452     -0.615966      0.615966       173.567       174.183    
  58  0.461952     -0.772293     -0.698077      0.698077       173.636       174.334    
  59  0.599831     -0.511107     -0.461990      0.461990       172.689       173.151    
  60  0.616915     -0.483025     -0.436607      0.436607       169.699       170.136    
  61  0.332959      -1.09974     -0.994054      0.994054       173.924       174.918    
  62  0.494622E-01  -3.00655      -2.71762       2.71762       173.929       176.647    
  63  0.669027     -0.401932     -0.363307      0.363307       173.404       173.767    
  64  0.674931     -0.393146     -0.355365      0.355365       174.034       174.389    
  65  0.642806     -0.441912     -0.399445      0.399445       172.969       173.369    
  66  0.141774      -1.95352      -1.76579       1.76579       174.487       176.253    
  67  0.141330      -1.95666      -1.76862       1.76862       172.730       174.499    
  68  0.743468     -0.296430     -0.267943      0.267943       175.046       175.314    
  69  0.555551     -0.587795     -0.531309      0.531309       173.003       173.535    
  70  0.309084      -1.17414      -1.06131       1.06131       173.495       174.557    
  71  0.471234     -0.752400     -0.680095      0.680095       175.661       176.341    
  72  0.151977E-01  -4.18661      -3.78428       3.78428       175.224       179.008    
loop,thermsimp(1:2)       35   2.13067       2.33379    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    533        176.02          0.84          1.11         25.12          0.27          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    176.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       35
neval is:      532
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       36
neval is:      532


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      532     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102610      -2.27682      -2.05802       2.05802       158.266       160.324    
   2  0.682356     -0.382203     -0.345474      0.345474       164.407       164.752    
   3  0.177286      -1.72999      -1.56374       1.56374       164.308       165.872    
   4  0.705484     -0.348871     -0.315345      0.315345       164.315       164.630    
   5  0.700105     -0.356525     -0.322263      0.322263       164.616       164.938    
   6  0.502373E-01  -2.99100      -2.70357       2.70357       165.135       167.838    
   7  0.513397     -0.666706     -0.602636      0.602636       164.381       164.984    
   8  0.803947     -0.218222     -0.197251      0.197251       164.864       165.062    
   9  0.433536     -0.835780     -0.755463      0.755463       164.098       164.854    
  10  0.469536     -0.756009     -0.683358      0.683358       164.052       164.735    
  11  0.312394      -1.16349      -1.05168       1.05168       166.458       167.510    
  12  0.971867     -0.285367E-01 -0.257943E-01  0.257943E-01   166.873       166.899    
  13  0.869634     -0.139683     -0.126260      0.126260       165.463       165.589    
  14  0.415775     -0.877610     -0.793273      0.793273       167.315       168.108    
  15  0.657149     -0.419844     -0.379498      0.379498       166.987       167.366    
  16  0.517026     -0.659662     -0.596269      0.596269       166.774       167.370    
  17  0.845021     -0.168394     -0.152211      0.152211       167.454       167.607    
  18  0.646794E-01  -2.73831      -2.47517       2.47517       168.194       170.669    
  19  0.490710     -0.711902     -0.643490      0.643490       168.307       168.950    
  20  0.935557     -0.666133E-01 -0.602118E-01  0.602118E-01   167.592       167.652    
  21  0.155562      -1.86071      -1.68190       1.68190       167.155       168.836    
  22  0.739793     -0.301384     -0.272422      0.272422       168.270       168.543    
  23  0.195416      -1.63263      -1.47573       1.47573       168.424       169.900    
  24  0.679649E-01  -2.68876      -2.43038       2.43038       168.913       171.343    
  25  0.252534      -1.37621      -1.24396       1.24396       167.732       168.976    
  26  0.504672     -0.683847     -0.618130      0.618130       168.966       169.584    
  27  0.711577     -0.340272     -0.307573      0.307573       169.081       169.389    
  28  0.281313      -1.26829      -1.14641       1.14641       168.511       169.657    
  29  0.177966      -1.72616      -1.56028       1.56028       170.115       171.675    
  30  0.281850      -1.26638      -1.14468       1.14468       169.699       170.844    
  31  0.689216E-01  -2.67479      -2.41774       2.41774       169.155       171.573    
  32  0.845597     -0.167712     -0.151595      0.151595       169.047       169.199    
  33  0.790470     -0.235127     -0.212532      0.212532       169.690       169.903    
  34  0.306736      -1.18177      -1.06820       1.06820       170.267       171.335    
  35  0.637662     -0.449947     -0.406708      0.406708       168.506       168.912    
  36  0.668809E-01  -2.70484      -2.44491       2.44491       170.691       173.136    
  37  0.689320E-02  -4.97722      -4.49892       4.49892       170.242       174.741    
  38  0.102899      -2.27401      -2.05548       2.05548       170.984       173.039    
  39  0.487302     -0.718871     -0.649788      0.649788       171.377       172.027    
  40  0.912503     -0.915638E-01 -0.827647E-01  0.827647E-01   171.324       171.407    
  41  0.502050     -0.689055     -0.622838      0.622838       171.506       172.129    
  42  0.925412     -0.775163E-01 -0.700671E-01  0.700671E-01   171.272       171.342    
  43  0.921811     -0.814150E-01 -0.735912E-01  0.735912E-01   171.345       171.418    
  44  0.870535     -0.138648     -0.125324      0.125324       171.708       171.834    
  45  0.557947     -0.583490     -0.527418      0.527418       172.255       172.782    
  46  0.653329E-02  -5.03084      -4.54739       4.54739       172.422       176.970    
  47  0.173764      -1.75006      -1.58188       1.58188       172.127       173.709    
  48  0.318212      -1.14504      -1.03500       1.03500       171.815       172.850    
  49  0.423539     -0.859110     -0.776551      0.776551       172.252       173.029    
  50  0.686736     -0.375806     -0.339691      0.339691       171.909       172.248    
  51  0.990308     -0.973904E-02 -0.880313E-02  0.880313E-02   172.116       172.125    
  52  0.150330      -1.89492      -1.71282       1.71282       172.689       174.402    
  53  0.697676     -0.360000     -0.325405      0.325405       169.673       169.998    
  54  0.901523     -0.103670     -0.937077E-01  0.937077E-01   170.446       170.540    
  55  0.101249      -2.29017      -2.07009       2.07009       172.969       175.039    
  56  0.568624E-01  -2.86712      -2.59160       2.59160       171.873       174.464    
  57  0.119244      -2.12658      -1.92222       1.92222       173.003       174.926    
  58  0.329906      -1.10895      -1.00238       1.00238       173.404       174.406    
  59  0.715644     -0.334572     -0.302420      0.302420       172.658       172.961    
  60  0.282806      -1.26299      -1.14162       1.14162       173.567       174.709    
  61  0.773990     -0.256197     -0.231577      0.231577       173.636       173.868    
  62  0.201446      -1.60223      -1.44826       1.44826       174.034       175.482    
  63  0.376188     -0.977665     -0.883713      0.883713       172.968       173.851    
  64  0.290533      -1.23604      -1.11726       1.11726       172.730       173.847    
  65  0.129184      -2.04652      -1.84985       1.84985       173.495       175.345    
  66  0.871868     -0.137117     -0.123941      0.123941       172.139       172.263    
  67  0.622816     -0.473504     -0.428001      0.428001       173.924       174.352    
  68  0.914613     -0.892545E-01 -0.806772E-01  0.806772E-01   175.046       175.127    
  69  0.981688     -0.184815E-01 -0.167054E-01  0.167054E-01   174.487       174.504    
  70  0.961234     -0.395374E-01 -0.357379E-01  0.357379E-01   175.661       175.697    
  71  0.397814     -0.921770     -0.833189      0.833189       173.929       174.762    
  72  0.526480     -0.641541     -0.579890      0.579890       176.015       176.595    
loop,thermsimp(1:2)       36   2.05802      0.345474    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    534        166.85          0.84          1.11         25.18          0.11          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    166.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       36
neval is:      533
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       37
neval is:      533


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      533     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.189501      -1.66336      -1.50351       1.50351       158.266       159.769    
   2  0.365380E-02  -5.61199      -5.07268       5.07268       164.315       169.387    
   3  0.830232     -0.186050     -0.168171      0.168171       164.052       164.220    
   4  0.641913     -0.443302     -0.400702      0.400702       164.407       164.808    
   5  0.977753     -0.224987E-01 -0.203366E-01  0.203366E-01   164.098       164.119    
   6  0.941040     -0.607695E-01 -0.549296E-01  0.549296E-01   164.616       164.670    
   7  0.674724E-01  -2.69604      -2.43695       2.43695       164.381       166.818    
   8  0.243526      -1.41253      -1.27679       1.27679       164.864       166.141    
   9  0.916671     -0.870070E-01 -0.786458E-01  0.786458E-01   165.463       165.541    
  10  0.557286     -0.584677     -0.528490      0.528490       164.308       164.837    
  11  0.992934     -0.709123E-02 -0.640977E-02  0.640977E-02   166.873       166.879    
  12  0.575424     -0.552647     -0.499539      0.499539       166.987       167.487    
  13  0.128032      -2.05548      -1.85795       1.85795       166.774       168.631    
  14  0.473218E-01  -3.05078      -2.75761       2.75761       166.458       169.216    
  15  0.342686      -1.07094     -0.968024      0.968024       167.454       168.422    
  16  0.588634     -0.529951     -0.479023      0.479023       167.592       168.071    
  17  0.785774     -0.241086     -0.217918      0.217918       165.135       165.353    
  18  0.180861E-01  -4.01261      -3.62701       3.62701       167.315       170.942    
  19  0.814771     -0.204848     -0.185162      0.185162       168.270       168.455    
  20  0.241579      -1.42056      -1.28404       1.28404       167.155       168.439    
  21  0.547139     -0.603053     -0.545101      0.545101       168.506       169.051    
  22  0.762461     -0.271204     -0.245142      0.245142       168.307       168.552    
  23  0.388112     -0.946461     -0.855508      0.855508       167.732       168.588    
  24  0.787095     -0.239406     -0.216400      0.216400       169.047       169.264    
  25  0.509851     -0.673637     -0.608902      0.608902       169.081       169.690    
  26  0.106857      -2.23627      -2.02137       2.02137       168.966       170.988    
  27  0.494106     -0.705005     -0.637255      0.637255       168.511       169.148    
  28  0.504670     -0.683850     -0.618133      0.618133       168.424       169.042    
  29  0.575895     -0.551830     -0.498800      0.498800       169.690       170.189    
  30  0.482961     -0.727820     -0.657877      0.657877       169.673       170.330    
  31  0.530700     -0.633559     -0.572675      0.572675       170.446       171.019    
  32  0.667588     -0.404084     -0.365252      0.365252       168.194       168.559    
  33  0.602101     -0.507331     -0.458577      0.458577       169.699       170.158    
  34  0.658488     -0.417809     -0.377658      0.377658       170.267       170.645    
  35  0.393981     -0.931452     -0.841941      0.841941       171.272       172.114    
  36  0.639259     -0.447446     -0.404447      0.404447       168.913       169.317    
  37  0.936740E-01  -2.36793      -2.14038       2.14038       171.324       173.464    
  38  0.342820      -1.07055     -0.967670      0.967670       171.345       172.312    
  39  0.557341     -0.584578     -0.528401      0.528401       169.155       169.684    
  40  0.743227     -0.296754     -0.268237      0.268237       170.115       170.383    
  41  0.852843     -0.159180     -0.143883      0.143883       171.708       171.852    
  42  0.346148      -1.06089     -0.958939      0.958939       171.377       172.336    
  43  0.913769     -0.901773E-01 -0.815114E-01  0.815114E-01   172.116       172.198    
  44  0.816355     -0.202906     -0.183407      0.183407       171.506       171.689    
  45  0.132158      -2.02375      -1.82928       1.82928       171.909       173.738    
  46  0.337498      -1.08619     -0.981813      0.981813       172.139       173.121    
  47  0.707154     -0.346507     -0.313209      0.313209       172.255       172.568    
  48  0.742004     -0.298400     -0.269724      0.269724       171.815       172.085    
  49  0.804507     -0.217525     -0.196621      0.196621       172.658       172.855    
  50  0.385864     -0.952271     -0.860759      0.860759       172.252       173.113    
  51  0.928439     -0.742509E-01 -0.671155E-01  0.671155E-01   170.984       171.051    
  52  0.859816     -0.151036     -0.136522      0.136522       170.691       170.828    
  53  0.663579     -0.410107     -0.370697      0.370697       172.127       172.498    
  54  0.312768      -1.16229      -1.05060       1.05060       172.730       173.781    
  55  0.842943     -0.170856     -0.154437      0.154437       172.968       173.122    
  56  0.417818     -0.872710     -0.788844      0.788844       173.636       174.425    
  57  0.803409     -0.218891     -0.197856      0.197856       173.924       174.122    
  58  0.410473     -0.890444     -0.804874      0.804874       172.689       173.494    
  59  0.419709     -0.868194     -0.784762      0.784762       173.404       174.189    
  60  0.341924      -1.07317     -0.970037      0.970037       171.873       172.843    
  61  0.406630     -0.899852     -0.813378      0.813378       174.487       175.300    
  62  0.441846     -0.816793     -0.738301      0.738301       173.567       174.305    
  63  0.929001     -0.736455E-01 -0.665683E-01  0.665683E-01   170.242       170.308    
  64  0.115720      -2.15658      -1.94934       1.94934       173.929       175.878    
  65  0.141801E-01  -4.25591      -3.84693       3.84693       173.003       176.850    
  66  0.460883     -0.774611     -0.700172      0.700172       172.969       173.670    
  67  0.967261     -0.332867E-01 -0.300879E-01  0.300879E-01   175.046       175.076    
  68  0.528563     -0.637593     -0.576321      0.576321       173.495       174.072    
  69  0.176253      -1.73584      -1.56903       1.56903       174.034       175.603    
  70  0.755338     -0.280590     -0.253625      0.253625       175.661       175.915    
  71  0.572155     -0.558346     -0.504690      0.504690       176.015       176.520    
  72  0.855219     -0.156397     -0.141368      0.141368       166.847       166.988    
loop,thermsimp(1:2)       37   1.50351       5.07268    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    535        169.12          0.84          1.11         25.07          0.12          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    169.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       37
neval is:      534
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       38
neval is:      534


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      534     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.995416E-01  -2.30718      -2.08546       2.08546       158.266       160.351    
   2  0.503957     -0.685264     -0.619411      0.619411       164.098       164.718    
   3  0.622493     -0.474022     -0.428470      0.428470       164.052       164.480    
   4  0.935651     -0.665132E-01 -0.601214E-01  0.601214E-01   164.616       164.676    
   5  0.199187      -1.61351      -1.45845       1.45845       164.407       165.865    
   6  0.758609E-01  -2.57885      -2.33103       2.33103       164.308       166.639    
   7  0.984530E-01  -2.31818      -2.09540       2.09540       165.135       167.230    
   8  0.239970      -1.42724      -1.29009       1.29009       165.463       166.753    
   9  0.913380     -0.906037E-01 -0.818968E-01  0.818968E-01   164.864       164.946    
  10  0.189159E-02  -6.27034      -5.66777       5.66777       164.381       170.049    
  11  0.993010     -0.701452E-02 -0.634044E-02  0.634044E-02   166.873       166.879    
  12  0.723758     -0.323298     -0.292230      0.292230       166.847       167.139    
  13  0.793363     -0.231475     -0.209230      0.209230       166.987       167.196    
  14  0.600371     -0.510207     -0.461177      0.461177       167.592       168.053    
  15  0.362871      -1.01371     -0.916291      0.916291       167.454       168.371    
  16  0.619786     -0.478381     -0.432409      0.432409       167.155       167.587    
  17  0.866004     -0.143866     -0.130041      0.130041       168.270       168.400    
  18  0.671513     -0.398222     -0.359954      0.359954       168.307       168.667    
  19  0.719189     -0.329632     -0.297954      0.297954       168.194       168.492    
  20  0.710276     -0.342101     -0.309226      0.309226       167.732       168.041    
  21  0.615619E-01  -2.78771      -2.51982       2.51982       166.774       169.293    
  22  0.188098      -1.67079      -1.51023       1.51023       168.424       169.934    
  23  0.508944     -0.675418     -0.610512      0.610512       168.506       169.116    
  24  0.981871     -0.182954E-01 -0.165372E-01  0.165372E-01   168.511       168.527    
  25  0.225810      -1.48806      -1.34506       1.34506       166.458       167.803    
  26  0.989298     -0.107600E-01 -0.972599E-02  0.972599E-02   169.047       169.057    
  27  0.869151     -0.140239     -0.126762      0.126762       168.913       169.039    
  28  0.661576     -0.413130     -0.373429      0.373429       164.315       164.688    
  29  0.192048      -1.65001      -1.49145       1.49145       169.155       170.647    
  30  0.980212     -0.199861E-01 -0.180655E-01  0.180655E-01   169.081       169.099    
  31  0.160674      -1.82838      -1.65268       1.65268       169.699       171.352    
  32  0.123536E-01  -4.39381      -3.97157       3.97157       169.690       173.662    
  33  0.297350      -1.21285      -1.09629       1.09629       170.242       171.338    
  34  0.394659     -0.929732     -0.840387      0.840387       169.673       170.513    
  35  0.423082     -0.860189     -0.777526      0.777526       170.115       170.893    
  36  0.523558     -0.647108     -0.584922      0.584922       170.267       170.852    
  37  0.916842     -0.868204E-01 -0.784771E-01  0.784771E-01   170.691       170.770    
  38  0.150067      -1.89667      -1.71440       1.71440       167.315       169.030    
  39  0.561535     -0.577081     -0.521625      0.521625       168.966       169.488    
  40  0.926691     -0.761353E-01 -0.688188E-01  0.688188E-01   170.446       170.515    
  41  0.479570E-01  -3.03745      -2.74556       2.74556       170.984       173.729    
  42  0.494420     -0.704370     -0.636681      0.636681       171.506       172.142    
  43  0.722160E-01  -2.62809      -2.37554       2.37554       171.708       174.084    
  44  0.851764     -0.160446     -0.145027      0.145027       171.815       171.960    
  45  0.140206      -1.96465      -1.77585       1.77585       171.272       173.048    
  46  0.706931     -0.346822     -0.313493      0.313493       172.116       172.430    
  47  0.675871     -0.391754     -0.354107      0.354107       171.345       171.699    
  48  0.979967E-01  -2.32282      -2.09960       2.09960       171.377       173.477    
  49  0.337023      -1.08761     -0.983088      0.983088       172.127       173.110    
  50  0.270551      -1.30729      -1.18167       1.18167       172.255       173.437    
  51  0.165493      -1.79883      -1.62596       1.62596       171.873       173.499    
  52  0.325756      -1.12161      -1.01382       1.01382       172.658       173.672    
  53  0.307603      -1.17895      -1.06565       1.06565       172.252       173.318    
  54  0.790198     -0.235472     -0.212844      0.212844       172.139       172.352    
  55  0.495665     -0.701856     -0.634409      0.634409       172.968       173.602    
  56  0.596886     -0.516030     -0.466440      0.466440       171.324       171.790    
  57  0.467598     -0.760145     -0.687096      0.687096       172.689       173.376    
  58  0.438727     -0.823879     -0.744705      0.744705       172.969       173.714    
  59  0.744437     -0.295127     -0.266766      0.266766       171.909       172.176    
  60  0.879706     -0.128168     -0.115851      0.115851       172.730       172.846    
  61  0.169780      -1.77325      -1.60285       1.60285       173.495       175.098    
  62  0.809668     -0.211131     -0.190842      0.190842       173.924       174.115    
  63  0.795405     -0.228904     -0.206907      0.206907       173.404       173.611    
  64  0.683640     -0.380324     -0.343775      0.343775       173.567       173.911    
  65  0.564138     -0.572457     -0.517445      0.517445       173.636       174.154    
  66  0.963831     -0.368391E-01 -0.332989E-01  0.332989E-01   175.046       175.080    
  67  0.597841     -0.514430     -0.464994      0.464994       174.487       174.952    
  68  0.712896E-01  -2.64100      -2.38721       2.38721       174.034       176.421    
  69  0.109819      -2.20892      -1.99665       1.99665       173.929       175.926    
  70  0.472417     -0.749894     -0.677830      0.677830       175.661       176.339    
  71  0.446112E-01  -3.10977      -2.81093       2.81093       176.015       178.826    
  72  0.118902      -2.12946      -1.92482       1.92482       169.125       171.050    
loop,thermsimp(1:2)       38   2.08546      0.619411    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    536        175.78          0.84          1.11         25.40          0.08          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       38
neval is:      535
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       39
neval is:      535


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      535     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609718     -0.494759     -0.447213      0.447213       158.266       158.713    
   2  0.415874     -0.877372     -0.793058      0.793058       164.052       164.845    
   3  0.961318     -0.394498E-01 -0.356587E-01  0.356587E-01   164.616       164.651    
   4  0.965952     -0.346407E-01 -0.313118E-01  0.313118E-01   164.315       164.346    
   5  0.154943      -1.86470      -1.68551       1.68551       164.098       165.784    
   6  0.371326     -0.990674     -0.895471      0.895471       164.864       165.760    
   7  0.313239      -1.16079      -1.04924       1.04924       164.407       165.456    
   8  0.886978     -0.119935     -0.108409      0.108409       164.308       164.417    
   9  0.749723     -0.288051     -0.260370      0.260370       165.463       165.723    
  10  0.552279     -0.593702     -0.536648      0.536648       166.873       167.409    
  11  0.551516     -0.595084     -0.537898      0.537898       166.847       167.385    
  12  0.339175      -1.08124     -0.977332      0.977332       166.987       167.964    
  13  0.124635      -2.08237      -1.88225       1.88225       165.135       167.017    
  14  0.937098     -0.649678E-01 -0.587245E-01  0.587245E-01   167.155       167.213    
  15  0.639721E-01  -2.74931      -2.48510       2.48510       166.458       168.943    
  16  0.258753      -1.35188      -1.22197       1.22197       167.732       168.954    
  17  0.116140      -2.15296      -1.94607       1.94607       167.592       169.538    
  18  0.182528      -1.70085      -1.53740       1.53740       167.454       168.992    
  19  0.323703      -1.12793      -1.01954       1.01954       168.270       169.290    
  20  0.624238     -0.471224     -0.425940      0.425940       168.194       168.620    
  21  0.250110      -1.38585      -1.25268       1.25268       168.511       169.763    
  22  0.785262     -0.241738     -0.218507      0.218507       168.307       168.525    
  23  0.272793      -1.29904      -1.17420       1.17420       167.315       168.489    
  24  0.552827     -0.592710     -0.535751      0.535751       168.913       169.448    
  25  0.581634     -0.541915     -0.489838      0.489838       169.047       169.537    
  26  0.294889      -1.22116      -1.10380       1.10380       169.081       170.185    
  27  0.955830     -0.451753E-01 -0.408340E-01  0.408340E-01   168.506       168.546    
  28  0.691604     -0.368741     -0.333306      0.333306       166.774       167.107    
  29  0.975202     -0.251108E-01 -0.226977E-01  0.226977E-01   168.966       168.989    
  30  0.577048     -0.549830     -0.496992      0.496992       168.424       168.921    
  31  0.265577      -1.32585      -1.19844       1.19844       164.381       165.580    
  32  0.657063     -0.419975     -0.379616      0.379616       169.673       170.052    
  33  0.936668     -0.654263E-01 -0.591389E-01  0.591389E-01   170.446       170.506    
  34  0.333233      -1.09891     -0.993309      0.993309       169.155       170.149    
  35  0.796486     -0.227546     -0.205679      0.205679       170.691       170.897    
  36  0.968162     -0.323562E-01 -0.292468E-01  0.292468E-01   170.267       170.296    
  37  0.519518     -0.654855     -0.591924      0.591924       170.115       170.707    
  38  0.470578     -0.753793     -0.681355      0.681355       169.125       169.806    
  39  0.226350      -1.48567      -1.34290       1.34290       170.242       171.585    
  40  0.714391     -0.336325     -0.304005      0.304005       169.699       170.003    
  41  0.402411     -0.910282     -0.822806      0.822806       171.345       172.167    
  42  0.968828     -0.316682E-01 -0.286249E-01  0.286249E-01   171.324       171.353    
  43  0.595040     -0.519126     -0.469239      0.469239       171.815       172.285    
  44  0.370415     -0.993131     -0.897693      0.897693       171.506       172.403    
  45  0.321530      -1.13466      -1.02563       1.02563       171.909       172.934    
  46  0.733343     -0.310141     -0.280337      0.280337       172.139       172.420    
  47  0.753884     -0.282517     -0.255367      0.255367       172.116       172.371    
  48  0.750367     -0.287193     -0.259594      0.259594       172.730       172.990    
  49  0.101816      -2.28459      -2.06504       2.06504       171.272       173.337    
  50  0.413255     -0.883690     -0.798769      0.798769       172.127       172.926    
  51  0.819580     -0.198964     -0.179843      0.179843       172.252       172.432    
  52  0.173725      -1.75028      -1.58208       1.58208       172.689       174.271    
  53  0.950835     -0.504148E-01 -0.455700E-01  0.455700E-01   172.255       172.300    
  54  0.402344     -0.910449     -0.822956      0.822956       171.377       172.200    
  55  0.631798     -0.459185     -0.415058      0.415058       171.873       172.288    
  56  0.753033     -0.283646     -0.256388      0.256388       172.968       173.224    
  57  0.893578     -0.112522     -0.101709      0.101709       173.404       173.506    
  58  0.723940     -0.323047     -0.292003      0.292003       169.690       169.982    
  59  0.401404E-01  -3.21537      -2.90638       2.90638       172.658       175.565    
  60  0.317912      -1.14598      -1.03585       1.03585       172.969       174.005    
  61  0.670009     -0.400465     -0.361981      0.361981       170.984       171.346    
  62  0.634088     -0.455568     -0.411789      0.411789       173.567       173.979    
  63  0.568423     -0.564890     -0.510605      0.510605       171.708       172.219    
  64  0.402813E-01  -3.21187      -2.90321       2.90321       173.924       176.828    
  65  0.406970E-01  -3.20160      -2.89393       2.89393       173.636       176.530    
  66  0.642210E-02  -5.04801      -4.56290       4.56290       174.487       179.050    
  67  0.845416     -0.167926     -0.151789      0.151789       175.046       175.198    
  68  0.952585     -0.485762E-01 -0.439081E-01  0.439081E-01   173.495       173.539    
  69  0.295358      -1.21957      -1.10237       1.10237       173.929       175.031    
  70  0.668146     -0.403248     -0.364496      0.364496       175.661       176.026    
  71  0.905865     -0.988655E-01 -0.893646E-01  0.893646E-01   174.034       174.123    
  72  0.599205     -0.512152     -0.462935      0.462935       175.782       176.245    
loop,thermsimp(1:2)       39  0.447213      0.793058    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    537        166.97          0.84          1.11         25.27          0.11          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    166.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       39
neval is:      536
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       40
neval is:      536


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      536     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903890     -0.101048     -0.913371E-01  0.913371E-01   158.266       158.357    
   2  0.575116     -0.553184     -0.500024      0.500024       164.315       164.815    
   3  0.234605      -1.44985      -1.31052       1.31052       164.308       165.619    
   4  0.122801      -2.09719      -1.89566       1.89566       164.616       166.511    
   5  0.141985E-01  -4.25462      -3.84575       3.84575       164.052       167.898    
   6  0.756588     -0.278937     -0.252131      0.252131       164.407       164.659    
   7  0.646676     -0.435910     -0.394019      0.394019       164.381       164.775    
   8  0.898014E-01  -2.41016      -2.17854       2.17854       165.463       167.641    
   9  0.163265      -1.81238      -1.63822       1.63822       164.864       166.503    
  10  0.358760      -1.02510     -0.926591      0.926591       164.098       165.025    
  11  0.309585      -1.17252      -1.05985       1.05985       165.135       166.194    
  12  0.926638     -0.761923E-01 -0.688703E-01  0.688703E-01   166.774       166.842    
  13  0.283309E-01  -3.56380      -3.22133       3.22133       167.155       170.376    
  14  0.544265     -0.608319     -0.549860      0.549860       166.847       167.397    
  15  0.125708E-01  -4.37638      -3.95582       3.95582       166.873       170.829    
  16  0.402687E-01  -3.21218      -2.90349       2.90349       166.987       169.890    
  17  0.832731     -0.183044     -0.165454      0.165454       167.315       167.481    
  18  0.953573     -0.475391E-01 -0.429707E-01  0.429707E-01   168.307       168.350    
  19  0.967735E-01  -2.33538      -2.11096       2.11096       168.506       170.617    
  20  0.309578E-01  -3.47513      -3.14118       3.14118       168.194       171.335    
  21  0.197205      -1.62351      -1.46749       1.46749       168.424       169.892    
  22  0.232676      -1.45811      -1.31799       1.31799       166.458       167.776    
  23  0.573480     -0.556032     -0.502598      0.502598       167.732       168.235    
  24  0.944617     -0.569761E-01 -0.515008E-01  0.515008E-01   168.966       169.018    
  25  0.809219     -0.211686     -0.191343      0.191343       167.454       167.646    
  26  0.207880      -1.57080      -1.41984       1.41984       168.270       169.690    
  27  0.325884      -1.12121      -1.01347       1.01347       168.913       169.926    
  28  0.887246     -0.119633     -0.108136      0.108136       169.047       169.155    
  29  0.535078     -0.625343     -0.565248      0.565248       167.592       168.157    
  30  0.874713     -0.133859     -0.120996      0.120996       168.511       168.632    
  31  0.273380      -1.29689      -1.17226       1.17226       169.125       170.297    
  32  0.785279     -0.241717     -0.218488      0.218488       169.690       169.909    
  33  0.822807E-01  -2.49762      -2.25760       2.25760       169.699       171.957    
  34  0.267430E-01  -3.62148      -3.27346       3.27346       169.673       172.946    
  35  0.930838     -0.716701E-01 -0.647827E-01  0.647827E-01   169.155       169.220    
  36  0.676222     -0.391233     -0.353636      0.353636       169.081       169.435    
  37  0.645353     -0.437958     -0.395871      0.395871       170.267       170.663    
  38  0.453782     -0.790138     -0.714207      0.714207       170.446       171.161    
  39  0.271751      -1.30287      -1.17766       1.17766       170.115       171.293    
  40  0.521656     -0.650746     -0.588211      0.588211       170.691       171.280    
  41  0.305810      -1.18479      -1.07093       1.07093       170.984       172.055    
  42  0.484713E-01  -3.02678      -2.73591       2.73591       171.324       174.060    
  43  0.806308     -0.215289     -0.194600      0.194600       170.242       170.437    
  44  0.314175      -1.15781      -1.04654       1.04654       171.345       172.391    
  45  0.214468E-01  -3.84218      -3.47295       3.47295       171.377       174.850    
  46  0.813020     -0.207000     -0.187107      0.187107       171.708       171.896    
  47  0.540435     -0.615382     -0.556244      0.556244       171.815       172.372    
  48  0.971427E-01  -2.33157      -2.10751       2.10751       171.873       173.980    
  49  0.594395     -0.520211     -0.470219      0.470219       172.255       172.725    
  50  0.886621     -0.120338     -0.108774      0.108774       172.116       172.225    
  51  0.591229     -0.525552     -0.475048      0.475048       171.506       171.981    
  52  0.935909     -0.662368E-01 -0.598716E-01  0.598716E-01   172.139       172.199    
  53  0.696233     -0.362071     -0.327276      0.327276       172.252       172.580    
  54  0.187251      -1.67530      -1.51431       1.51431       172.127       173.642    
  55  0.435631     -0.830959     -0.751106      0.751106       171.909       172.660    
  56  0.143851      -1.93898      -1.75264       1.75264       172.730       174.483    
  57  0.297505      -1.21232      -1.09582       1.09582       172.968       174.063    
  58  0.277669      -1.28133      -1.15819       1.15819       171.272       172.431    
  59  0.323064      -1.12990      -1.02132       1.02132       173.404       174.425    
  60  0.588431     -0.530295     -0.479335      0.479335       173.495       173.975    
  61  0.935613     -0.665528E-01 -0.601572E-01  0.601572E-01   173.567       173.627    
  62  0.183539      -1.69533      -1.53241       1.53241       172.969       174.502    
  63  0.780553     -0.247753     -0.223944      0.223944       174.034       174.258    
  64  0.892897     -0.113284     -0.102398      0.102398       172.689       172.792    
  65  0.148588      -1.90658      -1.72336       1.72336       173.929       175.652    
  66  0.212563      -1.54852      -1.39971       1.39971       175.046       176.446    
  67  0.666513     -0.405696     -0.366709      0.366709       172.658       173.025    
  68  0.606511     -0.500033     -0.451980      0.451980       175.661       176.113    
  69  0.851481     -0.160778     -0.145328      0.145328       175.782       175.927    
  70  0.478866     -0.736335     -0.665574      0.665574       173.636       174.302    
  71  0.802808     -0.219639     -0.198532      0.198532       173.924       174.123    
  72  0.977496     -0.227613E-01 -0.205740E-01  0.205740E-01   166.967       166.988    
loop,thermsimp(1:2)       40  0.913371E-01  0.500024    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    538        172.77          0.84          1.11         25.07          0.27          0.05         27.33
Just calling func    0   0         27.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       40
neval is:      537
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       41
neval is:      537


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      537     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674423     -0.393898     -0.356045      0.356045       158.266       158.622    
   2  0.479548     -0.734911     -0.664287      0.664287       164.407       165.071    
   3  0.577498     -0.549050     -0.496287      0.496287       164.381       164.877    
   4  0.652957     -0.426245     -0.385283      0.385283       164.315       164.700    
   5  0.649111     -0.432152     -0.390623      0.390623       164.098       164.489    
   6  0.689953     -0.371132     -0.335467      0.335467       164.308       164.644    
   7  0.884625     -0.122591     -0.110811      0.110811       165.135       165.245    
   8  0.655607     -0.422194     -0.381622      0.381622       164.864       165.246    
   9  0.954363     -0.467110E-01 -0.422221E-01  0.422221E-01   164.616       164.658    
  10  0.601698     -0.507999     -0.459181      0.459181       166.774       167.233    
  11  0.640071     -0.446176     -0.403299      0.403299       166.967       167.371    
  12  0.925620     -0.772915E-01 -0.698639E-01  0.698639E-01   166.847       166.917    
  13  0.760294     -0.274051     -0.247715      0.247715       167.315       167.563    
  14  0.292719      -1.22854      -1.11048       1.11048       165.463       166.573    
  15  0.910533     -0.937251E-01 -0.847182E-01  0.847182E-01   167.454       167.539    
  16  0.650466     -0.430066     -0.388738      0.388738       166.458       166.847    
  17  0.351310      -1.04609     -0.945560      0.945560       164.052       164.997    
  18  0.997229     -0.277449E-02 -0.250787E-02  0.250787E-02   167.592       167.595    
  19  0.808601E-01  -2.51503      -2.27334       2.27334       167.732       170.005    
  20  0.420537     -0.866224     -0.782981      0.782981       168.307       169.090    
  21  0.122547      -2.09926      -1.89753       1.89753       168.511       170.408    
  22  0.943531     -0.581261E-01 -0.525403E-01  0.525403E-01   168.966       169.019    
  23  0.738977     -0.302488     -0.273420      0.273420       169.047       169.321    
  24  0.152624E-01  -4.18236      -3.78044       3.78044       169.155       172.936    
  25  0.495842     -0.701498     -0.634085      0.634085       169.081       169.715    
  26  0.737954     -0.303874     -0.274673      0.274673       168.270       168.545    
  27  0.859054     -0.151924     -0.137324      0.137324       166.987       167.124    
  28  0.892829     -0.113360     -0.102466      0.102466       168.424       168.527    
  29  0.492035E-01  -3.01179      -2.72236       2.72236       169.690       172.413    
  30  0.493120E-01  -3.00959      -2.72037       2.72037       168.913       171.633    
  31  0.366039      -1.00501     -0.908434      0.908434       169.125       170.033    
  32  0.658741     -0.417425     -0.377311      0.377311       167.155       167.532    
  33  0.453109     -0.791623     -0.715550      0.715550       170.242       170.957    
  34  0.370957     -0.991668     -0.896371      0.896371       168.506       169.402    
  35  0.758039     -0.277020     -0.250399      0.250399       170.267       170.517    
  36  0.799628     -0.223608     -0.202120      0.202120       166.873       167.075    
  37  0.934112     -0.681593E-01 -0.616093E-01  0.616093E-01   170.446       170.508    
  38  0.934175     -0.680913E-01 -0.615478E-01  0.615478E-01   170.691       170.753    
  39  0.126850      -2.06475      -1.86633       1.86633       170.115       171.982    
  40  0.359146      -1.02403     -0.925619      0.925619       168.194       169.120    
  41  0.550575E-01  -2.89938      -2.62075       2.62075       171.708       174.329    
  42  0.220619      -1.51132      -1.36608       1.36608       169.699       171.065    
  43  0.414861     -0.879812     -0.795263      0.795263       171.506       172.301    
  44  0.132097      -2.02422      -1.82969       1.82969       170.984       172.814    
  45  0.305184      -1.18684      -1.07279       1.07279       172.139       173.212    
  46  0.157149E-01  -4.15315      -3.75404       3.75404       172.116       175.870    
  47  0.286781      -1.24904      -1.12901       1.12901       171.815       172.944    
  48  0.637394     -0.450367     -0.407088      0.407088       171.345       171.752    
  49  0.663335     -0.410476     -0.371030      0.371030       171.272       171.643    
  50  0.242167      -1.41813      -1.28185       1.28185       172.252       173.534    
  51  0.479709     -0.734576     -0.663984      0.663984       171.909       172.573    
  52  0.709138E-01  -2.64629      -2.39199       2.39199       172.255       174.647    
  53  0.439412     -0.822318     -0.743294      0.743294       172.689       173.433    
  54  0.208330      -1.56863      -1.41789       1.41789       169.673       171.090    
  55  0.145758      -1.92581      -1.74074       1.74074       172.658       174.399    
  56  0.716956     -0.332741     -0.300765      0.300765       173.567       173.868    
  57  0.135014      -2.00237      -1.80995       1.80995       172.127       173.937    
  58  0.676740     -0.390469     -0.352945      0.352945       173.495       173.848    
  59  0.387668     -0.947606     -0.856543      0.856543       171.873       172.729    
  60  0.276787      -1.28451      -1.16107       1.16107       171.324       172.485    
  61  0.888754     -0.117935     -0.106602      0.106602       172.968       173.074    
  62  0.663070     -0.410874     -0.371390      0.371390       173.924       174.296    
  63  0.878735     -0.129272     -0.116850      0.116850       174.034       174.151    
  64  0.311527      -1.16627      -1.05419       1.05419       173.636       174.691    
  65  0.653651E-01  -2.72777      -2.46563       2.46563       173.404       175.870    
  66  0.182523      -1.70088      -1.53743       1.53743       172.730       174.267    
  67  0.817103     -0.201990     -0.182579      0.182579       172.969       173.152    
  68  0.648203     -0.433552     -0.391888      0.391888       171.377       171.769    
  69  0.952320     -0.488537E-01 -0.441589E-01  0.441589E-01   173.929       173.973    
  70  0.497958     -0.697239     -0.630236      0.630236       175.782       176.412    
  71  0.103231      -2.27079      -2.05257       2.05257       175.661       177.714    
  72  0.552069     -0.594081     -0.536991      0.536991       172.767       173.304    
loop,thermsimp(1:2)       41  0.356045      0.664287    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    539        174.35          0.84          1.11         25.01          0.20          0.05         27.20
Just calling func    0   0         27.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       41
neval is:      538
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       42
neval is:      538


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      538     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.723413     -0.323775     -0.292660      0.292660       158.266       158.558    
   2  0.185655      -1.68386      -1.52205       1.52205       164.098       165.620    
   3  0.957457     -0.434742E-01 -0.392964E-01  0.392964E-01   164.308       164.348    
   4  0.621017     -0.476397     -0.430616      0.430616       164.616       165.046    
   5  0.104462      -2.25893      -2.04185       2.04185       164.315       166.356    
   6  0.452993     -0.791880     -0.715781      0.715781       164.381       165.097    
   7  0.667800     -0.403766     -0.364965      0.364965       164.052       164.417    
   8  0.972732     -0.276462E-01 -0.249895E-01  0.249895E-01   164.407       164.432    
   9  0.260321      -1.34584      -1.21651       1.21651       165.135       166.351    
  10  0.763010     -0.270484     -0.244491      0.244491       164.864       165.109    
  11  0.641341     -0.444194     -0.401507      0.401507       165.463       165.864    
  12  0.878196     -0.129885     -0.117403      0.117403       166.458       166.576    
  13  0.854835     -0.156847     -0.141774      0.141774       166.847       166.989    
  14  0.714312     -0.336436     -0.304105      0.304105       166.873       167.177    
  15  0.701707     -0.354239     -0.320197      0.320197       166.987       167.307    
  16  0.889117     -0.117526     -0.106232      0.106232       166.774       166.880    
  17  0.141522      -1.95530      -1.76740       1.76740       166.967       168.735    
  18  0.189178      -1.66507      -1.50506       1.50506       167.155       168.660    
  19  0.622140     -0.474590     -0.428983      0.428983       167.454       167.883    
  20  0.130042      -2.03989      -1.84386       1.84386       167.315       169.159    
  21  0.577696     -0.548708     -0.495978      0.495978       167.592       168.088    
  22  0.682588     -0.381863     -0.345167      0.345167       168.424       168.769    
  23  0.835439     -0.179798     -0.162520      0.162520       168.270       168.433    
  24  0.540525     -0.615214     -0.556093      0.556093       168.966       169.522    
  25  0.782443     -0.245334     -0.221758      0.221758       168.307       168.529    
  26  0.905287     -0.995035E-01 -0.899413E-01  0.899413E-01   168.194       168.284    
  27  0.695897     -0.362554     -0.327713      0.327713       169.047       169.375    
  28  0.382345     -0.961432     -0.869040      0.869040       168.506       169.375    
  29  0.125280      -2.07720      -1.87759       1.87759       169.081       170.959    
  30  0.699640     -0.357189     -0.322864      0.322864       167.732       168.055    
  31  0.349624      -1.05090     -0.949907      0.949907       169.125       170.075    
  32  0.909174     -0.952190E-01 -0.860686E-01  0.860686E-01   168.511       168.597    
  33  0.801113     -0.221753     -0.200443      0.200443       170.446       170.647    
  34  0.284676      -1.25640      -1.13567       1.13567       170.267       171.403    
  35  0.971815     -0.285896E-01 -0.258422E-01  0.258422E-01   170.691       170.717    
  36  0.667566     -0.404116     -0.365282      0.365282       170.242       170.607    
  37  0.113695E-02  -6.77940      -6.12791       6.12791       169.699       175.827    
  38  0.408299     -0.895755     -0.809674      0.809674       169.673       170.482    
  39  0.625257E-01  -2.77218      -2.50578       2.50578       168.913       171.418    
  40  0.515937     -0.661771     -0.598176      0.598176       171.272       171.871    
  41  0.876322E-01  -2.43461      -2.20064       2.20064       171.345       173.545    
  42  0.995779     -0.423030E-02 -0.382377E-02  0.382377E-02   171.377       171.381    
  43  0.423428     -0.859371     -0.776787      0.776787       170.115       170.892    
  44  0.895974     -0.109844     -0.992883E-01  0.992883E-01   171.506       171.605    
  45  0.467456E-01  -3.06304      -2.76868       2.76868       169.690       172.459    
  46  0.331488      -1.10416     -0.998055      0.998055       171.324       172.322    
  47  0.422083     -0.862553     -0.779663      0.779663       171.909       172.688    
  48  0.630981     -0.460480     -0.416228      0.416228       171.873       172.289    
  49  0.953132     -0.480016E-01 -0.433887E-01  0.433887E-01   170.984       171.027    
  50  0.991799E-01  -2.31082      -2.08875       2.08875       169.155       171.244    
  51  0.441663     -0.817207     -0.738675      0.738675       171.815       172.554    
  52  0.684271     -0.379401     -0.342941      0.342941       172.968       173.311    
  53  0.520656     -0.652665     -0.589945      0.589945       172.969       173.559    
  54  0.480321     -0.733300     -0.662831      0.662831       172.139       172.802    
  55  0.655865     -0.421801     -0.381266      0.381266       172.767       173.149    
  56  0.719668     -0.328965     -0.297352      0.297352       172.689       172.987    
  57  0.738936     -0.302544     -0.273470      0.273470       172.252       172.526    
  58  0.353545      -1.03975     -0.939828      0.939828       173.495       174.435    
  59  0.312186E-01  -3.46674      -3.13359       3.13359       173.567       176.701    
  60  0.926263     -0.765971E-01 -0.692362E-01  0.692362E-01   172.127       172.196    
  61  0.859441     -0.151473     -0.136916      0.136916       173.929       174.066    
  62  0.862152     -0.148323     -0.134070      0.134070       174.034       174.168    
  63  0.966444     -0.341316E-01 -0.308516E-01  0.308516E-01   172.730       172.761    
  64  0.704785     -0.349862     -0.316241      0.316241       173.924       174.241    
  65  0.917903     -0.856631E-01 -0.774310E-01  0.774310E-01   171.708       171.786    
  66  0.428121E-01  -3.15094      -2.84814       2.84814       172.658       175.507    
  67  0.556330     -0.586394     -0.530042      0.530042       172.255       172.785    
  68  0.648302     -0.433398     -0.391749      0.391749       173.636       174.028    
  69  0.734641     -0.308373     -0.278739      0.278739       173.404       173.683    
  70  0.420130     -0.867191     -0.783855      0.783855       172.116       172.900    
  71  0.437978     -0.825586     -0.746248      0.746248       175.782       176.528    
  72  0.107557      -2.22974      -2.01546       2.01546       174.348       176.363    
loop,thermsimp(1:2)       42  0.292660       1.52205    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    540        167.87          0.84          1.11         25.12          0.17          0.05         27.29
Just calling func    0   0         27.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    167.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       42
neval is:      539
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       43
neval is:      539


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      539     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.475948     -0.742447     -0.671099      0.671099       158.266       158.937    
   2  0.602827     -0.506126     -0.457488      0.457488       164.308       164.766    
   3  0.165820E-01  -4.09943      -3.70549       3.70549       164.052       167.757    
   4  0.438093     -0.825323     -0.746011      0.746011       164.407       165.153    
   5  0.431975     -0.839387     -0.758723      0.758723       164.616       165.374    
   6  0.619769E-01  -2.78099      -2.51374       2.51374       164.381       166.895    
   7  0.950555     -0.507092E-01 -0.458362E-01  0.458362E-01   164.864       164.910    
   8  0.467256     -0.760877     -0.687758      0.687758       164.098       164.786    
   9  0.759251     -0.275423     -0.248955      0.248955       165.463       165.712    
  10  0.606403     -0.500211     -0.452141      0.452141       165.135       165.587    
  11  0.472546     -0.749621     -0.677583      0.677583       164.315       164.992    
  12  0.340147      -1.07838     -0.974746      0.974746       166.458       167.433    
  13  0.625998E-01  -2.77099      -2.50471       2.50471       166.774       169.278    
  14  0.949579     -0.517367E-01 -0.467649E-01  0.467649E-01   166.847       166.894    
  15  0.684964     -0.378389     -0.342027      0.342027       166.873       167.215    
  16  0.194402      -1.63783      -1.48044       1.48044       166.987       168.467    
  17  0.885462     -0.121646     -0.109956      0.109956       167.454       167.564    
  18  0.115564      -2.15793      -1.95056       1.95056       167.732       169.683    
  19  0.924911     -0.780574E-01 -0.705562E-01  0.705562E-01   167.592       167.663    
  20  0.201643E-02  -6.20643      -5.61000       5.61000       168.194       173.804    
  21  0.264504      -1.32990      -1.20210       1.20210       168.270       169.472    
  22  0.241350      -1.42151      -1.28490       1.28490       168.307       169.592    
  23  0.195111      -1.63418      -1.47714       1.47714       168.511       169.988    
  24  0.991465     -0.857191E-02 -0.774816E-02  0.774816E-02   167.155       167.162    
  25  0.605579     -0.501570     -0.453370      0.453370       166.967       167.421    
  26  0.417123     -0.874375     -0.790349      0.790349       168.424       169.215    
  27  0.321829      -1.13373      -1.02478       1.02478       167.315       168.340    
  28  0.510817     -0.671745     -0.607191      0.607191       168.506       169.113    
  29  0.776438     -0.253038     -0.228722      0.228722       169.047       169.276    
  30  0.522679     -0.648787     -0.586440      0.586440       168.966       169.553    
  31  0.754225     -0.282065     -0.254959      0.254959       169.125       169.380    
  32  0.384540     -0.955707     -0.863865      0.863865       169.673       170.536    
  33  0.618720     -0.480103     -0.433966      0.433966       170.242       170.676    
  34  0.288710      -1.24233      -1.12295       1.12295       170.446       171.569    
  35  0.645703     -0.437415     -0.395380      0.395380       170.691       171.087    
  36  0.639113     -0.447673     -0.404653      0.404653       170.115       170.520    
  37  0.394197     -0.930906     -0.841447      0.841447       169.081       169.923    
  38  0.300083      -1.20370      -1.08802       1.08802       170.984       172.072    
  39  0.481786     -0.730255     -0.660078      0.660078       169.155       169.815    
  40  0.745437     -0.293784     -0.265552      0.265552       171.377       171.643    
  41  0.735307     -0.307467     -0.277919      0.277919       170.267       170.545    
  42  0.516048     -0.661555     -0.597980      0.597980       168.913       169.511    
  43  0.810479     -0.210130     -0.189937      0.189937       171.506       171.696    
  44  0.535152E-01  -2.92779      -2.64643       2.64643       171.708       174.355    
  45  0.828890E-01  -2.49025      -2.25094       2.25094       171.272       173.523    
  46  0.976655     -0.236220E-01 -0.213519E-01  0.213519E-01   172.127       172.149    
  47  0.528807E-01  -2.93972      -2.65721       2.65721       171.873       174.530    
  48  0.124161      -2.08618      -1.88570       1.88570       171.324       173.210    
  49  0.690691     -0.370063     -0.334501      0.334501       169.690       170.025    
  50  0.145451      -1.92791      -1.74264       1.74264       172.252       173.995    
  51  0.821159     -0.197039     -0.178103      0.178103       171.815       171.993    
  52  0.795471     -0.228821     -0.206832      0.206832       171.909       172.116    
  53  0.897922     -0.107672     -0.973248E-01  0.973248E-01   172.730       172.827    
  54  0.942954     -0.587380E-01 -0.530934E-01  0.530934E-01   172.255       172.308    
  55  0.634449     -0.454998     -0.411274      0.411274       172.139       172.551    
  56  0.602211     -0.507148     -0.458412      0.458412       172.116       172.574    
  57  0.775016     -0.254872     -0.230379      0.230379       172.689       172.920    
  58  0.474621     -0.745238     -0.673622      0.673622       172.767       173.441    
  59  0.374181     -0.983016     -0.888550      0.888550       172.968       173.856    
  60  0.560778     -0.578430     -0.522844      0.522844       171.345       171.867    
  61  0.537304     -0.621192     -0.561497      0.561497       172.969       173.531    
  62  0.507206     -0.678839     -0.613603      0.613603       173.404       174.018    
  63  0.859506E-01  -2.45398      -2.21816       2.21816       173.636       175.855    
  64  0.187799      -1.67238      -1.51167       1.51167       173.929       175.441    
  65  0.266096E-01  -3.62648      -3.27798       3.27798       174.034       177.312    
  66  0.804632     -0.217370     -0.196481      0.196481       173.924       174.121    
  67  0.752814     -0.283937     -0.256651      0.256651       173.495       173.752    
  68  0.862721     -0.147664     -0.133473      0.133473       172.658       172.792    
  69  0.116069      -2.15357      -1.94661       1.94661       169.699       171.646    
  70  0.724007     -0.322954     -0.291919      0.291919       174.348       174.640    
  71  0.229371      -1.47241      -1.33092       1.33092       175.782       177.113    
  72  0.553826     -0.590904     -0.534119      0.534119       167.868       168.402    
loop,thermsimp(1:2)       43  0.671099      0.457488    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    541        171.15          0.84          1.11         25.09          0.23          0.05         27.32
Just calling func    0   0         27.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  540    171.15       0.9285     -1.807      2.097     -102.6      1.214    
                      0.1062      1.867     -99.70      3.360     0.1781    
                       2.112     -1.427      1.944      0.000     -40.00    
                      -1.350      0.000      0.000      0.000     -1.221    

                      -2.500     0.3440E+05 0.2694E+05  0.000      0.000    
                     -0.5672     -6.073     -4.451     -7.499      4.675    
                      -14.66     -2.870     -932.4      0.000    -0.2927E+05

                     -0.1306E+05  8519.     -2614.     0.8808E+05  1317.    
                       7478.     0.7508E-01-0.1070E-01  0.000     0.8031E-01
                      0.6488E-01-0.1494E-02 0.9772E-02 0.1339E-01 0.5677E-01

                     -0.1744    -0.8852      0.000    -0.5815E-01 0.4970E-01
                       0.000    -0.5369E-01 0.8110E-02-0.3818E-01 0.4256E-01
                      0.3239E-01 0.3140E-01-0.2598     -1.059      0.000    

                     -0.2745    -0.5697    -0.6149    -0.3825    -0.5649E-01
                      0.8235E-01  8.964      8.827     -4873.     -4.000    
                     -0.3392    -0.7708      8.990      8.760     -6416.    

                      -4.000     0.2196    -0.6413      8.901      8.856    
                      -3261.     -7.000    -0.1560    -0.8946      9.077    
                       8.884     -6180.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    171.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       43
neval is:      540
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       44
neval is:      540


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      540     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.952211     -0.489682E-01 -0.442625E-01  0.442625E-01   158.266       158.310    
   2  0.866029     -0.143836     -0.130014      0.130014       164.308       164.438    
   3  0.411761     -0.887312     -0.802043      0.802043       164.098       164.900    
   4  0.699906     -0.356809     -0.322520      0.322520       164.864       165.187    
   5  0.499470     -0.694207     -0.627495      0.627495       164.315       164.942    
   6  0.565983     -0.569191     -0.514492      0.514492       164.407       164.921    
   7  0.493159     -0.706923     -0.638989      0.638989       164.616       165.255    
   8  0.569007     -0.563863     -0.509677      0.509677       165.135       165.644    
   9  0.650217     -0.430449     -0.389084      0.389084       165.463       165.852    
  10  0.961034E-01  -2.34233      -2.11724       2.11724       166.847       168.964    
  11  0.689147     -0.372300     -0.336523      0.336523       164.381       164.718    
  12  0.607344     -0.498660     -0.450739      0.450739       167.155       167.605    
  13  0.192849E-01  -3.94843      -3.56899       3.56899       166.873       170.442    
  14  0.731745     -0.312323     -0.282309      0.282309       166.967       167.250    
  15  0.863954     -0.146236     -0.132183      0.132183       166.458       166.590    
  16  0.499353     -0.694441     -0.627707      0.627707       167.454       168.082    
  17  0.835822     -0.179340     -0.162105      0.162105       167.592       167.754    
  18  0.515243     -0.663117     -0.599392      0.599392       164.052       164.651    
  19  0.284294      -1.25775      -1.13688       1.13688       167.315       168.452    
  20  0.699552     -0.357315     -0.322977      0.322977       167.868       168.191    
  21  0.306316      -1.18314      -1.06944       1.06944       166.987       168.056    
  22  0.917869     -0.857004E-01 -0.774648E-01  0.774648E-01   168.506       168.583    
  23  0.328908      -1.11198      -1.00512       1.00512       168.424       169.429    
  24  0.850593     -0.161822     -0.146271      0.146271       169.047       169.193    
  25  0.620502E-01  -2.77981      -2.51268       2.51268       166.774       169.286    
  26  0.583163     -0.539288     -0.487463      0.487463       169.125       169.612    
  27  0.394975     -0.928934     -0.839665      0.839665       168.270       169.110    
  28  0.601832     -0.507776     -0.458980      0.458980       168.913       169.372    
  29  0.955083E-01  -2.34854      -2.12285       2.12285       168.966       171.089    
  30  0.380058     -0.967430     -0.874462      0.874462       168.307       169.181    
  31  0.785111     -0.241930     -0.218681      0.218681       167.732       167.951    
  32  0.290774      -1.23521      -1.11651       1.11651       169.155       170.272    
  33  0.104031E-01  -4.56565      -4.12690       4.12690       169.081       173.208    
  34  0.323461      -1.12868      -1.02021       1.02021       168.511       169.531    
  35  0.893855     -0.112211     -0.101428      0.101428       169.690       169.792    
  36  0.826277     -0.190825     -0.172487      0.172487       170.115       170.288    
  37  0.808540     -0.212526     -0.192102      0.192102       169.673       169.865    
  38  0.597949     -0.514250     -0.464831      0.464831       170.267       170.732    
  39  0.510806     -0.671765     -0.607210      0.607210       170.242       170.849    
  40  0.346778      -1.05907     -0.957295      0.957295       170.691       171.649    
  41  0.835924     -0.179217     -0.161995      0.161995       170.446       170.608    
  42  0.449041     -0.800642     -0.723701      0.723701       171.377       172.101    
  43  0.951740     -0.494638E-01 -0.447104E-01  0.447104E-01   169.699       169.744    
  44  0.788207     -0.237994     -0.215123      0.215123       171.506       171.721    
  45  0.899830     -0.105549     -0.954060E-01  0.954060E-01   171.345       171.440    
  46  0.326955      -1.11793      -1.01050       1.01050       171.815       172.826    
  47  0.882768     -0.124693     -0.112710      0.112710       170.984       171.097    
  48  0.285151      -1.25474      -1.13416       1.13416       171.909       173.043    
  49  0.465811     -0.763976     -0.690559      0.690559       172.127       172.818    
  50  0.528398     -0.637906     -0.576605      0.576605       172.255       172.831    
  51  0.402439     -0.910212     -0.822742      0.822742       172.139       172.962    
  52  0.516797     -0.660106     -0.596671      0.596671       172.116       172.713    
  53  0.291612      -1.23233      -1.11391       1.11391       172.658       173.772    
  54  0.710526E-01  -2.64433      -2.39022       2.39022       172.730       175.120    
  55  0.586566     -0.533470     -0.482205      0.482205       172.689       173.171    
  56  0.208726      -1.56673      -1.41617       1.41617       171.324       172.740    
  57  0.105633      -2.24778      -2.03177       2.03177       172.767       174.799    
  58  0.487086     -0.719315     -0.650190      0.650190       171.272       171.923    
  59  0.861544E-01  -2.45161      -2.21602       2.21602       172.969       175.185    
  60  0.560808     -0.578377     -0.522795      0.522795       173.495       174.018    
  61  0.240391      -1.42549      -1.28850       1.28850       168.194       169.483    
  62  0.563178     -0.574160     -0.518984      0.518984       172.968       173.487    
  63  0.956338     -0.446434E-01 -0.403532E-01  0.403532E-01   172.252       172.293    
  64  0.721437     -0.326510     -0.295133      0.295133       173.404       173.699    
  65  0.624100     -0.471445     -0.426140      0.426140       173.924       174.350    
  66  0.181326      -1.70746      -1.54337       1.54337       171.708       173.252    
  67  0.932464     -0.699245E-01 -0.632049E-01  0.632049E-01   171.873       171.936    
  68  0.649711     -0.431227     -0.389787      0.389787       174.348       174.737    
  69  0.812494     -0.207647     -0.187692      0.187692       173.929       174.117    
  70  0.962133     -0.386026E-01 -0.348930E-01  0.348930E-01   173.636       173.671    
  71  0.261331E-02  -5.94714      -5.37563       5.37563       175.782       181.157    
  72  0.204128      -1.58901      -1.43631       1.43631       171.154       172.591    
loop,thermsimp(1:2)       44  0.442625E-01  0.130014    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    542        174.20          0.84          1.11         24.99          0.19          0.04         27.17
Just calling func    0   0         27.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       44
neval is:      541
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       45
neval is:      541


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      541     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.376954     -0.975632     -0.881875      0.881875       158.266       159.147    
   2  0.970379     -0.300689E-01 -0.271793E-01  0.271793E-01   164.308       164.336    
   3  0.739910     -0.301226     -0.272279      0.272279       164.052       164.324    
   4  0.489862     -0.713632     -0.645053      0.645053       164.381       165.026    
   5  0.379134     -0.969864     -0.876662      0.876662       164.098       164.975    
   6  0.798443     -0.225092     -0.203461      0.203461       164.407       164.610    
   7  0.183696      -1.69447      -1.53164       1.53164       164.315       165.846    
   8  0.860311E-01  -2.45305      -2.21731       2.21731       164.864       167.082    
   9  0.604626     -0.503146     -0.454794      0.454794       164.616       165.070    
  10  0.812784     -0.207290     -0.187370      0.187370       165.135       165.322    
  11  0.364990      -1.00789     -0.911029      0.911029       165.463       166.374    
  12  0.262253      -1.33845      -1.20982       1.20982       166.458       167.668    
  13  0.135773      -1.99677      -1.80488       1.80488       166.967       168.772    
  14  0.700444     -0.356041     -0.321826      0.321826       167.155       167.476    
  15  0.638152     -0.449179     -0.406013      0.406013       167.592       167.998    
  16  0.209521      -1.56293      -1.41274       1.41274       167.732       169.145    
  17  0.512323     -0.668800     -0.604529      0.604529       166.987       167.591    
  18  0.695748E-01  -2.66535      -2.40922       2.40922       167.454       169.864    
  19  0.903499     -0.101480     -0.917283E-01  0.917283E-01   167.868       167.959    
  20  0.374772     -0.981437     -0.887123      0.887123       167.315       168.202    
  21  0.505287     -0.682628     -0.617028      0.617028       168.506       169.123    
  22  0.738930     -0.302553     -0.273478      0.273478       166.847       167.120    
  23  0.210129      -1.56004      -1.41012       1.41012       168.270       169.680    
  24  0.438378     -0.824674     -0.745424      0.745424       168.307       169.052    
  25  0.180862      -1.71002      -1.54569       1.54569       169.047       170.593    
  26  0.784296E-01  -2.54555      -2.30093       2.30093       166.774       169.074    
  27  0.164311      -1.80600      -1.63244       1.63244       168.913       170.545    
  28  0.481806     -0.730213     -0.660041      0.660041       168.424       169.084    
  29  0.278624      -1.27789      -1.15509       1.15509       168.194       169.349    
  30  0.206818      -1.57592      -1.42447       1.42447       168.511       169.935    
  31  0.359834      -1.02211     -0.923890      0.923890       169.125       170.049    
  32  0.304083      -1.19045      -1.07605       1.07605       169.699       170.775    
  33  0.592687E-01  -2.82567      -2.55413       2.55413       169.690       172.244    
  34  0.422819     -0.860810     -0.778088      0.778088       169.673       170.451    
  35  0.575712     -0.552148     -0.499088      0.499088       169.155       169.654    
  36  0.713361     -0.337767     -0.305308      0.305308       170.115       170.420    
  37  0.414737     -0.880111     -0.795534      0.795534       166.873       167.668    
  38  0.595127     -0.518981     -0.469107      0.469107       170.446       170.916    
  39  0.528961     -0.636840     -0.575641      0.575641       170.267       170.843    
  40  0.330842E-01  -3.40870      -3.08113       3.08113       170.242       173.323    
  41  0.196030      -1.62949      -1.47289       1.47289       168.966       170.439    
  42  0.599669     -0.511377     -0.462234      0.462234       170.984       171.446    
  43  0.204430      -1.58753      -1.43497       1.43497       171.345       172.780    
  44  0.567184E-01  -2.86966      -2.59389       2.59389       170.691       173.285    
  45  0.965619     -0.349858E-01 -0.316237E-01  0.316237E-01   171.506       171.537    
  46  0.679347E-01  -2.68921      -2.43078       2.43078       171.272       173.703    
  47  0.539047     -0.617952     -0.558568      0.558568       171.873       172.431    
  48  0.898468     -0.107064     -0.967753E-01  0.967753E-01   171.377       171.474    
  49  0.212143      -1.55049      -1.40149       1.40149       172.252       173.654    
  50  0.161339      -1.82425      -1.64894       1.64894       171.154       172.803    
  51  0.663350     -0.410453     -0.371009      0.371009       172.116       172.487    
  52  0.426901     -0.851203     -0.769404      0.769404       171.324       172.093    
  53  0.812732     -0.207354     -0.187427      0.187427       172.127       172.315    
  54  0.735441     -0.307285     -0.277755      0.277755       171.815       172.093    
  55  0.442393     -0.815556     -0.737182      0.737182       172.255       172.992    
  56  0.181350      -1.70733      -1.54325       1.54325       172.139       173.683    
  57  0.735591     -0.307081     -0.277571      0.277571       171.909       172.186    
  58  0.452666     -0.792601     -0.716433      0.716433       172.689       173.406    
  59  0.244433      -1.40881      -1.27343       1.27343       169.081       170.355    
  60  0.801198     -0.221647     -0.200347      0.200347       171.708       171.909    
  61  0.103527      -2.26793      -2.04998       2.04998       172.968       175.018    
  62  0.337287      -1.08682     -0.982380      0.982380       173.636       174.619    
  63  0.224010      -1.49606      -1.35229       1.35229       173.404       174.756    
  64  0.735918     -0.306636     -0.277169      0.277169       172.658       172.936    
  65  0.528026     -0.638610     -0.577240      0.577240       173.495       174.073    
  66  0.799109     -0.224258     -0.202707      0.202707       173.929       174.132    
  67  0.284563E-01  -3.55938      -3.21733       3.21733       173.924       177.142    
  68  0.586968E-01  -2.83537      -2.56289       2.56289       174.348       176.911    
  69  0.496086E-01  -3.00359      -2.71495       2.71495       172.767       175.482    
  70  0.196405      -1.62757      -1.47117       1.47117       172.730       174.201    
  71  0.245812      -1.40319      -1.26834       1.26834       172.969       174.238    
  72  0.305507E-01  -3.48837      -3.15314       3.15314       174.199       177.352    
loop,thermsimp(1:2)       45  0.881875      0.271793E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    543        175.78          0.84          1.11         25.03          0.20          0.05         27.23
Just calling func    0   0         27.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       45
neval is:      542
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       46
neval is:      542


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      542     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411150     -0.888798     -0.803386      0.803386       158.266       159.069    
   2  0.587516     -0.531852     -0.480742      0.480742       164.052       164.533    
   3  0.244478      -1.40863      -1.27326       1.27326       164.308       165.582    
   4  0.668247     -0.403097     -0.364360      0.364360       164.407       164.771    
   5  0.364677      -1.00874     -0.911805      0.911805       164.098       165.010    
   6  0.953446     -0.476724E-01 -0.430911E-01  0.430911E-01   164.381       164.424    
   7  0.416430E-01  -3.17862      -2.87316       2.87316       164.616       167.489    
   8  0.899897     -0.105475     -0.953392E-01  0.953392E-01   165.135       165.230    
   9  0.553517     -0.591462     -0.534623      0.534623       164.315       164.849    
  10  0.465198     -0.765293     -0.691749      0.691749       165.463       166.154    
  11  0.109571      -2.21119      -1.99869       1.99869       164.864       166.863    
  12  0.905990     -0.987273E-01 -0.892398E-01  0.892398E-01   166.847       166.936    
  13  0.734904     -0.308015     -0.278415      0.278415       167.155       167.433    
  14  0.761233     -0.272816     -0.246599      0.246599       166.987       167.234    
  15  0.530098     -0.634694     -0.573701      0.573701       166.458       167.032    
  16  0.120202      -2.11858      -1.91499       1.91499       166.873       168.788    
  17  0.923613     -0.794620E-01 -0.718258E-01  0.718258E-01   167.868       167.939    
  18  0.527375     -0.639843     -0.578355      0.578355       167.592       168.170    
  19  0.301711E-01  -3.50087      -3.16444       3.16444       167.315       170.480    
  20  0.943751     -0.578930E-01 -0.523296E-01  0.523296E-01   166.967       167.020    
  21  0.852516     -0.159564     -0.144230      0.144230       168.307       168.451    
  22  0.689783     -0.371378     -0.335689      0.335689       166.774       167.109    
  23  0.679926     -0.385771     -0.348699      0.348699       168.424       168.773    
  24  0.492544     -0.708171     -0.640117      0.640117       168.506       169.146    
  25  0.677731     -0.389005     -0.351622      0.351622       167.732       168.084    
  26  0.945293     -0.562607E-01 -0.508542E-01  0.508542E-01   168.194       168.245    
  27  0.926517     -0.763224E-01 -0.689879E-01  0.689879E-01   169.155       169.224    
  28  0.188178      -1.67037      -1.50985       1.50985       168.270       169.780    
  29  0.714898     -0.335615     -0.303363      0.303363       167.454       167.758    
  30  0.533411     -0.628463     -0.568068      0.568068       168.511       169.079    
  31  0.957718     -0.432023E-01 -0.390506E-01  0.390506E-01   169.125       169.164    
  32  0.385252     -0.953858     -0.862194      0.862194       169.081       169.943    
  33  0.950314     -0.509632E-01 -0.460657E-01  0.460657E-01   170.115       170.161    
  34  0.342902      -1.07031     -0.967456      0.967456       168.966       169.934    
  35  0.591435     -0.525204     -0.474733      0.474733       169.673       170.147    
  36  0.303703      -1.19170      -1.07718       1.07718       168.913       169.990    
  37  0.588332     -0.530464     -0.479487      0.479487       169.047       169.527    
  38  0.358881      -1.02477     -0.926287      0.926287       169.699       170.625    
  39  0.394022     -0.931349     -0.841848      0.841848       170.267       171.109    
  40  0.250643      -1.38373      -1.25075       1.25075       170.446       171.697    
  41  0.513924     -0.665680     -0.601709      0.601709       170.984       171.586    
  42  0.585127     -0.535927     -0.484425      0.484425       171.377       171.862    
  43  0.857115     -0.154183     -0.139366      0.139366       171.506       171.645    
  44  0.112453      -2.18522      -1.97522       1.97522       171.708       173.684    
  45  0.371545     -0.990085     -0.894940      0.894940       171.815       172.710    
  46  0.687662     -0.374457     -0.338473      0.338473       171.324       171.663    
  47  0.668495     -0.402726     -0.364024      0.364024       171.909       172.273    
  48  0.826390     -0.190688     -0.172363      0.172363       169.690       169.863    
  49  0.966739     -0.338270E-01 -0.305763E-01  0.305763E-01   172.127       172.158    
  50  0.398653     -0.919664     -0.831285      0.831285       171.873       172.704    
  51  0.452270E-01  -3.09606      -2.79853       2.79853       172.116       174.915    
  52  0.663631     -0.410029     -0.370626      0.370626       171.345       171.715    
  53  0.634192     -0.455403     -0.411640      0.411640       171.154       171.566    
  54  0.506407     -0.680414     -0.615027      0.615027       172.658       173.273    
  55  0.797944     -0.225717     -0.204026      0.204026       172.255       172.459    
  56  0.738742     -0.302806     -0.273707      0.273707       170.691       170.965    
  57  0.485498     -0.722580     -0.653141      0.653141       170.242       170.895    
  58  0.862862     -0.147501     -0.133326      0.133326       172.689       172.823    
  59  0.812637     -0.207470     -0.187533      0.187533       172.252       172.440    
  60  0.973888     -0.264594E-01 -0.239167E-01  0.239167E-01   172.139       172.163    
  61  0.440908     -0.818920     -0.740223      0.740223       171.272       172.013    
  62  0.636179     -0.452276     -0.408813      0.408813       173.495       173.904    
  63  0.785731     -0.241140     -0.217967      0.217967       173.929       174.147    
  64  0.933458     -0.688597E-01 -0.622424E-01  0.622424E-01   172.730       172.792    
  65  0.231525      -1.46307      -1.32247       1.32247       172.969       174.292    
  66  0.557774     -0.583801     -0.527698      0.527698       173.636       174.164    
  67  0.635550     -0.453265     -0.409707      0.409707       173.404       173.814    
  68  0.387006     -0.949315     -0.858088      0.858088       172.968       173.826    
  69  0.366671      -1.00329     -0.906877      0.906877       172.767       173.674    
  70  0.162623      -1.81632      -1.64178       1.64178       174.348       175.989    
  71  0.501697     -0.689759     -0.623475      0.623475       173.924       174.548    
  72  0.205637      -1.58164      -1.42965       1.42965       175.782       177.211    
loop,thermsimp(1:2)       46  0.803386      0.480742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    544        174.20          0.83          1.11         25.09          0.14          0.04         27.22
Just calling func    0   0         27.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       46
neval is:      543
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       47
neval is:      543


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      543     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.150109      -1.89639      -1.71415       1.71415       158.266       159.980    
   2  0.239258      -1.43021      -1.29277       1.29277       164.381       165.674    
   3  0.668620     -0.402540     -0.363856      0.363856       164.052       164.416    
   4  0.966081     -0.345073E-01 -0.311912E-01  0.311912E-01   164.407       164.438    
   5  0.923150     -0.799638E-01 -0.722794E-01  0.722794E-01   164.315       164.387    
   6  0.341268      -1.07509     -0.971774      0.971774       164.098       165.070    
   7  0.810762     -0.209780     -0.189621      0.189621       165.135       165.324    
   8  0.936610     -0.654881E-01 -0.591948E-01  0.591948E-01   164.308       164.368    
   9  0.841905     -0.172088     -0.155551      0.155551       165.463       165.618    
  10  0.289300      -1.24029      -1.12110       1.12110       164.864       165.985    
  11  0.384787E-01  -3.25765      -2.94459       2.94459       166.847       169.792    
  12  0.633639E-01  -2.75886      -2.49374       2.49374       166.967       169.461    
  13  0.574893     -0.553572     -0.500374      0.500374       166.458       166.959    
  14  0.983093E-01  -2.31964      -2.09672       2.09672       166.774       168.870    
  15  0.224987      -1.49171      -1.34836       1.34836       166.987       168.335    
  16  0.805566     -0.216210     -0.195433      0.195433       167.155       167.350    
  17  0.431600     -0.840255     -0.759508      0.759508       164.616       165.375    
  18  0.495594     -0.701997     -0.634537      0.634537       167.454       168.089    
  19  0.127775      -2.05749      -1.85977       1.85977       167.868       169.727    
  20  0.146938      -1.91775      -1.73345       1.73345       167.732       169.466    
  21  0.538937     -0.618156     -0.558752      0.558752       167.592       168.151    
  22  0.811785     -0.208520     -0.188482      0.188482       168.194       168.382    
  23  0.224452      -1.49409      -1.35051       1.35051       168.307       169.657    
  24  0.739023     -0.302426     -0.273363      0.273363       168.424       168.698    
  25  0.608338     -0.497025     -0.449262      0.449262       166.873       167.322    
  26  0.818725     -0.200007     -0.180787      0.180787       168.511       168.691    
  27  0.434351     -0.833902     -0.753765      0.753765       168.506       169.259    
  28  0.874879     -0.133669     -0.120824      0.120824       169.125       169.246    
  29  0.478311     -0.737495     -0.666623      0.666623       169.155       169.822    
  30  0.420407     -0.866533     -0.783260      0.783260       169.047       169.830    
  31  0.803536     -0.218734     -0.197714      0.197714       168.270       168.468    
  32  0.375583E-01  -3.28186      -2.96648       2.96648       169.690       172.657    
  33  0.520223     -0.653499     -0.590698      0.590698       168.966       169.557    
  34  0.902726     -0.102336     -0.925017E-01  0.925017E-01   169.081       169.174    
  35  0.510519     -0.672327     -0.607717      0.607717       168.913       169.520    
  36  0.896421     -0.109346     -0.988376E-01  0.988376E-01   169.673       169.771    
  37  0.478401     -0.737305     -0.666451      0.666451       170.115       170.782    
  38  0.440189     -0.820550     -0.741696      0.741696       167.315       168.057    
  39  0.187305      -1.67502      -1.51405       1.51405       169.699       171.213    
  40  0.997827     -0.217544E-02 -0.196639E-02  0.196639E-02   170.242       170.244    
  41  0.453294     -0.791215     -0.715180      0.715180       170.691       171.406    
  42  0.143844E-01  -4.24161      -3.83400       3.83400       170.267       174.101    
  43  0.735772     -0.306835     -0.277348      0.277348       171.154       171.432    
  44  0.184631E-01  -3.99198      -3.60836       3.60836       170.984       174.592    
  45  0.217662      -1.52481      -1.37828       1.37828       171.506       172.884    
  46  0.461473     -0.773332     -0.699016      0.699016       171.324       172.023    
  47  0.669168     -0.401720     -0.363115      0.363115       170.446       170.810    
  48  0.436785     -0.828315     -0.748715      0.748715       171.345       172.093    
  49  0.518540     -0.656738     -0.593626      0.593626       171.377       171.971    
  50  0.780680     -0.247590     -0.223797      0.223797       171.272       171.496    
  51  0.568391E-01  -2.86753      -2.59197       2.59197       172.127       174.719    
  52  0.794275     -0.230325     -0.208191      0.208191       172.139       172.348    
  53  0.724306     -0.322542     -0.291546      0.291546       171.909       172.200    
  54  0.935171     -0.670255E-01 -0.605845E-01  0.605845E-01   172.252       172.313    
  55  0.451996     -0.794081     -0.717771      0.717771       172.255       172.973    
  56  0.297965      -1.21078      -1.09442       1.09442       171.873       172.967    
  57  0.974843     -0.254791E-01 -0.230306E-01  0.230306E-01   171.815       171.838    
  58  0.199050      -1.61420      -1.45908       1.45908       172.730       174.189    
  59  0.846849E-01  -2.46882      -2.23157       2.23157       172.689       174.921    
  60  0.905790     -0.989476E-01 -0.894389E-01  0.894389E-01   172.658       172.748    
  61  0.150862      -1.89139      -1.70963       1.70963       172.767       174.477    
  62  0.488744E-01  -3.01850      -2.72843       2.72843       171.708       174.437    
  63  0.445127     -0.809396     -0.731614      0.731614       173.404       174.136    
  64  0.382118     -0.962027     -0.869578      0.869578       172.968       173.837    
  65  0.153447      -1.87440      -1.69427       1.69427       173.495       175.190    
  66  0.553379     -0.591713     -0.534850      0.534850       173.929       174.464    
  67  0.985225     -0.148853E-01 -0.134548E-01  0.134548E-01   173.636       173.650    
  68  0.358988      -1.02447     -0.926016      0.926016       172.969       173.895    
  69  0.314526      -1.15669      -1.04553       1.04553       173.924       174.970    
  70  0.475443     -0.743508     -0.672058      0.672058       172.116       172.788    
  71  0.565953     -0.569245     -0.514541      0.514541       174.348       174.862    
  72  0.140375      -1.96343      -1.77475       1.77475       174.199       175.974    
loop,thermsimp(1:2)       47   1.71415       1.29277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    545        175.78          0.84          1.11         25.21          0.06          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       47
neval is:      544
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       48
neval is:      544


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      544     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.428946     -0.846425     -0.765085      0.765085       158.266       159.031    
   2  0.178225      -1.72471      -1.55896       1.55896       164.308       165.867    
   3  0.309460      -1.17293      -1.06021       1.06021       164.315       165.375    
   4  0.769202     -0.262402     -0.237186      0.237186       164.052       164.289    
   5  0.867155     -0.142538     -0.128840      0.128840       164.407       164.536    
   6  0.842618     -0.171242     -0.154786      0.154786       164.098       164.253    
   7  0.887101     -0.119796     -0.108284      0.108284       165.135       165.243    
   8  0.293963E-01  -3.52689      -3.18796       3.18796       164.616       167.803    
   9  0.388864     -0.944525     -0.853758      0.853758       165.463       166.316    
  10  0.841345E-01  -2.47534      -2.23746       2.23746       164.381       166.619    
  11  0.764016     -0.269167     -0.243300      0.243300       164.864       165.108    
  12  0.104062      -2.26277      -2.04532       2.04532       166.458       168.503    
  13  0.454454     -0.788658     -0.712869      0.712869       166.873       167.586    
  14  0.655983     -0.421620     -0.381103      0.381103       167.155       167.536    
  15  0.899303     -0.106136     -0.959363E-01  0.959363E-01   167.315       167.411    
  16  0.566529     -0.568226     -0.513621      0.513621       167.454       167.968    
  17  0.391578     -0.937570     -0.847471      0.847471       167.592       168.440    
  18  0.743184     -0.296811     -0.268288      0.268288       166.987       167.255    
  19  0.811693     -0.208633     -0.188584      0.188584       168.194       168.383    
  20  0.608274     -0.497129     -0.449356      0.449356       168.270       168.719    
  21  0.786531     -0.240123     -0.217048      0.217048       168.511       168.728    
  22  0.257200      -1.35790      -1.22741       1.22741       168.424       169.652    
  23  0.369774     -0.994862     -0.899257      0.899257       166.774       167.673    
  24  0.955329     -0.456994E-01 -0.413078E-01  0.413078E-01   169.081       169.122    
  25  0.428185     -0.848200     -0.766689      0.766689       169.125       169.891    
  26  0.969522     -0.309523E-01 -0.279778E-01  0.279778E-01   168.506       168.534    
  27  0.457112E-01  -3.08541      -2.78891       2.78891       166.967       169.756    
  28  0.126346      -2.06873      -1.86993       1.86993       167.732       169.602    
  29  0.979821     -0.203853E-01 -0.184263E-01  0.184263E-01   168.913       168.931    
  30  0.249987      -1.38635      -1.25312       1.25312       168.966       170.219    
  31  0.100726      -2.29535      -2.07477       2.07477       168.307       170.382    
  32  0.563310     -0.573925     -0.518772      0.518772       167.868       168.386    
  33  0.601320     -0.508628     -0.459749      0.459749       169.673       170.132    
  34  0.850177E-01  -2.46490      -2.22802       2.22802       166.847       169.075    
  35  0.176521      -1.73432      -1.56765       1.56765       169.155       170.723    
  36  0.254061      -1.37018      -1.23851       1.23851       169.047       170.286    
  37  0.540097     -0.616006     -0.556809      0.556809       170.242       170.799    
  38  0.983165E-01  -2.31956      -2.09666       2.09666       170.115       172.212    
  39  0.729520     -0.315369     -0.285063      0.285063       170.446       170.731    
  40  0.847608E-01  -2.46792      -2.23076       2.23076       169.699       171.930    
  41  0.791981     -0.233218     -0.210806      0.210806       170.691       170.902    
  42  0.117343E-01  -4.44524      -4.01805       4.01805       171.154       175.172    
  43  0.469135     -0.756864     -0.684131      0.684131       171.272       171.957    
  44  0.221703E-01  -3.80900      -3.44296       3.44296       171.815       175.258    
  45  0.234879      -1.44868      -1.30947       1.30947       171.377       172.687    
  46  0.854627     -0.157091     -0.141994      0.141994       171.324       171.466    
  47  0.664467E-01  -2.71135      -2.45080       2.45080       171.345       173.795    
  48  0.209505      -1.56301      -1.41280       1.41280       171.909       173.322    
  49  0.507833     -0.677603     -0.612486      0.612486       172.252       172.865    
  50  0.987418     -0.126621E-01 -0.114453E-01  0.114453E-01   172.139       172.151    
  51  0.818705E-01  -2.50262      -2.26212       2.26212       169.690       171.952    
  52  0.112517      -2.18465      -1.97471       1.97471       172.658       174.633    
  53  0.475812E-01  -3.04532      -2.75267       2.75267       172.116       174.869    
  54  0.538665     -0.618662     -0.559210      0.559210       171.506       172.065    
  55  0.236754      -1.44073      -1.30228       1.30228       171.873       173.175    
  56  0.723834     -0.323194     -0.292135      0.292135       172.255       172.547    
  57  0.903389E-01  -2.40419      -2.17315       2.17315       173.636       175.810    
  58  0.469316     -0.756479     -0.683783      0.683783       172.968       173.651    
  59  0.927373     -0.753996E-01 -0.681539E-01  0.681539E-01   172.969       173.038    
  60  0.672124     -0.397313     -0.359132      0.359132       170.267       170.626    
  61  0.818577     -0.200187     -0.180950      0.180950       173.404       173.585    
  62  0.329125E-01  -3.41390      -3.08583       3.08583       172.730       175.816    
  63  0.730039     -0.314657     -0.284419      0.284419       171.708       171.993    
  64  0.659636E-01  -2.71865      -2.45739       2.45739       173.929       176.386    
  65  0.883589     -0.123763     -0.111870      0.111870       172.767       172.879    
  66  0.366276      -1.00437     -0.907849      0.907849       170.984       171.892    
  67  0.913092     -0.909182E-01 -0.821811E-01  0.821811E-01   172.127       172.209    
  68  0.820111     -0.198316     -0.179258      0.179258       174.348       174.527    
  69  0.583102     -0.539393     -0.487558      0.487558       172.689       173.177    
  70  0.165327      -1.79983      -1.62687       1.62687       173.924       175.551    
  71  0.630720     -0.460893     -0.416602      0.416602       173.495       173.912    
  72  0.687703     -0.374398     -0.338419      0.338419       175.782       176.120    
loop,thermsimp(1:2)       48  0.765085       1.55896    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    546        174.08          0.84          1.11         24.98          0.21          0.05         27.18
Just calling func    0   0         27.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       48
neval is:      545
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       49
neval is:      545


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      545     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822318     -0.195628     -0.176829      0.176829       158.266       158.442    
   2  0.715748     -0.334427     -0.302289      0.302289       164.098       164.401    
   3  0.155171      -1.86323      -1.68417       1.68417       164.052       165.736    
   4  0.248285      -1.39318      -1.25929       1.25929       164.407       165.666    
   5  0.893479E-01  -2.41522      -2.18312       2.18312       164.864       167.048    
   6  0.807784     -0.213461     -0.192948      0.192948       165.135       165.328    
   7  0.765394     -0.267364     -0.241671      0.241671       164.315       164.556    
   8  0.465295     -0.765084     -0.691560      0.691560       164.308       165.000    
   9  0.310822      -1.16853      -1.05624       1.05624       165.463       166.519    
  10  0.405006     -0.903853     -0.816994      0.816994       164.381       165.198    
  11  0.230891      -1.46581      -1.32495       1.32495       166.987       168.312    
  12  0.952479     -0.486868E-01 -0.440081E-01  0.440081E-01   167.315       167.359    
  13  0.608237     -0.497191     -0.449411      0.449411       167.155       167.604    
  14  0.870899     -0.138230     -0.124946      0.124946       166.873       166.998    
  15  0.175493      -1.74016      -1.57293       1.57293       166.774       168.346    
  16  0.529821     -0.635216     -0.574173      0.574173       164.616       165.190    
  17  0.596933     -0.515951     -0.466369      0.466369       167.454       167.921    
  18  0.380761     -0.965584     -0.872793      0.872793       168.194       169.067    
  19  0.572545     -0.557664     -0.504074      0.504074       167.868       168.372    
  20  0.503826     -0.685525     -0.619647      0.619647       167.592       168.212    
  21  0.712520     -0.338948     -0.306376      0.306376       166.458       166.765    
  22  0.455917     -0.785445     -0.709965      0.709965       168.506       169.216    
  23  0.546601     -0.604037     -0.545990      0.545990       168.270       168.816    
  24  0.780368     -0.247990     -0.224158      0.224158       168.511       168.735    
  25  0.360382      -1.02059     -0.922514      0.922514       168.913       169.835    
  26  0.365688      -1.00598     -0.909303      0.909303       166.847       167.756    
  27  0.471917     -0.750951     -0.678786      0.678786       169.081       169.760    
  28  0.774681     -0.255304     -0.230770      0.230770       167.732       167.963    
  29  0.514822     -0.663934     -0.600131      0.600131       168.424       169.024    
  30  0.936706     -0.653859E-01 -0.591025E-01  0.591025E-01   166.967       167.027    
  31  0.611289     -0.492185     -0.444887      0.444887       169.125       169.570    
  32  0.138276      -1.97851      -1.78837       1.78837       169.673       171.461    
  33  0.547999E-01  -2.90407      -2.62499       2.62499       168.966       171.591    
  34  0.739054E-01  -2.60497      -2.35464       2.35464       169.047       171.402    
  35  0.230637E-01  -3.76949      -3.40725       3.40725       168.307       171.714    
  36  0.294564E-01  -3.52484      -3.18611       3.18611       170.267       173.453    
  37  0.331008      -1.10561     -0.999366      0.999366       169.155       170.155    
  38  0.656803     -0.420372     -0.379974      0.379974       170.446       170.826    
  39  0.869431     -0.139917     -0.126471      0.126471       170.242       170.368    
  40  0.783501     -0.243983     -0.220536      0.220536       170.691       170.912    
  41  0.737192     -0.304907     -0.275606      0.275606       171.324       171.600    
  42  0.326415      -1.11959      -1.01200       1.01200       170.984       171.996    
  43  0.430213     -0.843476     -0.762419      0.762419       169.699       170.461    
  44  0.396582     -0.924872     -0.835993      0.835993       169.690       170.526    
  45  0.368807     -0.997482     -0.901625      0.901625       171.272       172.174    
  46  0.922518     -0.806483E-01 -0.728981E-01  0.728981E-01   171.708       171.781    
  47  0.106607      -2.23861      -2.02348       2.02348       171.506       173.529    
  48  0.389788     -0.942153     -0.851614      0.851614       172.139       172.991    
  49  0.521480     -0.651085     -0.588517      0.588517       172.127       172.716    
  50  0.275785      -1.28813      -1.16435       1.16435       170.115       171.280    
  51  0.973600     -0.267545E-01 -0.241834E-01  0.241834E-01   172.255       172.279    
  52  0.270717      -1.30668      -1.18111       1.18111       171.377       172.558    
  53  0.271460      -1.30394      -1.17863       1.17863       172.252       173.431    
  54  0.740973     -0.299791     -0.270981      0.270981       172.767       173.038    
  55  0.567806     -0.565975     -0.511586      0.511586       172.969       173.481    
  56  0.959778     -0.410536E-01 -0.371084E-01  0.371084E-01   171.873       171.910    
  57  0.186384      -1.67994      -1.51850       1.51850       172.689       174.208    
  58  0.618696     -0.480141     -0.434000      0.434000       171.909       172.343    
  59  0.518830     -0.656180     -0.593122      0.593122       173.404       173.997    
  60  0.639507     -0.447057     -0.404096      0.404096       172.968       173.372    
  61  0.340583      -1.07710     -0.973590      0.973590       171.345       172.318    
  62  0.635751     -0.452948     -0.409420      0.409420       173.495       173.905    
  63  0.241795      -1.41966      -1.28324       1.28324       174.348       175.631    
  64  0.552642     -0.593046     -0.536055      0.536055       172.658       173.194    
  65  0.936199     -0.659267E-01 -0.595913E-01  0.595913E-01   172.116       172.176    
  66  0.822529     -0.195372     -0.176597      0.176597       171.154       171.331    
  67  0.748907     -0.289140     -0.261354      0.261354       171.815       172.077    
  68  0.714061     -0.336787     -0.304422      0.304422       173.924       174.229    
  69  0.936564     -0.655370E-01 -0.592390E-01  0.592390E-01   173.636       173.696    
  70  0.356834      -1.03048     -0.931457      0.931457       172.730       173.661    
  71  0.719720     -0.328892     -0.297286      0.297286       175.782       176.079    
  72  0.739250     -0.302120     -0.273086      0.273086       174.078       174.351    
loop,thermsimp(1:2)       49  0.176829      0.302289    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    547        175.00          0.84          1.11         25.05          0.19          0.05         27.24
Just calling func    0   0         27.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       49
neval is:      546
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       50
neval is:      546


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      546     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255294      -1.36534      -1.23413       1.23413       158.266       159.500    
   2  0.413516     -0.883059     -0.798198      0.798198       164.098       164.897    
   3  0.223595      -1.49792      -1.35397       1.35397       164.315       165.669    
   4  0.714947     -0.335546     -0.303301      0.303301       164.308       164.612    
   5  0.331136      -1.10523     -0.999016      0.999016       164.616       165.615    
   6  0.910877     -0.933475E-01 -0.843769E-01  0.843769E-01   164.381       164.466    
   7  0.576816E-01  -2.85282      -2.57867       2.57867       165.135       167.713    
   8  0.130224      -2.03850      -1.84260       1.84260       164.407       166.250    
   9  0.739903     -0.301236     -0.272288      0.272288       164.052       164.324    
  10  0.930449     -0.720877E-01 -0.651602E-01  0.651602E-01   165.463       165.528    
  11  0.471320     -0.752217     -0.679930      0.679930       166.458       167.138    
  12  0.427577     -0.849620     -0.767973      0.767973       166.873       167.641    
  13  0.519295     -0.655284     -0.592312      0.592312       166.967       167.560    
  14  0.157743      -1.84679      -1.66931       1.66931       164.864       166.534    
  15  0.408052     -0.896360     -0.810222      0.810222       167.315       168.125    
  16  0.784179     -0.243118     -0.219755      0.219755       167.155       167.374    
  17  0.932934     -0.694213E-01 -0.627500E-01  0.627500E-01   166.847       166.910    
  18  0.602319     -0.506968     -0.458249      0.458249       167.454       167.913    
  19  0.792109     -0.233056     -0.210660      0.210660       167.732       167.943    
  20  0.916935     -0.867189E-01 -0.783854E-01  0.783854E-01   167.592       167.670    
  21  0.245817      -1.40317      -1.26833       1.26833       166.987       168.255    
  22  0.722474     -0.325074     -0.293835      0.293835       166.774       167.067    
  23  0.448797     -0.801185     -0.724192      0.724192       167.868       168.592    
  24  0.147822      -1.91175      -1.72803       1.72803       168.511       170.239    
  25  0.826441     -0.190627     -0.172308      0.172308       168.270       168.442    
  26  0.136181      -1.99377      -1.80217       1.80217       168.424       170.226    
  27  0.555081     -0.588641     -0.532073      0.532073       168.194       168.726    
  28  0.421604     -0.863690     -0.780690      0.780690       168.506       169.286    
  29  0.934992     -0.672172E-01 -0.607578E-01  0.607578E-01   169.125       169.186    
  30  0.917081     -0.865597E-01 -0.782414E-01  0.782414E-01   169.081       169.159    
  31  0.211295      -1.55450      -1.40511       1.40511       168.913       170.318    
  32  0.336858      -1.08809     -0.983529      0.983529       169.155       170.139    
  33  0.210286      -1.55929      -1.40944       1.40944       170.242       171.651    
  34  0.575355     -0.552768     -0.499647      0.499647       169.699       170.199    
  35  0.822963     -0.194844     -0.176119      0.176119       169.690       169.866    
  36  0.510226E-01  -2.97549      -2.68955       2.68955       170.446       173.136    
  37  0.829304     -0.187169     -0.169182      0.169182       170.691       170.860    
  38  0.297206      -1.21333      -1.09673       1.09673       170.115       171.212    
  39  0.733070     -0.310514     -0.280674      0.280674       171.154       171.435    
  40  0.545801     -0.605502     -0.547314      0.547314       169.047       169.594    
  41  0.990988     -0.905277E-02 -0.818281E-02  0.818281E-02   169.673       169.681    
  42  0.671953     -0.397567     -0.359361      0.359361       168.966       169.326    
  43  0.594649     -0.519784     -0.469833      0.469833       171.324       171.794    
  44  0.698796     -0.358397     -0.323955      0.323955       168.307       168.631    
  45  0.703020     -0.352370     -0.318508      0.318508       171.708       172.027    
  46  0.634434     -0.455022     -0.411295      0.411295       171.873       172.284    
  47  0.691237     -0.369272     -0.333785      0.333785       170.984       171.318    
  48  0.902402     -0.102696     -0.928268E-01  0.928268E-01   171.815       171.908    
  49  0.433997     -0.834717     -0.754502      0.754502       171.272       172.027    
  50  0.593137     -0.522330     -0.472135      0.472135       172.116       172.588    
  51  0.744110     -0.295567     -0.267163      0.267163       172.255       172.522    
  52  0.804978     -0.216940     -0.196093      0.196093       171.345       171.541    
  53  0.228161      -1.47770      -1.33570       1.33570       171.909       173.245    
  54  0.906275     -0.984127E-01 -0.889554E-01  0.889554E-01   171.377       171.466    
  55  0.420606     -0.866058     -0.782831      0.782831       172.127       172.910    
  56  0.609275E-01  -2.79807      -2.52918       2.52918       172.139       174.669    
  57  0.958138     -0.427632E-01 -0.386538E-01  0.386538E-01   172.767       172.806    
  58  0.529622     -0.635592     -0.574513      0.574513       172.658       173.233    
  59  0.646076     -0.436838     -0.394859      0.394859       172.968       173.362    
  60  0.472837     -0.749005     -0.677026      0.677026       172.252       172.929    
  61  0.678092     -0.388473     -0.351141      0.351141       170.267       170.618    
  62  0.649085E-01  -2.73478      -2.47197       2.47197       172.969       175.441    
  63  0.587083E-01  -2.83517      -2.56272       2.56272       171.506       174.068    
  64  0.779281     -0.249383     -0.225418      0.225418       172.730       172.955    
  65  0.418741E-01  -3.17309      -2.86816       2.86816       173.636       176.505    
  66  0.432877     -0.837303     -0.756839      0.756839       173.495       174.252    
  67  0.550544     -0.596849     -0.539493      0.539493       173.404       173.944    
  68  0.268711      -1.31412      -1.18783       1.18783       172.689       173.877    
  69  0.150592      -1.89318      -1.71125       1.71125       173.924       175.636    
  70  0.624023     -0.471568     -0.426251      0.426251       174.078       174.504    
  71  0.651757E-01  -2.73067      -2.46825       2.46825       174.348       176.816    
  72  0.211225      -1.55483      -1.40542       1.40542       174.996       176.402    
loop,thermsimp(1:2)       50   1.23413      0.798198    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    548        175.93          0.84          1.11         25.33          0.13          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    175.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       50
neval is:      547
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       51
neval is:      547


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      547     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642127     -0.442969     -0.400400      0.400400       158.266       158.666    
   2  0.831300     -0.184764     -0.167008      0.167008       164.052       164.219    
   3  0.900454     -0.104857     -0.947800E-01  0.947800E-01   164.381       164.476    
   4  0.961218     -0.395545E-01 -0.357533E-01  0.357533E-01   164.308       164.344    
   5  0.684359     -0.379272     -0.342825      0.342825       164.098       164.441    
   6  0.717130     -0.332498     -0.300546      0.300546       165.463       165.763    
   7  0.332568      -1.10091     -0.995115      0.995115       164.616       165.611    
   8  0.733704     -0.309649     -0.279892      0.279892       164.315       164.594    
   9  0.774601E-01  -2.55799      -2.31217       2.31217       164.407       166.719    
  10  0.487558E-02  -5.32352      -4.81193       4.81193       164.864       169.676    
  11  0.239977      -1.42721      -1.29006       1.29006       166.847       168.137    
  12  0.890111     -0.116409     -0.105222      0.105222       166.774       166.879    
  13  0.429630     -0.844832     -0.763645      0.763645       166.458       167.222    
  14  0.759060     -0.275674     -0.249182      0.249182       167.155       167.404    
  15  0.173246      -1.75304      -1.58458       1.58458       166.967       168.552    
  16  0.416318     -0.876305     -0.792094      0.792094       166.873       167.665    
  17  0.109242      -2.21419      -2.00141       2.00141       167.592       169.593    
  18  0.746798     -0.291960     -0.263904      0.263904       165.135       165.399    
  19  0.276729      -1.28472      -1.16126       1.16126       167.454       168.616    
  20  0.709859     -0.342689     -0.309758      0.309758       167.732       168.042    
  21  0.924199     -0.788273E-01 -0.712521E-01  0.712521E-01   167.315       167.386    
  22  0.831505     -0.184517     -0.166786      0.166786       166.987       167.154    
  23  0.685310     -0.377884     -0.341570      0.341570       168.270       168.612    
  24  0.828829     -0.187742     -0.169700      0.169700       167.868       168.037    
  25  0.169988      -1.77203      -1.60174       1.60174       168.307       169.909    
  26  0.416558E-01  -3.17831      -2.87288       2.87288       168.194       171.067    
  27  0.248983      -1.39037      -1.25676       1.25676       169.081       170.338    
  28  0.982288     -0.178711E-01 -0.161537E-01  0.161537E-01   169.125       169.141    
  29  0.915863     -0.878881E-01 -0.794422E-01  0.794422E-01   168.506       168.585    
  30  0.325548      -1.12224      -1.01440       1.01440       168.966       169.981    
  31  0.598603     -0.513157     -0.463843      0.463843       169.047       169.511    
  32  0.509959     -0.673425     -0.608710      0.608710       169.673       170.281    
  33  0.580600     -0.543692     -0.491444      0.491444       169.690       170.182    
  34  0.917272     -0.863513E-01 -0.780531E-01  0.780531E-01   169.155       169.233    
  35  0.927434E-01  -2.37792      -2.14940       2.14940       169.699       171.848    
  36  0.176201      -1.73613      -1.56929       1.56929       168.424       169.993    
  37  0.479433     -0.735152     -0.664505      0.664505       168.511       169.175    
  38  0.258569      -1.35259      -1.22261       1.22261       168.913       170.135    
  39  0.479143     -0.735756     -0.665051      0.665051       170.267       170.932    
  40  0.167507      -1.78673      -1.61503       1.61503       170.691       172.306    
  41  0.862868     -0.147493     -0.133319      0.133319       170.115       170.249    
  42  0.492972     -0.707304     -0.639333      0.639333       170.984       171.623    
  43  0.801329     -0.221484     -0.200199      0.200199       171.154       171.354    
  44  0.246801      -1.39917      -1.26471       1.26471       171.377       172.642    
  45  0.701552     -0.354461     -0.320398      0.320398       171.345       171.665    
  46  0.814555     -0.205114     -0.185403      0.185403       170.242       170.427    
  47  0.379473     -0.968973     -0.875856      0.875856       171.324       172.200    
  48  0.428824     -0.846709     -0.765342      0.765342       171.815       172.581    
  49  0.957757     -0.431612E-01 -0.390135E-01  0.390135E-01   171.708       171.747    
  50  0.572954     -0.556949     -0.503427      0.503427       171.272       171.776    
  51  0.195151      -1.63398      -1.47696       1.47696       171.873       173.350    
  52  0.989770     -0.102824E-01 -0.929426E-02  0.929426E-02   172.255       172.264    
  53  0.390377     -0.940642     -0.850248      0.850248       172.116       172.966    
  54  0.474948     -0.744550     -0.673000      0.673000       172.767       173.440    
  55  0.371289     -0.990774     -0.895562      0.895562       172.127       173.023    
  56  0.932419     -0.699726E-01 -0.632483E-01  0.632483E-01   172.252       172.316    
  57  0.820649     -0.197660     -0.178665      0.178665       172.730       172.909    
  58  0.818465     -0.200325     -0.181074      0.181074       170.446       170.627    
  59  0.493072     -0.707099     -0.639148      0.639148       172.658       173.298    
  60  0.936419     -0.656925E-01 -0.593795E-01  0.593795E-01   171.909       171.968    
  61  0.157983      -1.84527      -1.66794       1.66794       172.968       174.636    
  62  0.414170     -0.881479     -0.796770      0.796770       172.689       173.486    
  63  0.476203     -0.741910     -0.670614      0.670614       173.404       174.075    
  64  0.981484     -0.186900E-01 -0.168939E-01  0.168939E-01   171.506       171.523    
  65  0.292285      -1.23003      -1.11182       1.11182       173.495       174.607    
  66  0.344744E-01  -3.36754      -3.04392       3.04392       174.078       177.122    
  67  0.523167     -0.647854     -0.585596      0.585596       172.139       172.725    
  68  0.642733     -0.442026     -0.399548      0.399548       172.969       173.369    
  69  0.287165      -1.24770      -1.12780       1.12780       173.924       175.052    
  70  0.129085      -2.04728      -1.85054       1.85054       174.996       176.847    
  71  0.630646     -0.461011     -0.416708      0.416708       173.636       174.053    
  72  0.821028     -0.197198     -0.178247      0.178247       175.926       176.104    
loop,thermsimp(1:2)       51  0.400400      0.167008    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    549        173.38          0.84          1.11         25.20          0.17          0.05         27.38
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    173.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       51
neval is:      548
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       52
neval is:      548


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      548     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.896160     -0.109636     -0.991005E-01  0.991005E-01   158.266       158.365    
   2  0.835424     -0.179816     -0.162536      0.162536       164.052       164.214    
   3  0.417746     -0.872882     -0.789000      0.789000       164.308       165.097    
   4  0.818506     -0.200274     -0.181028      0.181028       164.098       164.279    
   5  0.183909      -1.69331      -1.53059       1.53059       164.381       165.912    
   6  0.591356     -0.525336     -0.474852      0.474852       164.315       164.789    
   7  0.620368     -0.477443     -0.431562      0.431562       165.135       165.566    
   8  0.154560      -1.86718      -1.68774       1.68774       164.616       166.303    
   9  0.999372     -0.627923E-03 -0.567580E-03  0.567580E-03   165.463       165.463    
  10  0.862454     -0.147973     -0.133753      0.133753       164.407       164.541    
  11  0.801162     -0.221692     -0.200387      0.200387       166.774       166.974    
  12  0.148229      -1.90900      -1.72555       1.72555       166.987       168.713    
  13  0.598458     -0.513400     -0.464063      0.464063       166.458       166.922    
  14  0.417671     -0.873062     -0.789162      0.789162       167.315       168.104    
  15  0.132181      -2.02358      -1.82912       1.82912       167.155       168.984    
  16  0.633182     -0.456997     -0.413080      0.413080       166.873       167.286    
  17  0.900020     -0.105338     -0.952154E-01  0.952154E-01   167.868       167.963    
  18  0.714050     -0.336802     -0.304436      0.304436       167.732       168.037    
  19  0.523793     -0.646659     -0.584516      0.584516       166.847       167.431    
  20  0.240153E-01  -3.72906      -3.37071       3.37071       166.967       170.338    
  21  0.608931     -0.496050     -0.448380      0.448380       168.506       168.954    
  22  0.948101     -0.532939E-01 -0.481724E-01  0.481724E-01   168.270       168.318    
  23  0.266229      -1.32340      -1.19622       1.19622       167.454       168.651    
  24  0.573219     -0.556488     -0.503011      0.503011       169.125       169.628    
  25  0.349325      -1.05175     -0.950680      0.950680       168.511       169.461    
  26  0.323907      -1.12730      -1.01897       1.01897       169.155       170.174    
  27  0.795225E-01  -2.53172      -2.28842       2.28842       169.047       171.336    
  28  0.825606     -0.191637     -0.173221      0.173221       167.592       167.765    
  29  0.396524     -0.925018     -0.836125      0.836125       164.864       165.701    
  30  0.401444     -0.912687     -0.824979      0.824979       168.307       169.132    
  31  0.688595     -0.373102     -0.337247      0.337247       168.966       169.303    
  32  0.773187     -0.257234     -0.232514      0.232514       168.424       168.657    
  33  0.852559     -0.159512     -0.144183      0.144183       168.913       169.057    
  34  0.985405     -0.147025E-01 -0.132896E-01  0.132896E-01   169.690       169.703    
  35  0.556199     -0.586629     -0.530255      0.530255       170.115       170.645    
  36  0.913827     -0.901138E-01 -0.814540E-01  0.814540E-01   169.673       169.754    
  37  0.858782     -0.152240     -0.137610      0.137610       169.081       169.219    
  38  0.477249     -0.739717     -0.668631      0.668631       170.242       170.911    
  39  0.728564     -0.316680     -0.286247      0.286247       170.446       170.733    
  40  0.338280      -1.08388     -0.979723      0.979723       170.267       171.247    
  41  0.718699     -0.330313     -0.298570      0.298570       168.194       168.493    
  42  0.746009     -0.293017     -0.264859      0.264859       171.154       171.419    
  43  0.658362     -0.418001     -0.377832      0.377832       171.506       171.884    
  44  0.997855     -0.214685E-02 -0.194055E-02  0.194055E-02   170.984       170.986    
  45  0.506528     -0.680175     -0.614811      0.614811       171.345       171.959    
  46  0.808231E-01  -2.51549      -2.27376       2.27376       171.708       173.982    
  47  0.148828      -1.90497      -1.72190       1.72190       171.272       172.994    
  48  0.824318     -0.193199     -0.174633      0.174633       169.699       169.874    
  49  0.875043     -0.133482     -0.120655      0.120655       171.909       172.029    
  50  0.470042     -0.754934     -0.682386      0.682386       171.324       172.006    
  51  0.292819      -1.22820      -1.11017       1.11017       172.255       173.365    
  52  0.811396     -0.208999     -0.188914      0.188914       170.691       170.880    
  53  0.755021     -0.281010     -0.254006      0.254006       172.252       172.506    
  54  0.556253     -0.586533     -0.530168      0.530168       171.815       172.346    
  55  0.978213     -0.220282E-01 -0.199114E-01  0.199114E-01   171.377       171.397    
  56  0.636096     -0.452406     -0.408931      0.408931       172.139       172.548    
  57  0.404576     -0.904915     -0.817954      0.817954       172.730       173.548    
  58  0.300789      -1.20135      -1.08590       1.08590       172.116       173.202    
  59  0.449678     -0.799224     -0.722420      0.722420       172.127       172.850    
  60  0.519558     -0.654776     -0.591853      0.591853       172.658       173.250    
  61  0.193583      -1.64205      -1.48425       1.48425       171.873       173.357    
  62  0.846846     -0.166237     -0.150262      0.150262       172.969       173.120    
  63  0.431300     -0.840952     -0.760137      0.760137       172.767       173.528    
  64  0.350162      -1.04936     -0.948518      0.948518       172.689       173.638    
  65  0.160395E-01  -4.13270      -3.73556       3.73556       173.636       177.372    
  66  0.382694     -0.960520     -0.868216      0.868216       173.404       174.272    
  67  0.761527     -0.272430     -0.246250      0.246250       173.495       173.742    
  68  0.313790      -1.15903      -1.04765       1.04765       172.968       174.015    
  69  0.406806     -0.899420     -0.812987      0.812987       173.924       174.737    
  70  0.588890     -0.529516     -0.478630      0.478630       175.926       176.404    
  71  0.160332      -1.83051      -1.65460       1.65460       174.996       176.651    
  72  0.761845     -0.272012     -0.245872      0.245872       173.384       173.630    
loop,thermsimp(1:2)       52  0.991005E-01  0.162536    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    550        165.43          0.84          1.11         25.06          0.12          0.05         27.18
Just calling func    0   0         27.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    165.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       52
neval is:      549
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       53
neval is:      549


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      549     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.258600      -1.35247      -1.22250       1.22250       158.266       159.488    
   2  0.335714      -1.09150     -0.986606      0.986606       164.052       165.038    
   3  0.106818E-01  -4.53921      -4.10300       4.10300       164.098       168.201    
   4  0.435887     -0.830373     -0.750575      0.750575       164.407       165.157    
   5  0.776831     -0.252532     -0.228264      0.228264       164.315       164.543    
   6  0.729448     -0.315467     -0.285151      0.285151       164.308       164.593    
   7  0.616540     -0.483631     -0.437155      0.437155       165.463       165.900    
   8  0.832841     -0.182913     -0.165335      0.165335       165.135       165.300    
   9  0.673790     -0.394837     -0.356894      0.356894       164.864       165.221    
  10  0.535507     -0.624541     -0.564523      0.564523       164.381       164.946    
  11  0.396426     -0.925265     -0.836349      0.836349       164.616       165.452    
  12  0.333676      -1.09759     -0.992109      0.992109       166.458       167.450    
  13  0.562408     -0.575527     -0.520220      0.520220       166.774       167.294    
  14  0.988355     -0.117133E-01 -0.105876E-01  0.105876E-01   166.873       166.883    
  15  0.674910     -0.393176     -0.355392      0.355392       166.847       167.202    
  16  0.645375     -0.437924     -0.395840      0.395840       167.592       167.988    
  17  0.400913     -0.914011     -0.826176      0.826176       167.868       168.694    
  18  0.228290      -1.47714      -1.33519       1.33519       167.732       169.067    
  19  0.882505     -0.124991     -0.112979      0.112979       167.315       167.428    
  20  0.932806     -0.695579E-01 -0.628735E-01  0.628735E-01   168.270       168.333    
  21  0.664774     -0.408308     -0.369070      0.369070       168.194       168.563    
  22  0.559236     -0.581184     -0.525333      0.525333       167.454       167.980    
  23  0.961133     -0.396421E-01 -0.358326E-01  0.358326E-01   168.424       168.460    
  24  0.767901     -0.264095     -0.238715      0.238715       166.987       167.226    
  25  0.782742     -0.244952     -0.221413      0.221413       168.506       168.727    
  26  0.477575E-01  -3.04162      -2.74932       2.74932       167.155       169.904    
  27  0.760322     -0.274013     -0.247681      0.247681       168.913       169.160    
  28  0.498382     -0.696388     -0.629466      0.629466       168.307       168.936    
  29  0.131457      -2.02908      -1.83408       1.83408       169.081       170.915    
  30  0.689616     -0.371621     -0.335909      0.335909       168.966       169.302    
  31  0.178892E-01  -4.02356      -3.63690       3.63690       168.511       172.147    
  32  0.243405      -1.41303      -1.27724       1.27724       169.125       170.402    
  33  0.282687      -1.26341      -1.14200       1.14200       169.690       170.832    
  34  0.828546     -0.188083     -0.170009      0.170009       169.673       169.843    
  35  0.667217     -0.404640     -0.365755      0.365755       169.699       170.065    
  36  0.813372     -0.206566     -0.186716      0.186716       169.155       169.342    
  37  0.853524     -0.158382     -0.143161      0.143161       166.967       167.111    
  38  0.832184     -0.183702     -0.166049      0.166049       170.115       170.281    
  39  0.911849     -0.922808E-01 -0.834128E-01  0.834128E-01   170.446       170.530    
  40  0.258232      -1.35390      -1.22379       1.22379       170.691       171.915    
  41  0.742217     -0.298113     -0.269465      0.269465       170.242       170.511    
  42  0.854288     -0.157487     -0.142353      0.142353       170.984       171.126    
  43  0.966448     -0.341280E-01 -0.308484E-01  0.308484E-01   170.267       170.298    
  44  0.474756     -0.744954     -0.673365      0.673365       169.047       169.721    
  45  0.332138      -1.10221     -0.996285      0.996285       171.377       172.374    
  46  0.591089     -0.525788     -0.475261      0.475261       171.154       171.630    
  47  0.644797     -0.438820     -0.396650      0.396650       171.506       171.902    
  48  0.729783     -0.315009     -0.284737      0.284737       171.345       171.629    
  49  0.306227      -1.18343      -1.06970       1.06970       171.324       172.394    
  50  0.684977     -0.378370     -0.342009      0.342009       171.909       172.251    
  51  0.750542     -0.286959     -0.259383      0.259383       171.815       172.075    
  52  0.180972      -1.70941      -1.54514       1.54514       172.252       173.798    
  53  0.313831      -1.15890      -1.04753       1.04753       172.139       173.187    
  54  0.707162     -0.346495     -0.313197      0.313197       172.127       172.440    
  55  0.873653E-02  -4.74024      -4.28471       4.28471       171.272       175.557    
  56  0.194915      -1.63519      -1.47805       1.47805       172.969       174.447    
  57  0.866673     -0.143093     -0.129342      0.129342       172.116       172.245    
  58  0.264698      -1.32916      -1.20143       1.20143       172.658       173.860    
  59  0.304090      -1.19043      -1.07603       1.07603       171.873       172.949    
  60  0.602195     -0.507175     -0.458436      0.458436       172.255       172.713    
  61  0.210710      -1.55727      -1.40762       1.40762       172.767       174.175    
  62  0.438953     -0.823363     -0.744239      0.744239       172.730       173.474    
  63  0.471721E-01  -3.05395      -2.76047       2.76047       173.384       176.144    
  64  0.485967     -0.721614     -0.652268      0.652268       172.689       173.341    
  65  0.817842     -0.201086     -0.181762      0.181762       173.495       173.677    
  66  0.250876      -1.38279      -1.24991       1.24991       171.708       172.958    
  67  0.218169      -1.52248      -1.37618       1.37618       172.968       174.344    
  68  0.251510E-02  -5.98544      -5.41025       5.41025       173.404       178.814    
  69  0.751934     -0.285106     -0.257708      0.257708       173.924       174.182    
  70  0.894841     -0.111109     -0.100432      0.100432       175.926       176.026    
  71  0.171637      -1.76237      -1.59301       1.59301       174.996       176.589    
  72  0.990260     -0.978798E-02 -0.884737E-02  0.884737E-02   165.433       165.442    
loop,thermsimp(1:2)       53   1.22250      0.986606    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    551        172.38          0.84          1.11         25.24          0.14          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    172.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       53
neval is:      550
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       54
neval is:      550


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      550     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.162942      -1.81436      -1.64000       1.64000       158.266       159.906    
   2  0.240839      -1.42363      -1.28682       1.28682       164.315       165.601    
   3  0.676863     -0.390287     -0.352781      0.352781       164.308       164.661    
   4  0.298793      -1.20800      -1.09192       1.09192       164.381       165.473    
   5  0.463460E-01  -3.07162      -2.77644       2.77644       164.052       166.828    
   6  0.424832E-01  -3.15865      -2.85511       2.85511       164.407       167.262    
   7  0.551542     -0.595037     -0.537854      0.537854       164.864       165.402    
   8  0.198453      -1.61721      -1.46179       1.46179       165.135       166.596    
   9  0.408741E-01  -3.19726      -2.89001       2.89001       165.433       168.323    
  10  0.926138     -0.767317E-01 -0.693579E-01  0.693579E-01   164.616       164.685    
  11  0.998189     -0.181307E-02 -0.163884E-02  0.163884E-02   165.463       165.464    
  12  0.221790      -1.50602      -1.36130       1.36130       166.873       168.234    
  13  0.512477     -0.668500     -0.604258      0.604258       166.967       167.572    
  14  0.716428     -0.333477     -0.301431      0.301431       166.847       167.148    
  15  0.542239     -0.612048     -0.553231      0.553231       166.987       167.540    
  16  0.237089      -1.43932      -1.30100       1.30100       166.774       168.075    
  17  0.520333     -0.653285     -0.590506      0.590506       167.315       167.906    
  18  0.516420     -0.660835     -0.597329      0.597329       166.458       167.055    
  19  0.927350     -0.754245E-01 -0.681763E-01  0.681763E-01   167.454       167.523    
  20  0.495169     -0.702857     -0.635313      0.635313       167.592       168.227    
  21  0.756269     -0.279358     -0.252512      0.252512       164.098       164.351    
  22  0.697909     -0.359666     -0.325103      0.325103       168.270       168.595    
  23  0.911964     -0.921545E-01 -0.832986E-01  0.832986E-01   168.424       168.507    
  24  0.278968      -1.27666      -1.15397       1.15397       168.194       169.348    
  25  0.103449E-02  -6.87384      -6.21328       6.21328       167.868       174.081    
  26  0.771333     -0.259634     -0.234684      0.234684       168.506       168.740    
  27  0.716983     -0.332703     -0.300730      0.300730       168.307       168.608    
  28  0.811579     -0.208773     -0.188710      0.188710       167.732       167.921    
  29  0.224231      -1.49508      -1.35140       1.35140       168.913       170.264    
  30  0.660210E-01  -2.71778      -2.45661       2.45661       168.966       171.423    
  31  0.524436     -0.645431     -0.583406      0.583406       169.155       169.739    
  32  0.289628      -1.23916      -1.12008       1.12008       169.047       170.167    
  33  0.578267     -0.547720     -0.495085      0.495085       169.673       170.168    
  34  0.377293     -0.974732     -0.881062      0.881062       167.155       168.036    
  35  0.709164     -0.343668     -0.310642      0.310642       169.699       170.010    
  36  0.524809     -0.644721     -0.582764      0.582764       170.115       170.698    
  37  0.223509      -1.49830      -1.35432       1.35432       170.267       171.621    
  38  0.934100     -0.681715E-01 -0.616203E-01  0.616203E-01   169.125       169.186    
  39  0.973288     -0.270756E-01 -0.244736E-01  0.244736E-01   170.242       170.266    
  40  0.876726     -0.131561     -0.118918      0.118918       170.446       170.565    
  41  0.284953      -1.25543      -1.13479       1.13479       169.690       170.825    
  42  0.803469     -0.218817     -0.197789      0.197789       169.081       169.279    
  43  0.394988     -0.928900     -0.839634      0.839634       170.984       171.824    
  44  0.554814     -0.589122     -0.532508      0.532508       171.345       171.877    
  45  0.973148     -0.272194E-01 -0.246036E-01  0.246036E-01   171.154       171.179    
  46  0.569309     -0.563333     -0.509197      0.509197       171.506       172.015    
  47  0.967634     -0.329011E-01 -0.297393E-01  0.297393E-01   170.691       170.721    
  48  0.427466     -0.849882     -0.768209      0.768209       171.815       172.584    
  49  0.552310     -0.593645     -0.536597      0.536597       168.511       169.047    
  50  0.228673      -1.47546      -1.33367       1.33367       172.116       173.450    
  51  0.538893     -0.618238     -0.558826      0.558826       171.909       172.468    
  52  0.910290     -0.939924E-01 -0.849599E-01  0.849599E-01   171.377       171.462    
  53  0.802319E-01  -2.52283      -2.28039       2.28039       171.324       173.604    
  54  0.589762     -0.528036     -0.477292      0.477292       172.127       172.605    
  55  0.823158     -0.194608     -0.175906      0.175906       172.255       172.431    
  56  0.349357      -1.05166     -0.950597      0.950597       171.873       172.823    
  57  0.530543     -0.633855     -0.572943      0.572943       171.708       172.281    
  58  0.756819     -0.278631     -0.251855      0.251855       172.139       172.391    
  59  0.725414     -0.321013     -0.290164      0.290164       172.689       172.979    
  60  0.558650     -0.582232     -0.526281      0.526281       172.730       173.256    
  61  0.376532     -0.976753     -0.882889      0.882889       173.495       174.378    
  62  0.135144      -2.00141      -1.80908       1.80908       172.252       174.062    
  63  0.978750     -0.214787E-01 -0.194146E-01  0.194146E-01   172.658       172.678    
  64  0.262402      -1.33788      -1.20931       1.20931       172.767       173.977    
  65  0.699066     -0.358010     -0.323606      0.323606       173.924       174.248    
  66  0.369211     -0.996388     -0.900637      0.900637       172.968       173.868    
  67  0.853775     -0.158088     -0.142896      0.142896       172.969       173.112    
  68  0.770925     -0.260165     -0.235163      0.235163       171.272       171.508    
  69  0.319906      -1.13973      -1.03020       1.03020       175.926       176.956    
  70  0.705385     -0.349012     -0.315472      0.315472       173.384       173.699    
  71  0.325823      -1.12140      -1.01364       1.01364       174.996       176.010    
  72  0.235252      -1.44710      -1.30803       1.30803       172.385       173.693    
loop,thermsimp(1:2)       54   1.64000       1.28682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    552        174.47          0.84          1.11         25.11          0.11          0.05         27.21
Just calling func    0   0         27.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    174.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       54
neval is:      551
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       55
neval is:      551


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      551     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.509602     -0.674124     -0.609342      0.609342       158.266       158.875    
   2  0.495514     -0.702160     -0.634684      0.634684       164.098       164.733    
   3  0.837782     -0.176998     -0.159988      0.159988       164.308       164.468    
   4  0.535509     -0.624537     -0.564520      0.564520       164.616       165.180    
   5  0.341674      -1.07390     -0.970699      0.970699       164.864       165.835    
   6  0.843270     -0.170469     -0.154087      0.154087       165.463       165.617    
   7  0.847493     -0.165473     -0.149571      0.149571       164.381       164.531    
   8  0.967616     -0.329200E-01 -0.297564E-01  0.297564E-01   164.315       164.344    
   9  0.837601     -0.177213     -0.160183      0.160183       165.135       165.295    
  10  0.796927E-01  -2.52958      -2.28649       2.28649       164.052       166.338    
  11  0.291170E-01  -3.53643      -3.19659       3.19659       166.458       169.655    
  12  0.128543      -2.05149      -1.85434       1.85434       166.847       168.701    
  13  0.195374      -1.63284      -1.47593       1.47593       164.407       165.883    
  14  0.711258     -0.340719     -0.307977      0.307977       167.454       167.762    
  15  0.738303     -0.303400     -0.274244      0.274244       166.987       167.261    
  16  0.513942     -0.665644     -0.601677      0.601677       166.967       167.569    
  17  0.717790     -0.331579     -0.299715      0.299715       167.315       167.615    
  18  0.709757     -0.342833     -0.309888      0.309888       167.732       168.042    
  19  0.836075     -0.179037     -0.161832      0.161832       167.155       167.316    
  20  0.885785     -0.121280     -0.109626      0.109626       166.774       166.883    
  21  0.374692     -0.981651     -0.887316      0.887316       167.592       168.479    
  22  0.233066      -1.45643      -1.31647       1.31647       166.873       168.189    
  23  0.475141     -0.744144     -0.672633      0.672633       165.433       166.106    
  24  0.567952     -0.565719     -0.511354      0.511354       168.424       168.936    
  25  0.928125     -0.745889E-01 -0.674210E-01  0.674210E-01   168.270       168.338    
  26  0.744574     -0.294943     -0.266599      0.266599       168.307       168.574    
  27  0.630340     -0.461496     -0.417147      0.417147       168.506       168.923    
  28  0.174068      -1.74831      -1.58030       1.58030       168.511       170.091    
  29  0.793145     -0.231750     -0.209479      0.209479       169.125       169.334    
  30  0.901240     -0.103984     -0.939910E-01  0.939910E-01   169.081       169.175    
  31  0.293792      -1.22488      -1.10717       1.10717       168.194       169.301    
  32  0.837829     -0.176941     -0.159938      0.159938       169.155       169.315    
  33  0.453305     -0.791191     -0.715159      0.715159       169.699       170.414    
  34  0.231101      -1.46490      -1.32413       1.32413       169.047       170.371    
  35  0.906016     -0.986982E-01 -0.892135E-01  0.892135E-01   169.673       169.762    
  36  0.251205      -1.38148      -1.24873       1.24873       168.913       170.161    
  37  0.518565     -0.656689     -0.593583      0.593583       170.242       170.835    
  38  0.737118     -0.305007     -0.275697      0.275697       170.446       170.722    
  39  0.229948      -1.46990      -1.32865       1.32865       170.115       171.444    
  40  0.221845      -1.50578      -1.36107       1.36107       170.691       172.052    
  41  0.511130     -0.671131     -0.606636      0.606636       169.690       170.297    
  42  0.137034      -1.98753      -1.79653       1.79653       171.154       172.951    
  43  0.870855     -0.138280     -0.124991      0.124991       168.966       169.091    
  44  0.528174     -0.638329     -0.576987      0.576987       171.377       171.954    
  45  0.152525      -1.88043      -1.69972       1.69972       171.272       172.972    
  46  0.339795E-01  -3.38200      -3.05699       3.05699       170.267       173.324    
  47  0.989348     -0.107091E-01 -0.967997E-02  0.967997E-02   170.984       170.994    
  48  0.951612     -0.495981E-01 -0.448318E-01  0.448318E-01   171.345       171.389    
  49  0.819787     -0.198711     -0.179615      0.179615       171.506       171.685    
  50  0.353143E-01  -3.34347      -3.02216       3.02216       171.708       174.731    
  51  0.353588      -1.03962     -0.939716      0.939716       172.139       173.079    
  52  0.546289     -0.604606     -0.546505      0.546505       172.255       172.801    
  53  0.463744     -0.768422     -0.694578      0.694578       171.909       172.603    
  54  0.227476      -1.48071      -1.33842       1.33842       171.815       173.154    
  55  0.448540     -0.801757     -0.724710      0.724710       172.127       172.852    
  56  0.305048      -1.18729      -1.07319       1.07319       172.658       173.732    
  57  0.190121      -1.66009      -1.50056       1.50056       171.873       173.373    
  58  0.202433      -1.59735      -1.44384       1.44384       172.689       174.133    
  59  0.460263     -0.775957     -0.701389      0.701389       172.969       173.671    
  60  0.862049     -0.148443     -0.134178      0.134178       172.730       172.864    
  61  0.973595     -0.267596E-01 -0.241880E-01  0.241880E-01   172.116       172.140    
  62  0.611233     -0.492276     -0.444969      0.444969       171.324       171.769    
  63  0.419634     -0.868372     -0.784923      0.784923       172.385       173.170    
  64  0.455365     -0.786657     -0.711060      0.711060       173.384       174.095    
  65  0.289117      -1.24092      -1.12167       1.12167       172.968       174.089    
  66  0.971030     -0.293977E-01 -0.265726E-01  0.265726E-01   172.767       172.794    
  67  0.452287     -0.793438     -0.717190      0.717190       172.252       172.970    
  68  0.584199     -0.537513     -0.485859      0.485859       167.868       168.353    
  69  0.162637      -1.81624      -1.64170       1.64170       173.924       175.566    
  70  0.383706     -0.957878     -0.865827      0.865827       173.495       174.361    
  71  0.359332E-01  -3.32609      -3.00646       3.00646       174.996       178.003    
  72  0.886659     -0.120295     -0.108735      0.108735       174.466       174.575    
loop,thermsimp(1:2)       55  0.609342      0.634684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    553        175.80          0.84          1.11         25.03          0.23          0.05         27.26
Just calling func    0   0         27.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    554        169.08          0.85          1.12         25.07          0.14          0.05         27.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    169.08
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       55
neval is:      553
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       56
neval is:      553


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      553     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810055     -0.210654     -0.190410      0.190410       158.266       158.456    
   2  0.944369     -0.572379E-01 -0.517374E-01  0.517374E-01   164.315       164.366    
   3  0.256748      -1.35966      -1.22900       1.22900       164.308       165.537    
   4  0.857555     -0.153670     -0.138903      0.138903       164.381       164.520    
   5  0.301135      -1.20020      -1.08486       1.08486       164.098       165.183    
   6  0.765466     -0.267271     -0.241586      0.241586       164.616       164.857    
   7  0.595420     -0.518488     -0.468662      0.468662       165.135       165.603    
   8  0.184967      -1.68758      -1.52540       1.52540       165.463       166.988    
   9  0.451762     -0.794599     -0.718240      0.718240       164.864       165.583    
  10  0.214230E-01  -3.84329      -3.47396       3.47396       164.407       167.881    
  11  0.133176      -2.01609      -1.82234       1.82234       165.433       167.256    
  12  0.167638      -1.78595      -1.61432       1.61432       164.052       165.666    
  13  0.900249     -0.105084     -0.949854E-01  0.949854E-01   166.774       166.869    
  14  0.542907     -0.610818     -0.552119      0.552119       166.987       167.539    
  15  0.911342E-01  -2.39542      -2.16523       2.16523       167.155       169.320    
  16  0.664024     -0.409437     -0.370091      0.370091       166.967       167.338    
  17  0.976823     -0.234502E-01 -0.211967E-01  0.211967E-01   167.315       167.336    
  18  0.293738      -1.22507      -1.10734       1.10734       167.454       168.562    
  19  0.938951     -0.629922E-01 -0.569388E-01  0.569388E-01   167.732       167.789    
  20  0.393580     -0.932470     -0.842861      0.842861       166.873       167.716    
  21  0.303574      -1.19213      -1.07757       1.07757       168.270       169.348    
  22  0.346544      -1.05975     -0.957905      0.957905       167.868       168.826    
  23  0.118838      -2.13000      -1.92531       1.92531       167.592       169.517    
  24  0.384663E-01  -3.25797      -2.94489       2.94489       168.307       171.252    
  25  0.624565     -0.470700     -0.425466      0.425466       166.847       167.272    
  26  0.225711      -1.48850      -1.34546       1.34546       168.506       169.851    
  27  0.269639      -1.31067      -1.18472       1.18472       168.424       169.609    
  28  0.886893     -0.120031     -0.108497      0.108497       168.966       169.075    
  29  0.184969      -1.68757      -1.52540       1.52540       169.081       170.606    
  30  0.302378E-01  -3.49866      -3.16245       3.16245       168.194       171.356    
  31  0.233638      -1.45398      -1.31426       1.31426       169.155       170.469    
  32  0.494824     -0.703553     -0.635942      0.635942       169.125       169.761    
  33  0.833664     -0.181924     -0.164442      0.164442       166.458       166.623    
  34  0.659846     -0.415748     -0.375796      0.375796       169.673       170.048    
  35  0.761908     -0.271930     -0.245798      0.245798       168.511       168.756    
  36  0.691542E-01  -2.67142      -2.41470       2.41470       168.913       171.327    
  37  0.756803     -0.278653     -0.251875      0.251875       169.690       169.942    
  38  0.915830     -0.879244E-01 -0.794750E-01  0.794750E-01   169.047       169.127    
  39  0.358938      -1.02461     -0.926143      0.926143       169.699       170.625    
  40  0.712535     -0.338927     -0.306357      0.306357       170.446       170.753    
  41  0.756738     -0.278739     -0.251952      0.251952       170.242       170.494    
  42  0.295390E-02  -5.82463      -5.26489       5.26489       170.984       176.249    
  43  0.908633     -0.958136E-01 -0.866060E-01  0.866060E-01   171.345       171.431    
  44  0.979116     -0.211054E-01 -0.190772E-01  0.190772E-01   170.115       170.134    
  45  0.420519     -0.866265     -0.783018      0.783018       171.506       172.289    
  46  0.982205     -0.179549E-01 -0.162294E-01  0.162294E-01   171.324       171.340    
  47  0.851251     -0.161049     -0.145572      0.145572       171.377       171.523    
  48  0.594735     -0.519639     -0.469702      0.469702       170.691       171.161    
  49  0.957893     -0.430197E-01 -0.388855E-01  0.388855E-01   172.116       172.155    
  50  0.139820      -1.96740      -1.77834       1.77834       171.909       173.687    
  51  0.937433     -0.646098E-01 -0.584009E-01  0.584009E-01   172.767       172.826    
  52  0.530418     -0.634090     -0.573155      0.573155       172.255       172.828    
  53  0.202220      -1.59840      -1.44480       1.44480       172.127       173.572    
  54  0.442737     -0.814779     -0.736480      0.736480       172.730       173.466    
  55  0.547124     -0.603081     -0.545126      0.545126       171.154       171.699    
  56  0.881924     -0.125649     -0.113575      0.113575       172.252       172.366    
  57  0.392839     -0.934356     -0.844566      0.844566       171.272       172.117    
  58  0.931504     -0.709546E-01 -0.641359E-01  0.641359E-01   172.139       172.204    
  59  0.360908      -1.01913     -0.921194      0.921194       171.815       172.737    
  60  0.654294E-01  -2.72678      -2.46474       2.46474       172.385       174.850    
  61  0.872421     -0.136483     -0.123367      0.123367       170.267       170.390    
  62  0.964074     -0.365877E-01 -0.330717E-01  0.330717E-01   171.873       171.906    
  63  0.546019     -0.605101     -0.546952      0.546952       172.969       173.516    
  64  0.609920     -0.494427     -0.446913      0.446913       172.658       173.105    
  65  0.604094     -0.504026     -0.455590      0.455590       172.968       173.423    
  66  0.334610      -1.09479     -0.989582      0.989582       173.384       174.374    
  67  0.255154      -1.36589      -1.23463       1.23463       172.689       173.924    
  68  0.170876      -1.76682      -1.59703       1.59703       173.495       175.092    
  69  0.937472     -0.645688E-01 -0.583638E-01  0.583638E-01   174.466       174.524    
  70  0.168395      -1.78144      -1.61025       1.61025       171.708       173.319    
  71  0.469531     -0.756021     -0.683368      0.683368       173.924       174.608    
  72  0.153865      -1.87168      -1.69181       1.69181       169.080       170.771    
loop,thermsimp(1:2)       56  0.190410      0.517374E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    555        167.52          0.84          1.11         25.04          0.26          0.05         27.30
Just calling func    0   0         27.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    167.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.903902               569
loop is:       56
neval is:      554
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    57.8497      0.500000    
T0,tstep,tfreq (these do not change):             71
current SAtemp,tstepnext are:   0.903902               569
loop is:       57
neval is:      554


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      569
neval,tstepnext:      554     569

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357102      -1.02973     -0.930778      0.930778       158.266       159.196    
   2  0.625087     -0.469865     -0.424712      0.424712       164.315       164.739    
   3  0.526320E-01  -2.94443      -2.66148       2.66148       164.381       167.043    
   4  0.385670     -0.952774     -0.861214      0.861214       164.616       165.477    
   5  0.532637     -0.629916     -0.569382      0.569382       164.098       164.668    
   6  0.804876E-01  -2.51965      -2.27752       2.27752       164.308       166.586    
   7  0.622772     -0.473574     -0.428065      0.428065       164.864       165.292    
   8  0.102026      -2.28252      -2.06318       2.06318       165.135       167.198    
   9  0.418336     -0.871471     -0.787724      0.787724       164.052       164.839    
  10  0.578766     -0.546857     -0.494305      0.494305       166.458       166.952    
  11  0.465316     -0.765038     -0.691519      0.691519       166.774       167.465    
  12  0.166433      -1.79317      -1.62084       1.62084       165.463       167.083    
  13  0.290530      -1.23605      -1.11726       1.11726       165.433       166.551    
  14  0.991156     -0.888373E-02 -0.803002E-02  0.803002E-02   166.847       166.855    
  15  0.747098     -0.291559     -0.263540      0.263540       167.315       167.579    
  16  0.117051      -2.14514      -1.93900       1.93900       166.967       168.906    
  17  0.281481      -1.26769      -1.14587       1.14587       166.987       168.133    
  18  0.694526     -0.364526     -0.329496      0.329496       166.873       167.202    
  19  0.397704     -0.922047     -0.833440      0.833440       167.732       168.566    
  20  0.604235     -0.503792     -0.455378      0.455378       164.407       164.862    
  21  0.910420     -0.938492E-01 -0.848305E-01  0.848305E-01   167.454       167.539    
  22  0.496596     -0.699978     -0.632712      0.632712       168.511       169.143    
  23  0.605982     -0.500905     -0.452769      0.452769       167.868       168.320    
  24  0.372826     -0.986642     -0.891827      0.891827       168.966       169.858    
  25  0.839451     -0.175007     -0.158189      0.158189       169.047       169.205    
  26  0.523045E-01  -2.95067      -2.66712       2.66712       167.155       169.822    
  27  0.792630     -0.232398     -0.210065      0.210065       168.270       168.480    
  28  0.726993     -0.318838     -0.288198      0.288198       167.592       167.880    
  29  0.254118      -1.36996      -1.23830       1.23830       168.424       169.662    
  30  0.175759      -1.73864      -1.57156       1.57156       169.125       170.696    
  31  0.228322      -1.47700      -1.33506       1.33506       168.506       169.841    
  32  0.360945      -1.01903     -0.921102      0.921102       169.690       170.611    
  33  0.445035     -0.809602     -0.731800      0.731800       169.673       170.404    
  34  0.347058      -1.05826     -0.956565      0.956565       170.115       171.072    
  35  0.659666     -0.416022     -0.376043      0.376043       170.267       170.643    
  36  0.838841     -0.175734     -0.158846      0.158846       169.155       169.314    
  37  0.618959     -0.479716     -0.433616      0.433616       170.242       170.676    
  38  0.156886      -1.85224      -1.67424       1.67424       169.081       170.755    
  39  0.594357     -0.520275     -0.470277      0.470277       169.699       170.169    
  40  0.747079     -0.291585     -0.263564      0.263564       170.446       170.710    
  41  0.650924     -0.429362     -0.388101      0.388101       169.080       169.468    
  42  0.154177      -1.86965      -1.68998       1.68998       170.691       172.381    
  43  0.304320      -1.18968      -1.07535       1.07535       168.307       169.382    
  44  0.653765     -0.425007     -0.384164      0.384164       168.913       169.297    
  45  0.497625     -0.697908     -0.630840      0.630840       171.324       171.955    
  46  0.298681E-01  -3.51097      -3.17357       3.17357       168.194       171.368    
  47  0.430468     -0.842882     -0.761883      0.761883       171.345       172.107    
  48  0.380011     -0.967555     -0.874575      0.874575       171.377       172.252    
  49  0.716593     -0.333247     -0.301222      0.301222       171.154       171.455    
  50  0.100235      -2.30024      -2.07919       2.07919       171.873       173.952    
  51  0.133481      -2.01379      -1.82027       1.82027       171.272       173.093    
  52  0.485254     -0.723082     -0.653595      0.653595       172.116       172.770    
  53  0.978603     -0.216294E-01 -0.195509E-01  0.195509E-01   172.139       172.159    
  54  0.973934     -0.264113E-01 -0.238732E-01  0.238732E-01   171.506       171.530    
  55  0.744363     -0.295226     -0.266855      0.266855       172.252       172.519    
  56  0.201176      -1.60358      -1.44948       1.44948       171.815       173.265    
  57  0.260889      -1.34366      -1.21453       1.21453       172.767       173.982    
  58  0.948796     -0.525620E-01 -0.475108E-01  0.475108E-01   172.255       172.302    
  59  0.406545     -0.900060     -0.813565      0.813565       172.658       173.472    
  60  0.458258     -0.780323     -0.705335      0.705335       171.708       172.414    
  61  0.634385     -0.455099     -0.411364      0.411364       172.968       173.379    
  62  0.715647     -0.334568     -0.302417      0.302417       172.730       173.032    
  63  0.397754     -0.921922     -0.833327      0.833327       172.969       173.803    
